// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tbox_protocol_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tbox_protocol_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tbox {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* UpgradeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartbeatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartbeatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartbeatRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartbeatRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendRSAReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendRSAReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendRC4Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendRC4Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetParameterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetParameterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetParameterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetParameterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetParameterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetParameterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetParameterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetParameterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ECM_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ECM_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* ABSVDC_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ABSVDC_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* METER_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  METER_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* BCM_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BCM_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACU_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACU_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* AT_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AT_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* STRG_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  STRG_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* EPS_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EPS_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* USM_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  USM_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPMS_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPMS_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* WIRE_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WIRE_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* ECO_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ECO_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* ALARM_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ALARM_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* ITM_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ITM_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* IKEY_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IKEY_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* COMMON_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  COMMON_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* HVAC_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HVAC_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* SBOX_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SBOX_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* DVR_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DVR_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* Basic_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Basic_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vehicle_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vehicle_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vehicle_InfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vehicle_InfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Location_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Location_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* Location_InfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Location_InfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoteControlResultRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteControlResultRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoteControlReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteControlReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlowCountRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlowCountRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlowCountLimitReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlowCountLimitReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OtaUpgradeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OtaUpgradeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OtaUpgradeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OtaUpgradeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CancelOtaUpgradeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CancelOtaUpgradeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* OtaUpgradeProgressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OtaUpgradeProgressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CertCom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CertCom_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCUCertApply_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCUCertApply_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCUCertApply_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCUCertApply_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CertIssue_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CertIssue_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* CertIssue_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CertIssue_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RSALoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RSALoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendRSARsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendRSARsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendRC4Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendRC4Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendRC4Resp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendRC4Resp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WakeUpDVRRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WakeUpDVRRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WakeUpDVRReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WakeUpDVRReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RmtDiagRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RmtDiagRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RmtDiagReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RmtDiagReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fault_List_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fault_List_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* FourGExtendCmdRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FourGExtendCmdRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FourGExtendCmdReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FourGExtendCmdReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCUExtendCmdReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCUExtendCmdReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCUExtendCmdRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCUExtendCmdRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Net4GSwitchStatusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Net4GSwitchStatusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Net4GSwitchStatusRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Net4GSwitchStatusRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* netGpsSwitchStatusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  netGpsSwitchStatusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* netGpsSwitchStatusRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  netGpsSwitchStatusRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RspCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UpgradeProgressCodeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RmtDiagRspCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto() {
  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tbox_protocol_message.proto");
  GOOGLE_CHECK(file != NULL);
  UpgradeInfo_descriptor_ = file->message_type(0);
  static const int UpgradeInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeInfo, filetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeInfo, filepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeInfo, filesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeInfo, md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeInfo, rc4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeInfo, sign_md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeInfo, sha2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeInfo, aes128_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeInfo, sign_sha2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeInfo, prefilesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeInfo, encrypt_type_),
  };
  UpgradeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeInfo_descriptor_,
      UpgradeInfo::default_instance_,
      UpgradeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeInfo));
  LoginReq_descriptor_ = file->message_type(1);
  static const int LoginReq_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, tcu_device_sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, da_device_sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, vin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, iccid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, imsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, imei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, software_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, hardware_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, g4_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, vehicle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, upgrading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, bcm_reg_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, ota_algrithom_),
  };
  LoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginReq_descriptor_,
      LoginReq::default_instance_,
      LoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginReq));
  LoginRsp_descriptor_ = file->message_type(2);
  static const int LoginRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, upgradeinfo_),
  };
  LoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRsp_descriptor_,
      LoginRsp::default_instance_,
      LoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRsp));
  HeartbeatReq_descriptor_ = file->message_type(3);
  static const int HeartbeatReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatReq, time_stamp_),
  };
  HeartbeatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartbeatReq_descriptor_,
      HeartbeatReq::default_instance_,
      HeartbeatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartbeatReq));
  HeartbeatRsp_descriptor_ = file->message_type(4);
  static const int HeartbeatRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRsp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRsp, time_stamp_),
  };
  HeartbeatRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartbeatRsp_descriptor_,
      HeartbeatRsp::default_instance_,
      HeartbeatRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartbeatRsp));
  SendRSAReq_descriptor_ = file->message_type(5);
  static const int SendRSAReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRSAReq, n_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRSAReq, n_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRSAReq, e1_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRSAReq, e1_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRSAReq, time_stamp_),
  };
  SendRSAReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendRSAReq_descriptor_,
      SendRSAReq::default_instance_,
      SendRSAReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRSAReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRSAReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendRSAReq));
  SendRC4Rsp_descriptor_ = file->message_type(6);
  static const int SendRC4Rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRC4Rsp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRC4Rsp, serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRC4Rsp, time_stamp_),
  };
  SendRC4Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendRC4Rsp_descriptor_,
      SendRC4Rsp::default_instance_,
      SendRC4Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRC4Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRC4Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendRC4Rsp));
  SetParameterRsp_descriptor_ = file->message_type(7);
  static const int SetParameterRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetParameterRsp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetParameterRsp, time_stamp_),
  };
  SetParameterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetParameterRsp_descriptor_,
      SetParameterRsp::default_instance_,
      SetParameterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetParameterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetParameterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetParameterRsp));
  SetParameterReq_descriptor_ = file->message_type(8);
  static const int SetParameterReq_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetParameterReq, local_storage_cycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetParameterReq, upload_data_cycle_normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetParameterReq, upload_gps_cycle_normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetParameterReq, upload_data_cycle_alarm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetParameterReq, upload_gps_cycle_alarm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetParameterReq, heartbeat_cycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetParameterReq, server_response_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetParameterReq, box_response_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetParameterReq, flowcontrolswitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetParameterReq, gpsconversion_),
  };
  SetParameterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetParameterReq_descriptor_,
      SetParameterReq::default_instance_,
      SetParameterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetParameterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetParameterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetParameterReq));
  GetParameterRsp_descriptor_ = file->message_type(9);
  static const int GetParameterRsp_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetParameterRsp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetParameterRsp, local_storage_cycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetParameterRsp, upload_data_cycle_normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetParameterRsp, upload_gps_cycle_normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetParameterRsp, upload_data_cycle_alarm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetParameterRsp, upload_gps_cycle_alarm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetParameterRsp, heartbeat_cycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetParameterRsp, server_response_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetParameterRsp, box_response_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetParameterRsp, firmware_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetParameterRsp, hardware_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetParameterRsp, time_stamp_),
  };
  GetParameterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetParameterRsp_descriptor_,
      GetParameterRsp::default_instance_,
      GetParameterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetParameterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetParameterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetParameterRsp));
  GetParameterReq_descriptor_ = file->message_type(10);
  static const int GetParameterReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetParameterReq, time_stamp_),
  };
  GetParameterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetParameterReq_descriptor_,
      GetParameterReq::default_instance_,
      GetParameterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetParameterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetParameterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetParameterReq));
  ECM_Info_descriptor_ = file->message_type(11);
  static const int ECM_Info_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECM_Info, enginerpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECM_Info, rawsensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECM_Info, clutchswitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECM_Info, enginestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECM_Info, enginecoolanttemp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECM_Info, fuelconsumption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECM_Info, diagmuxon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECM_Info, economymodelamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECM_Info, co2_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECM_Info, co_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECM_Info, hc_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECM_Info, o2_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECM_Info, achighpressuresensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECM_Info, cruisecontrolstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECM_Info, enginethrottleposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECM_Info, meaneffectivetorque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECM_Info, fuel_consumption_fine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECM_Info, sof_v1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECM_Info, sof_v1_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECM_Info, vbmin_),
  };
  ECM_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ECM_Info_descriptor_,
      ECM_Info::default_instance_,
      ECM_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECM_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECM_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ECM_Info));
  ABSVDC_Info_descriptor_ = file->message_type(12);
  static const int ABSVDC_Info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ABSVDC_Info, asrinregulation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ABSVDC_Info, longitudinalaccelerationproc02_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ABSVDC_Info, transversalacceleration02_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ABSVDC_Info, yawrate02_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ABSVDC_Info, idm_stoplamprequest_),
  };
  ABSVDC_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ABSVDC_Info_descriptor_,
      ABSVDC_Info::default_instance_,
      ABSVDC_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ABSVDC_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ABSVDC_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ABSVDC_Info));
  METER_Info_descriptor_ = file->message_type(13);
  static const int METER_Info_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(METER_Info, vehiclespeed_cluster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(METER_Info, average_fuel_economy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(METER_Info, distance_to_empty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(METER_Info, distance_totalizer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(METER_Info, fuel_remain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(METER_Info, fuel_warning_lamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(METER_Info, average_fuel_economy_single_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(METER_Info, epb_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(METER_Info, apb_statusflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(METER_Info, parkingbrakemalfunctiondisplay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(METER_Info, parkingbrakebindingstatusdisplay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(METER_Info, fuellow_),
  };
  METER_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      METER_Info_descriptor_,
      METER_Info::default_instance_,
      METER_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(METER_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(METER_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(METER_Info));
  BCM_Info_descriptor_ = file->message_type(14);
  static const int BCM_Info_offsets_[44] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, trunkswitchstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, bcm_wakeupsleepcmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, front_left_door_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, front_right_door_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, rear_left_door_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, rear_right_door_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, back_door_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, door_lock_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, back_door_locked_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, lowbeamrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, flashingindicatorstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, highbeamrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, positionlightsrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, frontfoglightsrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, rearfoglightstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, daytimerunninglightrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, front_right_window_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, front_left_window_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, rear_right_window_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, rear_left_window_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, remote_enging_run_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, sunroof_window_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, sunroof_shade_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, res_failurefeedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, isfindcarbreaked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, res_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, last_obstacle_notification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, sr_motor_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, shade_motor_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, shade_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, bcm_sr_degrade_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, bcm_shade_degrade_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, respresoak_smartphoneerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, lefttimeduringthisrescycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, rearwiperstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, drivemoderequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, childlockstatedisplay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, clutchswitchmaximumtravel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, clutchswitchminimumtravel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, rls_rain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, reardefrostengaged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, passengerdoorlockedstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, rearleftdoorlockedstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, rearrightdoorlockedstatus_),
  };
  BCM_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BCM_Info_descriptor_,
      BCM_Info::default_instance_,
      BCM_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BCM_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BCM_Info));
  ACU_Info_descriptor_ = file->message_type(15);
  static const int ACU_Info_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACU_Info, airbag_crash_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACU_Info, driversafetybeltbucklestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACU_Info, passengersafetybeltbucklestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACU_Info, secondrowcentersafetybeltstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACU_Info, secondrowleftsafetybeltstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACU_Info, secondrowrightsafetybeltstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACU_Info, passengerpresencestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACU_Info, secondrowcenterpresencestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACU_Info, secondrowleftpresencestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACU_Info, secondrowrightpresencestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACU_Info, frontpassengersafetybeltreminder_),
  };
  ACU_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACU_Info_descriptor_,
      ACU_Info::default_instance_,
      ACU_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACU_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACU_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACU_Info));
  AT_Info_descriptor_ = file->message_type(16);
  static const int AT_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AT_Info, fasttorquerequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AT_Info, atcvt_rangeindication_),
  };
  AT_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AT_Info_descriptor_,
      AT_Info::default_instance_,
      AT_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AT_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AT_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AT_Info));
  STRG_Info_descriptor_ = file->message_type(17);
  static const int STRG_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STRG_Info, steering_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STRG_Info, steering_angle_velocity_),
  };
  STRG_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      STRG_Info_descriptor_,
      STRG_Info::default_instance_,
      STRG_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STRG_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STRG_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(STRG_Info));
  EPS_Info_descriptor_ = file->message_type(18);
  static const int EPS_Info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EPS_Info, epsteeringfailure_),
  };
  EPS_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EPS_Info_descriptor_,
      EPS_Info::default_instance_,
      EPS_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EPS_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EPS_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EPS_Info));
  USM_Info_descriptor_ = file->message_type(19);
  static const int USM_Info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USM_Info, hoodsw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USM_Info, accompclutchstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USM_Info, frontwiperstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USM_Info, enginefanspeedstatus_pwm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USM_Info, positionlightsstatus_),
  };
  USM_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      USM_Info_descriptor_,
      USM_Info::default_instance_,
      USM_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USM_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USM_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(USM_Info));
  TPMS_Info_descriptor_ = file->message_type(20);
  static const int TPMS_Info_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPMS_Info, low_tire_pressure_fr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPMS_Info, low_tire_pressure_fl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPMS_Info, low_tire_pressure_rr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPMS_Info, low_tire_pressure_rl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPMS_Info, tire_pressure_fr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPMS_Info, tire_pressure_fl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPMS_Info, tire_pressure_rr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPMS_Info, tire_pressure_rl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPMS_Info, tire_pressure_fr_low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPMS_Info, tire_pressure_fl_low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPMS_Info, tire_pressure_rr_low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPMS_Info, tire_pressure_rl_low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPMS_Info, tpms_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPMS_Info, tpmswarninglamprequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPMS_Info, systemfailure_tpms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPMS_Info, transmitter_status_fr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPMS_Info, transmitter_status_fl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPMS_Info, transmitter_status_rr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPMS_Info, transmitter_status_rl_),
  };
  TPMS_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPMS_Info_descriptor_,
      TPMS_Info::default_instance_,
      TPMS_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPMS_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPMS_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPMS_Info));
  WIRE_Info_descriptor_ = file->message_type(21);
  static const int WIRE_Info_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WIRE_Info, reverse_gear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WIRE_Info, neutral_gear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WIRE_Info, driver_seat_belt_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WIRE_Info, passenger_seat_belt_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WIRE_Info, handbrakeswitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WIRE_Info, acc_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WIRE_Info, ign_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WIRE_Info, security_indicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WIRE_Info, battery_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WIRE_Info, da_heart_beat_),
  };
  WIRE_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WIRE_Info_descriptor_,
      WIRE_Info::default_instance_,
      WIRE_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WIRE_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WIRE_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WIRE_Info));
  ECO_Info_descriptor_ = file->message_type(22);
  static const int ECO_Info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECO_Info, rapid_acceleration_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECO_Info, rapid_deceleration_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECO_Info, sharp_turn_count_),
  };
  ECO_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ECO_Info_descriptor_,
      ECO_Info::default_instance_,
      ECO_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECO_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECO_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ECO_Info));
  ALARM_Info_descriptor_ = file->message_type(23);
  static const int ALARM_Info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ALARM_Info, alarm_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ALARM_Info, alarm_typeex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ALARM_Info, transmitter_fail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ALARM_Info, lowtirepressure_),
  };
  ALARM_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ALARM_Info_descriptor_,
      ALARM_Info::default_instance_,
      ALARM_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ALARM_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ALARM_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ALARM_Info));
  ITM_Info_descriptor_ = file->message_type(24);
  static const int ITM_Info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ITM_Info, havc_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ITM_Info, havc_circulation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ITM_Info, havc_temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ITM_Info, havc_air_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ITM_Info, avmphotouploadresult_),
  };
  ITM_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ITM_Info_descriptor_,
      ITM_Info::default_instance_,
      ITM_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ITM_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ITM_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ITM_Info));
  IKEY_Info_descriptor_ = file->message_type(25);
  static const int IKEY_Info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IKEY_Info, fuel_cut_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IKEY_Info, remote_enging_run_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IKEY_Info, res_failurefeedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IKEY_Info, peps_engineforbidst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IKEY_Info, startauthsts_),
  };
  IKEY_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IKEY_Info_descriptor_,
      IKEY_Info::default_instance_,
      IKEY_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IKEY_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IKEY_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IKEY_Info));
  COMMON_Info_descriptor_ = file->message_type(26);
  static const int COMMON_Info_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COMMON_Info, dvrworkstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COMMON_Info, shvm_drvseatvent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COMMON_Info, shvm_passeatvent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COMMON_Info, external_temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COMMON_Info, sunroof_window_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COMMON_Info, dvr_remotecommandresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COMMON_Info, usersoc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COMMON_Info, dcdc_fault_type_blms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COMMON_Info, dcdccurrentoutput_blms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COMMON_Info, hvbatteryenergylevel_),
  };
  COMMON_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      COMMON_Info_descriptor_,
      COMMON_Info::default_instance_,
      COMMON_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COMMON_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COMMON_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(COMMON_Info));
  HVAC_Info_descriptor_ = file->message_type(27);
  static const int HVAC_Info_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HVAC_Info, air_condition_status_driver_temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HVAC_Info, air_condition_status_passenger_temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HVAC_Info, air_condition_status_fan_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HVAC_Info, air_condition_status_ac_ind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HVAC_Info, air_condition_status_circulate_ind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HVAC_Info, air_condition_status_on_off_ind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HVAC_Info, air_condition_status_auto_ind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HVAC_Info, air_condition_status_dual_ind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HVAC_Info, air_condition_status_sync_ind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HVAC_Info, air_condition_status_front_defrost_ind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HVAC_Info, air_condition_status_rear_defrost_ind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HVAC_Info, air_condition_status_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HVAC_Info, steering_heat_status_sw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HVAC_Info, seat_heat_status_driver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HVAC_Info, seat_heat_status_passenager_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HVAC_Info, blowerfanmotorstatus_ac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HVAC_Info, ac_stopautoforbidden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HVAC_Info, aircondecoactivationstate_),
  };
  HVAC_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HVAC_Info_descriptor_,
      HVAC_Info::default_instance_,
      HVAC_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HVAC_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HVAC_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HVAC_Info));
  SBOX_info_descriptor_ = file->message_type(28);
  static const int SBOX_info_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBOX_info, pm25onoffstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBOX_info, pm25faultstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBOX_info, pm25state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBOX_info, pm25value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBOX_info, seat_position_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBOX_info, seat_heater_feedback_main_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBOX_info, seat_heater_feedback_fr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBOX_info, havc_mode_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBOX_info, havc_circulation_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBOX_info, havc_temperature_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBOX_info, havc_air_volume_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBOX_info, auto__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBOX_info, hvac_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBOX_info, directoutsidetemp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBOX_info, defroststate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBOX_info, cooling_warming_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBOX_info, s_box_controldata_ac_on_off_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBOX_info, uvc_in_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBOX_info, uvs_state_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBOX_info, eucu_state_feedback_),
  };
  SBOX_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SBOX_info_descriptor_,
      SBOX_info::default_instance_,
      SBOX_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBOX_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SBOX_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SBOX_info));
  DVR_Info_descriptor_ = file->message_type(29);
  static const int DVR_Info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DVR_Info, dvr_collision_happen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DVR_Info, dvr_collisionphoto_transmit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DVR_Info, dvr_collisionvideo_transmit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DVR_Info, dvr_response_),
  };
  DVR_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DVR_Info_descriptor_,
      DVR_Info::default_instance_,
      DVR_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DVR_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DVR_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DVR_Info));
  Basic_Info_descriptor_ = file->message_type(30);
  static const int Basic_Info_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_Info, ecm_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_Info, absvdc_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_Info, meter_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_Info, bcm_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_Info, acu_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_Info, at_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_Info, strg_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_Info, eps_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_Info, usm_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_Info, tpms_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_Info, wire_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_Info, eco_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_Info, alarm_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_Info, itm_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_Info, ikey_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_Info, common_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_Info, sbox_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_Info, hvac_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_Info, dvr_info_),
  };
  Basic_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Basic_Info_descriptor_,
      Basic_Info::default_instance_,
      Basic_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Basic_Info));
  Vehicle_Info_descriptor_ = file->message_type(31);
  static const int Vehicle_Info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_Info, info_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_Info, collect_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_Info, basic_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_Info, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_Info, ignontag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_Info, ef82_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_Info, version_),
  };
  Vehicle_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vehicle_Info_descriptor_,
      Vehicle_Info::default_instance_,
      Vehicle_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vehicle_Info));
  Vehicle_InfoRsp_descriptor_ = file->message_type(32);
  static const int Vehicle_InfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_InfoRsp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_InfoRsp, time_stamp_),
  };
  Vehicle_InfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vehicle_InfoRsp_descriptor_,
      Vehicle_InfoRsp::default_instance_,
      Vehicle_InfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_InfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle_InfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vehicle_InfoRsp));
  Location_Info_descriptor_ = file->message_type(33);
  static const int Location_Info_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location_Info, info_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location_Info, collect_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location_Info, location_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location_Info, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location_Info, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location_Info, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location_Info, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location_Info, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location_Info, isgpsconversion_),
  };
  Location_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Location_Info_descriptor_,
      Location_Info::default_instance_,
      Location_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Location_Info));
  Location_InfoRsp_descriptor_ = file->message_type(34);
  static const int Location_InfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location_InfoRsp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location_InfoRsp, time_stamp_),
  };
  Location_InfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Location_InfoRsp_descriptor_,
      Location_InfoRsp::default_instance_,
      Location_InfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location_InfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location_InfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Location_InfoRsp));
  RemoteControlResultRsp_descriptor_ = file->message_type(35);
  static const int RemoteControlResultRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlResultRsp, control_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlResultRsp, control_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlResultRsp, serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlResultRsp, control_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlResultRsp, time_stamp_),
  };
  RemoteControlResultRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoteControlResultRsp_descriptor_,
      RemoteControlResultRsp::default_instance_,
      RemoteControlResultRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlResultRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlResultRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoteControlResultRsp));
  RemoteControlReq_descriptor_ = file->message_type(36);
  static const int RemoteControlReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlReq, control_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlReq, control_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlReq, serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlReq, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlReq, signal_data_),
  };
  RemoteControlReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoteControlReq_descriptor_,
      RemoteControlReq::default_instance_,
      RemoteControlReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteControlReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoteControlReq));
  FlowCountRsp_descriptor_ = file->message_type(37);
  static const int FlowCountRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowCountRsp, dataallowance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowCountRsp, datausage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowCountRsp, dataavailable_),
  };
  FlowCountRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlowCountRsp_descriptor_,
      FlowCountRsp::default_instance_,
      FlowCountRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowCountRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowCountRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlowCountRsp));
  FlowCountLimitReq_descriptor_ = file->message_type(38);
  static const int FlowCountLimitReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowCountLimitReq, limitval_),
  };
  FlowCountLimitReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlowCountLimitReq_descriptor_,
      FlowCountLimitReq::default_instance_,
      FlowCountLimitReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowCountLimitReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowCountLimitReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlowCountLimitReq));
  OtaUpgradeReq_descriptor_ = file->message_type(39);
  static const int OtaUpgradeReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtaUpgradeReq, upgradeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtaUpgradeReq, serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtaUpgradeReq, time_stamp_),
  };
  OtaUpgradeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OtaUpgradeReq_descriptor_,
      OtaUpgradeReq::default_instance_,
      OtaUpgradeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtaUpgradeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtaUpgradeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OtaUpgradeReq));
  OtaUpgradeRsp_descriptor_ = file->message_type(40);
  static const int OtaUpgradeRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtaUpgradeRsp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtaUpgradeRsp, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtaUpgradeRsp, serial_number_),
  };
  OtaUpgradeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OtaUpgradeRsp_descriptor_,
      OtaUpgradeRsp::default_instance_,
      OtaUpgradeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtaUpgradeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtaUpgradeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OtaUpgradeRsp));
  CancelOtaUpgradeRsp_descriptor_ = file->message_type(41);
  static const int CancelOtaUpgradeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOtaUpgradeRsp, errcode_),
  };
  CancelOtaUpgradeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CancelOtaUpgradeRsp_descriptor_,
      CancelOtaUpgradeRsp::default_instance_,
      CancelOtaUpgradeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOtaUpgradeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelOtaUpgradeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CancelOtaUpgradeRsp));
  OtaUpgradeProgressReq_descriptor_ = file->message_type(42);
  static const int OtaUpgradeProgressReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtaUpgradeProgressReq, upgradeprogresscode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtaUpgradeProgressReq, errcode_),
  };
  OtaUpgradeProgressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OtaUpgradeProgressReq_descriptor_,
      OtaUpgradeProgressReq::default_instance_,
      OtaUpgradeProgressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtaUpgradeProgressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtaUpgradeProgressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OtaUpgradeProgressReq));
  CertCom_descriptor_ = file->message_type(43);
  static const int CertCom_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertCom, serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertCom, cur_cert_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertCom, data_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertCom, cmd_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertCom, dcm_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertCom, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertCom, data_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertCom, sign_data_),
  };
  CertCom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CertCom_descriptor_,
      CertCom::default_instance_,
      CertCom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertCom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertCom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CertCom));
  TCUCertApply_Req_descriptor_ = file->message_type(44);
  static const int TCUCertApply_Req_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUCertApply_Req, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUCertApply_Req, vin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUCertApply_Req, cert_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUCertApply_Req, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUCertApply_Req, p10_csr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUCertApply_Req, cst_sign_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUCertApply_Req, cert_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUCertApply_Req, sign_type_),
  };
  TCUCertApply_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCUCertApply_Req_descriptor_,
      TCUCertApply_Req::default_instance_,
      TCUCertApply_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUCertApply_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUCertApply_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCUCertApply_Req));
  TCUCertApply_Rsp_descriptor_ = file->message_type(45);
  static const int TCUCertApply_Rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUCertApply_Rsp, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUCertApply_Rsp, recv_status_),
  };
  TCUCertApply_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCUCertApply_Rsp_descriptor_,
      TCUCertApply_Rsp::default_instance_,
      TCUCertApply_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUCertApply_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUCertApply_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCUCertApply_Rsp));
  CertIssue_Req_descriptor_ = file->message_type(46);
  static const int CertIssue_Req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertIssue_Req, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertIssue_Req, cert_apply_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertIssue_Req, apply_cert_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertIssue_Req, cert_data_),
  };
  CertIssue_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CertIssue_Req_descriptor_,
      CertIssue_Req::default_instance_,
      CertIssue_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertIssue_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertIssue_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CertIssue_Req));
  CertIssue_Rsp_descriptor_ = file->message_type(47);
  static const int CertIssue_Rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertIssue_Rsp, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertIssue_Rsp, cert_recv_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertIssue_Rsp, apply_cert_id_),
  };
  CertIssue_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CertIssue_Rsp_descriptor_,
      CertIssue_Rsp::default_instance_,
      CertIssue_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertIssue_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertIssue_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CertIssue_Rsp));
  RSALoginReq_descriptor_ = file->message_type(48);
  static const int RSALoginReq_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSALoginReq, tcu_device_sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSALoginReq, imsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSALoginReq, imei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSALoginReq, software_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSALoginReq, hardware_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSALoginReq, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSALoginReq, g4_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSALoginReq, vehicle_type_),
  };
  RSALoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RSALoginReq_descriptor_,
      RSALoginReq::default_instance_,
      RSALoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSALoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSALoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RSALoginReq));
  SendRSARsp_descriptor_ = file->message_type(49);
  static const int SendRSARsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRSARsp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRSARsp, n_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRSARsp, n_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRSARsp, e1_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRSARsp, e1_string_),
  };
  SendRSARsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendRSARsp_descriptor_,
      SendRSARsp::default_instance_,
      SendRSARsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRSARsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRSARsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendRSARsp));
  SendRC4Req_descriptor_ = file->message_type(50);
  static const int SendRC4Req_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRC4Req, da_device_sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRC4Req, vin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRC4Req, iccid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRC4Req, serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRC4Req, key_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRC4Req, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRC4Req, upgrading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRC4Req, bcm_reg_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRC4Req, gps_contrlstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRC4Req, vel_contrlstatus_),
  };
  SendRC4Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendRC4Req_descriptor_,
      SendRC4Req::default_instance_,
      SendRC4Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRC4Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRC4Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendRC4Req));
  SendRC4Resp_descriptor_ = file->message_type(51);
  static const int SendRC4Resp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRC4Resp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRC4Resp, serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRC4Resp, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRC4Resp, upgradeinfo_),
  };
  SendRC4Resp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendRC4Resp_descriptor_,
      SendRC4Resp::default_instance_,
      SendRC4Resp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRC4Resp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendRC4Resp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendRC4Resp));
  WakeUpDVRRsp_descriptor_ = file->message_type(52);
  static const int WakeUpDVRRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WakeUpDVRRsp, serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WakeUpDVRRsp, control_result_),
  };
  WakeUpDVRRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WakeUpDVRRsp_descriptor_,
      WakeUpDVRRsp::default_instance_,
      WakeUpDVRRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WakeUpDVRRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WakeUpDVRRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WakeUpDVRRsp));
  WakeUpDVRReq_descriptor_ = file->message_type(53);
  static const int WakeUpDVRReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WakeUpDVRReq, serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WakeUpDVRReq, time_stamp_),
  };
  WakeUpDVRReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WakeUpDVRReq_descriptor_,
      WakeUpDVRReq::default_instance_,
      WakeUpDVRReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WakeUpDVRReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WakeUpDVRReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WakeUpDVRReq));
  RmtDiagRsp_descriptor_ = file->message_type(54);
  static const int RmtDiagRsp_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagRsp, serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagRsp, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagRsp, diag_avm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagRsp, diag_sonar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagRsp, diag_bsw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagRsp, diag_ecm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagRsp, diag_tcm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagRsp, diag_usm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagRsp, diag_bcm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagRsp, diag_feb_camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagRsp, diag_feb_radar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagRsp, diag_dvr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagRsp, diag_vdc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagRsp, diag_eps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagRsp, diag_gw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagRsp, diag_tpms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagRsp, diag_meter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagRsp, diag_tcu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagRsp, diag_acu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagRsp, diag_da_),
  };
  RmtDiagRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RmtDiagRsp_descriptor_,
      RmtDiagRsp::default_instance_,
      RmtDiagRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RmtDiagRsp));
  RmtDiagReq_descriptor_ = file->message_type(55);
  static const int RmtDiagReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagReq, serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagReq, time_stamp_),
  };
  RmtDiagReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RmtDiagReq_descriptor_,
      RmtDiagReq::default_instance_,
      RmtDiagReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmtDiagReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RmtDiagReq));
  Fault_List_info_descriptor_ = file->message_type(56);
  static const int Fault_List_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fault_List_info, fault_list_one_),
  };
  Fault_List_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fault_List_info_descriptor_,
      Fault_List_info::default_instance_,
      Fault_List_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fault_List_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fault_List_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fault_List_info));
  FourGExtendCmdRsp_descriptor_ = file->message_type(57);
  static const int FourGExtendCmdRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FourGExtendCmdRsp, serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FourGExtendCmdRsp, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FourGExtendCmdRsp, commander_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FourGExtendCmdRsp, result_info_),
  };
  FourGExtendCmdRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FourGExtendCmdRsp_descriptor_,
      FourGExtendCmdRsp::default_instance_,
      FourGExtendCmdRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FourGExtendCmdRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FourGExtendCmdRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FourGExtendCmdRsp));
  FourGExtendCmdReq_descriptor_ = file->message_type(58);
  static const int FourGExtendCmdReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FourGExtendCmdReq, serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FourGExtendCmdReq, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FourGExtendCmdReq, commander_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FourGExtendCmdReq, result_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FourGExtendCmdReq, jaegercontext_),
  };
  FourGExtendCmdReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FourGExtendCmdReq_descriptor_,
      FourGExtendCmdReq::default_instance_,
      FourGExtendCmdReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FourGExtendCmdReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FourGExtendCmdReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FourGExtendCmdReq));
  TCUExtendCmdReq_descriptor_ = file->message_type(59);
  static const int TCUExtendCmdReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUExtendCmdReq, serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUExtendCmdReq, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUExtendCmdReq, commander_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUExtendCmdReq, result_info_),
  };
  TCUExtendCmdReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCUExtendCmdReq_descriptor_,
      TCUExtendCmdReq::default_instance_,
      TCUExtendCmdReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUExtendCmdReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUExtendCmdReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCUExtendCmdReq));
  TCUExtendCmdRsp_descriptor_ = file->message_type(60);
  static const int TCUExtendCmdRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUExtendCmdRsp, serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUExtendCmdRsp, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUExtendCmdRsp, commander_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUExtendCmdRsp, result_info_),
  };
  TCUExtendCmdRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCUExtendCmdRsp_descriptor_,
      TCUExtendCmdRsp::default_instance_,
      TCUExtendCmdRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUExtendCmdRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCUExtendCmdRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCUExtendCmdRsp));
  Net4GSwitchStatusReq_descriptor_ = file->message_type(61);
  static const int Net4GSwitchStatusReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Net4GSwitchStatusReq, net_4g_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Net4GSwitchStatusReq, tcu_device_sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Net4GSwitchStatusReq, time_stamp_),
  };
  Net4GSwitchStatusReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Net4GSwitchStatusReq_descriptor_,
      Net4GSwitchStatusReq::default_instance_,
      Net4GSwitchStatusReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Net4GSwitchStatusReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Net4GSwitchStatusReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Net4GSwitchStatusReq));
  Net4GSwitchStatusRsp_descriptor_ = file->message_type(62);
  static const int Net4GSwitchStatusRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Net4GSwitchStatusRsp, net_4g_status_),
  };
  Net4GSwitchStatusRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Net4GSwitchStatusRsp_descriptor_,
      Net4GSwitchStatusRsp::default_instance_,
      Net4GSwitchStatusRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Net4GSwitchStatusRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Net4GSwitchStatusRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Net4GSwitchStatusRsp));
  netGpsSwitchStatusReq_descriptor_ = file->message_type(63);
  static const int netGpsSwitchStatusReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(netGpsSwitchStatusReq, gps_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(netGpsSwitchStatusReq, tcu_device_sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(netGpsSwitchStatusReq, time_stamp_),
  };
  netGpsSwitchStatusReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      netGpsSwitchStatusReq_descriptor_,
      netGpsSwitchStatusReq::default_instance_,
      netGpsSwitchStatusReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(netGpsSwitchStatusReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(netGpsSwitchStatusReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(netGpsSwitchStatusReq));
  netGpsSwitchStatusRsp_descriptor_ = file->message_type(64);
  static const int netGpsSwitchStatusRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(netGpsSwitchStatusRsp, gps_status_),
  };
  netGpsSwitchStatusRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      netGpsSwitchStatusRsp_descriptor_,
      netGpsSwitchStatusRsp::default_instance_,
      netGpsSwitchStatusRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(netGpsSwitchStatusRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(netGpsSwitchStatusRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(netGpsSwitchStatusRsp));
  RspCode_descriptor_ = file->enum_type(0);
  UpgradeProgressCodeType_descriptor_ = file->enum_type(1);
  RmtDiagRspCode_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeInfo_descriptor_, &UpgradeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginReq_descriptor_, &LoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRsp_descriptor_, &LoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartbeatReq_descriptor_, &HeartbeatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartbeatRsp_descriptor_, &HeartbeatRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendRSAReq_descriptor_, &SendRSAReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendRC4Rsp_descriptor_, &SendRC4Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetParameterRsp_descriptor_, &SetParameterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetParameterReq_descriptor_, &SetParameterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetParameterRsp_descriptor_, &GetParameterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetParameterReq_descriptor_, &GetParameterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ECM_Info_descriptor_, &ECM_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ABSVDC_Info_descriptor_, &ABSVDC_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    METER_Info_descriptor_, &METER_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BCM_Info_descriptor_, &BCM_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACU_Info_descriptor_, &ACU_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AT_Info_descriptor_, &AT_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    STRG_Info_descriptor_, &STRG_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EPS_Info_descriptor_, &EPS_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    USM_Info_descriptor_, &USM_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPMS_Info_descriptor_, &TPMS_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WIRE_Info_descriptor_, &WIRE_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ECO_Info_descriptor_, &ECO_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ALARM_Info_descriptor_, &ALARM_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ITM_Info_descriptor_, &ITM_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IKEY_Info_descriptor_, &IKEY_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    COMMON_Info_descriptor_, &COMMON_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HVAC_Info_descriptor_, &HVAC_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SBOX_info_descriptor_, &SBOX_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DVR_Info_descriptor_, &DVR_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Basic_Info_descriptor_, &Basic_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vehicle_Info_descriptor_, &Vehicle_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vehicle_InfoRsp_descriptor_, &Vehicle_InfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Location_Info_descriptor_, &Location_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Location_InfoRsp_descriptor_, &Location_InfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoteControlResultRsp_descriptor_, &RemoteControlResultRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoteControlReq_descriptor_, &RemoteControlReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlowCountRsp_descriptor_, &FlowCountRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlowCountLimitReq_descriptor_, &FlowCountLimitReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OtaUpgradeReq_descriptor_, &OtaUpgradeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OtaUpgradeRsp_descriptor_, &OtaUpgradeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CancelOtaUpgradeRsp_descriptor_, &CancelOtaUpgradeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OtaUpgradeProgressReq_descriptor_, &OtaUpgradeProgressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CertCom_descriptor_, &CertCom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCUCertApply_Req_descriptor_, &TCUCertApply_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCUCertApply_Rsp_descriptor_, &TCUCertApply_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CertIssue_Req_descriptor_, &CertIssue_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CertIssue_Rsp_descriptor_, &CertIssue_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RSALoginReq_descriptor_, &RSALoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendRSARsp_descriptor_, &SendRSARsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendRC4Req_descriptor_, &SendRC4Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendRC4Resp_descriptor_, &SendRC4Resp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WakeUpDVRRsp_descriptor_, &WakeUpDVRRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WakeUpDVRReq_descriptor_, &WakeUpDVRReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RmtDiagRsp_descriptor_, &RmtDiagRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RmtDiagReq_descriptor_, &RmtDiagReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fault_List_info_descriptor_, &Fault_List_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FourGExtendCmdRsp_descriptor_, &FourGExtendCmdRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FourGExtendCmdReq_descriptor_, &FourGExtendCmdReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCUExtendCmdReq_descriptor_, &TCUExtendCmdReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCUExtendCmdRsp_descriptor_, &TCUExtendCmdRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Net4GSwitchStatusReq_descriptor_, &Net4GSwitchStatusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Net4GSwitchStatusRsp_descriptor_, &Net4GSwitchStatusRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    netGpsSwitchStatusReq_descriptor_, &netGpsSwitchStatusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    netGpsSwitchStatusRsp_descriptor_, &netGpsSwitchStatusRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto() {
  delete UpgradeInfo::default_instance_;
  delete UpgradeInfo_reflection_;
  delete LoginReq::default_instance_;
  delete LoginReq_reflection_;
  delete LoginRsp::default_instance_;
  delete LoginRsp_reflection_;
  delete HeartbeatReq::default_instance_;
  delete HeartbeatReq_reflection_;
  delete HeartbeatRsp::default_instance_;
  delete HeartbeatRsp_reflection_;
  delete SendRSAReq::default_instance_;
  delete SendRSAReq_reflection_;
  delete SendRC4Rsp::default_instance_;
  delete SendRC4Rsp_reflection_;
  delete SetParameterRsp::default_instance_;
  delete SetParameterRsp_reflection_;
  delete SetParameterReq::default_instance_;
  delete SetParameterReq_reflection_;
  delete GetParameterRsp::default_instance_;
  delete GetParameterRsp_reflection_;
  delete GetParameterReq::default_instance_;
  delete GetParameterReq_reflection_;
  delete ECM_Info::default_instance_;
  delete ECM_Info_reflection_;
  delete ABSVDC_Info::default_instance_;
  delete ABSVDC_Info_reflection_;
  delete METER_Info::default_instance_;
  delete METER_Info_reflection_;
  delete BCM_Info::default_instance_;
  delete BCM_Info_reflection_;
  delete ACU_Info::default_instance_;
  delete ACU_Info_reflection_;
  delete AT_Info::default_instance_;
  delete AT_Info_reflection_;
  delete STRG_Info::default_instance_;
  delete STRG_Info_reflection_;
  delete EPS_Info::default_instance_;
  delete EPS_Info_reflection_;
  delete USM_Info::default_instance_;
  delete USM_Info_reflection_;
  delete TPMS_Info::default_instance_;
  delete TPMS_Info_reflection_;
  delete WIRE_Info::default_instance_;
  delete WIRE_Info_reflection_;
  delete ECO_Info::default_instance_;
  delete ECO_Info_reflection_;
  delete ALARM_Info::default_instance_;
  delete ALARM_Info_reflection_;
  delete ITM_Info::default_instance_;
  delete ITM_Info_reflection_;
  delete IKEY_Info::default_instance_;
  delete IKEY_Info_reflection_;
  delete COMMON_Info::default_instance_;
  delete COMMON_Info_reflection_;
  delete HVAC_Info::default_instance_;
  delete HVAC_Info_reflection_;
  delete SBOX_info::default_instance_;
  delete SBOX_info_reflection_;
  delete DVR_Info::default_instance_;
  delete DVR_Info_reflection_;
  delete Basic_Info::default_instance_;
  delete Basic_Info_reflection_;
  delete Vehicle_Info::default_instance_;
  delete Vehicle_Info_reflection_;
  delete Vehicle_InfoRsp::default_instance_;
  delete Vehicle_InfoRsp_reflection_;
  delete Location_Info::default_instance_;
  delete Location_Info_reflection_;
  delete Location_InfoRsp::default_instance_;
  delete Location_InfoRsp_reflection_;
  delete RemoteControlResultRsp::default_instance_;
  delete RemoteControlResultRsp_reflection_;
  delete RemoteControlReq::default_instance_;
  delete RemoteControlReq_reflection_;
  delete FlowCountRsp::default_instance_;
  delete FlowCountRsp_reflection_;
  delete FlowCountLimitReq::default_instance_;
  delete FlowCountLimitReq_reflection_;
  delete OtaUpgradeReq::default_instance_;
  delete OtaUpgradeReq_reflection_;
  delete OtaUpgradeRsp::default_instance_;
  delete OtaUpgradeRsp_reflection_;
  delete CancelOtaUpgradeRsp::default_instance_;
  delete CancelOtaUpgradeRsp_reflection_;
  delete OtaUpgradeProgressReq::default_instance_;
  delete OtaUpgradeProgressReq_reflection_;
  delete CertCom::default_instance_;
  delete CertCom_reflection_;
  delete TCUCertApply_Req::default_instance_;
  delete TCUCertApply_Req_reflection_;
  delete TCUCertApply_Rsp::default_instance_;
  delete TCUCertApply_Rsp_reflection_;
  delete CertIssue_Req::default_instance_;
  delete CertIssue_Req_reflection_;
  delete CertIssue_Rsp::default_instance_;
  delete CertIssue_Rsp_reflection_;
  delete RSALoginReq::default_instance_;
  delete RSALoginReq_reflection_;
  delete SendRSARsp::default_instance_;
  delete SendRSARsp_reflection_;
  delete SendRC4Req::default_instance_;
  delete SendRC4Req_reflection_;
  delete SendRC4Resp::default_instance_;
  delete SendRC4Resp_reflection_;
  delete WakeUpDVRRsp::default_instance_;
  delete WakeUpDVRRsp_reflection_;
  delete WakeUpDVRReq::default_instance_;
  delete WakeUpDVRReq_reflection_;
  delete RmtDiagRsp::default_instance_;
  delete RmtDiagRsp_reflection_;
  delete RmtDiagReq::default_instance_;
  delete RmtDiagReq_reflection_;
  delete Fault_List_info::default_instance_;
  delete Fault_List_info_reflection_;
  delete FourGExtendCmdRsp::default_instance_;
  delete FourGExtendCmdRsp_reflection_;
  delete FourGExtendCmdReq::default_instance_;
  delete FourGExtendCmdReq_reflection_;
  delete TCUExtendCmdReq::default_instance_;
  delete TCUExtendCmdReq_reflection_;
  delete TCUExtendCmdRsp::default_instance_;
  delete TCUExtendCmdRsp_reflection_;
  delete Net4GSwitchStatusReq::default_instance_;
  delete Net4GSwitchStatusReq_reflection_;
  delete Net4GSwitchStatusRsp::default_instance_;
  delete Net4GSwitchStatusRsp_reflection_;
  delete netGpsSwitchStatusReq::default_instance_;
  delete netGpsSwitchStatusReq_reflection_;
  delete netGpsSwitchStatusRsp::default_instance_;
  delete netGpsSwitchStatusRsp_reflection_;
}

void protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033tbox_protocol_message.proto\022\rtbox.prot"
    "ocol\"\334\001\n\013UpgradeInfo\022\020\n\010filetype\030\001 \002(\t\022\020"
    "\n\010filepath\030\002 \002(\t\022\017\n\007version\030\003 \002(\t\022\020\n\010fil"
    "esize\030\004 \002(\r\022\013\n\003md5\030\005 \002(\014\022\013\n\003rc4\030\006 \001(\t\022\020\n"
    "\010sign_md5\030\007 \001(\014\022\014\n\004sha2\030\010 \001(\014\022\016\n\006aes128\030"
    "\t \001(\t\022\021\n\tsign_sha2\030\n \001(\014\022\023\n\013prefilesize\030"
    "\013 \001(\r\022\024\n\014encrypt_type\030\014 \001(\r\"\243\002\n\010LoginReq"
    "\022\025\n\rtcu_device_sn\030\001 \002(\t\022\024\n\014da_device_sn\030"
    "\002 \002(\t\022\013\n\003vin\030\003 \002(\t\022\r\n\005iccid\030\004 \002(\t\022\014\n\004ims"
    "i\030\005 \002(\t\022\014\n\004imei\030\006 \002(\t\022\030\n\020software_versio"
    "n\030\007 \002(\t\022\030\n\020hardware_version\030\010 \002(\t\022\022\n\ntim"
    "e_stamp\030\t \002(\r\022\022\n\ng4_version\030\n \001(\t\022\024\n\014veh"
    "icle_type\030\013 \001(\t\022\021\n\tupgrading\030\014 \001(\010\022\026\n\016bc"
    "m_reg_status\030\r \001(\010\022\025\n\rota_algrithom\030\016 \001("
    "\r\"`\n\010LoginRsp\022\017\n\007errcode\030\001 \002(\r\022\022\n\ntime_s"
    "tamp\030\002 \002(\r\022/\n\013upgradeinfo\030\003 \003(\0132\032.tbox.p"
    "rotocol.UpgradeInfo\"\"\n\014HeartbeatReq\022\022\n\nt"
    "ime_stamp\030\001 \002(\r\"3\n\014HeartbeatRsp\022\017\n\007errco"
    "de\030\001 \002(\r\022\022\n\ntime_stamp\030\002 \002(\r\"d\n\nSendRSAR"
    "eq\022\r\n\005N_len\030\001 \002(\r\022\020\n\010N_string\030\002 \002(\t\022\016\n\006E"
    "1_len\030\003 \002(\r\022\021\n\tE1_string\030\004 \002(\t\022\022\n\ntime_s"
    "tamp\030\005 \002(\r\"H\n\nSendRC4Rsp\022\017\n\007errcode\030\001 \002("
    "\r\022\025\n\rserial_number\030\002 \002(\r\022\022\n\ntime_stamp\030\003"
    " \002(\r\"6\n\017SetParameterRsp\022\017\n\007errcode\030\001 \002(\r"
    "\022\022\n\ntime_stamp\030\002 \002(\r\"\274\002\n\017SetParameterReq"
    "\022\033\n\023local_storage_cycle\030\001 \002(\r\022 \n\030upload_"
    "data_cycle_normal\030\002 \002(\r\022\037\n\027upload_GPS_cy"
    "cle_normal\030\003 \002(\r\022\037\n\027upload_data_cycle_al"
    "arm\030\004 \002(\r\022\036\n\026upload_GPS_cycle_alarm\030\005 \002("
    "\r\022\027\n\017heartbeat_cycle\030\006 \001(\r\022\037\n\027server_res"
    "ponse_timeout\030\007 \001(\r\022\034\n\024box_response_time"
    "out\030\010 \001(\r\022\031\n\021FlowControlSwitch\030\t \001(\010\022\025\n\r"
    "GPSconversion\030\n \001(\r\"\343\002\n\017GetParameterRsp\022"
    "\017\n\007errcode\030\001 \002(\r\022\033\n\023local_storage_cycle\030"
    "\002 \002(\r\022 \n\030upload_data_cycle_normal\030\003 \002(\r\022"
    "\037\n\027upload_GPS_cycle_normal\030\004 \002(\r\022\037\n\027uplo"
    "ad_data_cycle_alarm\030\005 \002(\r\022\036\n\026upload_GPS_"
    "cycle_alarm\030\006 \002(\r\022\027\n\017heartbeat_cycle\030\007 \002"
    "(\r\022\037\n\027server_response_timeout\030\010 \002(\r\022\034\n\024b"
    "ox_response_timeout\030\t \002(\r\022\030\n\020firmware_ve"
    "rsion\030\n \002(\t\022\030\n\020hardware_version\030\013 \002(\t\022\022\n"
    "\ntime_stamp\030\014 \002(\r\"%\n\017GetParameterReq\022\022\n\n"
    "time_stamp\030\001 \002(\r\"\331\003\n\010ECM_Info\022\021\n\tEngineR"
    "PM\030\001 \001(\r\022\021\n\tRawSensor\030\002 \001(\r\022\024\n\014ClutchSwi"
    "tch\030\003 \001(\r\022\024\n\014EngineStatus\030\004 \001(\r\022\031\n\021Engin"
    "eCoolantTemp\030\005 \001(\r\022\027\n\017FuelConsumption\030\006 "
    "\001(\r\022\021\n\tDiagMuxOn\030\007 \001(\010\022\027\n\017EconomyModeLam"
    "p\030\010 \001(\010\022\023\n\013CO2_Content\030\t \001(\r\022\022\n\nCO_Conte"
    "nt\030\n \001(\r\022\022\n\nHC_Content\030\013 \001(\r\022\022\n\nO2_Conte"
    "nt\030\014 \001(\r\022\034\n\024ACHighPressureSensor\030\r \001(\r\022\033"
    "\n\023CruiseControlStatus\030\016 \001(\r\022\036\n\026EngineThr"
    "ottlePosition\030\017 \001(\r\022\033\n\023MeanEffectiveTorq"
    "ue\030\020 \001(\r\022\035\n\025Fuel_Consumption_Fine\030\021 \001(\r\022"
    "\016\n\006SOF_V1\030\022 \001(\r\022\024\n\014SOF_V1_State\030\023 \001(\r\022\r\n"
    "\005Vbmin\030\024 \001(\r\"\241\001\n\013ABSVDC_Info\022\027\n\017ASRinReg"
    "ulation\030\001 \001(\010\022&\n\036LongitudinalAcceleratio"
    "nProc02\030\002 \001(\r\022!\n\031Transversalacceleration"
    "02\030\003 \001(\r\022\021\n\tYawRate02\030\004 \001(\r\022\033\n\023IDM_StopL"
    "ampRequest\030\005 \001(\r\"\343\002\n\nMETER_Info\022\034\n\024Vehic"
    "leSpeed_CLUSTER\030\001 \001(\r\022\034\n\024Average_Fuel_Ec"
    "onomy\030\002 \001(\r\022\031\n\021Distance_to_empty\030\003 \001(\r\022\032"
    "\n\022Distance_Totalizer\030\004 \001(\r\022\023\n\013Fuel_Remai"
    "n\030\005 \001(\r\022\031\n\021Fuel_Warning_lamp\030\006 \001(\r\022#\n\033Av"
    "erage_Fuel_Economy_Single\030\007 \001(\r\022\022\n\nEPB_S"
    "tatus\030\010 \001(\r\022\026\n\016APB_StatusFlag\030\t \001(\r\022&\n\036P"
    "arkingBrakeMalfunctionDisplay\030\n \001(\r\022(\n P"
    "arkingBrakeBindingStatusDisplay\030\013 \001(\r\022\017\n"
    "\007Fuellow\030\014 \001(\r\"\264\n\n\010BCM_Info\022\031\n\021TrunkSwit"
    "chStatus\030\001 \001(\010\022\032\n\022BCM_WakeUpSleepCmd\030\002 \001"
    "(\r\022\036\n\026front_left_door_status\030\003 \001(\010\022\037\n\027fr"
    "ont_right_door_status\030\004 \001(\010\022\035\n\025rear_left"
    "_door_status\030\005 \001(\010\022\036\n\026rear_right_door_st"
    "atus\030\006 \001(\010\022\030\n\020back_door_status\030\007 \001(\010\022\030\n\020"
    "door_lock_status\030\010 \001(\010\022\037\n\027back_door_lock"
    "ed_status\030\t \001(\010\022\026\n\016LowBeamRequest\030\n \001(\010\022"
    "\037\n\027FlashingIndicatorStatus\030\013 \001(\r\022\027\n\017High"
    "BeamRequest\030\014 \001(\010\022\035\n\025PositionLightsReque"
    "st\030\r \001(\010\022\035\n\025FrontFogLightsRequest\030\016 \001(\010\022"
    "\032\n\022RearFogLightStatus\030\017 \001(\010\022\"\n\032DayTimeRu"
    "nningLightRequest\030\020 \001(\010\022!\n\031front_right_w"
    "indow_status\030\021 \001(\r\022 \n\030front_left_window_"
    "status\030\022 \001(\r\022 \n\030rear_right_window_status"
    "\030\023 \001(\r\022\037\n\027rear_left_window_status\030\024 \001(\r\022"
    "\036\n\026remote_enging_run_flag\030\025 \001(\010\022\035\n\025sunro"
    "of_window_status\030\026 \001(\r\022\034\n\024sunroof_shade_"
    "status\030\027 \001(\r\022\033\n\023RES_FailureFeedback\030\030 \001("
    "\r\022\030\n\020isFindcarBreaked\030\031 \001(\010\022\022\n\nRES_Statu"
    "s\030\032 \001(\r\022\"\n\032Last_obstacle_notification\030\033 "
    "\001(\r\022\026\n\016SR_Motor_State\030\034 \001(\r\022\031\n\021Shade_Mot"
    "or_State\030\035 \001(\r\022\022\n\nShade_Area\030\036 \001(\r\022\033\n\023BC"
    "M_SR_Degrade_Mode\030\037 \001(\r\022\036\n\026BCM_Shade_Deg"
    "rade_Mode\030  \001(\r\022\"\n\032RESPreSoak_Smartphone"
    "Error\030! \001(\r\022\"\n\032LeftTimeDuringThisRESCycl"
    "e\030\" \001(\r\022\027\n\017RearWiperStatus\030# \001(\r\022\030\n\020Driv"
    "eModeRequest\030$ \001(\r\022\035\n\025ChildLockStateDisp"
    "lay\030% \001(\r\022!\n\031ClutchSwitchMaximumTravel\030&"
    " \001(\r\022!\n\031ClutchSwitchMinimumTravel\030\' \001(\r\022"
    "\020\n\010RLS_Rain\030( \001(\r\022\032\n\022RearDefrostEngaged\030"
    ". \001(\r\022!\n\031PassengerDoorLockedStatus\030/ \001(\r"
    "\022 \n\030RearLeftDoorLockedStatus\0300 \001(\r\022!\n\031Re"
    "arRightDoorLockedStatus\0301 \001(\r\"\241\003\n\010ACU_In"
    "fo\022\032\n\022Airbag_Crash_Order\030\001 \001(\r\022#\n\033Driver"
    "SafetyBeltBuckleState\030\002 \001(\r\022&\n\036Passenger"
    "SafetyBeltBuckleState\030\003 \001(\r\022&\n\036SecondRow"
    "CenterSafetyBeltState\030\004 \001(\r\022$\n\034SecondRow"
    "LeftSafetyBeltState\030\005 \001(\r\022%\n\035SecondRowRi"
    "ghtSafetyBeltState\030\006 \001(\r\022\036\n\026PassengerPre"
    "senceState\030\007 \001(\r\022$\n\034SecondRowCenterPrese"
    "nceState\030\010 \001(\r\022\"\n\032SecondRowLeftPresenceS"
    "tate\030\t \001(\r\022#\n\033SecondRowRightPresenceStat"
    "e\030\n \001(\r\022(\n FrontPassengerSafetyBeltRemin"
    "der\030\013 \001(\r\"C\n\007AT_Info\022\031\n\021FastTorqueReques"
    "t\030\001 \001(\r\022\035\n\025ATCVT_RangeIndication\030\002 \001(\r\"D"
    "\n\tSTRG_Info\022\026\n\016Steering_Angle\030\001 \001(\r\022\037\n\027S"
    "teering_Angle_Velocity\030\002 \001(\r\"%\n\010EPS_Info"
    "\022\031\n\021EPSteeringFailure\030\001 \001(\010\"\220\001\n\010USM_Info"
    "\022\016\n\006HoodSW\030\001 \001(\010\022\032\n\022ACCompClutchStatus\030\002"
    " \001(\010\022\030\n\020FrontWiperStatus\030\003 \001(\r\022 \n\030Engine"
    "FanSpeedStatus_PWM\030\004 \001(\r\022\034\n\024PositionLigh"
    "tsStatus\030\005 \001(\010\"\256\004\n\tTPMS_Info\022\034\n\024Low_Tire"
    "_pressure_FR\030\001 \001(\010\022\034\n\024Low_Tire_pressure_"
    "FL\030\002 \001(\010\022\034\n\024Low_Tire_pressure_RR\030\003 \001(\010\022\034"
    "\n\024Low_Tire_pressure_RL\030\004 \001(\010\022\030\n\020tire_pre"
    "ssure_FR\030\005 \001(\r\022\030\n\020tire_pressure_FL\030\006 \001(\r"
    "\022\030\n\020tire_pressure_RR\030\007 \001(\r\022\030\n\020tire_press"
    "ure_RL\030\010 \001(\r\022\034\n\024Tire_pressure_FR_Low\030\t \001"
    "(\r\022\034\n\024Tire_pressure_FL_Low\030\n \001(\r\022\034\n\024Tire"
    "_pressure_RR_Low\030\013 \001(\r\022\034\n\024Tire_pressure_"
    "RL_Low\030\014 \001(\r\022\021\n\tTpms_Flag\030\r \001(\r\022\036\n\026TpmsW"
    "arningLampRequest\030\016 \001(\r\022\032\n\022SystemFailure"
    "_TPMS\030\017 \001(\r\022\035\n\025Transmitter_status_FR\030\020 \001"
    "(\r\022\035\n\025Transmitter_status_FL\030\021 \001(\r\022\035\n\025Tra"
    "nsmitter_status_RR\030\022 \001(\r\022\035\n\025Transmitter_"
    "status_RL\030\023 \001(\r\"\210\002\n\tWIRE_Info\022\024\n\014Reverse"
    "_Gear\030\001 \001(\010\022\024\n\014Neutral_Gear\030\002 \001(\010\022\037\n\027dri"
    "ver_seat_belt_status\030\003 \001(\010\022\"\n\032passenger_"
    "seat_belt_status\030\004 \001(\010\022\027\n\017HandBrakeSwitc"
    "h\030\005 \001(\010\022\022\n\nACC_status\030\006 \001(\010\022\022\n\nIGN_statu"
    "s\030\007 \001(\010\022\032\n\022Security_Indicator\030\010 \001(\010\022\026\n\016b"
    "attery_status\030\t \001(\r\022\025\n\rDA_Heart_Beat\030\n \001"
    "(\010\"h\n\010ECO_Info\022 \n\030rapid_acceleration_cou"
    "nt\030\001 \001(\r\022 \n\030rapid_deceleration_count\030\002 \001"
    "(\r\022\030\n\020sharp_turn_count\030\003 \001(\r\"i\n\nALARM_In"
    "fo\022\022\n\nalarm_type\030\001 \001(\r\022\024\n\014alarm_typeEx\030\002"
    " \001(\014\022\030\n\020Transmitter_Fail\030\003 \001(\r\022\027\n\017LowTir"
    "ePressure\030\004 \001(\r\"\210\001\n\010ITM_Info\022\021\n\thavc_mod"
    "e\030\001 \001(\r\022\030\n\020havc_circulation\030\002 \001(\r\022\030\n\020hav"
    "c_temperature\030\003 \001(\r\022\027\n\017havc_air_volume\030\004"
    " \001(\r\022\034\n\024AVMPhotoUploadResult\030\005 \001(\r\"\225\001\n\tI"
    "KEY_Info\022\030\n\020Fuel_Cut_Request\030\001 \001(\010\022\036\n\026re"
    "mote_enging_run_flag\030\002 \001(\r\022\033\n\023RES_Failur"
    "eFeedback\030\003 \001(\r\022\033\n\023PEPS_EngineforbidSt\030\004"
    " \001(\r\022\024\n\014StartAuthSts\030\005 \001(\r\"\234\002\n\013COMMON_In"
    "fo\022\025\n\rDVRWorkStatus\030\001 \001(\r\022\030\n\020SHVM_DRVSea"
    "tVent\030\002 \001(\r\022\030\n\020SHVM_PasSeatVent\030\003 \001(\r\022\025\n"
    "\rExternal_Temp\030\004 \001(\r\022\035\n\025sunroof_window_s"
    "tatus\030\005 \001(\r\022\037\n\027DVR_RemoteCommandResult\030\006"
    " \001(\r\022\017\n\007UserSOC\030\007 \001(\r\022\034\n\024DCDC_Fault_Type"
    "_BLMS\030\010 \001(\r\022\036\n\026DCDCcurrentOutput_BLMS\030\t "
    "\001(\r\022\034\n\024HVBatteryEnergyLevel\030\n \001(\r\"\305\005\n\tHV"
    "AC_Info\022(\n Air_condition_status_driver_t"
    "emp\030\001 \001(\r\022+\n#Air_condition_status_passen"
    "ger_temp\030\002 \001(\r\022\'\n\037Air_condition_status_F"
    "an_volume\030\003 \001(\r\022#\n\033Air_condition_status_"
    "AC_IND\030\004 \001(\r\022*\n\"Air_condition_status_cir"
    "culate_IND\030\005 \001(\r\022\'\n\037Air_condition_status"
    "_ON_OFF_IND\030\006 \001(\r\022%\n\035Air_condition_statu"
    "s_AUTO_IND\030\007 \001(\r\022%\n\035Air_condition_status"
    "_DUAL_IND\030\010 \001(\r\022%\n\035Air_condition_status_"
    "SYNC_IND\030\t \001(\r\022.\n&Air_condition_status_F"
    "ront_Defrost_IND\030\n \001(\r\022-\n%Air_condition_"
    "status_Rear_Defrost_IND\030\013 \001(\r\022!\n\031Air_con"
    "dition_status_Mode\030\014 \001(\r\022\037\n\027Steering_Hea"
    "t_status_SW\030\r \001(\r\022\037\n\027Seat_Heat_status_dr"
    "iver\030\016 \001(\r\022#\n\033Seat_Heat_status_passenage"
    "r\030\017 \001(\r\022\037\n\027BlowerFanMotorStatus_AC\030\020 \001(\r"
    "\022\034\n\024AC_StopAutoForbidden\030\021 \001(\r\022!\n\031AirCon"
    "dEcoActivationState\030\022 \001(\r\"\264\004\n\tSBOX_info\022"
    "\026\n\016PM25OnOffState\030\001 \001(\010\022\026\n\016PM25FaultStat"
    "e\030\002 \001(\010\022\021\n\tPM25State\030\003 \001(\r\022\021\n\tPM25Value\030"
    "\004 \001(\r\022\036\n\026Seat_Position_Feedback\030\005 \001(\r\022!\n"
    "\031Seat_Heater_Feedback_Main\030\006 \001(\r\022\037\n\027Seat"
    "_Heater_Feedback_FR\030\007 \001(\r\022\032\n\022HAVC_mode_f"
    "eedback\030\010 \001(\r\022!\n\031HAVC_circulation_feedba"
    "ck\030\t \001(\r\022!\n\031HAVC_temperature_feedback\030\n "
    "\001(\r\022 \n\030HAVC_air_volume_feedback\030\013 \001(\r\022\014\n"
    "\004AUTO\030\014 \001(\r\022\021\n\tHVAC_Type\030\r \001(\010\022\031\n\021Direct"
    "OutsideTemp\030\016 \001(\r\022\024\n\014DefrostState\030\017 \001(\r\022"
    " \n\030Cooling_Warming_Feedback\030\020 \001(\r\022#\n\033S_B"
    "OX_ControlData_AC_ON_OFF\030\021 \001(\r\022\027\n\017UVC_IN"
    "_feedback\030\022 \001(\r\022\032\n\022UVS_state_feedback\030\023 "
    "\001(\010\022\033\n\023EUCU_state_feedback\030\024 \001(\010\"\210\001\n\010DVR"
    "_Info\022\034\n\024DVR_Collision_Happen\030\001 \001(\r\022#\n\033D"
    "VR_CollisionPhoto_Transmit\030\002 \001(\r\022#\n\033DVR_"
    "CollisionVideo_Transmit\030\003 \001(\r\022\024\n\014DVR_Res"
    "ponse\030\004 \001(\r\"\333\006\n\nBasic_Info\022)\n\010ecm_info\030\001"
    " \001(\0132\027.tbox.protocol.ECM_Info\022/\n\013absvdc_"
    "info\030\002 \001(\0132\032.tbox.protocol.ABSVDC_Info\022-"
    "\n\nmeter_info\030\003 \001(\0132\031.tbox.protocol.METER"
    "_Info\022)\n\010bcm_info\030\004 \001(\0132\027.tbox.protocol."
    "BCM_Info\022)\n\010acu_info\030\005 \001(\0132\027.tbox.protoc"
    "ol.ACU_Info\022\'\n\007at_info\030\006 \001(\0132\026.tbox.prot"
    "ocol.AT_Info\022+\n\tstrg_info\030\007 \001(\0132\030.tbox.p"
    "rotocol.STRG_Info\022)\n\010eps_info\030\010 \001(\0132\027.tb"
    "ox.protocol.EPS_Info\022)\n\010usm_info\030\t \001(\0132\027"
    ".tbox.protocol.USM_Info\022+\n\ttpms_info\030\n \001"
    "(\0132\030.tbox.protocol.TPMS_Info\022+\n\twire_inf"
    "o\030\013 \001(\0132\030.tbox.protocol.WIRE_Info\022)\n\010eco"
    "_info\030\014 \001(\0132\027.tbox.protocol.ECO_Info\022-\n\n"
    "alarm_info\030\r \001(\0132\031.tbox.protocol.ALARM_I"
    "nfo\022)\n\010itm_info\030\016 \001(\0132\027.tbox.protocol.IT"
    "M_Info\022+\n\tikey_info\030\017 \001(\0132\030.tbox.protoco"
    "l.IKEY_Info\022/\n\013common_info\030\020 \001(\0132\032.tbox."
    "protocol.COMMON_Info\022+\n\tsbox_info\030\021 \001(\0132"
    "\030.tbox.protocol.SBOX_info\022+\n\thvac_info\030\022"
    " \001(\0132\030.tbox.protocol.HVAC_Info\022)\n\010dvr_in"
    "fo\030\023 \001(\0132\027.tbox.protocol.DVR_Info\"\253\001\n\014Ve"
    "hicle_Info\022\021\n\tInfo_type\030\001 \002(\010\022\024\n\014collect"
    "_time\030\002 \002(\r\022-\n\nbasic_info\030\003 \002(\0132\031.tbox.p"
    "rotocol.Basic_Info\022\022\n\ntime_stamp\030\004 \002(\r\022\020"
    "\n\010IgnOnTag\030\005 \001(\r\022\014\n\004EF82\030\006 \001(\r\022\017\n\007Versio"
    "n\030\007 \001(\t\"6\n\017Vehicle_InfoRsp\022\017\n\007errcode\030\001 "
    "\002(\r\022\022\n\ntime_stamp\030\002 \002(\r\"\305\001\n\rLocation_Inf"
    "o\022\021\n\tInfo_type\030\001 \002(\010\022\024\n\014collect_time\030\002 \002"
    "(\r\022\027\n\017location_status\030\003 \002(\r\022\021\n\tlongitude"
    "\030\004 \002(\r\022\020\n\010latitude\030\005 \002(\r\022\r\n\005speed\030\006 \002(\r\022"
    "\021\n\tdirection\030\007 \002(\r\022\022\n\ntime_stamp\030\010 \002(\r\022\027"
    "\n\017isGPSconversion\030\t \001(\r\"7\n\020Location_Info"
    "Rsp\022\017\n\007errcode\030\001 \002(\r\022\022\n\ntime_stamp\030\002 \002(\r"
    "\"\210\001\n\026RemoteControlResultRsp\022\024\n\014control_t"
    "ype\030\001 \002(\r\022\025\n\rcontrol_value\030\002 \002(\r\022\025\n\rseri"
    "al_number\030\003 \002(\r\022\026\n\016control_result\030\004 \002(\r\022"
    "\022\n\ntime_stamp\030\005 \002(\r\"\177\n\020RemoteControlReq\022"
    "\024\n\014control_type\030\001 \002(\r\022\025\n\rcontrol_value\030\002"
    " \002(\r\022\025\n\rserial_number\030\003 \002(\r\022\022\n\ntime_stam"
    "p\030\004 \002(\r\022\023\n\013signal_data\030\005 \001(\t\"O\n\014FlowCoun"
    "tRsp\022\025\n\rdataAllowance\030\001 \002(\r\022\021\n\tdataUsage"
    "\030\002 \002(\r\022\025\n\rdataAvailable\030\003 \002(\r\"%\n\021FlowCou"
    "ntLimitReq\022\020\n\010limitVal\030\001 \002(\r\"k\n\rOtaUpgra"
    "deReq\022/\n\013upgradeinfo\030\001 \003(\0132\032.tbox.protoc"
    "ol.UpgradeInfo\022\025\n\rserial_number\030\002 \002(\r\022\022\n"
    "\ntime_stamp\030\003 \002(\r\"K\n\rOtaUpgradeRsp\022\017\n\007er"
    "rcode\030\001 \002(\r\022\022\n\ntime_stamp\030\002 \002(\r\022\025\n\rseria"
    "l_number\030\003 \002(\r\"&\n\023CancelOtaUpgradeRsp\022\017\n"
    "\007errcode\030\001 \002(\r\"m\n\025OtaUpgradeProgressReq\022"
    "C\n\023UpgradeProgressCode\030\001 \002(\0162&.tbox.prot"
    "ocol.UpgradeProgressCodeType\022\017\n\007errcode\030"
    "\002 \001(\r\"\241\001\n\007CertCom\022\025\n\rserial_number\030\001 \002(\r"
    "\022\023\n\013cur_cert_id\030\002 \002(\r\022\023\n\013data_status\030\003 \002"
    "(\r\022\016\n\006cmd_id\030\004 \002(\r\022\016\n\006dcm_no\030\005 \002(\t\022\017\n\007er"
    "rcode\030\006 \001(\r\022\021\n\tdata_info\030\007 \002(\014\022\021\n\tsign_d"
    "ata\030\010 \001(\014\"\252\001\n\020TCUCertApply_Req\022\022\n\ntime_s"
    "tamp\030\001 \002(\r\022\013\n\003vin\030\002 \002(\t\022\023\n\013cert_status\030\003"
    " \002(\r\022\020\n\010duration\030\004 \002(\r\022\017\n\007p10_csr\030\005 \002(\014\022"
    "\025\n\rcst_sign_data\030\006 \001(\014\022\023\n\013cert_format\030\007 "
    "\001(\t\022\021\n\tsign_type\030\010 \001(\r\";\n\020TCUCertApply_R"
    "sp\022\022\n\ntime_stamp\030\001 \002(\r\022\023\n\013recv_status\030\002 "
    "\001(\r\"h\n\rCertIssue_Req\022\022\n\ntime_stamp\030\001 \002(\r"
    "\022\031\n\021cert_apply_status\030\002 \002(\r\022\025\n\rapply_cer"
    "t_id\030\003 \001(\r\022\021\n\tcert_data\030\004 \001(\014\"T\n\rCertIss"
    "ue_Rsp\022\022\n\ntime_stamp\030\001 \002(\r\022\030\n\020cert_recv_"
    "status\030\002 \002(\r\022\025\n\rapply_cert_id\030\003 \001(\r\"\262\001\n\013"
    "RSALoginReq\022\025\n\rtcu_device_sn\030\001 \002(\t\022\014\n\004im"
    "si\030\002 \002(\t\022\014\n\004imei\030\003 \002(\t\022\030\n\020software_versi"
    "on\030\004 \002(\t\022\030\n\020hardware_version\030\005 \002(\t\022\022\n\nti"
    "me_stamp\030\006 \002(\r\022\022\n\ng4_version\030\007 \001(\t\022\024\n\014ve"
    "hicle_type\030\010 \001(\t\"a\n\nSendRSARsp\022\017\n\007errcod"
    "e\030\001 \002(\r\022\r\n\005N_len\030\002 \001(\r\022\020\n\010N_string\030\003 \001(\014"
    "\022\016\n\006E1_len\030\004 \001(\r\022\021\n\tE1_string\030\005 \001(\014\"\322\001\n\n"
    "SendRC4Req\022\024\n\014da_device_sn\030\001 \002(\t\022\013\n\003vin\030"
    "\002 \002(\t\022\r\n\005iccid\030\003 \002(\t\022\025\n\rserial_number\030\004 "
    "\002(\r\022\017\n\007key_len\030\005 \002(\r\022\013\n\003key\030\006 \002(\014\022\021\n\tupg"
    "rading\030\007 \001(\010\022\026\n\016bcm_reg_status\030\010 \001(\010\022\030\n\020"
    "gps_contrlstatus\030\t \001(\r\022\030\n\020vel_contrlstat"
    "us\030\n \001(\r\"z\n\013SendRC4Resp\022\017\n\007errcode\030\001 \002(\r"
    "\022\025\n\rserial_number\030\002 \002(\r\022\022\n\ntime_stamp\030\003 "
    "\002(\r\022/\n\013upgradeinfo\030\004 \003(\0132\032.tbox.protocol"
    ".UpgradeInfo\"=\n\014WakeUpDVRRsp\022\025\n\rserial_n"
    "umber\030\001 \002(\r\022\026\n\016control_result\030\002 \002(\r\"9\n\014W"
    "akeUpDVRReq\022\025\n\rserial_number\030\001 \002(\r\022\022\n\nti"
    "me_stamp\030\002 \002(\r\"\272\003\n\nRmtDiagRsp\022-\n\006result\030"
    "\001 \002(\0162\035.tbox.protocol.RmtDiagRspCode\022\025\n\r"
    "serial_number\030\002 \002(\r\022\022\n\ntime_stamp\030\003 \002(\r\022"
    "\020\n\010Diag_AVM\030\004 \001(\014\022\022\n\nDiag_SONAR\030\005 \001(\014\022\020\n"
    "\010Diag_BSW\030\006 \001(\014\022\020\n\010Diag_ECM\030\007 \001(\014\022\020\n\010Dia"
    "g_TCM\030\010 \001(\014\022\020\n\010Diag_USM\030\t \001(\014\022\020\n\010Diag_BC"
    "M\030\n \001(\014\022\027\n\017Diag_FEB_CAMERA\030\013 \001(\014\022\026\n\016Diag"
    "_FEB_RADAR\030\014 \001(\014\022\020\n\010Diag_DVR\030\r \001(\014\022\020\n\010Di"
    "ag_VDC\030\016 \001(\014\022\020\n\010Diag_EPS\030\017 \001(\014\022\017\n\007Diag_G"
    "W\030\020 \001(\014\022\021\n\tDiag_TPMS\030\021 \001(\014\022\022\n\nDiag_METER"
    "\030\022 \001(\014\022\020\n\010Diag_TCU\030\023 \001(\014\022\020\n\010Diag_ACU\030\024 \001"
    "(\014\022\017\n\007Diag_DA\030\025 \001(\014\"7\n\nRmtDiagReq\022\025\n\rser"
    "ial_number\030\001 \002(\r\022\022\n\ntime_stamp\030\002 \002(\r\")\n\017"
    "Fault_List_info\022\026\n\016Fault_List_one\030\001 \001(\r\""
    "i\n\021FourGExtendCmdRsp\022\025\n\rserial_number\030\001 "
    "\002(\r\022\022\n\ntime_stamp\030\002 \002(\r\022\024\n\014commander_id\030"
    "\003 \002(\r\022\023\n\013result_info\030\004 \002(\014\"\200\001\n\021FourGExte"
    "ndCmdReq\022\025\n\rserial_number\030\001 \002(\r\022\022\n\ntime_"
    "stamp\030\002 \002(\r\022\024\n\014commander_id\030\003 \002(\r\022\023\n\013res"
    "ult_info\030\004 \002(\014\022\025\n\rjaegercontext\030\005 \001(\t\"g\n"
    "\017TCUExtendCmdReq\022\025\n\rserial_number\030\001 \002(\r\022"
    "\022\n\ntime_stamp\030\002 \002(\r\022\024\n\014commander_id\030\003 \002("
    "\r\022\023\n\013result_info\030\004 \002(\014\"g\n\017TCUExtendCmdRs"
    "p\022\025\n\rserial_number\030\001 \002(\r\022\022\n\ntime_stamp\030\002"
    " \002(\r\022\024\n\014commander_id\030\003 \002(\r\022\023\n\013result_inf"
    "o\030\004 \002(\014\"X\n\024Net4GSwitchStatusReq\022\025\n\rnet_4"
    "g_status\030\001 \001(\r\022\025\n\rtcu_device_sn\030\002 \001(\t\022\022\n"
    "\ntime_stamp\030\003 \001(\r\"-\n\024Net4GSwitchStatusRs"
    "p\022\025\n\rnet_4g_status\030\001 \001(\r\"V\n\025netGpsSwitch"
    "StatusReq\022\022\n\ngps_status\030\001 \001(\r\022\025\n\rtcu_dev"
    "ice_sn\030\002 \001(\t\022\022\n\ntime_stamp\030\003 \001(\r\"+\n\025netG"
    "psSwitchStatusRsp\022\022\n\ngps_status\030\001 \001(\r*\"\n"
    "\007RspCode\022\n\n\006FAILED\020\000\022\013\n\007SUCCESS\020\001*\326\001\n\027Up"
    "gradeProgressCodeType\022\034\n\030DOWNLOADING_UPG"
    "RADE_PACK\020\000\022 \n\034DOWNLOAD_UPGRADE_PACK_RES"
    "ULT\020\001\022\025\n\021BACKUPING_MCU_APP\020\002\022\031\n\025BACKUP_M"
    "CU_APP_RESULT\020\003\022\021\n\rSTART_UPGRADE\020\004\022\022\n\016UP"
    "GRADE_RESULT\020\005\022\"\n\036WAITING_UPDATE_CONDITI"
    "ON_SLEEP\020\006*X\n\016RmtDiagRspCode\022\016\n\nRMT_FAIL"
    "ED\020\000\022\017\n\013RMT_SUCCESS\020\001\022\022\n\016RMT_DIAGNOSING\020"
    "\002\022\021\n\rRMT_DIAGNOSED\020\003", 12820);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tbox_protocol_message.proto", &protobuf_RegisterTypes);
  UpgradeInfo::default_instance_ = new UpgradeInfo();
  LoginReq::default_instance_ = new LoginReq();
  LoginRsp::default_instance_ = new LoginRsp();
  HeartbeatReq::default_instance_ = new HeartbeatReq();
  HeartbeatRsp::default_instance_ = new HeartbeatRsp();
  SendRSAReq::default_instance_ = new SendRSAReq();
  SendRC4Rsp::default_instance_ = new SendRC4Rsp();
  SetParameterRsp::default_instance_ = new SetParameterRsp();
  SetParameterReq::default_instance_ = new SetParameterReq();
  GetParameterRsp::default_instance_ = new GetParameterRsp();
  GetParameterReq::default_instance_ = new GetParameterReq();
  ECM_Info::default_instance_ = new ECM_Info();
  ABSVDC_Info::default_instance_ = new ABSVDC_Info();
  METER_Info::default_instance_ = new METER_Info();
  BCM_Info::default_instance_ = new BCM_Info();
  ACU_Info::default_instance_ = new ACU_Info();
  AT_Info::default_instance_ = new AT_Info();
  STRG_Info::default_instance_ = new STRG_Info();
  EPS_Info::default_instance_ = new EPS_Info();
  USM_Info::default_instance_ = new USM_Info();
  TPMS_Info::default_instance_ = new TPMS_Info();
  WIRE_Info::default_instance_ = new WIRE_Info();
  ECO_Info::default_instance_ = new ECO_Info();
  ALARM_Info::default_instance_ = new ALARM_Info();
  ITM_Info::default_instance_ = new ITM_Info();
  IKEY_Info::default_instance_ = new IKEY_Info();
  COMMON_Info::default_instance_ = new COMMON_Info();
  HVAC_Info::default_instance_ = new HVAC_Info();
  SBOX_info::default_instance_ = new SBOX_info();
  DVR_Info::default_instance_ = new DVR_Info();
  Basic_Info::default_instance_ = new Basic_Info();
  Vehicle_Info::default_instance_ = new Vehicle_Info();
  Vehicle_InfoRsp::default_instance_ = new Vehicle_InfoRsp();
  Location_Info::default_instance_ = new Location_Info();
  Location_InfoRsp::default_instance_ = new Location_InfoRsp();
  RemoteControlResultRsp::default_instance_ = new RemoteControlResultRsp();
  RemoteControlReq::default_instance_ = new RemoteControlReq();
  FlowCountRsp::default_instance_ = new FlowCountRsp();
  FlowCountLimitReq::default_instance_ = new FlowCountLimitReq();
  OtaUpgradeReq::default_instance_ = new OtaUpgradeReq();
  OtaUpgradeRsp::default_instance_ = new OtaUpgradeRsp();
  CancelOtaUpgradeRsp::default_instance_ = new CancelOtaUpgradeRsp();
  OtaUpgradeProgressReq::default_instance_ = new OtaUpgradeProgressReq();
  CertCom::default_instance_ = new CertCom();
  TCUCertApply_Req::default_instance_ = new TCUCertApply_Req();
  TCUCertApply_Rsp::default_instance_ = new TCUCertApply_Rsp();
  CertIssue_Req::default_instance_ = new CertIssue_Req();
  CertIssue_Rsp::default_instance_ = new CertIssue_Rsp();
  RSALoginReq::default_instance_ = new RSALoginReq();
  SendRSARsp::default_instance_ = new SendRSARsp();
  SendRC4Req::default_instance_ = new SendRC4Req();
  SendRC4Resp::default_instance_ = new SendRC4Resp();
  WakeUpDVRRsp::default_instance_ = new WakeUpDVRRsp();
  WakeUpDVRReq::default_instance_ = new WakeUpDVRReq();
  RmtDiagRsp::default_instance_ = new RmtDiagRsp();
  RmtDiagReq::default_instance_ = new RmtDiagReq();
  Fault_List_info::default_instance_ = new Fault_List_info();
  FourGExtendCmdRsp::default_instance_ = new FourGExtendCmdRsp();
  FourGExtendCmdReq::default_instance_ = new FourGExtendCmdReq();
  TCUExtendCmdReq::default_instance_ = new TCUExtendCmdReq();
  TCUExtendCmdRsp::default_instance_ = new TCUExtendCmdRsp();
  Net4GSwitchStatusReq::default_instance_ = new Net4GSwitchStatusReq();
  Net4GSwitchStatusRsp::default_instance_ = new Net4GSwitchStatusRsp();
  netGpsSwitchStatusReq::default_instance_ = new netGpsSwitchStatusReq();
  netGpsSwitchStatusRsp::default_instance_ = new netGpsSwitchStatusRsp();
  UpgradeInfo::default_instance_->InitAsDefaultInstance();
  LoginReq::default_instance_->InitAsDefaultInstance();
  LoginRsp::default_instance_->InitAsDefaultInstance();
  HeartbeatReq::default_instance_->InitAsDefaultInstance();
  HeartbeatRsp::default_instance_->InitAsDefaultInstance();
  SendRSAReq::default_instance_->InitAsDefaultInstance();
  SendRC4Rsp::default_instance_->InitAsDefaultInstance();
  SetParameterRsp::default_instance_->InitAsDefaultInstance();
  SetParameterReq::default_instance_->InitAsDefaultInstance();
  GetParameterRsp::default_instance_->InitAsDefaultInstance();
  GetParameterReq::default_instance_->InitAsDefaultInstance();
  ECM_Info::default_instance_->InitAsDefaultInstance();
  ABSVDC_Info::default_instance_->InitAsDefaultInstance();
  METER_Info::default_instance_->InitAsDefaultInstance();
  BCM_Info::default_instance_->InitAsDefaultInstance();
  ACU_Info::default_instance_->InitAsDefaultInstance();
  AT_Info::default_instance_->InitAsDefaultInstance();
  STRG_Info::default_instance_->InitAsDefaultInstance();
  EPS_Info::default_instance_->InitAsDefaultInstance();
  USM_Info::default_instance_->InitAsDefaultInstance();
  TPMS_Info::default_instance_->InitAsDefaultInstance();
  WIRE_Info::default_instance_->InitAsDefaultInstance();
  ECO_Info::default_instance_->InitAsDefaultInstance();
  ALARM_Info::default_instance_->InitAsDefaultInstance();
  ITM_Info::default_instance_->InitAsDefaultInstance();
  IKEY_Info::default_instance_->InitAsDefaultInstance();
  COMMON_Info::default_instance_->InitAsDefaultInstance();
  HVAC_Info::default_instance_->InitAsDefaultInstance();
  SBOX_info::default_instance_->InitAsDefaultInstance();
  DVR_Info::default_instance_->InitAsDefaultInstance();
  Basic_Info::default_instance_->InitAsDefaultInstance();
  Vehicle_Info::default_instance_->InitAsDefaultInstance();
  Vehicle_InfoRsp::default_instance_->InitAsDefaultInstance();
  Location_Info::default_instance_->InitAsDefaultInstance();
  Location_InfoRsp::default_instance_->InitAsDefaultInstance();
  RemoteControlResultRsp::default_instance_->InitAsDefaultInstance();
  RemoteControlReq::default_instance_->InitAsDefaultInstance();
  FlowCountRsp::default_instance_->InitAsDefaultInstance();
  FlowCountLimitReq::default_instance_->InitAsDefaultInstance();
  OtaUpgradeReq::default_instance_->InitAsDefaultInstance();
  OtaUpgradeRsp::default_instance_->InitAsDefaultInstance();
  CancelOtaUpgradeRsp::default_instance_->InitAsDefaultInstance();
  OtaUpgradeProgressReq::default_instance_->InitAsDefaultInstance();
  CertCom::default_instance_->InitAsDefaultInstance();
  TCUCertApply_Req::default_instance_->InitAsDefaultInstance();
  TCUCertApply_Rsp::default_instance_->InitAsDefaultInstance();
  CertIssue_Req::default_instance_->InitAsDefaultInstance();
  CertIssue_Rsp::default_instance_->InitAsDefaultInstance();
  RSALoginReq::default_instance_->InitAsDefaultInstance();
  SendRSARsp::default_instance_->InitAsDefaultInstance();
  SendRC4Req::default_instance_->InitAsDefaultInstance();
  SendRC4Resp::default_instance_->InitAsDefaultInstance();
  WakeUpDVRRsp::default_instance_->InitAsDefaultInstance();
  WakeUpDVRReq::default_instance_->InitAsDefaultInstance();
  RmtDiagRsp::default_instance_->InitAsDefaultInstance();
  RmtDiagReq::default_instance_->InitAsDefaultInstance();
  Fault_List_info::default_instance_->InitAsDefaultInstance();
  FourGExtendCmdRsp::default_instance_->InitAsDefaultInstance();
  FourGExtendCmdReq::default_instance_->InitAsDefaultInstance();
  TCUExtendCmdReq::default_instance_->InitAsDefaultInstance();
  TCUExtendCmdRsp::default_instance_->InitAsDefaultInstance();
  Net4GSwitchStatusReq::default_instance_->InitAsDefaultInstance();
  Net4GSwitchStatusRsp::default_instance_->InitAsDefaultInstance();
  netGpsSwitchStatusReq::default_instance_->InitAsDefaultInstance();
  netGpsSwitchStatusRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tbox_5fprotocol_5fmessage_2eproto {
  StaticDescriptorInitializer_tbox_5fprotocol_5fmessage_2eproto() {
    protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  }
} static_descriptor_initializer_tbox_5fprotocol_5fmessage_2eproto_;
const ::google::protobuf::EnumDescriptor* RspCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspCode_descriptor_;
}
bool RspCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UpgradeProgressCodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeProgressCodeType_descriptor_;
}
bool UpgradeProgressCodeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RmtDiagRspCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RmtDiagRspCode_descriptor_;
}
bool RmtDiagRspCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeInfo::kFiletypeFieldNumber;
const int UpgradeInfo::kFilepathFieldNumber;
const int UpgradeInfo::kVersionFieldNumber;
const int UpgradeInfo::kFilesizeFieldNumber;
const int UpgradeInfo::kMd5FieldNumber;
const int UpgradeInfo::kRc4FieldNumber;
const int UpgradeInfo::kSignMd5FieldNumber;
const int UpgradeInfo::kSha2FieldNumber;
const int UpgradeInfo::kAes128FieldNumber;
const int UpgradeInfo::kSignSha2FieldNumber;
const int UpgradeInfo::kPrefilesizeFieldNumber;
const int UpgradeInfo::kEncryptTypeFieldNumber;
#endif  // !_MSC_VER

UpgradeInfo::UpgradeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.UpgradeInfo)
}

void UpgradeInfo::InitAsDefaultInstance() {
}

UpgradeInfo::UpgradeInfo(const UpgradeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.UpgradeInfo)
}

void UpgradeInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filesize_ = 0u;
  md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rc4_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aes128_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_sha2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefilesize_ = 0u;
  encrypt_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeInfo::~UpgradeInfo() {
  // @@protoc_insertion_point(destructor:tbox.protocol.UpgradeInfo)
  SharedDtor();
}

void UpgradeInfo::SharedDtor() {
  if (filetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filetype_;
  }
  if (filepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filepath_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete md5_;
  }
  if (rc4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rc4_;
  }
  if (sign_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_md5_;
  }
  if (sha2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sha2_;
  }
  if (aes128_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete aes128_;
  }
  if (sign_sha2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_sha2_;
  }
  if (this != default_instance_) {
  }
}

void UpgradeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeInfo_descriptor_;
}

const UpgradeInfo& UpgradeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

UpgradeInfo* UpgradeInfo::default_instance_ = NULL;

UpgradeInfo* UpgradeInfo::New() const {
  return new UpgradeInfo;
}

void UpgradeInfo::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_filetype()) {
      if (filetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filetype_->clear();
      }
    }
    if (has_filepath()) {
      if (filepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filepath_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    filesize_ = 0u;
    if (has_md5()) {
      if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        md5_->clear();
      }
    }
    if (has_rc4()) {
      if (rc4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rc4_->clear();
      }
    }
    if (has_sign_md5()) {
      if (sign_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_md5_->clear();
      }
    }
    if (has_sha2()) {
      if (sha2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sha2_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_aes128()) {
      if (aes128_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        aes128_->clear();
      }
    }
    if (has_sign_sha2()) {
      if (sign_sha2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_sha2_->clear();
      }
    }
    prefilesize_ = 0u;
    encrypt_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpgradeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.UpgradeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string filetype = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filetype().data(), this->filetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filetype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_filepath;
        break;
      }

      // required string filepath = 2;
      case 2: {
        if (tag == 18) {
         parse_filepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filepath().data(), this->filepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // required string version = 3;
      case 3: {
        if (tag == 26) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_filesize;
        break;
      }

      // required uint32 filesize = 4;
      case 4: {
        if (tag == 32) {
         parse_filesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_md5;
        break;
      }

      // required bytes md5 = 5;
      case 5: {
        if (tag == 42) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_md5()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_rc4;
        break;
      }

      // optional string rc4 = 6;
      case 6: {
        if (tag == 50) {
         parse_rc4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rc4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rc4().data(), this->rc4().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rc4");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sign_md5;
        break;
      }

      // optional bytes sign_md5 = 7;
      case 7: {
        if (tag == 58) {
         parse_sign_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_md5()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sha2;
        break;
      }

      // optional bytes sha2 = 8;
      case 8: {
        if (tag == 66) {
         parse_sha2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_aes128;
        break;
      }

      // optional string aes128 = 9;
      case 9: {
        if (tag == 74) {
         parse_aes128:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aes128()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->aes128().data(), this->aes128().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "aes128");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_sign_sha2;
        break;
      }

      // optional bytes sign_sha2 = 10;
      case 10: {
        if (tag == 82) {
         parse_sign_sha2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_sha2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_prefilesize;
        break;
      }

      // optional uint32 prefilesize = 11;
      case 11: {
        if (tag == 88) {
         parse_prefilesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prefilesize_)));
          set_has_prefilesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_encrypt_type;
        break;
      }

      // optional uint32 encrypt_type = 12;
      case 12: {
        if (tag == 96) {
         parse_encrypt_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &encrypt_type_)));
          set_has_encrypt_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.UpgradeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.UpgradeInfo)
  return false;
#undef DO_
}

void UpgradeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.UpgradeInfo)
  // required string filetype = 1;
  if (has_filetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filetype().data(), this->filetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filetype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filetype(), output);
  }

  // required string filepath = 2;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filepath(), output);
  }

  // required string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  // required uint32 filesize = 4;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->filesize(), output);
  }

  // required bytes md5 = 5;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->md5(), output);
  }

  // optional string rc4 = 6;
  if (has_rc4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rc4().data(), this->rc4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rc4");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->rc4(), output);
  }

  // optional bytes sign_md5 = 7;
  if (has_sign_md5()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->sign_md5(), output);
  }

  // optional bytes sha2 = 8;
  if (has_sha2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->sha2(), output);
  }

  // optional string aes128 = 9;
  if (has_aes128()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aes128().data(), this->aes128().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "aes128");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->aes128(), output);
  }

  // optional bytes sign_sha2 = 10;
  if (has_sign_sha2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->sign_sha2(), output);
  }

  // optional uint32 prefilesize = 11;
  if (has_prefilesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->prefilesize(), output);
  }

  // optional uint32 encrypt_type = 12;
  if (has_encrypt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->encrypt_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.UpgradeInfo)
}

::google::protobuf::uint8* UpgradeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.UpgradeInfo)
  // required string filetype = 1;
  if (has_filetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filetype().data(), this->filetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filetype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filetype(), target);
  }

  // required string filepath = 2;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filepath(), target);
  }

  // required string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // required uint32 filesize = 4;
  if (has_filesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->filesize(), target);
  }

  // required bytes md5 = 5;
  if (has_md5()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->md5(), target);
  }

  // optional string rc4 = 6;
  if (has_rc4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rc4().data(), this->rc4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rc4");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->rc4(), target);
  }

  // optional bytes sign_md5 = 7;
  if (has_sign_md5()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->sign_md5(), target);
  }

  // optional bytes sha2 = 8;
  if (has_sha2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->sha2(), target);
  }

  // optional string aes128 = 9;
  if (has_aes128()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aes128().data(), this->aes128().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "aes128");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->aes128(), target);
  }

  // optional bytes sign_sha2 = 10;
  if (has_sign_sha2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->sign_sha2(), target);
  }

  // optional uint32 prefilesize = 11;
  if (has_prefilesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->prefilesize(), target);
  }

  // optional uint32 encrypt_type = 12;
  if (has_encrypt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->encrypt_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.UpgradeInfo)
  return target;
}

int UpgradeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string filetype = 1;
    if (has_filetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filetype());
    }

    // required string filepath = 2;
    if (has_filepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filepath());
    }

    // required string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // required uint32 filesize = 4;
    if (has_filesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filesize());
    }

    // required bytes md5 = 5;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->md5());
    }

    // optional string rc4 = 6;
    if (has_rc4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rc4());
    }

    // optional bytes sign_md5 = 7;
    if (has_sign_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_md5());
    }

    // optional bytes sha2 = 8;
    if (has_sha2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha2());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string aes128 = 9;
    if (has_aes128()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aes128());
    }

    // optional bytes sign_sha2 = 10;
    if (has_sign_sha2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_sha2());
    }

    // optional uint32 prefilesize = 11;
    if (has_prefilesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prefilesize());
    }

    // optional uint32 encrypt_type = 12;
    if (has_encrypt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->encrypt_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpgradeInfo::MergeFrom(const UpgradeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filetype()) {
      set_filetype(from.filetype());
    }
    if (from.has_filepath()) {
      set_filepath(from.filepath());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
    if (from.has_md5()) {
      set_md5(from.md5());
    }
    if (from.has_rc4()) {
      set_rc4(from.rc4());
    }
    if (from.has_sign_md5()) {
      set_sign_md5(from.sign_md5());
    }
    if (from.has_sha2()) {
      set_sha2(from.sha2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_aes128()) {
      set_aes128(from.aes128());
    }
    if (from.has_sign_sha2()) {
      set_sign_sha2(from.sign_sha2());
    }
    if (from.has_prefilesize()) {
      set_prefilesize(from.prefilesize());
    }
    if (from.has_encrypt_type()) {
      set_encrypt_type(from.encrypt_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpgradeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeInfo::CopyFrom(const UpgradeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void UpgradeInfo::Swap(UpgradeInfo* other) {
  if (other != this) {
    std::swap(filetype_, other->filetype_);
    std::swap(filepath_, other->filepath_);
    std::swap(version_, other->version_);
    std::swap(filesize_, other->filesize_);
    std::swap(md5_, other->md5_);
    std::swap(rc4_, other->rc4_);
    std::swap(sign_md5_, other->sign_md5_);
    std::swap(sha2_, other->sha2_);
    std::swap(aes128_, other->aes128_);
    std::swap(sign_sha2_, other->sign_sha2_);
    std::swap(prefilesize_, other->prefilesize_);
    std::swap(encrypt_type_, other->encrypt_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpgradeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeInfo_descriptor_;
  metadata.reflection = UpgradeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginReq::kTcuDeviceSnFieldNumber;
const int LoginReq::kDaDeviceSnFieldNumber;
const int LoginReq::kVinFieldNumber;
const int LoginReq::kIccidFieldNumber;
const int LoginReq::kImsiFieldNumber;
const int LoginReq::kImeiFieldNumber;
const int LoginReq::kSoftwareVersionFieldNumber;
const int LoginReq::kHardwareVersionFieldNumber;
const int LoginReq::kTimeStampFieldNumber;
const int LoginReq::kG4VersionFieldNumber;
const int LoginReq::kVehicleTypeFieldNumber;
const int LoginReq::kUpgradingFieldNumber;
const int LoginReq::kBcmRegStatusFieldNumber;
const int LoginReq::kOtaAlgrithomFieldNumber;
#endif  // !_MSC_VER

LoginReq::LoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.LoginReq)
}

void LoginReq::InitAsDefaultInstance() {
}

LoginReq::LoginReq(const LoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.LoginReq)
}

void LoginReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tcu_device_sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  da_device_sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iccid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imsi_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  software_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hardware_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_stamp_ = 0u;
  g4_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicle_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upgrading_ = false;
  bcm_reg_status_ = false;
  ota_algrithom_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginReq::~LoginReq() {
  // @@protoc_insertion_point(destructor:tbox.protocol.LoginReq)
  SharedDtor();
}

void LoginReq::SharedDtor() {
  if (tcu_device_sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tcu_device_sn_;
  }
  if (da_device_sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete da_device_sn_;
  }
  if (vin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vin_;
  }
  if (iccid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iccid_;
  }
  if (imsi_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imsi_;
  }
  if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imei_;
  }
  if (software_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete software_version_;
  }
  if (hardware_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hardware_version_;
  }
  if (g4_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete g4_version_;
  }
  if (vehicle_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vehicle_type_;
  }
  if (this != default_instance_) {
  }
}

void LoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginReq_descriptor_;
}

const LoginReq& LoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

LoginReq* LoginReq::default_instance_ = NULL;

LoginReq* LoginReq::New() const {
  return new LoginReq;
}

void LoginReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LoginReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    if (has_tcu_device_sn()) {
      if (tcu_device_sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tcu_device_sn_->clear();
      }
    }
    if (has_da_device_sn()) {
      if (da_device_sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        da_device_sn_->clear();
      }
    }
    if (has_vin()) {
      if (vin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vin_->clear();
      }
    }
    if (has_iccid()) {
      if (iccid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        iccid_->clear();
      }
    }
    if (has_imsi()) {
      if (imsi_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imsi_->clear();
      }
    }
    if (has_imei()) {
      if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imei_->clear();
      }
    }
    if (has_software_version()) {
      if (software_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        software_version_->clear();
      }
    }
    if (has_hardware_version()) {
      if (hardware_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hardware_version_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(time_stamp_, ota_algrithom_);
    if (has_g4_version()) {
      if (g4_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        g4_version_->clear();
      }
    }
    if (has_vehicle_type()) {
      if (vehicle_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vehicle_type_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.LoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tcu_device_sn = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tcu_device_sn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tcu_device_sn().data(), this->tcu_device_sn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tcu_device_sn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_da_device_sn;
        break;
      }

      // required string da_device_sn = 2;
      case 2: {
        if (tag == 18) {
         parse_da_device_sn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_da_device_sn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->da_device_sn().data(), this->da_device_sn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "da_device_sn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vin;
        break;
      }

      // required string vin = 3;
      case 3: {
        if (tag == 26) {
         parse_vin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vin().data(), this->vin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vin");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_iccid;
        break;
      }

      // required string iccid = 4;
      case 4: {
        if (tag == 34) {
         parse_iccid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iccid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iccid().data(), this->iccid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "iccid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_imsi;
        break;
      }

      // required string imsi = 5;
      case 5: {
        if (tag == 42) {
         parse_imsi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imsi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imsi().data(), this->imsi().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "imsi");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_imei;
        break;
      }

      // required string imei = 6;
      case 6: {
        if (tag == 50) {
         parse_imei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "imei");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_software_version;
        break;
      }

      // required string software_version = 7;
      case 7: {
        if (tag == 58) {
         parse_software_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_software_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->software_version().data(), this->software_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "software_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_hardware_version;
        break;
      }

      // required string hardware_version = 8;
      case 8: {
        if (tag == 66) {
         parse_hardware_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hardware_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hardware_version().data(), this->hardware_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hardware_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 9;
      case 9: {
        if (tag == 72) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_g4_version;
        break;
      }

      // optional string g4_version = 10;
      case 10: {
        if (tag == 82) {
         parse_g4_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_g4_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->g4_version().data(), this->g4_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "g4_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_vehicle_type;
        break;
      }

      // optional string vehicle_type = 11;
      case 11: {
        if (tag == 90) {
         parse_vehicle_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicle_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vehicle_type().data(), this->vehicle_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vehicle_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_upgrading;
        break;
      }

      // optional bool upgrading = 12;
      case 12: {
        if (tag == 96) {
         parse_upgrading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upgrading_)));
          set_has_upgrading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_bcm_reg_status;
        break;
      }

      // optional bool bcm_reg_status = 13;
      case 13: {
        if (tag == 104) {
         parse_bcm_reg_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bcm_reg_status_)));
          set_has_bcm_reg_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_ota_algrithom;
        break;
      }

      // optional uint32 ota_algrithom = 14;
      case 14: {
        if (tag == 112) {
         parse_ota_algrithom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ota_algrithom_)));
          set_has_ota_algrithom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.LoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.LoginReq)
  return false;
#undef DO_
}

void LoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.LoginReq)
  // required string tcu_device_sn = 1;
  if (has_tcu_device_sn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcu_device_sn().data(), this->tcu_device_sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tcu_device_sn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tcu_device_sn(), output);
  }

  // required string da_device_sn = 2;
  if (has_da_device_sn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->da_device_sn().data(), this->da_device_sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "da_device_sn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->da_device_sn(), output);
  }

  // required string vin = 3;
  if (has_vin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vin().data(), this->vin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->vin(), output);
  }

  // required string iccid = 4;
  if (has_iccid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iccid().data(), this->iccid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iccid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->iccid(), output);
  }

  // required string imsi = 5;
  if (has_imsi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imsi().data(), this->imsi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imsi");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->imsi(), output);
  }

  // required string imei = 6;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->imei(), output);
  }

  // required string software_version = 7;
  if (has_software_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->software_version().data(), this->software_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "software_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->software_version(), output);
  }

  // required string hardware_version = 8;
  if (has_hardware_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware_version().data(), this->hardware_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hardware_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->hardware_version(), output);
  }

  // required uint32 time_stamp = 9;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->time_stamp(), output);
  }

  // optional string g4_version = 10;
  if (has_g4_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->g4_version().data(), this->g4_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "g4_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->g4_version(), output);
  }

  // optional string vehicle_type = 11;
  if (has_vehicle_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vehicle_type().data(), this->vehicle_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vehicle_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->vehicle_type(), output);
  }

  // optional bool upgrading = 12;
  if (has_upgrading()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->upgrading(), output);
  }

  // optional bool bcm_reg_status = 13;
  if (has_bcm_reg_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->bcm_reg_status(), output);
  }

  // optional uint32 ota_algrithom = 14;
  if (has_ota_algrithom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->ota_algrithom(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.LoginReq)
}

::google::protobuf::uint8* LoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.LoginReq)
  // required string tcu_device_sn = 1;
  if (has_tcu_device_sn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcu_device_sn().data(), this->tcu_device_sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tcu_device_sn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tcu_device_sn(), target);
  }

  // required string da_device_sn = 2;
  if (has_da_device_sn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->da_device_sn().data(), this->da_device_sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "da_device_sn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->da_device_sn(), target);
  }

  // required string vin = 3;
  if (has_vin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vin().data(), this->vin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vin(), target);
  }

  // required string iccid = 4;
  if (has_iccid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iccid().data(), this->iccid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iccid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->iccid(), target);
  }

  // required string imsi = 5;
  if (has_imsi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imsi().data(), this->imsi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imsi");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->imsi(), target);
  }

  // required string imei = 6;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->imei(), target);
  }

  // required string software_version = 7;
  if (has_software_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->software_version().data(), this->software_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "software_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->software_version(), target);
  }

  // required string hardware_version = 8;
  if (has_hardware_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware_version().data(), this->hardware_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hardware_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->hardware_version(), target);
  }

  // required uint32 time_stamp = 9;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->time_stamp(), target);
  }

  // optional string g4_version = 10;
  if (has_g4_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->g4_version().data(), this->g4_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "g4_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->g4_version(), target);
  }

  // optional string vehicle_type = 11;
  if (has_vehicle_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vehicle_type().data(), this->vehicle_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vehicle_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->vehicle_type(), target);
  }

  // optional bool upgrading = 12;
  if (has_upgrading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->upgrading(), target);
  }

  // optional bool bcm_reg_status = 13;
  if (has_bcm_reg_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->bcm_reg_status(), target);
  }

  // optional uint32 ota_algrithom = 14;
  if (has_ota_algrithom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->ota_algrithom(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.LoginReq)
  return target;
}

int LoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string tcu_device_sn = 1;
    if (has_tcu_device_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tcu_device_sn());
    }

    // required string da_device_sn = 2;
    if (has_da_device_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->da_device_sn());
    }

    // required string vin = 3;
    if (has_vin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vin());
    }

    // required string iccid = 4;
    if (has_iccid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iccid());
    }

    // required string imsi = 5;
    if (has_imsi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imsi());
    }

    // required string imei = 6;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

    // required string software_version = 7;
    if (has_software_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->software_version());
    }

    // required string hardware_version = 8;
    if (has_hardware_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hardware_version());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 time_stamp = 9;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

    // optional string g4_version = 10;
    if (has_g4_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->g4_version());
    }

    // optional string vehicle_type = 11;
    if (has_vehicle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vehicle_type());
    }

    // optional bool upgrading = 12;
    if (has_upgrading()) {
      total_size += 1 + 1;
    }

    // optional bool bcm_reg_status = 13;
    if (has_bcm_reg_status()) {
      total_size += 1 + 1;
    }

    // optional uint32 ota_algrithom = 14;
    if (has_ota_algrithom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ota_algrithom());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginReq::MergeFrom(const LoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tcu_device_sn()) {
      set_tcu_device_sn(from.tcu_device_sn());
    }
    if (from.has_da_device_sn()) {
      set_da_device_sn(from.da_device_sn());
    }
    if (from.has_vin()) {
      set_vin(from.vin());
    }
    if (from.has_iccid()) {
      set_iccid(from.iccid());
    }
    if (from.has_imsi()) {
      set_imsi(from.imsi());
    }
    if (from.has_imei()) {
      set_imei(from.imei());
    }
    if (from.has_software_version()) {
      set_software_version(from.software_version());
    }
    if (from.has_hardware_version()) {
      set_hardware_version(from.hardware_version());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_g4_version()) {
      set_g4_version(from.g4_version());
    }
    if (from.has_vehicle_type()) {
      set_vehicle_type(from.vehicle_type());
    }
    if (from.has_upgrading()) {
      set_upgrading(from.upgrading());
    }
    if (from.has_bcm_reg_status()) {
      set_bcm_reg_status(from.bcm_reg_status());
    }
    if (from.has_ota_algrithom()) {
      set_ota_algrithom(from.ota_algrithom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReq::CopyFrom(const LoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void LoginReq::Swap(LoginReq* other) {
  if (other != this) {
    std::swap(tcu_device_sn_, other->tcu_device_sn_);
    std::swap(da_device_sn_, other->da_device_sn_);
    std::swap(vin_, other->vin_);
    std::swap(iccid_, other->iccid_);
    std::swap(imsi_, other->imsi_);
    std::swap(imei_, other->imei_);
    std::swap(software_version_, other->software_version_);
    std::swap(hardware_version_, other->hardware_version_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(g4_version_, other->g4_version_);
    std::swap(vehicle_type_, other->vehicle_type_);
    std::swap(upgrading_, other->upgrading_);
    std::swap(bcm_reg_status_, other->bcm_reg_status_);
    std::swap(ota_algrithom_, other->ota_algrithom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginReq_descriptor_;
  metadata.reflection = LoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRsp::kErrcodeFieldNumber;
const int LoginRsp::kTimeStampFieldNumber;
const int LoginRsp::kUpgradeinfoFieldNumber;
#endif  // !_MSC_VER

LoginRsp::LoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.LoginRsp)
}

void LoginRsp::InitAsDefaultInstance() {
}

LoginRsp::LoginRsp(const LoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.LoginRsp)
}

void LoginRsp::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  time_stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRsp::~LoginRsp() {
  // @@protoc_insertion_point(destructor:tbox.protocol.LoginRsp)
  SharedDtor();
}

void LoginRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRsp_descriptor_;
}

const LoginRsp& LoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

LoginRsp* LoginRsp::default_instance_ = NULL;

LoginRsp* LoginRsp::New() const {
  return new LoginRsp;
}

void LoginRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LoginRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(errcode_, time_stamp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  upgradeinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.LoginRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 2;
      case 2: {
        if (tag == 16) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_upgradeinfo;
        break;
      }

      // repeated .tbox.protocol.UpgradeInfo upgradeinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_upgradeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_upgradeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_upgradeinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.LoginRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.LoginRsp)
  return false;
#undef DO_
}

void LoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.LoginRsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_stamp(), output);
  }

  // repeated .tbox.protocol.UpgradeInfo upgradeinfo = 3;
  for (int i = 0; i < this->upgradeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->upgradeinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.LoginRsp)
}

::google::protobuf::uint8* LoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.LoginRsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_stamp(), target);
  }

  // repeated .tbox.protocol.UpgradeInfo upgradeinfo = 3;
  for (int i = 0; i < this->upgradeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->upgradeinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.LoginRsp)
  return target;
}

int LoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }

    // required uint32 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

  }
  // repeated .tbox.protocol.UpgradeInfo upgradeinfo = 3;
  total_size += 1 * this->upgradeinfo_size();
  for (int i = 0; i < this->upgradeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->upgradeinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRsp::MergeFrom(const LoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  upgradeinfo_.MergeFrom(from.upgradeinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRsp::CopyFrom(const LoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->upgradeinfo())) return false;
  return true;
}

void LoginRsp::Swap(LoginRsp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(time_stamp_, other->time_stamp_);
    upgradeinfo_.Swap(&other->upgradeinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRsp_descriptor_;
  metadata.reflection = LoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartbeatReq::kTimeStampFieldNumber;
#endif  // !_MSC_VER

HeartbeatReq::HeartbeatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.HeartbeatReq)
}

void HeartbeatReq::InitAsDefaultInstance() {
}

HeartbeatReq::HeartbeatReq(const HeartbeatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.HeartbeatReq)
}

void HeartbeatReq::SharedCtor() {
  _cached_size_ = 0;
  time_stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartbeatReq::~HeartbeatReq() {
  // @@protoc_insertion_point(destructor:tbox.protocol.HeartbeatReq)
  SharedDtor();
}

void HeartbeatReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartbeatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartbeatReq_descriptor_;
}

const HeartbeatReq& HeartbeatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

HeartbeatReq* HeartbeatReq::default_instance_ = NULL;

HeartbeatReq* HeartbeatReq::New() const {
  return new HeartbeatReq;
}

void HeartbeatReq::Clear() {
  time_stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartbeatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.HeartbeatReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time_stamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.HeartbeatReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.HeartbeatReq)
  return false;
#undef DO_
}

void HeartbeatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.HeartbeatReq)
  // required uint32 time_stamp = 1;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.HeartbeatReq)
}

::google::protobuf::uint8* HeartbeatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.HeartbeatReq)
  // required uint32 time_stamp = 1;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.HeartbeatReq)
  return target;
}

int HeartbeatReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time_stamp = 1;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartbeatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartbeatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartbeatReq::MergeFrom(const HeartbeatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartbeatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatReq::CopyFrom(const HeartbeatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HeartbeatReq::Swap(HeartbeatReq* other) {
  if (other != this) {
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartbeatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartbeatReq_descriptor_;
  metadata.reflection = HeartbeatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartbeatRsp::kErrcodeFieldNumber;
const int HeartbeatRsp::kTimeStampFieldNumber;
#endif  // !_MSC_VER

HeartbeatRsp::HeartbeatRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.HeartbeatRsp)
}

void HeartbeatRsp::InitAsDefaultInstance() {
}

HeartbeatRsp::HeartbeatRsp(const HeartbeatRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.HeartbeatRsp)
}

void HeartbeatRsp::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  time_stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartbeatRsp::~HeartbeatRsp() {
  // @@protoc_insertion_point(destructor:tbox.protocol.HeartbeatRsp)
  SharedDtor();
}

void HeartbeatRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartbeatRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartbeatRsp_descriptor_;
}

const HeartbeatRsp& HeartbeatRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

HeartbeatRsp* HeartbeatRsp::default_instance_ = NULL;

HeartbeatRsp* HeartbeatRsp::New() const {
  return new HeartbeatRsp;
}

void HeartbeatRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HeartbeatRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(errcode_, time_stamp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartbeatRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.HeartbeatRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 2;
      case 2: {
        if (tag == 16) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.HeartbeatRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.HeartbeatRsp)
  return false;
#undef DO_
}

void HeartbeatRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.HeartbeatRsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.HeartbeatRsp)
}

::google::protobuf::uint8* HeartbeatRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.HeartbeatRsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.HeartbeatRsp)
  return target;
}

int HeartbeatRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }

    // required uint32 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartbeatRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartbeatRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartbeatRsp::MergeFrom(const HeartbeatRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartbeatRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatRsp::CopyFrom(const HeartbeatRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HeartbeatRsp::Swap(HeartbeatRsp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartbeatRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartbeatRsp_descriptor_;
  metadata.reflection = HeartbeatRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendRSAReq::kNLenFieldNumber;
const int SendRSAReq::kNStringFieldNumber;
const int SendRSAReq::kE1LenFieldNumber;
const int SendRSAReq::kE1StringFieldNumber;
const int SendRSAReq::kTimeStampFieldNumber;
#endif  // !_MSC_VER

SendRSAReq::SendRSAReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.SendRSAReq)
}

void SendRSAReq::InitAsDefaultInstance() {
}

SendRSAReq::SendRSAReq(const SendRSAReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.SendRSAReq)
}

void SendRSAReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  n_len_ = 0u;
  n_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  e1_len_ = 0u;
  e1_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendRSAReq::~SendRSAReq() {
  // @@protoc_insertion_point(destructor:tbox.protocol.SendRSAReq)
  SharedDtor();
}

void SendRSAReq::SharedDtor() {
  if (n_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete n_string_;
  }
  if (e1_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete e1_string_;
  }
  if (this != default_instance_) {
  }
}

void SendRSAReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendRSAReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendRSAReq_descriptor_;
}

const SendRSAReq& SendRSAReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

SendRSAReq* SendRSAReq::default_instance_ = NULL;

SendRSAReq* SendRSAReq::New() const {
  return new SendRSAReq;
}

void SendRSAReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SendRSAReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(n_len_, e1_len_);
    if (has_n_string()) {
      if (n_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        n_string_->clear();
      }
    }
    if (has_e1_string()) {
      if (e1_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        e1_string_->clear();
      }
    }
    time_stamp_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendRSAReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.SendRSAReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 N_len = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_len_)));
          set_has_n_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_N_string;
        break;
      }

      // required string N_string = 2;
      case 2: {
        if (tag == 18) {
         parse_N_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_n_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->n_string().data(), this->n_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "n_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_E1_len;
        break;
      }

      // required uint32 E1_len = 3;
      case 3: {
        if (tag == 24) {
         parse_E1_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &e1_len_)));
          set_has_e1_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_E1_string;
        break;
      }

      // required string E1_string = 4;
      case 4: {
        if (tag == 34) {
         parse_E1_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_e1_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->e1_string().data(), this->e1_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "e1_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 5;
      case 5: {
        if (tag == 40) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.SendRSAReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.SendRSAReq)
  return false;
#undef DO_
}

void SendRSAReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.SendRSAReq)
  // required uint32 N_len = 1;
  if (has_n_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->n_len(), output);
  }

  // required string N_string = 2;
  if (has_n_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->n_string().data(), this->n_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "n_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->n_string(), output);
  }

  // required uint32 E1_len = 3;
  if (has_e1_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->e1_len(), output);
  }

  // required string E1_string = 4;
  if (has_e1_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->e1_string().data(), this->e1_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "e1_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->e1_string(), output);
  }

  // required uint32 time_stamp = 5;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.SendRSAReq)
}

::google::protobuf::uint8* SendRSAReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.SendRSAReq)
  // required uint32 N_len = 1;
  if (has_n_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->n_len(), target);
  }

  // required string N_string = 2;
  if (has_n_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->n_string().data(), this->n_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "n_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->n_string(), target);
  }

  // required uint32 E1_len = 3;
  if (has_e1_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->e1_len(), target);
  }

  // required string E1_string = 4;
  if (has_e1_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->e1_string().data(), this->e1_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "e1_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->e1_string(), target);
  }

  // required uint32 time_stamp = 5;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.SendRSAReq)
  return target;
}

int SendRSAReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 N_len = 1;
    if (has_n_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_len());
    }

    // required string N_string = 2;
    if (has_n_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->n_string());
    }

    // required uint32 E1_len = 3;
    if (has_e1_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->e1_len());
    }

    // required string E1_string = 4;
    if (has_e1_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->e1_string());
    }

    // required uint32 time_stamp = 5;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendRSAReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendRSAReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendRSAReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendRSAReq::MergeFrom(const SendRSAReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_n_len()) {
      set_n_len(from.n_len());
    }
    if (from.has_n_string()) {
      set_n_string(from.n_string());
    }
    if (from.has_e1_len()) {
      set_e1_len(from.e1_len());
    }
    if (from.has_e1_string()) {
      set_e1_string(from.e1_string());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendRSAReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendRSAReq::CopyFrom(const SendRSAReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendRSAReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SendRSAReq::Swap(SendRSAReq* other) {
  if (other != this) {
    std::swap(n_len_, other->n_len_);
    std::swap(n_string_, other->n_string_);
    std::swap(e1_len_, other->e1_len_);
    std::swap(e1_string_, other->e1_string_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendRSAReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendRSAReq_descriptor_;
  metadata.reflection = SendRSAReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendRC4Rsp::kErrcodeFieldNumber;
const int SendRC4Rsp::kSerialNumberFieldNumber;
const int SendRC4Rsp::kTimeStampFieldNumber;
#endif  // !_MSC_VER

SendRC4Rsp::SendRC4Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.SendRC4Rsp)
}

void SendRC4Rsp::InitAsDefaultInstance() {
}

SendRC4Rsp::SendRC4Rsp(const SendRC4Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.SendRC4Rsp)
}

void SendRC4Rsp::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  serial_number_ = 0u;
  time_stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendRC4Rsp::~SendRC4Rsp() {
  // @@protoc_insertion_point(destructor:tbox.protocol.SendRC4Rsp)
  SharedDtor();
}

void SendRC4Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendRC4Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendRC4Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendRC4Rsp_descriptor_;
}

const SendRC4Rsp& SendRC4Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

SendRC4Rsp* SendRC4Rsp::default_instance_ = NULL;

SendRC4Rsp* SendRC4Rsp::New() const {
  return new SendRC4Rsp;
}

void SendRC4Rsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SendRC4Rsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(errcode_, time_stamp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendRC4Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.SendRC4Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serial_number;
        break;
      }

      // required uint32 serial_number = 2;
      case 2: {
        if (tag == 16) {
         parse_serial_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_number_)));
          set_has_serial_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 3;
      case 3: {
        if (tag == 24) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.SendRC4Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.SendRC4Rsp)
  return false;
#undef DO_
}

void SendRC4Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.SendRC4Rsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }

  // required uint32 serial_number = 2;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serial_number(), output);
  }

  // required uint32 time_stamp = 3;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.SendRC4Rsp)
}

::google::protobuf::uint8* SendRC4Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.SendRC4Rsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }

  // required uint32 serial_number = 2;
  if (has_serial_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serial_number(), target);
  }

  // required uint32 time_stamp = 3;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.SendRC4Rsp)
  return target;
}

int SendRC4Rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }

    // required uint32 serial_number = 2;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial_number());
    }

    // required uint32 time_stamp = 3;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendRC4Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendRC4Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendRC4Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendRC4Rsp::MergeFrom(const SendRC4Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_serial_number()) {
      set_serial_number(from.serial_number());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendRC4Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendRC4Rsp::CopyFrom(const SendRC4Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendRC4Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SendRC4Rsp::Swap(SendRC4Rsp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(serial_number_, other->serial_number_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendRC4Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendRC4Rsp_descriptor_;
  metadata.reflection = SendRC4Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetParameterRsp::kErrcodeFieldNumber;
const int SetParameterRsp::kTimeStampFieldNumber;
#endif  // !_MSC_VER

SetParameterRsp::SetParameterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.SetParameterRsp)
}

void SetParameterRsp::InitAsDefaultInstance() {
}

SetParameterRsp::SetParameterRsp(const SetParameterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.SetParameterRsp)
}

void SetParameterRsp::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  time_stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetParameterRsp::~SetParameterRsp() {
  // @@protoc_insertion_point(destructor:tbox.protocol.SetParameterRsp)
  SharedDtor();
}

void SetParameterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetParameterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetParameterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetParameterRsp_descriptor_;
}

const SetParameterRsp& SetParameterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

SetParameterRsp* SetParameterRsp::default_instance_ = NULL;

SetParameterRsp* SetParameterRsp::New() const {
  return new SetParameterRsp;
}

void SetParameterRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetParameterRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(errcode_, time_stamp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetParameterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.SetParameterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 2;
      case 2: {
        if (tag == 16) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.SetParameterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.SetParameterRsp)
  return false;
#undef DO_
}

void SetParameterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.SetParameterRsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.SetParameterRsp)
}

::google::protobuf::uint8* SetParameterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.SetParameterRsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.SetParameterRsp)
  return target;
}

int SetParameterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }

    // required uint32 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetParameterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetParameterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetParameterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetParameterRsp::MergeFrom(const SetParameterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetParameterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetParameterRsp::CopyFrom(const SetParameterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetParameterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SetParameterRsp::Swap(SetParameterRsp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetParameterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetParameterRsp_descriptor_;
  metadata.reflection = SetParameterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetParameterReq::kLocalStorageCycleFieldNumber;
const int SetParameterReq::kUploadDataCycleNormalFieldNumber;
const int SetParameterReq::kUploadGPSCycleNormalFieldNumber;
const int SetParameterReq::kUploadDataCycleAlarmFieldNumber;
const int SetParameterReq::kUploadGPSCycleAlarmFieldNumber;
const int SetParameterReq::kHeartbeatCycleFieldNumber;
const int SetParameterReq::kServerResponseTimeoutFieldNumber;
const int SetParameterReq::kBoxResponseTimeoutFieldNumber;
const int SetParameterReq::kFlowControlSwitchFieldNumber;
const int SetParameterReq::kGPSconversionFieldNumber;
#endif  // !_MSC_VER

SetParameterReq::SetParameterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.SetParameterReq)
}

void SetParameterReq::InitAsDefaultInstance() {
}

SetParameterReq::SetParameterReq(const SetParameterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.SetParameterReq)
}

void SetParameterReq::SharedCtor() {
  _cached_size_ = 0;
  local_storage_cycle_ = 0u;
  upload_data_cycle_normal_ = 0u;
  upload_gps_cycle_normal_ = 0u;
  upload_data_cycle_alarm_ = 0u;
  upload_gps_cycle_alarm_ = 0u;
  heartbeat_cycle_ = 0u;
  server_response_timeout_ = 0u;
  box_response_timeout_ = 0u;
  flowcontrolswitch_ = false;
  gpsconversion_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetParameterReq::~SetParameterReq() {
  // @@protoc_insertion_point(destructor:tbox.protocol.SetParameterReq)
  SharedDtor();
}

void SetParameterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetParameterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetParameterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetParameterReq_descriptor_;
}

const SetParameterReq& SetParameterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

SetParameterReq* SetParameterReq::default_instance_ = NULL;

SetParameterReq* SetParameterReq::New() const {
  return new SetParameterReq;
}

void SetParameterReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetParameterReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(local_storage_cycle_, box_response_timeout_);
  }
  ZR_(flowcontrolswitch_, gpsconversion_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetParameterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.SetParameterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 local_storage_cycle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_storage_cycle_)));
          set_has_local_storage_cycle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_upload_data_cycle_normal;
        break;
      }

      // required uint32 upload_data_cycle_normal = 2;
      case 2: {
        if (tag == 16) {
         parse_upload_data_cycle_normal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upload_data_cycle_normal_)));
          set_has_upload_data_cycle_normal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_upload_GPS_cycle_normal;
        break;
      }

      // required uint32 upload_GPS_cycle_normal = 3;
      case 3: {
        if (tag == 24) {
         parse_upload_GPS_cycle_normal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upload_gps_cycle_normal_)));
          set_has_upload_gps_cycle_normal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_upload_data_cycle_alarm;
        break;
      }

      // required uint32 upload_data_cycle_alarm = 4;
      case 4: {
        if (tag == 32) {
         parse_upload_data_cycle_alarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upload_data_cycle_alarm_)));
          set_has_upload_data_cycle_alarm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_upload_GPS_cycle_alarm;
        break;
      }

      // required uint32 upload_GPS_cycle_alarm = 5;
      case 5: {
        if (tag == 40) {
         parse_upload_GPS_cycle_alarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upload_gps_cycle_alarm_)));
          set_has_upload_gps_cycle_alarm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_heartbeat_cycle;
        break;
      }

      // optional uint32 heartbeat_cycle = 6;
      case 6: {
        if (tag == 48) {
         parse_heartbeat_cycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heartbeat_cycle_)));
          set_has_heartbeat_cycle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_server_response_timeout;
        break;
      }

      // optional uint32 server_response_timeout = 7;
      case 7: {
        if (tag == 56) {
         parse_server_response_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_response_timeout_)));
          set_has_server_response_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_box_response_timeout;
        break;
      }

      // optional uint32 box_response_timeout = 8;
      case 8: {
        if (tag == 64) {
         parse_box_response_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &box_response_timeout_)));
          set_has_box_response_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_FlowControlSwitch;
        break;
      }

      // optional bool FlowControlSwitch = 9;
      case 9: {
        if (tag == 72) {
         parse_FlowControlSwitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flowcontrolswitch_)));
          set_has_flowcontrolswitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_GPSconversion;
        break;
      }

      // optional uint32 GPSconversion = 10;
      case 10: {
        if (tag == 80) {
         parse_GPSconversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpsconversion_)));
          set_has_gpsconversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.SetParameterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.SetParameterReq)
  return false;
#undef DO_
}

void SetParameterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.SetParameterReq)
  // required uint32 local_storage_cycle = 1;
  if (has_local_storage_cycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->local_storage_cycle(), output);
  }

  // required uint32 upload_data_cycle_normal = 2;
  if (has_upload_data_cycle_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->upload_data_cycle_normal(), output);
  }

  // required uint32 upload_GPS_cycle_normal = 3;
  if (has_upload_gps_cycle_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->upload_gps_cycle_normal(), output);
  }

  // required uint32 upload_data_cycle_alarm = 4;
  if (has_upload_data_cycle_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->upload_data_cycle_alarm(), output);
  }

  // required uint32 upload_GPS_cycle_alarm = 5;
  if (has_upload_gps_cycle_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->upload_gps_cycle_alarm(), output);
  }

  // optional uint32 heartbeat_cycle = 6;
  if (has_heartbeat_cycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->heartbeat_cycle(), output);
  }

  // optional uint32 server_response_timeout = 7;
  if (has_server_response_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->server_response_timeout(), output);
  }

  // optional uint32 box_response_timeout = 8;
  if (has_box_response_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->box_response_timeout(), output);
  }

  // optional bool FlowControlSwitch = 9;
  if (has_flowcontrolswitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->flowcontrolswitch(), output);
  }

  // optional uint32 GPSconversion = 10;
  if (has_gpsconversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gpsconversion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.SetParameterReq)
}

::google::protobuf::uint8* SetParameterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.SetParameterReq)
  // required uint32 local_storage_cycle = 1;
  if (has_local_storage_cycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->local_storage_cycle(), target);
  }

  // required uint32 upload_data_cycle_normal = 2;
  if (has_upload_data_cycle_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->upload_data_cycle_normal(), target);
  }

  // required uint32 upload_GPS_cycle_normal = 3;
  if (has_upload_gps_cycle_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->upload_gps_cycle_normal(), target);
  }

  // required uint32 upload_data_cycle_alarm = 4;
  if (has_upload_data_cycle_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->upload_data_cycle_alarm(), target);
  }

  // required uint32 upload_GPS_cycle_alarm = 5;
  if (has_upload_gps_cycle_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->upload_gps_cycle_alarm(), target);
  }

  // optional uint32 heartbeat_cycle = 6;
  if (has_heartbeat_cycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->heartbeat_cycle(), target);
  }

  // optional uint32 server_response_timeout = 7;
  if (has_server_response_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->server_response_timeout(), target);
  }

  // optional uint32 box_response_timeout = 8;
  if (has_box_response_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->box_response_timeout(), target);
  }

  // optional bool FlowControlSwitch = 9;
  if (has_flowcontrolswitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->flowcontrolswitch(), target);
  }

  // optional uint32 GPSconversion = 10;
  if (has_gpsconversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gpsconversion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.SetParameterReq)
  return target;
}

int SetParameterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 local_storage_cycle = 1;
    if (has_local_storage_cycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_storage_cycle());
    }

    // required uint32 upload_data_cycle_normal = 2;
    if (has_upload_data_cycle_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upload_data_cycle_normal());
    }

    // required uint32 upload_GPS_cycle_normal = 3;
    if (has_upload_gps_cycle_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upload_gps_cycle_normal());
    }

    // required uint32 upload_data_cycle_alarm = 4;
    if (has_upload_data_cycle_alarm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upload_data_cycle_alarm());
    }

    // required uint32 upload_GPS_cycle_alarm = 5;
    if (has_upload_gps_cycle_alarm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upload_gps_cycle_alarm());
    }

    // optional uint32 heartbeat_cycle = 6;
    if (has_heartbeat_cycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heartbeat_cycle());
    }

    // optional uint32 server_response_timeout = 7;
    if (has_server_response_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_response_timeout());
    }

    // optional uint32 box_response_timeout = 8;
    if (has_box_response_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->box_response_timeout());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool FlowControlSwitch = 9;
    if (has_flowcontrolswitch()) {
      total_size += 1 + 1;
    }

    // optional uint32 GPSconversion = 10;
    if (has_gpsconversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gpsconversion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetParameterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetParameterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetParameterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetParameterReq::MergeFrom(const SetParameterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_storage_cycle()) {
      set_local_storage_cycle(from.local_storage_cycle());
    }
    if (from.has_upload_data_cycle_normal()) {
      set_upload_data_cycle_normal(from.upload_data_cycle_normal());
    }
    if (from.has_upload_gps_cycle_normal()) {
      set_upload_gps_cycle_normal(from.upload_gps_cycle_normal());
    }
    if (from.has_upload_data_cycle_alarm()) {
      set_upload_data_cycle_alarm(from.upload_data_cycle_alarm());
    }
    if (from.has_upload_gps_cycle_alarm()) {
      set_upload_gps_cycle_alarm(from.upload_gps_cycle_alarm());
    }
    if (from.has_heartbeat_cycle()) {
      set_heartbeat_cycle(from.heartbeat_cycle());
    }
    if (from.has_server_response_timeout()) {
      set_server_response_timeout(from.server_response_timeout());
    }
    if (from.has_box_response_timeout()) {
      set_box_response_timeout(from.box_response_timeout());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_flowcontrolswitch()) {
      set_flowcontrolswitch(from.flowcontrolswitch());
    }
    if (from.has_gpsconversion()) {
      set_gpsconversion(from.gpsconversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetParameterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetParameterReq::CopyFrom(const SetParameterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetParameterReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SetParameterReq::Swap(SetParameterReq* other) {
  if (other != this) {
    std::swap(local_storage_cycle_, other->local_storage_cycle_);
    std::swap(upload_data_cycle_normal_, other->upload_data_cycle_normal_);
    std::swap(upload_gps_cycle_normal_, other->upload_gps_cycle_normal_);
    std::swap(upload_data_cycle_alarm_, other->upload_data_cycle_alarm_);
    std::swap(upload_gps_cycle_alarm_, other->upload_gps_cycle_alarm_);
    std::swap(heartbeat_cycle_, other->heartbeat_cycle_);
    std::swap(server_response_timeout_, other->server_response_timeout_);
    std::swap(box_response_timeout_, other->box_response_timeout_);
    std::swap(flowcontrolswitch_, other->flowcontrolswitch_);
    std::swap(gpsconversion_, other->gpsconversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetParameterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetParameterReq_descriptor_;
  metadata.reflection = SetParameterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetParameterRsp::kErrcodeFieldNumber;
const int GetParameterRsp::kLocalStorageCycleFieldNumber;
const int GetParameterRsp::kUploadDataCycleNormalFieldNumber;
const int GetParameterRsp::kUploadGPSCycleNormalFieldNumber;
const int GetParameterRsp::kUploadDataCycleAlarmFieldNumber;
const int GetParameterRsp::kUploadGPSCycleAlarmFieldNumber;
const int GetParameterRsp::kHeartbeatCycleFieldNumber;
const int GetParameterRsp::kServerResponseTimeoutFieldNumber;
const int GetParameterRsp::kBoxResponseTimeoutFieldNumber;
const int GetParameterRsp::kFirmwareVersionFieldNumber;
const int GetParameterRsp::kHardwareVersionFieldNumber;
const int GetParameterRsp::kTimeStampFieldNumber;
#endif  // !_MSC_VER

GetParameterRsp::GetParameterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.GetParameterRsp)
}

void GetParameterRsp::InitAsDefaultInstance() {
}

GetParameterRsp::GetParameterRsp(const GetParameterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.GetParameterRsp)
}

void GetParameterRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = 0u;
  local_storage_cycle_ = 0u;
  upload_data_cycle_normal_ = 0u;
  upload_gps_cycle_normal_ = 0u;
  upload_data_cycle_alarm_ = 0u;
  upload_gps_cycle_alarm_ = 0u;
  heartbeat_cycle_ = 0u;
  server_response_timeout_ = 0u;
  box_response_timeout_ = 0u;
  firmware_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hardware_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetParameterRsp::~GetParameterRsp() {
  // @@protoc_insertion_point(destructor:tbox.protocol.GetParameterRsp)
  SharedDtor();
}

void GetParameterRsp::SharedDtor() {
  if (firmware_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete firmware_version_;
  }
  if (hardware_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hardware_version_;
  }
  if (this != default_instance_) {
  }
}

void GetParameterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetParameterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetParameterRsp_descriptor_;
}

const GetParameterRsp& GetParameterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

GetParameterRsp* GetParameterRsp::default_instance_ = NULL;

GetParameterRsp* GetParameterRsp::New() const {
  return new GetParameterRsp;
}

void GetParameterRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetParameterRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(errcode_, server_response_timeout_);
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(box_response_timeout_, time_stamp_);
    if (has_firmware_version()) {
      if (firmware_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        firmware_version_->clear();
      }
    }
    if (has_hardware_version()) {
      if (hardware_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hardware_version_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetParameterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.GetParameterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_local_storage_cycle;
        break;
      }

      // required uint32 local_storage_cycle = 2;
      case 2: {
        if (tag == 16) {
         parse_local_storage_cycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_storage_cycle_)));
          set_has_local_storage_cycle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_upload_data_cycle_normal;
        break;
      }

      // required uint32 upload_data_cycle_normal = 3;
      case 3: {
        if (tag == 24) {
         parse_upload_data_cycle_normal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upload_data_cycle_normal_)));
          set_has_upload_data_cycle_normal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_upload_GPS_cycle_normal;
        break;
      }

      // required uint32 upload_GPS_cycle_normal = 4;
      case 4: {
        if (tag == 32) {
         parse_upload_GPS_cycle_normal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upload_gps_cycle_normal_)));
          set_has_upload_gps_cycle_normal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_upload_data_cycle_alarm;
        break;
      }

      // required uint32 upload_data_cycle_alarm = 5;
      case 5: {
        if (tag == 40) {
         parse_upload_data_cycle_alarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upload_data_cycle_alarm_)));
          set_has_upload_data_cycle_alarm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_upload_GPS_cycle_alarm;
        break;
      }

      // required uint32 upload_GPS_cycle_alarm = 6;
      case 6: {
        if (tag == 48) {
         parse_upload_GPS_cycle_alarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upload_gps_cycle_alarm_)));
          set_has_upload_gps_cycle_alarm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_heartbeat_cycle;
        break;
      }

      // required uint32 heartbeat_cycle = 7;
      case 7: {
        if (tag == 56) {
         parse_heartbeat_cycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heartbeat_cycle_)));
          set_has_heartbeat_cycle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_server_response_timeout;
        break;
      }

      // required uint32 server_response_timeout = 8;
      case 8: {
        if (tag == 64) {
         parse_server_response_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_response_timeout_)));
          set_has_server_response_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_box_response_timeout;
        break;
      }

      // required uint32 box_response_timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_box_response_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &box_response_timeout_)));
          set_has_box_response_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_firmware_version;
        break;
      }

      // required string firmware_version = 10;
      case 10: {
        if (tag == 82) {
         parse_firmware_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firmware_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->firmware_version().data(), this->firmware_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "firmware_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_hardware_version;
        break;
      }

      // required string hardware_version = 11;
      case 11: {
        if (tag == 90) {
         parse_hardware_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hardware_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hardware_version().data(), this->hardware_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hardware_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 12;
      case 12: {
        if (tag == 96) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.GetParameterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.GetParameterRsp)
  return false;
#undef DO_
}

void GetParameterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.GetParameterRsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }

  // required uint32 local_storage_cycle = 2;
  if (has_local_storage_cycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->local_storage_cycle(), output);
  }

  // required uint32 upload_data_cycle_normal = 3;
  if (has_upload_data_cycle_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->upload_data_cycle_normal(), output);
  }

  // required uint32 upload_GPS_cycle_normal = 4;
  if (has_upload_gps_cycle_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->upload_gps_cycle_normal(), output);
  }

  // required uint32 upload_data_cycle_alarm = 5;
  if (has_upload_data_cycle_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->upload_data_cycle_alarm(), output);
  }

  // required uint32 upload_GPS_cycle_alarm = 6;
  if (has_upload_gps_cycle_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->upload_gps_cycle_alarm(), output);
  }

  // required uint32 heartbeat_cycle = 7;
  if (has_heartbeat_cycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->heartbeat_cycle(), output);
  }

  // required uint32 server_response_timeout = 8;
  if (has_server_response_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->server_response_timeout(), output);
  }

  // required uint32 box_response_timeout = 9;
  if (has_box_response_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->box_response_timeout(), output);
  }

  // required string firmware_version = 10;
  if (has_firmware_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firmware_version().data(), this->firmware_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firmware_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->firmware_version(), output);
  }

  // required string hardware_version = 11;
  if (has_hardware_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware_version().data(), this->hardware_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hardware_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->hardware_version(), output);
  }

  // required uint32 time_stamp = 12;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.GetParameterRsp)
}

::google::protobuf::uint8* GetParameterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.GetParameterRsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }

  // required uint32 local_storage_cycle = 2;
  if (has_local_storage_cycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->local_storage_cycle(), target);
  }

  // required uint32 upload_data_cycle_normal = 3;
  if (has_upload_data_cycle_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->upload_data_cycle_normal(), target);
  }

  // required uint32 upload_GPS_cycle_normal = 4;
  if (has_upload_gps_cycle_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->upload_gps_cycle_normal(), target);
  }

  // required uint32 upload_data_cycle_alarm = 5;
  if (has_upload_data_cycle_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->upload_data_cycle_alarm(), target);
  }

  // required uint32 upload_GPS_cycle_alarm = 6;
  if (has_upload_gps_cycle_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->upload_gps_cycle_alarm(), target);
  }

  // required uint32 heartbeat_cycle = 7;
  if (has_heartbeat_cycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->heartbeat_cycle(), target);
  }

  // required uint32 server_response_timeout = 8;
  if (has_server_response_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->server_response_timeout(), target);
  }

  // required uint32 box_response_timeout = 9;
  if (has_box_response_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->box_response_timeout(), target);
  }

  // required string firmware_version = 10;
  if (has_firmware_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firmware_version().data(), this->firmware_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firmware_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->firmware_version(), target);
  }

  // required string hardware_version = 11;
  if (has_hardware_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware_version().data(), this->hardware_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hardware_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->hardware_version(), target);
  }

  // required uint32 time_stamp = 12;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.GetParameterRsp)
  return target;
}

int GetParameterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }

    // required uint32 local_storage_cycle = 2;
    if (has_local_storage_cycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_storage_cycle());
    }

    // required uint32 upload_data_cycle_normal = 3;
    if (has_upload_data_cycle_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upload_data_cycle_normal());
    }

    // required uint32 upload_GPS_cycle_normal = 4;
    if (has_upload_gps_cycle_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upload_gps_cycle_normal());
    }

    // required uint32 upload_data_cycle_alarm = 5;
    if (has_upload_data_cycle_alarm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upload_data_cycle_alarm());
    }

    // required uint32 upload_GPS_cycle_alarm = 6;
    if (has_upload_gps_cycle_alarm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upload_gps_cycle_alarm());
    }

    // required uint32 heartbeat_cycle = 7;
    if (has_heartbeat_cycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heartbeat_cycle());
    }

    // required uint32 server_response_timeout = 8;
    if (has_server_response_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_response_timeout());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 box_response_timeout = 9;
    if (has_box_response_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->box_response_timeout());
    }

    // required string firmware_version = 10;
    if (has_firmware_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firmware_version());
    }

    // required string hardware_version = 11;
    if (has_hardware_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hardware_version());
    }

    // required uint32 time_stamp = 12;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetParameterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetParameterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetParameterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetParameterRsp::MergeFrom(const GetParameterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_local_storage_cycle()) {
      set_local_storage_cycle(from.local_storage_cycle());
    }
    if (from.has_upload_data_cycle_normal()) {
      set_upload_data_cycle_normal(from.upload_data_cycle_normal());
    }
    if (from.has_upload_gps_cycle_normal()) {
      set_upload_gps_cycle_normal(from.upload_gps_cycle_normal());
    }
    if (from.has_upload_data_cycle_alarm()) {
      set_upload_data_cycle_alarm(from.upload_data_cycle_alarm());
    }
    if (from.has_upload_gps_cycle_alarm()) {
      set_upload_gps_cycle_alarm(from.upload_gps_cycle_alarm());
    }
    if (from.has_heartbeat_cycle()) {
      set_heartbeat_cycle(from.heartbeat_cycle());
    }
    if (from.has_server_response_timeout()) {
      set_server_response_timeout(from.server_response_timeout());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_box_response_timeout()) {
      set_box_response_timeout(from.box_response_timeout());
    }
    if (from.has_firmware_version()) {
      set_firmware_version(from.firmware_version());
    }
    if (from.has_hardware_version()) {
      set_hardware_version(from.hardware_version());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetParameterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetParameterRsp::CopyFrom(const GetParameterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetParameterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void GetParameterRsp::Swap(GetParameterRsp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(local_storage_cycle_, other->local_storage_cycle_);
    std::swap(upload_data_cycle_normal_, other->upload_data_cycle_normal_);
    std::swap(upload_gps_cycle_normal_, other->upload_gps_cycle_normal_);
    std::swap(upload_data_cycle_alarm_, other->upload_data_cycle_alarm_);
    std::swap(upload_gps_cycle_alarm_, other->upload_gps_cycle_alarm_);
    std::swap(heartbeat_cycle_, other->heartbeat_cycle_);
    std::swap(server_response_timeout_, other->server_response_timeout_);
    std::swap(box_response_timeout_, other->box_response_timeout_);
    std::swap(firmware_version_, other->firmware_version_);
    std::swap(hardware_version_, other->hardware_version_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetParameterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetParameterRsp_descriptor_;
  metadata.reflection = GetParameterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetParameterReq::kTimeStampFieldNumber;
#endif  // !_MSC_VER

GetParameterReq::GetParameterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.GetParameterReq)
}

void GetParameterReq::InitAsDefaultInstance() {
}

GetParameterReq::GetParameterReq(const GetParameterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.GetParameterReq)
}

void GetParameterReq::SharedCtor() {
  _cached_size_ = 0;
  time_stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetParameterReq::~GetParameterReq() {
  // @@protoc_insertion_point(destructor:tbox.protocol.GetParameterReq)
  SharedDtor();
}

void GetParameterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetParameterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetParameterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetParameterReq_descriptor_;
}

const GetParameterReq& GetParameterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

GetParameterReq* GetParameterReq::default_instance_ = NULL;

GetParameterReq* GetParameterReq::New() const {
  return new GetParameterReq;
}

void GetParameterReq::Clear() {
  time_stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetParameterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.GetParameterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time_stamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.GetParameterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.GetParameterReq)
  return false;
#undef DO_
}

void GetParameterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.GetParameterReq)
  // required uint32 time_stamp = 1;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.GetParameterReq)
}

::google::protobuf::uint8* GetParameterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.GetParameterReq)
  // required uint32 time_stamp = 1;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.GetParameterReq)
  return target;
}

int GetParameterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time_stamp = 1;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetParameterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetParameterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetParameterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetParameterReq::MergeFrom(const GetParameterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetParameterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetParameterReq::CopyFrom(const GetParameterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetParameterReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetParameterReq::Swap(GetParameterReq* other) {
  if (other != this) {
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetParameterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetParameterReq_descriptor_;
  metadata.reflection = GetParameterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ECM_Info::kEngineRPMFieldNumber;
const int ECM_Info::kRawSensorFieldNumber;
const int ECM_Info::kClutchSwitchFieldNumber;
const int ECM_Info::kEngineStatusFieldNumber;
const int ECM_Info::kEngineCoolantTempFieldNumber;
const int ECM_Info::kFuelConsumptionFieldNumber;
const int ECM_Info::kDiagMuxOnFieldNumber;
const int ECM_Info::kEconomyModeLampFieldNumber;
const int ECM_Info::kCO2ContentFieldNumber;
const int ECM_Info::kCOContentFieldNumber;
const int ECM_Info::kHCContentFieldNumber;
const int ECM_Info::kO2ContentFieldNumber;
const int ECM_Info::kACHighPressureSensorFieldNumber;
const int ECM_Info::kCruiseControlStatusFieldNumber;
const int ECM_Info::kEngineThrottlePositionFieldNumber;
const int ECM_Info::kMeanEffectiveTorqueFieldNumber;
const int ECM_Info::kFuelConsumptionFineFieldNumber;
const int ECM_Info::kSOFV1FieldNumber;
const int ECM_Info::kSOFV1StateFieldNumber;
const int ECM_Info::kVbminFieldNumber;
#endif  // !_MSC_VER

ECM_Info::ECM_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.ECM_Info)
}

void ECM_Info::InitAsDefaultInstance() {
}

ECM_Info::ECM_Info(const ECM_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.ECM_Info)
}

void ECM_Info::SharedCtor() {
  _cached_size_ = 0;
  enginerpm_ = 0u;
  rawsensor_ = 0u;
  clutchswitch_ = 0u;
  enginestatus_ = 0u;
  enginecoolanttemp_ = 0u;
  fuelconsumption_ = 0u;
  diagmuxon_ = false;
  economymodelamp_ = false;
  co2_content_ = 0u;
  co_content_ = 0u;
  hc_content_ = 0u;
  o2_content_ = 0u;
  achighpressuresensor_ = 0u;
  cruisecontrolstatus_ = 0u;
  enginethrottleposition_ = 0u;
  meaneffectivetorque_ = 0u;
  fuel_consumption_fine_ = 0u;
  sof_v1_ = 0u;
  sof_v1_state_ = 0u;
  vbmin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ECM_Info::~ECM_Info() {
  // @@protoc_insertion_point(destructor:tbox.protocol.ECM_Info)
  SharedDtor();
}

void ECM_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ECM_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ECM_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECM_Info_descriptor_;
}

const ECM_Info& ECM_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

ECM_Info* ECM_Info::default_instance_ = NULL;

ECM_Info* ECM_Info::New() const {
  return new ECM_Info;
}

void ECM_Info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ECM_Info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(enginerpm_, economymodelamp_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(co2_content_, meaneffectivetorque_);
  }
  ZR_(fuel_consumption_fine_, vbmin_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ECM_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.ECM_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 EngineRPM = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enginerpm_)));
          set_has_enginerpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RawSensor;
        break;
      }

      // optional uint32 RawSensor = 2;
      case 2: {
        if (tag == 16) {
         parse_RawSensor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rawsensor_)));
          set_has_rawsensor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ClutchSwitch;
        break;
      }

      // optional uint32 ClutchSwitch = 3;
      case 3: {
        if (tag == 24) {
         parse_ClutchSwitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clutchswitch_)));
          set_has_clutchswitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_EngineStatus;
        break;
      }

      // optional uint32 EngineStatus = 4;
      case 4: {
        if (tag == 32) {
         parse_EngineStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enginestatus_)));
          set_has_enginestatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_EngineCoolantTemp;
        break;
      }

      // optional uint32 EngineCoolantTemp = 5;
      case 5: {
        if (tag == 40) {
         parse_EngineCoolantTemp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enginecoolanttemp_)));
          set_has_enginecoolanttemp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_FuelConsumption;
        break;
      }

      // optional uint32 FuelConsumption = 6;
      case 6: {
        if (tag == 48) {
         parse_FuelConsumption:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fuelconsumption_)));
          set_has_fuelconsumption();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_DiagMuxOn;
        break;
      }

      // optional bool DiagMuxOn = 7;
      case 7: {
        if (tag == 56) {
         parse_DiagMuxOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &diagmuxon_)));
          set_has_diagmuxon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_EconomyModeLamp;
        break;
      }

      // optional bool EconomyModeLamp = 8;
      case 8: {
        if (tag == 64) {
         parse_EconomyModeLamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &economymodelamp_)));
          set_has_economymodelamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_CO2_Content;
        break;
      }

      // optional uint32 CO2_Content = 9;
      case 9: {
        if (tag == 72) {
         parse_CO2_Content:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &co2_content_)));
          set_has_co2_content();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_CO_Content;
        break;
      }

      // optional uint32 CO_Content = 10;
      case 10: {
        if (tag == 80) {
         parse_CO_Content:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &co_content_)));
          set_has_co_content();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_HC_Content;
        break;
      }

      // optional uint32 HC_Content = 11;
      case 11: {
        if (tag == 88) {
         parse_HC_Content:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hc_content_)));
          set_has_hc_content();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_O2_Content;
        break;
      }

      // optional uint32 O2_Content = 12;
      case 12: {
        if (tag == 96) {
         parse_O2_Content:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &o2_content_)));
          set_has_o2_content();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_ACHighPressureSensor;
        break;
      }

      // optional uint32 ACHighPressureSensor = 13;
      case 13: {
        if (tag == 104) {
         parse_ACHighPressureSensor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achighpressuresensor_)));
          set_has_achighpressuresensor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_CruiseControlStatus;
        break;
      }

      // optional uint32 CruiseControlStatus = 14;
      case 14: {
        if (tag == 112) {
         parse_CruiseControlStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cruisecontrolstatus_)));
          set_has_cruisecontrolstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_EngineThrottlePosition;
        break;
      }

      // optional uint32 EngineThrottlePosition = 15;
      case 15: {
        if (tag == 120) {
         parse_EngineThrottlePosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enginethrottleposition_)));
          set_has_enginethrottleposition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_MeanEffectiveTorque;
        break;
      }

      // optional uint32 MeanEffectiveTorque = 16;
      case 16: {
        if (tag == 128) {
         parse_MeanEffectiveTorque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meaneffectivetorque_)));
          set_has_meaneffectivetorque();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_Fuel_Consumption_Fine;
        break;
      }

      // optional uint32 Fuel_Consumption_Fine = 17;
      case 17: {
        if (tag == 136) {
         parse_Fuel_Consumption_Fine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fuel_consumption_fine_)));
          set_has_fuel_consumption_fine();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_SOF_V1;
        break;
      }

      // optional uint32 SOF_V1 = 18;
      case 18: {
        if (tag == 144) {
         parse_SOF_V1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sof_v1_)));
          set_has_sof_v1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_SOF_V1_State;
        break;
      }

      // optional uint32 SOF_V1_State = 19;
      case 19: {
        if (tag == 152) {
         parse_SOF_V1_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sof_v1_state_)));
          set_has_sof_v1_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_Vbmin;
        break;
      }

      // optional uint32 Vbmin = 20;
      case 20: {
        if (tag == 160) {
         parse_Vbmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vbmin_)));
          set_has_vbmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.ECM_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.ECM_Info)
  return false;
#undef DO_
}

void ECM_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.ECM_Info)
  // optional uint32 EngineRPM = 1;
  if (has_enginerpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enginerpm(), output);
  }

  // optional uint32 RawSensor = 2;
  if (has_rawsensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rawsensor(), output);
  }

  // optional uint32 ClutchSwitch = 3;
  if (has_clutchswitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clutchswitch(), output);
  }

  // optional uint32 EngineStatus = 4;
  if (has_enginestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->enginestatus(), output);
  }

  // optional uint32 EngineCoolantTemp = 5;
  if (has_enginecoolanttemp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->enginecoolanttemp(), output);
  }

  // optional uint32 FuelConsumption = 6;
  if (has_fuelconsumption()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fuelconsumption(), output);
  }

  // optional bool DiagMuxOn = 7;
  if (has_diagmuxon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->diagmuxon(), output);
  }

  // optional bool EconomyModeLamp = 8;
  if (has_economymodelamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->economymodelamp(), output);
  }

  // optional uint32 CO2_Content = 9;
  if (has_co2_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->co2_content(), output);
  }

  // optional uint32 CO_Content = 10;
  if (has_co_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->co_content(), output);
  }

  // optional uint32 HC_Content = 11;
  if (has_hc_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->hc_content(), output);
  }

  // optional uint32 O2_Content = 12;
  if (has_o2_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->o2_content(), output);
  }

  // optional uint32 ACHighPressureSensor = 13;
  if (has_achighpressuresensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->achighpressuresensor(), output);
  }

  // optional uint32 CruiseControlStatus = 14;
  if (has_cruisecontrolstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->cruisecontrolstatus(), output);
  }

  // optional uint32 EngineThrottlePosition = 15;
  if (has_enginethrottleposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->enginethrottleposition(), output);
  }

  // optional uint32 MeanEffectiveTorque = 16;
  if (has_meaneffectivetorque()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->meaneffectivetorque(), output);
  }

  // optional uint32 Fuel_Consumption_Fine = 17;
  if (has_fuel_consumption_fine()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->fuel_consumption_fine(), output);
  }

  // optional uint32 SOF_V1 = 18;
  if (has_sof_v1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->sof_v1(), output);
  }

  // optional uint32 SOF_V1_State = 19;
  if (has_sof_v1_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->sof_v1_state(), output);
  }

  // optional uint32 Vbmin = 20;
  if (has_vbmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->vbmin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.ECM_Info)
}

::google::protobuf::uint8* ECM_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.ECM_Info)
  // optional uint32 EngineRPM = 1;
  if (has_enginerpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enginerpm(), target);
  }

  // optional uint32 RawSensor = 2;
  if (has_rawsensor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rawsensor(), target);
  }

  // optional uint32 ClutchSwitch = 3;
  if (has_clutchswitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clutchswitch(), target);
  }

  // optional uint32 EngineStatus = 4;
  if (has_enginestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->enginestatus(), target);
  }

  // optional uint32 EngineCoolantTemp = 5;
  if (has_enginecoolanttemp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->enginecoolanttemp(), target);
  }

  // optional uint32 FuelConsumption = 6;
  if (has_fuelconsumption()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fuelconsumption(), target);
  }

  // optional bool DiagMuxOn = 7;
  if (has_diagmuxon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->diagmuxon(), target);
  }

  // optional bool EconomyModeLamp = 8;
  if (has_economymodelamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->economymodelamp(), target);
  }

  // optional uint32 CO2_Content = 9;
  if (has_co2_content()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->co2_content(), target);
  }

  // optional uint32 CO_Content = 10;
  if (has_co_content()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->co_content(), target);
  }

  // optional uint32 HC_Content = 11;
  if (has_hc_content()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->hc_content(), target);
  }

  // optional uint32 O2_Content = 12;
  if (has_o2_content()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->o2_content(), target);
  }

  // optional uint32 ACHighPressureSensor = 13;
  if (has_achighpressuresensor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->achighpressuresensor(), target);
  }

  // optional uint32 CruiseControlStatus = 14;
  if (has_cruisecontrolstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->cruisecontrolstatus(), target);
  }

  // optional uint32 EngineThrottlePosition = 15;
  if (has_enginethrottleposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->enginethrottleposition(), target);
  }

  // optional uint32 MeanEffectiveTorque = 16;
  if (has_meaneffectivetorque()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->meaneffectivetorque(), target);
  }

  // optional uint32 Fuel_Consumption_Fine = 17;
  if (has_fuel_consumption_fine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->fuel_consumption_fine(), target);
  }

  // optional uint32 SOF_V1 = 18;
  if (has_sof_v1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->sof_v1(), target);
  }

  // optional uint32 SOF_V1_State = 19;
  if (has_sof_v1_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->sof_v1_state(), target);
  }

  // optional uint32 Vbmin = 20;
  if (has_vbmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->vbmin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.ECM_Info)
  return target;
}

int ECM_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EngineRPM = 1;
    if (has_enginerpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enginerpm());
    }

    // optional uint32 RawSensor = 2;
    if (has_rawsensor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rawsensor());
    }

    // optional uint32 ClutchSwitch = 3;
    if (has_clutchswitch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clutchswitch());
    }

    // optional uint32 EngineStatus = 4;
    if (has_enginestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enginestatus());
    }

    // optional uint32 EngineCoolantTemp = 5;
    if (has_enginecoolanttemp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enginecoolanttemp());
    }

    // optional uint32 FuelConsumption = 6;
    if (has_fuelconsumption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fuelconsumption());
    }

    // optional bool DiagMuxOn = 7;
    if (has_diagmuxon()) {
      total_size += 1 + 1;
    }

    // optional bool EconomyModeLamp = 8;
    if (has_economymodelamp()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 CO2_Content = 9;
    if (has_co2_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->co2_content());
    }

    // optional uint32 CO_Content = 10;
    if (has_co_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->co_content());
    }

    // optional uint32 HC_Content = 11;
    if (has_hc_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hc_content());
    }

    // optional uint32 O2_Content = 12;
    if (has_o2_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->o2_content());
    }

    // optional uint32 ACHighPressureSensor = 13;
    if (has_achighpressuresensor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achighpressuresensor());
    }

    // optional uint32 CruiseControlStatus = 14;
    if (has_cruisecontrolstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cruisecontrolstatus());
    }

    // optional uint32 EngineThrottlePosition = 15;
    if (has_enginethrottleposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enginethrottleposition());
    }

    // optional uint32 MeanEffectiveTorque = 16;
    if (has_meaneffectivetorque()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meaneffectivetorque());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 Fuel_Consumption_Fine = 17;
    if (has_fuel_consumption_fine()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fuel_consumption_fine());
    }

    // optional uint32 SOF_V1 = 18;
    if (has_sof_v1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sof_v1());
    }

    // optional uint32 SOF_V1_State = 19;
    if (has_sof_v1_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sof_v1_state());
    }

    // optional uint32 Vbmin = 20;
    if (has_vbmin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vbmin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ECM_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ECM_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ECM_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ECM_Info::MergeFrom(const ECM_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enginerpm()) {
      set_enginerpm(from.enginerpm());
    }
    if (from.has_rawsensor()) {
      set_rawsensor(from.rawsensor());
    }
    if (from.has_clutchswitch()) {
      set_clutchswitch(from.clutchswitch());
    }
    if (from.has_enginestatus()) {
      set_enginestatus(from.enginestatus());
    }
    if (from.has_enginecoolanttemp()) {
      set_enginecoolanttemp(from.enginecoolanttemp());
    }
    if (from.has_fuelconsumption()) {
      set_fuelconsumption(from.fuelconsumption());
    }
    if (from.has_diagmuxon()) {
      set_diagmuxon(from.diagmuxon());
    }
    if (from.has_economymodelamp()) {
      set_economymodelamp(from.economymodelamp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_co2_content()) {
      set_co2_content(from.co2_content());
    }
    if (from.has_co_content()) {
      set_co_content(from.co_content());
    }
    if (from.has_hc_content()) {
      set_hc_content(from.hc_content());
    }
    if (from.has_o2_content()) {
      set_o2_content(from.o2_content());
    }
    if (from.has_achighpressuresensor()) {
      set_achighpressuresensor(from.achighpressuresensor());
    }
    if (from.has_cruisecontrolstatus()) {
      set_cruisecontrolstatus(from.cruisecontrolstatus());
    }
    if (from.has_enginethrottleposition()) {
      set_enginethrottleposition(from.enginethrottleposition());
    }
    if (from.has_meaneffectivetorque()) {
      set_meaneffectivetorque(from.meaneffectivetorque());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fuel_consumption_fine()) {
      set_fuel_consumption_fine(from.fuel_consumption_fine());
    }
    if (from.has_sof_v1()) {
      set_sof_v1(from.sof_v1());
    }
    if (from.has_sof_v1_state()) {
      set_sof_v1_state(from.sof_v1_state());
    }
    if (from.has_vbmin()) {
      set_vbmin(from.vbmin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ECM_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ECM_Info::CopyFrom(const ECM_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECM_Info::IsInitialized() const {

  return true;
}

void ECM_Info::Swap(ECM_Info* other) {
  if (other != this) {
    std::swap(enginerpm_, other->enginerpm_);
    std::swap(rawsensor_, other->rawsensor_);
    std::swap(clutchswitch_, other->clutchswitch_);
    std::swap(enginestatus_, other->enginestatus_);
    std::swap(enginecoolanttemp_, other->enginecoolanttemp_);
    std::swap(fuelconsumption_, other->fuelconsumption_);
    std::swap(diagmuxon_, other->diagmuxon_);
    std::swap(economymodelamp_, other->economymodelamp_);
    std::swap(co2_content_, other->co2_content_);
    std::swap(co_content_, other->co_content_);
    std::swap(hc_content_, other->hc_content_);
    std::swap(o2_content_, other->o2_content_);
    std::swap(achighpressuresensor_, other->achighpressuresensor_);
    std::swap(cruisecontrolstatus_, other->cruisecontrolstatus_);
    std::swap(enginethrottleposition_, other->enginethrottleposition_);
    std::swap(meaneffectivetorque_, other->meaneffectivetorque_);
    std::swap(fuel_consumption_fine_, other->fuel_consumption_fine_);
    std::swap(sof_v1_, other->sof_v1_);
    std::swap(sof_v1_state_, other->sof_v1_state_);
    std::swap(vbmin_, other->vbmin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ECM_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ECM_Info_descriptor_;
  metadata.reflection = ECM_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ABSVDC_Info::kASRinRegulationFieldNumber;
const int ABSVDC_Info::kLongitudinalAccelerationProc02FieldNumber;
const int ABSVDC_Info::kTransversalacceleration02FieldNumber;
const int ABSVDC_Info::kYawRate02FieldNumber;
const int ABSVDC_Info::kIDMStopLampRequestFieldNumber;
#endif  // !_MSC_VER

ABSVDC_Info::ABSVDC_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.ABSVDC_Info)
}

void ABSVDC_Info::InitAsDefaultInstance() {
}

ABSVDC_Info::ABSVDC_Info(const ABSVDC_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.ABSVDC_Info)
}

void ABSVDC_Info::SharedCtor() {
  _cached_size_ = 0;
  asrinregulation_ = false;
  longitudinalaccelerationproc02_ = 0u;
  transversalacceleration02_ = 0u;
  yawrate02_ = 0u;
  idm_stoplamprequest_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ABSVDC_Info::~ABSVDC_Info() {
  // @@protoc_insertion_point(destructor:tbox.protocol.ABSVDC_Info)
  SharedDtor();
}

void ABSVDC_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ABSVDC_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ABSVDC_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ABSVDC_Info_descriptor_;
}

const ABSVDC_Info& ABSVDC_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

ABSVDC_Info* ABSVDC_Info::default_instance_ = NULL;

ABSVDC_Info* ABSVDC_Info::New() const {
  return new ABSVDC_Info;
}

void ABSVDC_Info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ABSVDC_Info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(asrinregulation_, idm_stoplamprequest_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ABSVDC_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.ABSVDC_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ASRinRegulation = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &asrinregulation_)));
          set_has_asrinregulation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LongitudinalAccelerationProc02;
        break;
      }

      // optional uint32 LongitudinalAccelerationProc02 = 2;
      case 2: {
        if (tag == 16) {
         parse_LongitudinalAccelerationProc02:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &longitudinalaccelerationproc02_)));
          set_has_longitudinalaccelerationproc02();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Transversalacceleration02;
        break;
      }

      // optional uint32 Transversalacceleration02 = 3;
      case 3: {
        if (tag == 24) {
         parse_Transversalacceleration02:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transversalacceleration02_)));
          set_has_transversalacceleration02();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_YawRate02;
        break;
      }

      // optional uint32 YawRate02 = 4;
      case 4: {
        if (tag == 32) {
         parse_YawRate02:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yawrate02_)));
          set_has_yawrate02();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_IDM_StopLampRequest;
        break;
      }

      // optional uint32 IDM_StopLampRequest = 5;
      case 5: {
        if (tag == 40) {
         parse_IDM_StopLampRequest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idm_stoplamprequest_)));
          set_has_idm_stoplamprequest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.ABSVDC_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.ABSVDC_Info)
  return false;
#undef DO_
}

void ABSVDC_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.ABSVDC_Info)
  // optional bool ASRinRegulation = 1;
  if (has_asrinregulation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->asrinregulation(), output);
  }

  // optional uint32 LongitudinalAccelerationProc02 = 2;
  if (has_longitudinalaccelerationproc02()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->longitudinalaccelerationproc02(), output);
  }

  // optional uint32 Transversalacceleration02 = 3;
  if (has_transversalacceleration02()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->transversalacceleration02(), output);
  }

  // optional uint32 YawRate02 = 4;
  if (has_yawrate02()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->yawrate02(), output);
  }

  // optional uint32 IDM_StopLampRequest = 5;
  if (has_idm_stoplamprequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->idm_stoplamprequest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.ABSVDC_Info)
}

::google::protobuf::uint8* ABSVDC_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.ABSVDC_Info)
  // optional bool ASRinRegulation = 1;
  if (has_asrinregulation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->asrinregulation(), target);
  }

  // optional uint32 LongitudinalAccelerationProc02 = 2;
  if (has_longitudinalaccelerationproc02()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->longitudinalaccelerationproc02(), target);
  }

  // optional uint32 Transversalacceleration02 = 3;
  if (has_transversalacceleration02()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->transversalacceleration02(), target);
  }

  // optional uint32 YawRate02 = 4;
  if (has_yawrate02()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->yawrate02(), target);
  }

  // optional uint32 IDM_StopLampRequest = 5;
  if (has_idm_stoplamprequest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->idm_stoplamprequest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.ABSVDC_Info)
  return target;
}

int ABSVDC_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool ASRinRegulation = 1;
    if (has_asrinregulation()) {
      total_size += 1 + 1;
    }

    // optional uint32 LongitudinalAccelerationProc02 = 2;
    if (has_longitudinalaccelerationproc02()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->longitudinalaccelerationproc02());
    }

    // optional uint32 Transversalacceleration02 = 3;
    if (has_transversalacceleration02()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transversalacceleration02());
    }

    // optional uint32 YawRate02 = 4;
    if (has_yawrate02()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yawrate02());
    }

    // optional uint32 IDM_StopLampRequest = 5;
    if (has_idm_stoplamprequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idm_stoplamprequest());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ABSVDC_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ABSVDC_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ABSVDC_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ABSVDC_Info::MergeFrom(const ABSVDC_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_asrinregulation()) {
      set_asrinregulation(from.asrinregulation());
    }
    if (from.has_longitudinalaccelerationproc02()) {
      set_longitudinalaccelerationproc02(from.longitudinalaccelerationproc02());
    }
    if (from.has_transversalacceleration02()) {
      set_transversalacceleration02(from.transversalacceleration02());
    }
    if (from.has_yawrate02()) {
      set_yawrate02(from.yawrate02());
    }
    if (from.has_idm_stoplamprequest()) {
      set_idm_stoplamprequest(from.idm_stoplamprequest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ABSVDC_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ABSVDC_Info::CopyFrom(const ABSVDC_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ABSVDC_Info::IsInitialized() const {

  return true;
}

void ABSVDC_Info::Swap(ABSVDC_Info* other) {
  if (other != this) {
    std::swap(asrinregulation_, other->asrinregulation_);
    std::swap(longitudinalaccelerationproc02_, other->longitudinalaccelerationproc02_);
    std::swap(transversalacceleration02_, other->transversalacceleration02_);
    std::swap(yawrate02_, other->yawrate02_);
    std::swap(idm_stoplamprequest_, other->idm_stoplamprequest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ABSVDC_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ABSVDC_Info_descriptor_;
  metadata.reflection = ABSVDC_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int METER_Info::kVehicleSpeedCLUSTERFieldNumber;
const int METER_Info::kAverageFuelEconomyFieldNumber;
const int METER_Info::kDistanceToEmptyFieldNumber;
const int METER_Info::kDistanceTotalizerFieldNumber;
const int METER_Info::kFuelRemainFieldNumber;
const int METER_Info::kFuelWarningLampFieldNumber;
const int METER_Info::kAverageFuelEconomySingleFieldNumber;
const int METER_Info::kEPBStatusFieldNumber;
const int METER_Info::kAPBStatusFlagFieldNumber;
const int METER_Info::kParkingBrakeMalfunctionDisplayFieldNumber;
const int METER_Info::kParkingBrakeBindingStatusDisplayFieldNumber;
const int METER_Info::kFuellowFieldNumber;
#endif  // !_MSC_VER

METER_Info::METER_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.METER_Info)
}

void METER_Info::InitAsDefaultInstance() {
}

METER_Info::METER_Info(const METER_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.METER_Info)
}

void METER_Info::SharedCtor() {
  _cached_size_ = 0;
  vehiclespeed_cluster_ = 0u;
  average_fuel_economy_ = 0u;
  distance_to_empty_ = 0u;
  distance_totalizer_ = 0u;
  fuel_remain_ = 0u;
  fuel_warning_lamp_ = 0u;
  average_fuel_economy_single_ = 0u;
  epb_status_ = 0u;
  apb_statusflag_ = 0u;
  parkingbrakemalfunctiondisplay_ = 0u;
  parkingbrakebindingstatusdisplay_ = 0u;
  fuellow_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

METER_Info::~METER_Info() {
  // @@protoc_insertion_point(destructor:tbox.protocol.METER_Info)
  SharedDtor();
}

void METER_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void METER_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* METER_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return METER_Info_descriptor_;
}

const METER_Info& METER_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

METER_Info* METER_Info::default_instance_ = NULL;

METER_Info* METER_Info::New() const {
  return new METER_Info;
}

void METER_Info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<METER_Info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(vehiclespeed_cluster_, epb_status_);
  }
  ZR_(apb_statusflag_, fuellow_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool METER_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.METER_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 VehicleSpeed_CLUSTER = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vehiclespeed_cluster_)));
          set_has_vehiclespeed_cluster();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Average_Fuel_Economy;
        break;
      }

      // optional uint32 Average_Fuel_Economy = 2;
      case 2: {
        if (tag == 16) {
         parse_Average_Fuel_Economy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &average_fuel_economy_)));
          set_has_average_fuel_economy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Distance_to_empty;
        break;
      }

      // optional uint32 Distance_to_empty = 3;
      case 3: {
        if (tag == 24) {
         parse_Distance_to_empty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &distance_to_empty_)));
          set_has_distance_to_empty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Distance_Totalizer;
        break;
      }

      // optional uint32 Distance_Totalizer = 4;
      case 4: {
        if (tag == 32) {
         parse_Distance_Totalizer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &distance_totalizer_)));
          set_has_distance_totalizer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Fuel_Remain;
        break;
      }

      // optional uint32 Fuel_Remain = 5;
      case 5: {
        if (tag == 40) {
         parse_Fuel_Remain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fuel_remain_)));
          set_has_fuel_remain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Fuel_Warning_lamp;
        break;
      }

      // optional uint32 Fuel_Warning_lamp = 6;
      case 6: {
        if (tag == 48) {
         parse_Fuel_Warning_lamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fuel_warning_lamp_)));
          set_has_fuel_warning_lamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Average_Fuel_Economy_Single;
        break;
      }

      // optional uint32 Average_Fuel_Economy_Single = 7;
      case 7: {
        if (tag == 56) {
         parse_Average_Fuel_Economy_Single:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &average_fuel_economy_single_)));
          set_has_average_fuel_economy_single();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_EPB_Status;
        break;
      }

      // optional uint32 EPB_Status = 8;
      case 8: {
        if (tag == 64) {
         parse_EPB_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &epb_status_)));
          set_has_epb_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_APB_StatusFlag;
        break;
      }

      // optional uint32 APB_StatusFlag = 9;
      case 9: {
        if (tag == 72) {
         parse_APB_StatusFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apb_statusflag_)));
          set_has_apb_statusflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ParkingBrakeMalfunctionDisplay;
        break;
      }

      // optional uint32 ParkingBrakeMalfunctionDisplay = 10;
      case 10: {
        if (tag == 80) {
         parse_ParkingBrakeMalfunctionDisplay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parkingbrakemalfunctiondisplay_)));
          set_has_parkingbrakemalfunctiondisplay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ParkingBrakeBindingStatusDisplay;
        break;
      }

      // optional uint32 ParkingBrakeBindingStatusDisplay = 11;
      case 11: {
        if (tag == 88) {
         parse_ParkingBrakeBindingStatusDisplay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parkingbrakebindingstatusdisplay_)));
          set_has_parkingbrakebindingstatusdisplay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_Fuellow;
        break;
      }

      // optional uint32 Fuellow = 12;
      case 12: {
        if (tag == 96) {
         parse_Fuellow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fuellow_)));
          set_has_fuellow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.METER_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.METER_Info)
  return false;
#undef DO_
}

void METER_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.METER_Info)
  // optional uint32 VehicleSpeed_CLUSTER = 1;
  if (has_vehiclespeed_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vehiclespeed_cluster(), output);
  }

  // optional uint32 Average_Fuel_Economy = 2;
  if (has_average_fuel_economy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->average_fuel_economy(), output);
  }

  // optional uint32 Distance_to_empty = 3;
  if (has_distance_to_empty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->distance_to_empty(), output);
  }

  // optional uint32 Distance_Totalizer = 4;
  if (has_distance_totalizer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->distance_totalizer(), output);
  }

  // optional uint32 Fuel_Remain = 5;
  if (has_fuel_remain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fuel_remain(), output);
  }

  // optional uint32 Fuel_Warning_lamp = 6;
  if (has_fuel_warning_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fuel_warning_lamp(), output);
  }

  // optional uint32 Average_Fuel_Economy_Single = 7;
  if (has_average_fuel_economy_single()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->average_fuel_economy_single(), output);
  }

  // optional uint32 EPB_Status = 8;
  if (has_epb_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->epb_status(), output);
  }

  // optional uint32 APB_StatusFlag = 9;
  if (has_apb_statusflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->apb_statusflag(), output);
  }

  // optional uint32 ParkingBrakeMalfunctionDisplay = 10;
  if (has_parkingbrakemalfunctiondisplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->parkingbrakemalfunctiondisplay(), output);
  }

  // optional uint32 ParkingBrakeBindingStatusDisplay = 11;
  if (has_parkingbrakebindingstatusdisplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->parkingbrakebindingstatusdisplay(), output);
  }

  // optional uint32 Fuellow = 12;
  if (has_fuellow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->fuellow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.METER_Info)
}

::google::protobuf::uint8* METER_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.METER_Info)
  // optional uint32 VehicleSpeed_CLUSTER = 1;
  if (has_vehiclespeed_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vehiclespeed_cluster(), target);
  }

  // optional uint32 Average_Fuel_Economy = 2;
  if (has_average_fuel_economy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->average_fuel_economy(), target);
  }

  // optional uint32 Distance_to_empty = 3;
  if (has_distance_to_empty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->distance_to_empty(), target);
  }

  // optional uint32 Distance_Totalizer = 4;
  if (has_distance_totalizer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->distance_totalizer(), target);
  }

  // optional uint32 Fuel_Remain = 5;
  if (has_fuel_remain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fuel_remain(), target);
  }

  // optional uint32 Fuel_Warning_lamp = 6;
  if (has_fuel_warning_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fuel_warning_lamp(), target);
  }

  // optional uint32 Average_Fuel_Economy_Single = 7;
  if (has_average_fuel_economy_single()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->average_fuel_economy_single(), target);
  }

  // optional uint32 EPB_Status = 8;
  if (has_epb_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->epb_status(), target);
  }

  // optional uint32 APB_StatusFlag = 9;
  if (has_apb_statusflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->apb_statusflag(), target);
  }

  // optional uint32 ParkingBrakeMalfunctionDisplay = 10;
  if (has_parkingbrakemalfunctiondisplay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->parkingbrakemalfunctiondisplay(), target);
  }

  // optional uint32 ParkingBrakeBindingStatusDisplay = 11;
  if (has_parkingbrakebindingstatusdisplay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->parkingbrakebindingstatusdisplay(), target);
  }

  // optional uint32 Fuellow = 12;
  if (has_fuellow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->fuellow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.METER_Info)
  return target;
}

int METER_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 VehicleSpeed_CLUSTER = 1;
    if (has_vehiclespeed_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vehiclespeed_cluster());
    }

    // optional uint32 Average_Fuel_Economy = 2;
    if (has_average_fuel_economy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->average_fuel_economy());
    }

    // optional uint32 Distance_to_empty = 3;
    if (has_distance_to_empty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->distance_to_empty());
    }

    // optional uint32 Distance_Totalizer = 4;
    if (has_distance_totalizer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->distance_totalizer());
    }

    // optional uint32 Fuel_Remain = 5;
    if (has_fuel_remain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fuel_remain());
    }

    // optional uint32 Fuel_Warning_lamp = 6;
    if (has_fuel_warning_lamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fuel_warning_lamp());
    }

    // optional uint32 Average_Fuel_Economy_Single = 7;
    if (has_average_fuel_economy_single()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->average_fuel_economy_single());
    }

    // optional uint32 EPB_Status = 8;
    if (has_epb_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->epb_status());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 APB_StatusFlag = 9;
    if (has_apb_statusflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apb_statusflag());
    }

    // optional uint32 ParkingBrakeMalfunctionDisplay = 10;
    if (has_parkingbrakemalfunctiondisplay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parkingbrakemalfunctiondisplay());
    }

    // optional uint32 ParkingBrakeBindingStatusDisplay = 11;
    if (has_parkingbrakebindingstatusdisplay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parkingbrakebindingstatusdisplay());
    }

    // optional uint32 Fuellow = 12;
    if (has_fuellow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fuellow());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void METER_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const METER_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const METER_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void METER_Info::MergeFrom(const METER_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vehiclespeed_cluster()) {
      set_vehiclespeed_cluster(from.vehiclespeed_cluster());
    }
    if (from.has_average_fuel_economy()) {
      set_average_fuel_economy(from.average_fuel_economy());
    }
    if (from.has_distance_to_empty()) {
      set_distance_to_empty(from.distance_to_empty());
    }
    if (from.has_distance_totalizer()) {
      set_distance_totalizer(from.distance_totalizer());
    }
    if (from.has_fuel_remain()) {
      set_fuel_remain(from.fuel_remain());
    }
    if (from.has_fuel_warning_lamp()) {
      set_fuel_warning_lamp(from.fuel_warning_lamp());
    }
    if (from.has_average_fuel_economy_single()) {
      set_average_fuel_economy_single(from.average_fuel_economy_single());
    }
    if (from.has_epb_status()) {
      set_epb_status(from.epb_status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_apb_statusflag()) {
      set_apb_statusflag(from.apb_statusflag());
    }
    if (from.has_parkingbrakemalfunctiondisplay()) {
      set_parkingbrakemalfunctiondisplay(from.parkingbrakemalfunctiondisplay());
    }
    if (from.has_parkingbrakebindingstatusdisplay()) {
      set_parkingbrakebindingstatusdisplay(from.parkingbrakebindingstatusdisplay());
    }
    if (from.has_fuellow()) {
      set_fuellow(from.fuellow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void METER_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void METER_Info::CopyFrom(const METER_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool METER_Info::IsInitialized() const {

  return true;
}

void METER_Info::Swap(METER_Info* other) {
  if (other != this) {
    std::swap(vehiclespeed_cluster_, other->vehiclespeed_cluster_);
    std::swap(average_fuel_economy_, other->average_fuel_economy_);
    std::swap(distance_to_empty_, other->distance_to_empty_);
    std::swap(distance_totalizer_, other->distance_totalizer_);
    std::swap(fuel_remain_, other->fuel_remain_);
    std::swap(fuel_warning_lamp_, other->fuel_warning_lamp_);
    std::swap(average_fuel_economy_single_, other->average_fuel_economy_single_);
    std::swap(epb_status_, other->epb_status_);
    std::swap(apb_statusflag_, other->apb_statusflag_);
    std::swap(parkingbrakemalfunctiondisplay_, other->parkingbrakemalfunctiondisplay_);
    std::swap(parkingbrakebindingstatusdisplay_, other->parkingbrakebindingstatusdisplay_);
    std::swap(fuellow_, other->fuellow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata METER_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = METER_Info_descriptor_;
  metadata.reflection = METER_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BCM_Info::kTrunkSwitchStatusFieldNumber;
const int BCM_Info::kBCMWakeUpSleepCmdFieldNumber;
const int BCM_Info::kFrontLeftDoorStatusFieldNumber;
const int BCM_Info::kFrontRightDoorStatusFieldNumber;
const int BCM_Info::kRearLeftDoorStatusFieldNumber;
const int BCM_Info::kRearRightDoorStatusFieldNumber;
const int BCM_Info::kBackDoorStatusFieldNumber;
const int BCM_Info::kDoorLockStatusFieldNumber;
const int BCM_Info::kBackDoorLockedStatusFieldNumber;
const int BCM_Info::kLowBeamRequestFieldNumber;
const int BCM_Info::kFlashingIndicatorStatusFieldNumber;
const int BCM_Info::kHighBeamRequestFieldNumber;
const int BCM_Info::kPositionLightsRequestFieldNumber;
const int BCM_Info::kFrontFogLightsRequestFieldNumber;
const int BCM_Info::kRearFogLightStatusFieldNumber;
const int BCM_Info::kDayTimeRunningLightRequestFieldNumber;
const int BCM_Info::kFrontRightWindowStatusFieldNumber;
const int BCM_Info::kFrontLeftWindowStatusFieldNumber;
const int BCM_Info::kRearRightWindowStatusFieldNumber;
const int BCM_Info::kRearLeftWindowStatusFieldNumber;
const int BCM_Info::kRemoteEngingRunFlagFieldNumber;
const int BCM_Info::kSunroofWindowStatusFieldNumber;
const int BCM_Info::kSunroofShadeStatusFieldNumber;
const int BCM_Info::kRESFailureFeedbackFieldNumber;
const int BCM_Info::kIsFindcarBreakedFieldNumber;
const int BCM_Info::kRESStatusFieldNumber;
const int BCM_Info::kLastObstacleNotificationFieldNumber;
const int BCM_Info::kSRMotorStateFieldNumber;
const int BCM_Info::kShadeMotorStateFieldNumber;
const int BCM_Info::kShadeAreaFieldNumber;
const int BCM_Info::kBCMSRDegradeModeFieldNumber;
const int BCM_Info::kBCMShadeDegradeModeFieldNumber;
const int BCM_Info::kRESPreSoakSmartphoneErrorFieldNumber;
const int BCM_Info::kLeftTimeDuringThisRESCycleFieldNumber;
const int BCM_Info::kRearWiperStatusFieldNumber;
const int BCM_Info::kDriveModeRequestFieldNumber;
const int BCM_Info::kChildLockStateDisplayFieldNumber;
const int BCM_Info::kClutchSwitchMaximumTravelFieldNumber;
const int BCM_Info::kClutchSwitchMinimumTravelFieldNumber;
const int BCM_Info::kRLSRainFieldNumber;
const int BCM_Info::kRearDefrostEngagedFieldNumber;
const int BCM_Info::kPassengerDoorLockedStatusFieldNumber;
const int BCM_Info::kRearLeftDoorLockedStatusFieldNumber;
const int BCM_Info::kRearRightDoorLockedStatusFieldNumber;
#endif  // !_MSC_VER

BCM_Info::BCM_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.BCM_Info)
}

void BCM_Info::InitAsDefaultInstance() {
}

BCM_Info::BCM_Info(const BCM_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.BCM_Info)
}

void BCM_Info::SharedCtor() {
  _cached_size_ = 0;
  trunkswitchstatus_ = false;
  bcm_wakeupsleepcmd_ = 0u;
  front_left_door_status_ = false;
  front_right_door_status_ = false;
  rear_left_door_status_ = false;
  rear_right_door_status_ = false;
  back_door_status_ = false;
  door_lock_status_ = false;
  back_door_locked_status_ = false;
  lowbeamrequest_ = false;
  flashingindicatorstatus_ = 0u;
  highbeamrequest_ = false;
  positionlightsrequest_ = false;
  frontfoglightsrequest_ = false;
  rearfoglightstatus_ = false;
  daytimerunninglightrequest_ = false;
  front_right_window_status_ = 0u;
  front_left_window_status_ = 0u;
  rear_right_window_status_ = 0u;
  rear_left_window_status_ = 0u;
  remote_enging_run_flag_ = false;
  sunroof_window_status_ = 0u;
  sunroof_shade_status_ = 0u;
  res_failurefeedback_ = 0u;
  isfindcarbreaked_ = false;
  res_status_ = 0u;
  last_obstacle_notification_ = 0u;
  sr_motor_state_ = 0u;
  shade_motor_state_ = 0u;
  shade_area_ = 0u;
  bcm_sr_degrade_mode_ = 0u;
  bcm_shade_degrade_mode_ = 0u;
  respresoak_smartphoneerror_ = 0u;
  lefttimeduringthisrescycle_ = 0u;
  rearwiperstatus_ = 0u;
  drivemoderequest_ = 0u;
  childlockstatedisplay_ = 0u;
  clutchswitchmaximumtravel_ = 0u;
  clutchswitchminimumtravel_ = 0u;
  rls_rain_ = 0u;
  reardefrostengaged_ = 0u;
  passengerdoorlockedstatus_ = 0u;
  rearleftdoorlockedstatus_ = 0u;
  rearrightdoorlockedstatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BCM_Info::~BCM_Info() {
  // @@protoc_insertion_point(destructor:tbox.protocol.BCM_Info)
  SharedDtor();
}

void BCM_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BCM_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BCM_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BCM_Info_descriptor_;
}

const BCM_Info& BCM_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

BCM_Info* BCM_Info::default_instance_ = NULL;

BCM_Info* BCM_Info::New() const {
  return new BCM_Info;
}

void BCM_Info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BCM_Info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(bcm_wakeupsleepcmd_, door_lock_status_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(back_door_locked_status_, frontfoglightsrequest_);
    ZR_(rearfoglightstatus_, daytimerunninglightrequest_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(front_right_window_status_, rear_right_window_status_);
    ZR_(rear_left_window_status_, res_failurefeedback_);
    remote_enging_run_flag_ = false;
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(res_status_, bcm_shade_degrade_mode_);
    isfindcarbreaked_ = false;
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(respresoak_smartphoneerror_, rls_rain_);
  }
  ZR_(reardefrostengaged_, rearrightdoorlockedstatus_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BCM_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.BCM_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool TrunkSwitchStatus = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trunkswitchstatus_)));
          set_has_trunkswitchstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BCM_WakeUpSleepCmd;
        break;
      }

      // optional uint32 BCM_WakeUpSleepCmd = 2;
      case 2: {
        if (tag == 16) {
         parse_BCM_WakeUpSleepCmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bcm_wakeupsleepcmd_)));
          set_has_bcm_wakeupsleepcmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_front_left_door_status;
        break;
      }

      // optional bool front_left_door_status = 3;
      case 3: {
        if (tag == 24) {
         parse_front_left_door_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &front_left_door_status_)));
          set_has_front_left_door_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_front_right_door_status;
        break;
      }

      // optional bool front_right_door_status = 4;
      case 4: {
        if (tag == 32) {
         parse_front_right_door_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &front_right_door_status_)));
          set_has_front_right_door_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_rear_left_door_status;
        break;
      }

      // optional bool rear_left_door_status = 5;
      case 5: {
        if (tag == 40) {
         parse_rear_left_door_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rear_left_door_status_)));
          set_has_rear_left_door_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_rear_right_door_status;
        break;
      }

      // optional bool rear_right_door_status = 6;
      case 6: {
        if (tag == 48) {
         parse_rear_right_door_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rear_right_door_status_)));
          set_has_rear_right_door_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_back_door_status;
        break;
      }

      // optional bool back_door_status = 7;
      case 7: {
        if (tag == 56) {
         parse_back_door_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &back_door_status_)));
          set_has_back_door_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_door_lock_status;
        break;
      }

      // optional bool door_lock_status = 8;
      case 8: {
        if (tag == 64) {
         parse_door_lock_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &door_lock_status_)));
          set_has_door_lock_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_back_door_locked_status;
        break;
      }

      // optional bool back_door_locked_status = 9;
      case 9: {
        if (tag == 72) {
         parse_back_door_locked_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &back_door_locked_status_)));
          set_has_back_door_locked_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_LowBeamRequest;
        break;
      }

      // optional bool LowBeamRequest = 10;
      case 10: {
        if (tag == 80) {
         parse_LowBeamRequest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lowbeamrequest_)));
          set_has_lowbeamrequest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_FlashingIndicatorStatus;
        break;
      }

      // optional uint32 FlashingIndicatorStatus = 11;
      case 11: {
        if (tag == 88) {
         parse_FlashingIndicatorStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flashingindicatorstatus_)));
          set_has_flashingindicatorstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_HighBeamRequest;
        break;
      }

      // optional bool HighBeamRequest = 12;
      case 12: {
        if (tag == 96) {
         parse_HighBeamRequest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &highbeamrequest_)));
          set_has_highbeamrequest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_PositionLightsRequest;
        break;
      }

      // optional bool PositionLightsRequest = 13;
      case 13: {
        if (tag == 104) {
         parse_PositionLightsRequest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &positionlightsrequest_)));
          set_has_positionlightsrequest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_FrontFogLightsRequest;
        break;
      }

      // optional bool FrontFogLightsRequest = 14;
      case 14: {
        if (tag == 112) {
         parse_FrontFogLightsRequest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &frontfoglightsrequest_)));
          set_has_frontfoglightsrequest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_RearFogLightStatus;
        break;
      }

      // optional bool RearFogLightStatus = 15;
      case 15: {
        if (tag == 120) {
         parse_RearFogLightStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rearfoglightstatus_)));
          set_has_rearfoglightstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_DayTimeRunningLightRequest;
        break;
      }

      // optional bool DayTimeRunningLightRequest = 16;
      case 16: {
        if (tag == 128) {
         parse_DayTimeRunningLightRequest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &daytimerunninglightrequest_)));
          set_has_daytimerunninglightrequest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_front_right_window_status;
        break;
      }

      // optional uint32 front_right_window_status = 17;
      case 17: {
        if (tag == 136) {
         parse_front_right_window_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &front_right_window_status_)));
          set_has_front_right_window_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_front_left_window_status;
        break;
      }

      // optional uint32 front_left_window_status = 18;
      case 18: {
        if (tag == 144) {
         parse_front_left_window_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &front_left_window_status_)));
          set_has_front_left_window_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_rear_right_window_status;
        break;
      }

      // optional uint32 rear_right_window_status = 19;
      case 19: {
        if (tag == 152) {
         parse_rear_right_window_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rear_right_window_status_)));
          set_has_rear_right_window_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_rear_left_window_status;
        break;
      }

      // optional uint32 rear_left_window_status = 20;
      case 20: {
        if (tag == 160) {
         parse_rear_left_window_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rear_left_window_status_)));
          set_has_rear_left_window_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_remote_enging_run_flag;
        break;
      }

      // optional bool remote_enging_run_flag = 21;
      case 21: {
        if (tag == 168) {
         parse_remote_enging_run_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remote_enging_run_flag_)));
          set_has_remote_enging_run_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_sunroof_window_status;
        break;
      }

      // optional uint32 sunroof_window_status = 22;
      case 22: {
        if (tag == 176) {
         parse_sunroof_window_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sunroof_window_status_)));
          set_has_sunroof_window_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_sunroof_shade_status;
        break;
      }

      // optional uint32 sunroof_shade_status = 23;
      case 23: {
        if (tag == 184) {
         parse_sunroof_shade_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sunroof_shade_status_)));
          set_has_sunroof_shade_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_RES_FailureFeedback;
        break;
      }

      // optional uint32 RES_FailureFeedback = 24;
      case 24: {
        if (tag == 192) {
         parse_RES_FailureFeedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &res_failurefeedback_)));
          set_has_res_failurefeedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_isFindcarBreaked;
        break;
      }

      // optional bool isFindcarBreaked = 25;
      case 25: {
        if (tag == 200) {
         parse_isFindcarBreaked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfindcarbreaked_)));
          set_has_isfindcarbreaked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_RES_Status;
        break;
      }

      // optional uint32 RES_Status = 26;
      case 26: {
        if (tag == 208) {
         parse_RES_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &res_status_)));
          set_has_res_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_Last_obstacle_notification;
        break;
      }

      // optional uint32 Last_obstacle_notification = 27;
      case 27: {
        if (tag == 216) {
         parse_Last_obstacle_notification:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_obstacle_notification_)));
          set_has_last_obstacle_notification();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_SR_Motor_State;
        break;
      }

      // optional uint32 SR_Motor_State = 28;
      case 28: {
        if (tag == 224) {
         parse_SR_Motor_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sr_motor_state_)));
          set_has_sr_motor_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_Shade_Motor_State;
        break;
      }

      // optional uint32 Shade_Motor_State = 29;
      case 29: {
        if (tag == 232) {
         parse_Shade_Motor_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shade_motor_state_)));
          set_has_shade_motor_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_Shade_Area;
        break;
      }

      // optional uint32 Shade_Area = 30;
      case 30: {
        if (tag == 240) {
         parse_Shade_Area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shade_area_)));
          set_has_shade_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_BCM_SR_Degrade_Mode;
        break;
      }

      // optional uint32 BCM_SR_Degrade_Mode = 31;
      case 31: {
        if (tag == 248) {
         parse_BCM_SR_Degrade_Mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bcm_sr_degrade_mode_)));
          set_has_bcm_sr_degrade_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_BCM_Shade_Degrade_Mode;
        break;
      }

      // optional uint32 BCM_Shade_Degrade_Mode = 32;
      case 32: {
        if (tag == 256) {
         parse_BCM_Shade_Degrade_Mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bcm_shade_degrade_mode_)));
          set_has_bcm_shade_degrade_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_RESPreSoak_SmartphoneError;
        break;
      }

      // optional uint32 RESPreSoak_SmartphoneError = 33;
      case 33: {
        if (tag == 264) {
         parse_RESPreSoak_SmartphoneError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &respresoak_smartphoneerror_)));
          set_has_respresoak_smartphoneerror();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_LeftTimeDuringThisRESCycle;
        break;
      }

      // optional uint32 LeftTimeDuringThisRESCycle = 34;
      case 34: {
        if (tag == 272) {
         parse_LeftTimeDuringThisRESCycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lefttimeduringthisrescycle_)));
          set_has_lefttimeduringthisrescycle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_RearWiperStatus;
        break;
      }

      // optional uint32 RearWiperStatus = 35;
      case 35: {
        if (tag == 280) {
         parse_RearWiperStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rearwiperstatus_)));
          set_has_rearwiperstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_DriveModeRequest;
        break;
      }

      // optional uint32 DriveModeRequest = 36;
      case 36: {
        if (tag == 288) {
         parse_DriveModeRequest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drivemoderequest_)));
          set_has_drivemoderequest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_ChildLockStateDisplay;
        break;
      }

      // optional uint32 ChildLockStateDisplay = 37;
      case 37: {
        if (tag == 296) {
         parse_ChildLockStateDisplay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &childlockstatedisplay_)));
          set_has_childlockstatedisplay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_ClutchSwitchMaximumTravel;
        break;
      }

      // optional uint32 ClutchSwitchMaximumTravel = 38;
      case 38: {
        if (tag == 304) {
         parse_ClutchSwitchMaximumTravel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clutchswitchmaximumtravel_)));
          set_has_clutchswitchmaximumtravel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_ClutchSwitchMinimumTravel;
        break;
      }

      // optional uint32 ClutchSwitchMinimumTravel = 39;
      case 39: {
        if (tag == 312) {
         parse_ClutchSwitchMinimumTravel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clutchswitchminimumtravel_)));
          set_has_clutchswitchminimumtravel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_RLS_Rain;
        break;
      }

      // optional uint32 RLS_Rain = 40;
      case 40: {
        if (tag == 320) {
         parse_RLS_Rain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rls_rain_)));
          set_has_rls_rain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_RearDefrostEngaged;
        break;
      }

      // optional uint32 RearDefrostEngaged = 46;
      case 46: {
        if (tag == 368) {
         parse_RearDefrostEngaged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reardefrostengaged_)));
          set_has_reardefrostengaged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_PassengerDoorLockedStatus;
        break;
      }

      // optional uint32 PassengerDoorLockedStatus = 47;
      case 47: {
        if (tag == 376) {
         parse_PassengerDoorLockedStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passengerdoorlockedstatus_)));
          set_has_passengerdoorlockedstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_RearLeftDoorLockedStatus;
        break;
      }

      // optional uint32 RearLeftDoorLockedStatus = 48;
      case 48: {
        if (tag == 384) {
         parse_RearLeftDoorLockedStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rearleftdoorlockedstatus_)));
          set_has_rearleftdoorlockedstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_RearRightDoorLockedStatus;
        break;
      }

      // optional uint32 RearRightDoorLockedStatus = 49;
      case 49: {
        if (tag == 392) {
         parse_RearRightDoorLockedStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rearrightdoorlockedstatus_)));
          set_has_rearrightdoorlockedstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.BCM_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.BCM_Info)
  return false;
#undef DO_
}

void BCM_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.BCM_Info)
  // optional bool TrunkSwitchStatus = 1;
  if (has_trunkswitchstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->trunkswitchstatus(), output);
  }

  // optional uint32 BCM_WakeUpSleepCmd = 2;
  if (has_bcm_wakeupsleepcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bcm_wakeupsleepcmd(), output);
  }

  // optional bool front_left_door_status = 3;
  if (has_front_left_door_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->front_left_door_status(), output);
  }

  // optional bool front_right_door_status = 4;
  if (has_front_right_door_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->front_right_door_status(), output);
  }

  // optional bool rear_left_door_status = 5;
  if (has_rear_left_door_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->rear_left_door_status(), output);
  }

  // optional bool rear_right_door_status = 6;
  if (has_rear_right_door_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->rear_right_door_status(), output);
  }

  // optional bool back_door_status = 7;
  if (has_back_door_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->back_door_status(), output);
  }

  // optional bool door_lock_status = 8;
  if (has_door_lock_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->door_lock_status(), output);
  }

  // optional bool back_door_locked_status = 9;
  if (has_back_door_locked_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->back_door_locked_status(), output);
  }

  // optional bool LowBeamRequest = 10;
  if (has_lowbeamrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->lowbeamrequest(), output);
  }

  // optional uint32 FlashingIndicatorStatus = 11;
  if (has_flashingindicatorstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->flashingindicatorstatus(), output);
  }

  // optional bool HighBeamRequest = 12;
  if (has_highbeamrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->highbeamrequest(), output);
  }

  // optional bool PositionLightsRequest = 13;
  if (has_positionlightsrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->positionlightsrequest(), output);
  }

  // optional bool FrontFogLightsRequest = 14;
  if (has_frontfoglightsrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->frontfoglightsrequest(), output);
  }

  // optional bool RearFogLightStatus = 15;
  if (has_rearfoglightstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->rearfoglightstatus(), output);
  }

  // optional bool DayTimeRunningLightRequest = 16;
  if (has_daytimerunninglightrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->daytimerunninglightrequest(), output);
  }

  // optional uint32 front_right_window_status = 17;
  if (has_front_right_window_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->front_right_window_status(), output);
  }

  // optional uint32 front_left_window_status = 18;
  if (has_front_left_window_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->front_left_window_status(), output);
  }

  // optional uint32 rear_right_window_status = 19;
  if (has_rear_right_window_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->rear_right_window_status(), output);
  }

  // optional uint32 rear_left_window_status = 20;
  if (has_rear_left_window_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->rear_left_window_status(), output);
  }

  // optional bool remote_enging_run_flag = 21;
  if (has_remote_enging_run_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->remote_enging_run_flag(), output);
  }

  // optional uint32 sunroof_window_status = 22;
  if (has_sunroof_window_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->sunroof_window_status(), output);
  }

  // optional uint32 sunroof_shade_status = 23;
  if (has_sunroof_shade_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->sunroof_shade_status(), output);
  }

  // optional uint32 RES_FailureFeedback = 24;
  if (has_res_failurefeedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->res_failurefeedback(), output);
  }

  // optional bool isFindcarBreaked = 25;
  if (has_isfindcarbreaked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->isfindcarbreaked(), output);
  }

  // optional uint32 RES_Status = 26;
  if (has_res_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->res_status(), output);
  }

  // optional uint32 Last_obstacle_notification = 27;
  if (has_last_obstacle_notification()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->last_obstacle_notification(), output);
  }

  // optional uint32 SR_Motor_State = 28;
  if (has_sr_motor_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->sr_motor_state(), output);
  }

  // optional uint32 Shade_Motor_State = 29;
  if (has_shade_motor_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->shade_motor_state(), output);
  }

  // optional uint32 Shade_Area = 30;
  if (has_shade_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->shade_area(), output);
  }

  // optional uint32 BCM_SR_Degrade_Mode = 31;
  if (has_bcm_sr_degrade_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->bcm_sr_degrade_mode(), output);
  }

  // optional uint32 BCM_Shade_Degrade_Mode = 32;
  if (has_bcm_shade_degrade_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->bcm_shade_degrade_mode(), output);
  }

  // optional uint32 RESPreSoak_SmartphoneError = 33;
  if (has_respresoak_smartphoneerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->respresoak_smartphoneerror(), output);
  }

  // optional uint32 LeftTimeDuringThisRESCycle = 34;
  if (has_lefttimeduringthisrescycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->lefttimeduringthisrescycle(), output);
  }

  // optional uint32 RearWiperStatus = 35;
  if (has_rearwiperstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->rearwiperstatus(), output);
  }

  // optional uint32 DriveModeRequest = 36;
  if (has_drivemoderequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->drivemoderequest(), output);
  }

  // optional uint32 ChildLockStateDisplay = 37;
  if (has_childlockstatedisplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->childlockstatedisplay(), output);
  }

  // optional uint32 ClutchSwitchMaximumTravel = 38;
  if (has_clutchswitchmaximumtravel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->clutchswitchmaximumtravel(), output);
  }

  // optional uint32 ClutchSwitchMinimumTravel = 39;
  if (has_clutchswitchminimumtravel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->clutchswitchminimumtravel(), output);
  }

  // optional uint32 RLS_Rain = 40;
  if (has_rls_rain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->rls_rain(), output);
  }

  // optional uint32 RearDefrostEngaged = 46;
  if (has_reardefrostengaged()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->reardefrostengaged(), output);
  }

  // optional uint32 PassengerDoorLockedStatus = 47;
  if (has_passengerdoorlockedstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->passengerdoorlockedstatus(), output);
  }

  // optional uint32 RearLeftDoorLockedStatus = 48;
  if (has_rearleftdoorlockedstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->rearleftdoorlockedstatus(), output);
  }

  // optional uint32 RearRightDoorLockedStatus = 49;
  if (has_rearrightdoorlockedstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->rearrightdoorlockedstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.BCM_Info)
}

::google::protobuf::uint8* BCM_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.BCM_Info)
  // optional bool TrunkSwitchStatus = 1;
  if (has_trunkswitchstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->trunkswitchstatus(), target);
  }

  // optional uint32 BCM_WakeUpSleepCmd = 2;
  if (has_bcm_wakeupsleepcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bcm_wakeupsleepcmd(), target);
  }

  // optional bool front_left_door_status = 3;
  if (has_front_left_door_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->front_left_door_status(), target);
  }

  // optional bool front_right_door_status = 4;
  if (has_front_right_door_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->front_right_door_status(), target);
  }

  // optional bool rear_left_door_status = 5;
  if (has_rear_left_door_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->rear_left_door_status(), target);
  }

  // optional bool rear_right_door_status = 6;
  if (has_rear_right_door_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->rear_right_door_status(), target);
  }

  // optional bool back_door_status = 7;
  if (has_back_door_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->back_door_status(), target);
  }

  // optional bool door_lock_status = 8;
  if (has_door_lock_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->door_lock_status(), target);
  }

  // optional bool back_door_locked_status = 9;
  if (has_back_door_locked_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->back_door_locked_status(), target);
  }

  // optional bool LowBeamRequest = 10;
  if (has_lowbeamrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->lowbeamrequest(), target);
  }

  // optional uint32 FlashingIndicatorStatus = 11;
  if (has_flashingindicatorstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->flashingindicatorstatus(), target);
  }

  // optional bool HighBeamRequest = 12;
  if (has_highbeamrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->highbeamrequest(), target);
  }

  // optional bool PositionLightsRequest = 13;
  if (has_positionlightsrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->positionlightsrequest(), target);
  }

  // optional bool FrontFogLightsRequest = 14;
  if (has_frontfoglightsrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->frontfoglightsrequest(), target);
  }

  // optional bool RearFogLightStatus = 15;
  if (has_rearfoglightstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->rearfoglightstatus(), target);
  }

  // optional bool DayTimeRunningLightRequest = 16;
  if (has_daytimerunninglightrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->daytimerunninglightrequest(), target);
  }

  // optional uint32 front_right_window_status = 17;
  if (has_front_right_window_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->front_right_window_status(), target);
  }

  // optional uint32 front_left_window_status = 18;
  if (has_front_left_window_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->front_left_window_status(), target);
  }

  // optional uint32 rear_right_window_status = 19;
  if (has_rear_right_window_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->rear_right_window_status(), target);
  }

  // optional uint32 rear_left_window_status = 20;
  if (has_rear_left_window_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->rear_left_window_status(), target);
  }

  // optional bool remote_enging_run_flag = 21;
  if (has_remote_enging_run_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->remote_enging_run_flag(), target);
  }

  // optional uint32 sunroof_window_status = 22;
  if (has_sunroof_window_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->sunroof_window_status(), target);
  }

  // optional uint32 sunroof_shade_status = 23;
  if (has_sunroof_shade_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->sunroof_shade_status(), target);
  }

  // optional uint32 RES_FailureFeedback = 24;
  if (has_res_failurefeedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->res_failurefeedback(), target);
  }

  // optional bool isFindcarBreaked = 25;
  if (has_isfindcarbreaked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->isfindcarbreaked(), target);
  }

  // optional uint32 RES_Status = 26;
  if (has_res_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->res_status(), target);
  }

  // optional uint32 Last_obstacle_notification = 27;
  if (has_last_obstacle_notification()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->last_obstacle_notification(), target);
  }

  // optional uint32 SR_Motor_State = 28;
  if (has_sr_motor_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->sr_motor_state(), target);
  }

  // optional uint32 Shade_Motor_State = 29;
  if (has_shade_motor_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->shade_motor_state(), target);
  }

  // optional uint32 Shade_Area = 30;
  if (has_shade_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->shade_area(), target);
  }

  // optional uint32 BCM_SR_Degrade_Mode = 31;
  if (has_bcm_sr_degrade_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->bcm_sr_degrade_mode(), target);
  }

  // optional uint32 BCM_Shade_Degrade_Mode = 32;
  if (has_bcm_shade_degrade_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->bcm_shade_degrade_mode(), target);
  }

  // optional uint32 RESPreSoak_SmartphoneError = 33;
  if (has_respresoak_smartphoneerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->respresoak_smartphoneerror(), target);
  }

  // optional uint32 LeftTimeDuringThisRESCycle = 34;
  if (has_lefttimeduringthisrescycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->lefttimeduringthisrescycle(), target);
  }

  // optional uint32 RearWiperStatus = 35;
  if (has_rearwiperstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->rearwiperstatus(), target);
  }

  // optional uint32 DriveModeRequest = 36;
  if (has_drivemoderequest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->drivemoderequest(), target);
  }

  // optional uint32 ChildLockStateDisplay = 37;
  if (has_childlockstatedisplay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->childlockstatedisplay(), target);
  }

  // optional uint32 ClutchSwitchMaximumTravel = 38;
  if (has_clutchswitchmaximumtravel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->clutchswitchmaximumtravel(), target);
  }

  // optional uint32 ClutchSwitchMinimumTravel = 39;
  if (has_clutchswitchminimumtravel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->clutchswitchminimumtravel(), target);
  }

  // optional uint32 RLS_Rain = 40;
  if (has_rls_rain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->rls_rain(), target);
  }

  // optional uint32 RearDefrostEngaged = 46;
  if (has_reardefrostengaged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->reardefrostengaged(), target);
  }

  // optional uint32 PassengerDoorLockedStatus = 47;
  if (has_passengerdoorlockedstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->passengerdoorlockedstatus(), target);
  }

  // optional uint32 RearLeftDoorLockedStatus = 48;
  if (has_rearleftdoorlockedstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->rearleftdoorlockedstatus(), target);
  }

  // optional uint32 RearRightDoorLockedStatus = 49;
  if (has_rearrightdoorlockedstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->rearrightdoorlockedstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.BCM_Info)
  return target;
}

int BCM_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool TrunkSwitchStatus = 1;
    if (has_trunkswitchstatus()) {
      total_size += 1 + 1;
    }

    // optional uint32 BCM_WakeUpSleepCmd = 2;
    if (has_bcm_wakeupsleepcmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bcm_wakeupsleepcmd());
    }

    // optional bool front_left_door_status = 3;
    if (has_front_left_door_status()) {
      total_size += 1 + 1;
    }

    // optional bool front_right_door_status = 4;
    if (has_front_right_door_status()) {
      total_size += 1 + 1;
    }

    // optional bool rear_left_door_status = 5;
    if (has_rear_left_door_status()) {
      total_size += 1 + 1;
    }

    // optional bool rear_right_door_status = 6;
    if (has_rear_right_door_status()) {
      total_size += 1 + 1;
    }

    // optional bool back_door_status = 7;
    if (has_back_door_status()) {
      total_size += 1 + 1;
    }

    // optional bool door_lock_status = 8;
    if (has_door_lock_status()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool back_door_locked_status = 9;
    if (has_back_door_locked_status()) {
      total_size += 1 + 1;
    }

    // optional bool LowBeamRequest = 10;
    if (has_lowbeamrequest()) {
      total_size += 1 + 1;
    }

    // optional uint32 FlashingIndicatorStatus = 11;
    if (has_flashingindicatorstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flashingindicatorstatus());
    }

    // optional bool HighBeamRequest = 12;
    if (has_highbeamrequest()) {
      total_size += 1 + 1;
    }

    // optional bool PositionLightsRequest = 13;
    if (has_positionlightsrequest()) {
      total_size += 1 + 1;
    }

    // optional bool FrontFogLightsRequest = 14;
    if (has_frontfoglightsrequest()) {
      total_size += 1 + 1;
    }

    // optional bool RearFogLightStatus = 15;
    if (has_rearfoglightstatus()) {
      total_size += 1 + 1;
    }

    // optional bool DayTimeRunningLightRequest = 16;
    if (has_daytimerunninglightrequest()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 front_right_window_status = 17;
    if (has_front_right_window_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->front_right_window_status());
    }

    // optional uint32 front_left_window_status = 18;
    if (has_front_left_window_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->front_left_window_status());
    }

    // optional uint32 rear_right_window_status = 19;
    if (has_rear_right_window_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rear_right_window_status());
    }

    // optional uint32 rear_left_window_status = 20;
    if (has_rear_left_window_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rear_left_window_status());
    }

    // optional bool remote_enging_run_flag = 21;
    if (has_remote_enging_run_flag()) {
      total_size += 2 + 1;
    }

    // optional uint32 sunroof_window_status = 22;
    if (has_sunroof_window_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sunroof_window_status());
    }

    // optional uint32 sunroof_shade_status = 23;
    if (has_sunroof_shade_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sunroof_shade_status());
    }

    // optional uint32 RES_FailureFeedback = 24;
    if (has_res_failurefeedback()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->res_failurefeedback());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool isFindcarBreaked = 25;
    if (has_isfindcarbreaked()) {
      total_size += 2 + 1;
    }

    // optional uint32 RES_Status = 26;
    if (has_res_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->res_status());
    }

    // optional uint32 Last_obstacle_notification = 27;
    if (has_last_obstacle_notification()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_obstacle_notification());
    }

    // optional uint32 SR_Motor_State = 28;
    if (has_sr_motor_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sr_motor_state());
    }

    // optional uint32 Shade_Motor_State = 29;
    if (has_shade_motor_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shade_motor_state());
    }

    // optional uint32 Shade_Area = 30;
    if (has_shade_area()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shade_area());
    }

    // optional uint32 BCM_SR_Degrade_Mode = 31;
    if (has_bcm_sr_degrade_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bcm_sr_degrade_mode());
    }

    // optional uint32 BCM_Shade_Degrade_Mode = 32;
    if (has_bcm_shade_degrade_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bcm_shade_degrade_mode());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 RESPreSoak_SmartphoneError = 33;
    if (has_respresoak_smartphoneerror()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->respresoak_smartphoneerror());
    }

    // optional uint32 LeftTimeDuringThisRESCycle = 34;
    if (has_lefttimeduringthisrescycle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lefttimeduringthisrescycle());
    }

    // optional uint32 RearWiperStatus = 35;
    if (has_rearwiperstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rearwiperstatus());
    }

    // optional uint32 DriveModeRequest = 36;
    if (has_drivemoderequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drivemoderequest());
    }

    // optional uint32 ChildLockStateDisplay = 37;
    if (has_childlockstatedisplay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->childlockstatedisplay());
    }

    // optional uint32 ClutchSwitchMaximumTravel = 38;
    if (has_clutchswitchmaximumtravel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clutchswitchmaximumtravel());
    }

    // optional uint32 ClutchSwitchMinimumTravel = 39;
    if (has_clutchswitchminimumtravel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clutchswitchminimumtravel());
    }

    // optional uint32 RLS_Rain = 40;
    if (has_rls_rain()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rls_rain());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 RearDefrostEngaged = 46;
    if (has_reardefrostengaged()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reardefrostengaged());
    }

    // optional uint32 PassengerDoorLockedStatus = 47;
    if (has_passengerdoorlockedstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passengerdoorlockedstatus());
    }

    // optional uint32 RearLeftDoorLockedStatus = 48;
    if (has_rearleftdoorlockedstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rearleftdoorlockedstatus());
    }

    // optional uint32 RearRightDoorLockedStatus = 49;
    if (has_rearrightdoorlockedstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rearrightdoorlockedstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BCM_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BCM_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BCM_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BCM_Info::MergeFrom(const BCM_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trunkswitchstatus()) {
      set_trunkswitchstatus(from.trunkswitchstatus());
    }
    if (from.has_bcm_wakeupsleepcmd()) {
      set_bcm_wakeupsleepcmd(from.bcm_wakeupsleepcmd());
    }
    if (from.has_front_left_door_status()) {
      set_front_left_door_status(from.front_left_door_status());
    }
    if (from.has_front_right_door_status()) {
      set_front_right_door_status(from.front_right_door_status());
    }
    if (from.has_rear_left_door_status()) {
      set_rear_left_door_status(from.rear_left_door_status());
    }
    if (from.has_rear_right_door_status()) {
      set_rear_right_door_status(from.rear_right_door_status());
    }
    if (from.has_back_door_status()) {
      set_back_door_status(from.back_door_status());
    }
    if (from.has_door_lock_status()) {
      set_door_lock_status(from.door_lock_status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_back_door_locked_status()) {
      set_back_door_locked_status(from.back_door_locked_status());
    }
    if (from.has_lowbeamrequest()) {
      set_lowbeamrequest(from.lowbeamrequest());
    }
    if (from.has_flashingindicatorstatus()) {
      set_flashingindicatorstatus(from.flashingindicatorstatus());
    }
    if (from.has_highbeamrequest()) {
      set_highbeamrequest(from.highbeamrequest());
    }
    if (from.has_positionlightsrequest()) {
      set_positionlightsrequest(from.positionlightsrequest());
    }
    if (from.has_frontfoglightsrequest()) {
      set_frontfoglightsrequest(from.frontfoglightsrequest());
    }
    if (from.has_rearfoglightstatus()) {
      set_rearfoglightstatus(from.rearfoglightstatus());
    }
    if (from.has_daytimerunninglightrequest()) {
      set_daytimerunninglightrequest(from.daytimerunninglightrequest());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_front_right_window_status()) {
      set_front_right_window_status(from.front_right_window_status());
    }
    if (from.has_front_left_window_status()) {
      set_front_left_window_status(from.front_left_window_status());
    }
    if (from.has_rear_right_window_status()) {
      set_rear_right_window_status(from.rear_right_window_status());
    }
    if (from.has_rear_left_window_status()) {
      set_rear_left_window_status(from.rear_left_window_status());
    }
    if (from.has_remote_enging_run_flag()) {
      set_remote_enging_run_flag(from.remote_enging_run_flag());
    }
    if (from.has_sunroof_window_status()) {
      set_sunroof_window_status(from.sunroof_window_status());
    }
    if (from.has_sunroof_shade_status()) {
      set_sunroof_shade_status(from.sunroof_shade_status());
    }
    if (from.has_res_failurefeedback()) {
      set_res_failurefeedback(from.res_failurefeedback());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_isfindcarbreaked()) {
      set_isfindcarbreaked(from.isfindcarbreaked());
    }
    if (from.has_res_status()) {
      set_res_status(from.res_status());
    }
    if (from.has_last_obstacle_notification()) {
      set_last_obstacle_notification(from.last_obstacle_notification());
    }
    if (from.has_sr_motor_state()) {
      set_sr_motor_state(from.sr_motor_state());
    }
    if (from.has_shade_motor_state()) {
      set_shade_motor_state(from.shade_motor_state());
    }
    if (from.has_shade_area()) {
      set_shade_area(from.shade_area());
    }
    if (from.has_bcm_sr_degrade_mode()) {
      set_bcm_sr_degrade_mode(from.bcm_sr_degrade_mode());
    }
    if (from.has_bcm_shade_degrade_mode()) {
      set_bcm_shade_degrade_mode(from.bcm_shade_degrade_mode());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_respresoak_smartphoneerror()) {
      set_respresoak_smartphoneerror(from.respresoak_smartphoneerror());
    }
    if (from.has_lefttimeduringthisrescycle()) {
      set_lefttimeduringthisrescycle(from.lefttimeduringthisrescycle());
    }
    if (from.has_rearwiperstatus()) {
      set_rearwiperstatus(from.rearwiperstatus());
    }
    if (from.has_drivemoderequest()) {
      set_drivemoderequest(from.drivemoderequest());
    }
    if (from.has_childlockstatedisplay()) {
      set_childlockstatedisplay(from.childlockstatedisplay());
    }
    if (from.has_clutchswitchmaximumtravel()) {
      set_clutchswitchmaximumtravel(from.clutchswitchmaximumtravel());
    }
    if (from.has_clutchswitchminimumtravel()) {
      set_clutchswitchminimumtravel(from.clutchswitchminimumtravel());
    }
    if (from.has_rls_rain()) {
      set_rls_rain(from.rls_rain());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_reardefrostengaged()) {
      set_reardefrostengaged(from.reardefrostengaged());
    }
    if (from.has_passengerdoorlockedstatus()) {
      set_passengerdoorlockedstatus(from.passengerdoorlockedstatus());
    }
    if (from.has_rearleftdoorlockedstatus()) {
      set_rearleftdoorlockedstatus(from.rearleftdoorlockedstatus());
    }
    if (from.has_rearrightdoorlockedstatus()) {
      set_rearrightdoorlockedstatus(from.rearrightdoorlockedstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BCM_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BCM_Info::CopyFrom(const BCM_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BCM_Info::IsInitialized() const {

  return true;
}

void BCM_Info::Swap(BCM_Info* other) {
  if (other != this) {
    std::swap(trunkswitchstatus_, other->trunkswitchstatus_);
    std::swap(bcm_wakeupsleepcmd_, other->bcm_wakeupsleepcmd_);
    std::swap(front_left_door_status_, other->front_left_door_status_);
    std::swap(front_right_door_status_, other->front_right_door_status_);
    std::swap(rear_left_door_status_, other->rear_left_door_status_);
    std::swap(rear_right_door_status_, other->rear_right_door_status_);
    std::swap(back_door_status_, other->back_door_status_);
    std::swap(door_lock_status_, other->door_lock_status_);
    std::swap(back_door_locked_status_, other->back_door_locked_status_);
    std::swap(lowbeamrequest_, other->lowbeamrequest_);
    std::swap(flashingindicatorstatus_, other->flashingindicatorstatus_);
    std::swap(highbeamrequest_, other->highbeamrequest_);
    std::swap(positionlightsrequest_, other->positionlightsrequest_);
    std::swap(frontfoglightsrequest_, other->frontfoglightsrequest_);
    std::swap(rearfoglightstatus_, other->rearfoglightstatus_);
    std::swap(daytimerunninglightrequest_, other->daytimerunninglightrequest_);
    std::swap(front_right_window_status_, other->front_right_window_status_);
    std::swap(front_left_window_status_, other->front_left_window_status_);
    std::swap(rear_right_window_status_, other->rear_right_window_status_);
    std::swap(rear_left_window_status_, other->rear_left_window_status_);
    std::swap(remote_enging_run_flag_, other->remote_enging_run_flag_);
    std::swap(sunroof_window_status_, other->sunroof_window_status_);
    std::swap(sunroof_shade_status_, other->sunroof_shade_status_);
    std::swap(res_failurefeedback_, other->res_failurefeedback_);
    std::swap(isfindcarbreaked_, other->isfindcarbreaked_);
    std::swap(res_status_, other->res_status_);
    std::swap(last_obstacle_notification_, other->last_obstacle_notification_);
    std::swap(sr_motor_state_, other->sr_motor_state_);
    std::swap(shade_motor_state_, other->shade_motor_state_);
    std::swap(shade_area_, other->shade_area_);
    std::swap(bcm_sr_degrade_mode_, other->bcm_sr_degrade_mode_);
    std::swap(bcm_shade_degrade_mode_, other->bcm_shade_degrade_mode_);
    std::swap(respresoak_smartphoneerror_, other->respresoak_smartphoneerror_);
    std::swap(lefttimeduringthisrescycle_, other->lefttimeduringthisrescycle_);
    std::swap(rearwiperstatus_, other->rearwiperstatus_);
    std::swap(drivemoderequest_, other->drivemoderequest_);
    std::swap(childlockstatedisplay_, other->childlockstatedisplay_);
    std::swap(clutchswitchmaximumtravel_, other->clutchswitchmaximumtravel_);
    std::swap(clutchswitchminimumtravel_, other->clutchswitchminimumtravel_);
    std::swap(rls_rain_, other->rls_rain_);
    std::swap(reardefrostengaged_, other->reardefrostengaged_);
    std::swap(passengerdoorlockedstatus_, other->passengerdoorlockedstatus_);
    std::swap(rearleftdoorlockedstatus_, other->rearleftdoorlockedstatus_);
    std::swap(rearrightdoorlockedstatus_, other->rearrightdoorlockedstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BCM_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BCM_Info_descriptor_;
  metadata.reflection = BCM_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACU_Info::kAirbagCrashOrderFieldNumber;
const int ACU_Info::kDriverSafetyBeltBuckleStateFieldNumber;
const int ACU_Info::kPassengerSafetyBeltBuckleStateFieldNumber;
const int ACU_Info::kSecondRowCenterSafetyBeltStateFieldNumber;
const int ACU_Info::kSecondRowLeftSafetyBeltStateFieldNumber;
const int ACU_Info::kSecondRowRightSafetyBeltStateFieldNumber;
const int ACU_Info::kPassengerPresenceStateFieldNumber;
const int ACU_Info::kSecondRowCenterPresenceStateFieldNumber;
const int ACU_Info::kSecondRowLeftPresenceStateFieldNumber;
const int ACU_Info::kSecondRowRightPresenceStateFieldNumber;
const int ACU_Info::kFrontPassengerSafetyBeltReminderFieldNumber;
#endif  // !_MSC_VER

ACU_Info::ACU_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.ACU_Info)
}

void ACU_Info::InitAsDefaultInstance() {
}

ACU_Info::ACU_Info(const ACU_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.ACU_Info)
}

void ACU_Info::SharedCtor() {
  _cached_size_ = 0;
  airbag_crash_order_ = 0u;
  driversafetybeltbucklestate_ = 0u;
  passengersafetybeltbucklestate_ = 0u;
  secondrowcentersafetybeltstate_ = 0u;
  secondrowleftsafetybeltstate_ = 0u;
  secondrowrightsafetybeltstate_ = 0u;
  passengerpresencestate_ = 0u;
  secondrowcenterpresencestate_ = 0u;
  secondrowleftpresencestate_ = 0u;
  secondrowrightpresencestate_ = 0u;
  frontpassengersafetybeltreminder_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACU_Info::~ACU_Info() {
  // @@protoc_insertion_point(destructor:tbox.protocol.ACU_Info)
  SharedDtor();
}

void ACU_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACU_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACU_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACU_Info_descriptor_;
}

const ACU_Info& ACU_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

ACU_Info* ACU_Info::default_instance_ = NULL;

ACU_Info* ACU_Info::New() const {
  return new ACU_Info;
}

void ACU_Info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ACU_Info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(airbag_crash_order_, secondrowcenterpresencestate_);
  }
  ZR_(secondrowleftpresencestate_, frontpassengersafetybeltreminder_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACU_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.ACU_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Airbag_Crash_Order = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &airbag_crash_order_)));
          set_has_airbag_crash_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DriverSafetyBeltBuckleState;
        break;
      }

      // optional uint32 DriverSafetyBeltBuckleState = 2;
      case 2: {
        if (tag == 16) {
         parse_DriverSafetyBeltBuckleState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &driversafetybeltbucklestate_)));
          set_has_driversafetybeltbucklestate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PassengerSafetyBeltBuckleState;
        break;
      }

      // optional uint32 PassengerSafetyBeltBuckleState = 3;
      case 3: {
        if (tag == 24) {
         parse_PassengerSafetyBeltBuckleState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passengersafetybeltbucklestate_)));
          set_has_passengersafetybeltbucklestate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SecondRowCenterSafetyBeltState;
        break;
      }

      // optional uint32 SecondRowCenterSafetyBeltState = 4;
      case 4: {
        if (tag == 32) {
         parse_SecondRowCenterSafetyBeltState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondrowcentersafetybeltstate_)));
          set_has_secondrowcentersafetybeltstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_SecondRowLeftSafetyBeltState;
        break;
      }

      // optional uint32 SecondRowLeftSafetyBeltState = 5;
      case 5: {
        if (tag == 40) {
         parse_SecondRowLeftSafetyBeltState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondrowleftsafetybeltstate_)));
          set_has_secondrowleftsafetybeltstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_SecondRowRightSafetyBeltState;
        break;
      }

      // optional uint32 SecondRowRightSafetyBeltState = 6;
      case 6: {
        if (tag == 48) {
         parse_SecondRowRightSafetyBeltState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondrowrightsafetybeltstate_)));
          set_has_secondrowrightsafetybeltstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_PassengerPresenceState;
        break;
      }

      // optional uint32 PassengerPresenceState = 7;
      case 7: {
        if (tag == 56) {
         parse_PassengerPresenceState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passengerpresencestate_)));
          set_has_passengerpresencestate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_SecondRowCenterPresenceState;
        break;
      }

      // optional uint32 SecondRowCenterPresenceState = 8;
      case 8: {
        if (tag == 64) {
         parse_SecondRowCenterPresenceState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondrowcenterpresencestate_)));
          set_has_secondrowcenterpresencestate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_SecondRowLeftPresenceState;
        break;
      }

      // optional uint32 SecondRowLeftPresenceState = 9;
      case 9: {
        if (tag == 72) {
         parse_SecondRowLeftPresenceState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondrowleftpresencestate_)));
          set_has_secondrowleftpresencestate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_SecondRowRightPresenceState;
        break;
      }

      // optional uint32 SecondRowRightPresenceState = 10;
      case 10: {
        if (tag == 80) {
         parse_SecondRowRightPresenceState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondrowrightpresencestate_)));
          set_has_secondrowrightpresencestate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_FrontPassengerSafetyBeltReminder;
        break;
      }

      // optional uint32 FrontPassengerSafetyBeltReminder = 11;
      case 11: {
        if (tag == 88) {
         parse_FrontPassengerSafetyBeltReminder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frontpassengersafetybeltreminder_)));
          set_has_frontpassengersafetybeltreminder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.ACU_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.ACU_Info)
  return false;
#undef DO_
}

void ACU_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.ACU_Info)
  // optional uint32 Airbag_Crash_Order = 1;
  if (has_airbag_crash_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->airbag_crash_order(), output);
  }

  // optional uint32 DriverSafetyBeltBuckleState = 2;
  if (has_driversafetybeltbucklestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->driversafetybeltbucklestate(), output);
  }

  // optional uint32 PassengerSafetyBeltBuckleState = 3;
  if (has_passengersafetybeltbucklestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->passengersafetybeltbucklestate(), output);
  }

  // optional uint32 SecondRowCenterSafetyBeltState = 4;
  if (has_secondrowcentersafetybeltstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->secondrowcentersafetybeltstate(), output);
  }

  // optional uint32 SecondRowLeftSafetyBeltState = 5;
  if (has_secondrowleftsafetybeltstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->secondrowleftsafetybeltstate(), output);
  }

  // optional uint32 SecondRowRightSafetyBeltState = 6;
  if (has_secondrowrightsafetybeltstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->secondrowrightsafetybeltstate(), output);
  }

  // optional uint32 PassengerPresenceState = 7;
  if (has_passengerpresencestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->passengerpresencestate(), output);
  }

  // optional uint32 SecondRowCenterPresenceState = 8;
  if (has_secondrowcenterpresencestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->secondrowcenterpresencestate(), output);
  }

  // optional uint32 SecondRowLeftPresenceState = 9;
  if (has_secondrowleftpresencestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->secondrowleftpresencestate(), output);
  }

  // optional uint32 SecondRowRightPresenceState = 10;
  if (has_secondrowrightpresencestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->secondrowrightpresencestate(), output);
  }

  // optional uint32 FrontPassengerSafetyBeltReminder = 11;
  if (has_frontpassengersafetybeltreminder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->frontpassengersafetybeltreminder(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.ACU_Info)
}

::google::protobuf::uint8* ACU_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.ACU_Info)
  // optional uint32 Airbag_Crash_Order = 1;
  if (has_airbag_crash_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->airbag_crash_order(), target);
  }

  // optional uint32 DriverSafetyBeltBuckleState = 2;
  if (has_driversafetybeltbucklestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->driversafetybeltbucklestate(), target);
  }

  // optional uint32 PassengerSafetyBeltBuckleState = 3;
  if (has_passengersafetybeltbucklestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->passengersafetybeltbucklestate(), target);
  }

  // optional uint32 SecondRowCenterSafetyBeltState = 4;
  if (has_secondrowcentersafetybeltstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->secondrowcentersafetybeltstate(), target);
  }

  // optional uint32 SecondRowLeftSafetyBeltState = 5;
  if (has_secondrowleftsafetybeltstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->secondrowleftsafetybeltstate(), target);
  }

  // optional uint32 SecondRowRightSafetyBeltState = 6;
  if (has_secondrowrightsafetybeltstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->secondrowrightsafetybeltstate(), target);
  }

  // optional uint32 PassengerPresenceState = 7;
  if (has_passengerpresencestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->passengerpresencestate(), target);
  }

  // optional uint32 SecondRowCenterPresenceState = 8;
  if (has_secondrowcenterpresencestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->secondrowcenterpresencestate(), target);
  }

  // optional uint32 SecondRowLeftPresenceState = 9;
  if (has_secondrowleftpresencestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->secondrowleftpresencestate(), target);
  }

  // optional uint32 SecondRowRightPresenceState = 10;
  if (has_secondrowrightpresencestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->secondrowrightpresencestate(), target);
  }

  // optional uint32 FrontPassengerSafetyBeltReminder = 11;
  if (has_frontpassengersafetybeltreminder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->frontpassengersafetybeltreminder(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.ACU_Info)
  return target;
}

int ACU_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Airbag_Crash_Order = 1;
    if (has_airbag_crash_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->airbag_crash_order());
    }

    // optional uint32 DriverSafetyBeltBuckleState = 2;
    if (has_driversafetybeltbucklestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->driversafetybeltbucklestate());
    }

    // optional uint32 PassengerSafetyBeltBuckleState = 3;
    if (has_passengersafetybeltbucklestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passengersafetybeltbucklestate());
    }

    // optional uint32 SecondRowCenterSafetyBeltState = 4;
    if (has_secondrowcentersafetybeltstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondrowcentersafetybeltstate());
    }

    // optional uint32 SecondRowLeftSafetyBeltState = 5;
    if (has_secondrowleftsafetybeltstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondrowleftsafetybeltstate());
    }

    // optional uint32 SecondRowRightSafetyBeltState = 6;
    if (has_secondrowrightsafetybeltstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondrowrightsafetybeltstate());
    }

    // optional uint32 PassengerPresenceState = 7;
    if (has_passengerpresencestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passengerpresencestate());
    }

    // optional uint32 SecondRowCenterPresenceState = 8;
    if (has_secondrowcenterpresencestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondrowcenterpresencestate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 SecondRowLeftPresenceState = 9;
    if (has_secondrowleftpresencestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondrowleftpresencestate());
    }

    // optional uint32 SecondRowRightPresenceState = 10;
    if (has_secondrowrightpresencestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondrowrightpresencestate());
    }

    // optional uint32 FrontPassengerSafetyBeltReminder = 11;
    if (has_frontpassengersafetybeltreminder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frontpassengersafetybeltreminder());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACU_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACU_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACU_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACU_Info::MergeFrom(const ACU_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_airbag_crash_order()) {
      set_airbag_crash_order(from.airbag_crash_order());
    }
    if (from.has_driversafetybeltbucklestate()) {
      set_driversafetybeltbucklestate(from.driversafetybeltbucklestate());
    }
    if (from.has_passengersafetybeltbucklestate()) {
      set_passengersafetybeltbucklestate(from.passengersafetybeltbucklestate());
    }
    if (from.has_secondrowcentersafetybeltstate()) {
      set_secondrowcentersafetybeltstate(from.secondrowcentersafetybeltstate());
    }
    if (from.has_secondrowleftsafetybeltstate()) {
      set_secondrowleftsafetybeltstate(from.secondrowleftsafetybeltstate());
    }
    if (from.has_secondrowrightsafetybeltstate()) {
      set_secondrowrightsafetybeltstate(from.secondrowrightsafetybeltstate());
    }
    if (from.has_passengerpresencestate()) {
      set_passengerpresencestate(from.passengerpresencestate());
    }
    if (from.has_secondrowcenterpresencestate()) {
      set_secondrowcenterpresencestate(from.secondrowcenterpresencestate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_secondrowleftpresencestate()) {
      set_secondrowleftpresencestate(from.secondrowleftpresencestate());
    }
    if (from.has_secondrowrightpresencestate()) {
      set_secondrowrightpresencestate(from.secondrowrightpresencestate());
    }
    if (from.has_frontpassengersafetybeltreminder()) {
      set_frontpassengersafetybeltreminder(from.frontpassengersafetybeltreminder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACU_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACU_Info::CopyFrom(const ACU_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACU_Info::IsInitialized() const {

  return true;
}

void ACU_Info::Swap(ACU_Info* other) {
  if (other != this) {
    std::swap(airbag_crash_order_, other->airbag_crash_order_);
    std::swap(driversafetybeltbucklestate_, other->driversafetybeltbucklestate_);
    std::swap(passengersafetybeltbucklestate_, other->passengersafetybeltbucklestate_);
    std::swap(secondrowcentersafetybeltstate_, other->secondrowcentersafetybeltstate_);
    std::swap(secondrowleftsafetybeltstate_, other->secondrowleftsafetybeltstate_);
    std::swap(secondrowrightsafetybeltstate_, other->secondrowrightsafetybeltstate_);
    std::swap(passengerpresencestate_, other->passengerpresencestate_);
    std::swap(secondrowcenterpresencestate_, other->secondrowcenterpresencestate_);
    std::swap(secondrowleftpresencestate_, other->secondrowleftpresencestate_);
    std::swap(secondrowrightpresencestate_, other->secondrowrightpresencestate_);
    std::swap(frontpassengersafetybeltreminder_, other->frontpassengersafetybeltreminder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACU_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACU_Info_descriptor_;
  metadata.reflection = ACU_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AT_Info::kFastTorqueRequestFieldNumber;
const int AT_Info::kATCVTRangeIndicationFieldNumber;
#endif  // !_MSC_VER

AT_Info::AT_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.AT_Info)
}

void AT_Info::InitAsDefaultInstance() {
}

AT_Info::AT_Info(const AT_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.AT_Info)
}

void AT_Info::SharedCtor() {
  _cached_size_ = 0;
  fasttorquerequest_ = 0u;
  atcvt_rangeindication_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AT_Info::~AT_Info() {
  // @@protoc_insertion_point(destructor:tbox.protocol.AT_Info)
  SharedDtor();
}

void AT_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AT_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AT_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AT_Info_descriptor_;
}

const AT_Info& AT_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

AT_Info* AT_Info::default_instance_ = NULL;

AT_Info* AT_Info::New() const {
  return new AT_Info;
}

void AT_Info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AT_Info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fasttorquerequest_, atcvt_rangeindication_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AT_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.AT_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FastTorqueRequest = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fasttorquerequest_)));
          set_has_fasttorquerequest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ATCVT_RangeIndication;
        break;
      }

      // optional uint32 ATCVT_RangeIndication = 2;
      case 2: {
        if (tag == 16) {
         parse_ATCVT_RangeIndication:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atcvt_rangeindication_)));
          set_has_atcvt_rangeindication();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.AT_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.AT_Info)
  return false;
#undef DO_
}

void AT_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.AT_Info)
  // optional uint32 FastTorqueRequest = 1;
  if (has_fasttorquerequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fasttorquerequest(), output);
  }

  // optional uint32 ATCVT_RangeIndication = 2;
  if (has_atcvt_rangeindication()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->atcvt_rangeindication(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.AT_Info)
}

::google::protobuf::uint8* AT_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.AT_Info)
  // optional uint32 FastTorqueRequest = 1;
  if (has_fasttorquerequest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fasttorquerequest(), target);
  }

  // optional uint32 ATCVT_RangeIndication = 2;
  if (has_atcvt_rangeindication()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->atcvt_rangeindication(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.AT_Info)
  return target;
}

int AT_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FastTorqueRequest = 1;
    if (has_fasttorquerequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fasttorquerequest());
    }

    // optional uint32 ATCVT_RangeIndication = 2;
    if (has_atcvt_rangeindication()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atcvt_rangeindication());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AT_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AT_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AT_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AT_Info::MergeFrom(const AT_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fasttorquerequest()) {
      set_fasttorquerequest(from.fasttorquerequest());
    }
    if (from.has_atcvt_rangeindication()) {
      set_atcvt_rangeindication(from.atcvt_rangeindication());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AT_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AT_Info::CopyFrom(const AT_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AT_Info::IsInitialized() const {

  return true;
}

void AT_Info::Swap(AT_Info* other) {
  if (other != this) {
    std::swap(fasttorquerequest_, other->fasttorquerequest_);
    std::swap(atcvt_rangeindication_, other->atcvt_rangeindication_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AT_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AT_Info_descriptor_;
  metadata.reflection = AT_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int STRG_Info::kSteeringAngleFieldNumber;
const int STRG_Info::kSteeringAngleVelocityFieldNumber;
#endif  // !_MSC_VER

STRG_Info::STRG_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.STRG_Info)
}

void STRG_Info::InitAsDefaultInstance() {
}

STRG_Info::STRG_Info(const STRG_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.STRG_Info)
}

void STRG_Info::SharedCtor() {
  _cached_size_ = 0;
  steering_angle_ = 0u;
  steering_angle_velocity_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

STRG_Info::~STRG_Info() {
  // @@protoc_insertion_point(destructor:tbox.protocol.STRG_Info)
  SharedDtor();
}

void STRG_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void STRG_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STRG_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STRG_Info_descriptor_;
}

const STRG_Info& STRG_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

STRG_Info* STRG_Info::default_instance_ = NULL;

STRG_Info* STRG_Info::New() const {
  return new STRG_Info;
}

void STRG_Info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<STRG_Info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(steering_angle_, steering_angle_velocity_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool STRG_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.STRG_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Steering_Angle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steering_angle_)));
          set_has_steering_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Steering_Angle_Velocity;
        break;
      }

      // optional uint32 Steering_Angle_Velocity = 2;
      case 2: {
        if (tag == 16) {
         parse_Steering_Angle_Velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steering_angle_velocity_)));
          set_has_steering_angle_velocity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.STRG_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.STRG_Info)
  return false;
#undef DO_
}

void STRG_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.STRG_Info)
  // optional uint32 Steering_Angle = 1;
  if (has_steering_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->steering_angle(), output);
  }

  // optional uint32 Steering_Angle_Velocity = 2;
  if (has_steering_angle_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->steering_angle_velocity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.STRG_Info)
}

::google::protobuf::uint8* STRG_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.STRG_Info)
  // optional uint32 Steering_Angle = 1;
  if (has_steering_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->steering_angle(), target);
  }

  // optional uint32 Steering_Angle_Velocity = 2;
  if (has_steering_angle_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->steering_angle_velocity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.STRG_Info)
  return target;
}

int STRG_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Steering_Angle = 1;
    if (has_steering_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steering_angle());
    }

    // optional uint32 Steering_Angle_Velocity = 2;
    if (has_steering_angle_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steering_angle_velocity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STRG_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const STRG_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const STRG_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void STRG_Info::MergeFrom(const STRG_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steering_angle()) {
      set_steering_angle(from.steering_angle());
    }
    if (from.has_steering_angle_velocity()) {
      set_steering_angle_velocity(from.steering_angle_velocity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void STRG_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STRG_Info::CopyFrom(const STRG_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STRG_Info::IsInitialized() const {

  return true;
}

void STRG_Info::Swap(STRG_Info* other) {
  if (other != this) {
    std::swap(steering_angle_, other->steering_angle_);
    std::swap(steering_angle_velocity_, other->steering_angle_velocity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata STRG_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = STRG_Info_descriptor_;
  metadata.reflection = STRG_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EPS_Info::kEPSteeringFailureFieldNumber;
#endif  // !_MSC_VER

EPS_Info::EPS_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.EPS_Info)
}

void EPS_Info::InitAsDefaultInstance() {
}

EPS_Info::EPS_Info(const EPS_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.EPS_Info)
}

void EPS_Info::SharedCtor() {
  _cached_size_ = 0;
  epsteeringfailure_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EPS_Info::~EPS_Info() {
  // @@protoc_insertion_point(destructor:tbox.protocol.EPS_Info)
  SharedDtor();
}

void EPS_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EPS_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EPS_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPS_Info_descriptor_;
}

const EPS_Info& EPS_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

EPS_Info* EPS_Info::default_instance_ = NULL;

EPS_Info* EPS_Info::New() const {
  return new EPS_Info;
}

void EPS_Info::Clear() {
  epsteeringfailure_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EPS_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.EPS_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool EPSteeringFailure = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &epsteeringfailure_)));
          set_has_epsteeringfailure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.EPS_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.EPS_Info)
  return false;
#undef DO_
}

void EPS_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.EPS_Info)
  // optional bool EPSteeringFailure = 1;
  if (has_epsteeringfailure()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->epsteeringfailure(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.EPS_Info)
}

::google::protobuf::uint8* EPS_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.EPS_Info)
  // optional bool EPSteeringFailure = 1;
  if (has_epsteeringfailure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->epsteeringfailure(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.EPS_Info)
  return target;
}

int EPS_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool EPSteeringFailure = 1;
    if (has_epsteeringfailure()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EPS_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EPS_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EPS_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EPS_Info::MergeFrom(const EPS_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_epsteeringfailure()) {
      set_epsteeringfailure(from.epsteeringfailure());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EPS_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EPS_Info::CopyFrom(const EPS_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EPS_Info::IsInitialized() const {

  return true;
}

void EPS_Info::Swap(EPS_Info* other) {
  if (other != this) {
    std::swap(epsteeringfailure_, other->epsteeringfailure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EPS_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EPS_Info_descriptor_;
  metadata.reflection = EPS_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int USM_Info::kHoodSWFieldNumber;
const int USM_Info::kACCompClutchStatusFieldNumber;
const int USM_Info::kFrontWiperStatusFieldNumber;
const int USM_Info::kEngineFanSpeedStatusPWMFieldNumber;
const int USM_Info::kPositionLightsStatusFieldNumber;
#endif  // !_MSC_VER

USM_Info::USM_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.USM_Info)
}

void USM_Info::InitAsDefaultInstance() {
}

USM_Info::USM_Info(const USM_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.USM_Info)
}

void USM_Info::SharedCtor() {
  _cached_size_ = 0;
  hoodsw_ = false;
  accompclutchstatus_ = false;
  frontwiperstatus_ = 0u;
  enginefanspeedstatus_pwm_ = 0u;
  positionlightsstatus_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

USM_Info::~USM_Info() {
  // @@protoc_insertion_point(destructor:tbox.protocol.USM_Info)
  SharedDtor();
}

void USM_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void USM_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* USM_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return USM_Info_descriptor_;
}

const USM_Info& USM_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

USM_Info* USM_Info::default_instance_ = NULL;

USM_Info* USM_Info::New() const {
  return new USM_Info;
}

void USM_Info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<USM_Info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(hoodsw_, enginefanspeedstatus_pwm_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool USM_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.USM_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool HoodSW = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hoodsw_)));
          set_has_hoodsw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ACCompClutchStatus;
        break;
      }

      // optional bool ACCompClutchStatus = 2;
      case 2: {
        if (tag == 16) {
         parse_ACCompClutchStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accompclutchstatus_)));
          set_has_accompclutchstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FrontWiperStatus;
        break;
      }

      // optional uint32 FrontWiperStatus = 3;
      case 3: {
        if (tag == 24) {
         parse_FrontWiperStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frontwiperstatus_)));
          set_has_frontwiperstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_EngineFanSpeedStatus_PWM;
        break;
      }

      // optional uint32 EngineFanSpeedStatus_PWM = 4;
      case 4: {
        if (tag == 32) {
         parse_EngineFanSpeedStatus_PWM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enginefanspeedstatus_pwm_)));
          set_has_enginefanspeedstatus_pwm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_PositionLightsStatus;
        break;
      }

      // optional bool PositionLightsStatus = 5;
      case 5: {
        if (tag == 40) {
         parse_PositionLightsStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &positionlightsstatus_)));
          set_has_positionlightsstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.USM_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.USM_Info)
  return false;
#undef DO_
}

void USM_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.USM_Info)
  // optional bool HoodSW = 1;
  if (has_hoodsw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hoodsw(), output);
  }

  // optional bool ACCompClutchStatus = 2;
  if (has_accompclutchstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->accompclutchstatus(), output);
  }

  // optional uint32 FrontWiperStatus = 3;
  if (has_frontwiperstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->frontwiperstatus(), output);
  }

  // optional uint32 EngineFanSpeedStatus_PWM = 4;
  if (has_enginefanspeedstatus_pwm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->enginefanspeedstatus_pwm(), output);
  }

  // optional bool PositionLightsStatus = 5;
  if (has_positionlightsstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->positionlightsstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.USM_Info)
}

::google::protobuf::uint8* USM_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.USM_Info)
  // optional bool HoodSW = 1;
  if (has_hoodsw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hoodsw(), target);
  }

  // optional bool ACCompClutchStatus = 2;
  if (has_accompclutchstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->accompclutchstatus(), target);
  }

  // optional uint32 FrontWiperStatus = 3;
  if (has_frontwiperstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->frontwiperstatus(), target);
  }

  // optional uint32 EngineFanSpeedStatus_PWM = 4;
  if (has_enginefanspeedstatus_pwm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->enginefanspeedstatus_pwm(), target);
  }

  // optional bool PositionLightsStatus = 5;
  if (has_positionlightsstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->positionlightsstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.USM_Info)
  return target;
}

int USM_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool HoodSW = 1;
    if (has_hoodsw()) {
      total_size += 1 + 1;
    }

    // optional bool ACCompClutchStatus = 2;
    if (has_accompclutchstatus()) {
      total_size += 1 + 1;
    }

    // optional uint32 FrontWiperStatus = 3;
    if (has_frontwiperstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frontwiperstatus());
    }

    // optional uint32 EngineFanSpeedStatus_PWM = 4;
    if (has_enginefanspeedstatus_pwm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enginefanspeedstatus_pwm());
    }

    // optional bool PositionLightsStatus = 5;
    if (has_positionlightsstatus()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void USM_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const USM_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const USM_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void USM_Info::MergeFrom(const USM_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hoodsw()) {
      set_hoodsw(from.hoodsw());
    }
    if (from.has_accompclutchstatus()) {
      set_accompclutchstatus(from.accompclutchstatus());
    }
    if (from.has_frontwiperstatus()) {
      set_frontwiperstatus(from.frontwiperstatus());
    }
    if (from.has_enginefanspeedstatus_pwm()) {
      set_enginefanspeedstatus_pwm(from.enginefanspeedstatus_pwm());
    }
    if (from.has_positionlightsstatus()) {
      set_positionlightsstatus(from.positionlightsstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void USM_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USM_Info::CopyFrom(const USM_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USM_Info::IsInitialized() const {

  return true;
}

void USM_Info::Swap(USM_Info* other) {
  if (other != this) {
    std::swap(hoodsw_, other->hoodsw_);
    std::swap(accompclutchstatus_, other->accompclutchstatus_);
    std::swap(frontwiperstatus_, other->frontwiperstatus_);
    std::swap(enginefanspeedstatus_pwm_, other->enginefanspeedstatus_pwm_);
    std::swap(positionlightsstatus_, other->positionlightsstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata USM_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = USM_Info_descriptor_;
  metadata.reflection = USM_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPMS_Info::kLowTirePressureFRFieldNumber;
const int TPMS_Info::kLowTirePressureFLFieldNumber;
const int TPMS_Info::kLowTirePressureRRFieldNumber;
const int TPMS_Info::kLowTirePressureRLFieldNumber;
const int TPMS_Info::kTirePressureFRFieldNumber;
const int TPMS_Info::kTirePressureFLFieldNumber;
const int TPMS_Info::kTirePressureRRFieldNumber;
const int TPMS_Info::kTirePressureRLFieldNumber;
const int TPMS_Info::kTirePressureFRLowFieldNumber;
const int TPMS_Info::kTirePressureFLLowFieldNumber;
const int TPMS_Info::kTirePressureRRLowFieldNumber;
const int TPMS_Info::kTirePressureRLLowFieldNumber;
const int TPMS_Info::kTpmsFlagFieldNumber;
const int TPMS_Info::kTpmsWarningLampRequestFieldNumber;
const int TPMS_Info::kSystemFailureTPMSFieldNumber;
const int TPMS_Info::kTransmitterStatusFRFieldNumber;
const int TPMS_Info::kTransmitterStatusFLFieldNumber;
const int TPMS_Info::kTransmitterStatusRRFieldNumber;
const int TPMS_Info::kTransmitterStatusRLFieldNumber;
#endif  // !_MSC_VER

TPMS_Info::TPMS_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.TPMS_Info)
}

void TPMS_Info::InitAsDefaultInstance() {
}

TPMS_Info::TPMS_Info(const TPMS_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.TPMS_Info)
}

void TPMS_Info::SharedCtor() {
  _cached_size_ = 0;
  low_tire_pressure_fr_ = false;
  low_tire_pressure_fl_ = false;
  low_tire_pressure_rr_ = false;
  low_tire_pressure_rl_ = false;
  tire_pressure_fr_ = 0u;
  tire_pressure_fl_ = 0u;
  tire_pressure_rr_ = 0u;
  tire_pressure_rl_ = 0u;
  tire_pressure_fr_low_ = 0u;
  tire_pressure_fl_low_ = 0u;
  tire_pressure_rr_low_ = 0u;
  tire_pressure_rl_low_ = 0u;
  tpms_flag_ = 0u;
  tpmswarninglamprequest_ = 0u;
  systemfailure_tpms_ = 0u;
  transmitter_status_fr_ = 0u;
  transmitter_status_fl_ = 0u;
  transmitter_status_rr_ = 0u;
  transmitter_status_rl_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPMS_Info::~TPMS_Info() {
  // @@protoc_insertion_point(destructor:tbox.protocol.TPMS_Info)
  SharedDtor();
}

void TPMS_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPMS_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPMS_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPMS_Info_descriptor_;
}

const TPMS_Info& TPMS_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

TPMS_Info* TPMS_Info::default_instance_ = NULL;

TPMS_Info* TPMS_Info::New() const {
  return new TPMS_Info;
}

void TPMS_Info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPMS_Info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(low_tire_pressure_fr_, tire_pressure_rl_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(tire_pressure_fr_low_, transmitter_status_fr_);
  }
  ZR_(transmitter_status_fl_, transmitter_status_rl_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPMS_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.TPMS_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Low_Tire_pressure_FR = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_tire_pressure_fr_)));
          set_has_low_tire_pressure_fr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Low_Tire_pressure_FL;
        break;
      }

      // optional bool Low_Tire_pressure_FL = 2;
      case 2: {
        if (tag == 16) {
         parse_Low_Tire_pressure_FL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_tire_pressure_fl_)));
          set_has_low_tire_pressure_fl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Low_Tire_pressure_RR;
        break;
      }

      // optional bool Low_Tire_pressure_RR = 3;
      case 3: {
        if (tag == 24) {
         parse_Low_Tire_pressure_RR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_tire_pressure_rr_)));
          set_has_low_tire_pressure_rr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Low_Tire_pressure_RL;
        break;
      }

      // optional bool Low_Tire_pressure_RL = 4;
      case 4: {
        if (tag == 32) {
         parse_Low_Tire_pressure_RL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_tire_pressure_rl_)));
          set_has_low_tire_pressure_rl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tire_pressure_FR;
        break;
      }

      // optional uint32 tire_pressure_FR = 5;
      case 5: {
        if (tag == 40) {
         parse_tire_pressure_FR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tire_pressure_fr_)));
          set_has_tire_pressure_fr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tire_pressure_FL;
        break;
      }

      // optional uint32 tire_pressure_FL = 6;
      case 6: {
        if (tag == 48) {
         parse_tire_pressure_FL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tire_pressure_fl_)));
          set_has_tire_pressure_fl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_tire_pressure_RR;
        break;
      }

      // optional uint32 tire_pressure_RR = 7;
      case 7: {
        if (tag == 56) {
         parse_tire_pressure_RR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tire_pressure_rr_)));
          set_has_tire_pressure_rr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_tire_pressure_RL;
        break;
      }

      // optional uint32 tire_pressure_RL = 8;
      case 8: {
        if (tag == 64) {
         parse_tire_pressure_RL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tire_pressure_rl_)));
          set_has_tire_pressure_rl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_Tire_pressure_FR_Low;
        break;
      }

      // optional uint32 Tire_pressure_FR_Low = 9;
      case 9: {
        if (tag == 72) {
         parse_Tire_pressure_FR_Low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tire_pressure_fr_low_)));
          set_has_tire_pressure_fr_low();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_Tire_pressure_FL_Low;
        break;
      }

      // optional uint32 Tire_pressure_FL_Low = 10;
      case 10: {
        if (tag == 80) {
         parse_Tire_pressure_FL_Low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tire_pressure_fl_low_)));
          set_has_tire_pressure_fl_low();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_Tire_pressure_RR_Low;
        break;
      }

      // optional uint32 Tire_pressure_RR_Low = 11;
      case 11: {
        if (tag == 88) {
         parse_Tire_pressure_RR_Low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tire_pressure_rr_low_)));
          set_has_tire_pressure_rr_low();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_Tire_pressure_RL_Low;
        break;
      }

      // optional uint32 Tire_pressure_RL_Low = 12;
      case 12: {
        if (tag == 96) {
         parse_Tire_pressure_RL_Low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tire_pressure_rl_low_)));
          set_has_tire_pressure_rl_low();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_Tpms_Flag;
        break;
      }

      // optional uint32 Tpms_Flag = 13;
      case 13: {
        if (tag == 104) {
         parse_Tpms_Flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpms_flag_)));
          set_has_tpms_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_TpmsWarningLampRequest;
        break;
      }

      // optional uint32 TpmsWarningLampRequest = 14;
      case 14: {
        if (tag == 112) {
         parse_TpmsWarningLampRequest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpmswarninglamprequest_)));
          set_has_tpmswarninglamprequest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_SystemFailure_TPMS;
        break;
      }

      // optional uint32 SystemFailure_TPMS = 15;
      case 15: {
        if (tag == 120) {
         parse_SystemFailure_TPMS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &systemfailure_tpms_)));
          set_has_systemfailure_tpms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_Transmitter_status_FR;
        break;
      }

      // optional uint32 Transmitter_status_FR = 16;
      case 16: {
        if (tag == 128) {
         parse_Transmitter_status_FR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transmitter_status_fr_)));
          set_has_transmitter_status_fr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_Transmitter_status_FL;
        break;
      }

      // optional uint32 Transmitter_status_FL = 17;
      case 17: {
        if (tag == 136) {
         parse_Transmitter_status_FL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transmitter_status_fl_)));
          set_has_transmitter_status_fl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_Transmitter_status_RR;
        break;
      }

      // optional uint32 Transmitter_status_RR = 18;
      case 18: {
        if (tag == 144) {
         parse_Transmitter_status_RR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transmitter_status_rr_)));
          set_has_transmitter_status_rr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_Transmitter_status_RL;
        break;
      }

      // optional uint32 Transmitter_status_RL = 19;
      case 19: {
        if (tag == 152) {
         parse_Transmitter_status_RL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transmitter_status_rl_)));
          set_has_transmitter_status_rl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.TPMS_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.TPMS_Info)
  return false;
#undef DO_
}

void TPMS_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.TPMS_Info)
  // optional bool Low_Tire_pressure_FR = 1;
  if (has_low_tire_pressure_fr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->low_tire_pressure_fr(), output);
  }

  // optional bool Low_Tire_pressure_FL = 2;
  if (has_low_tire_pressure_fl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->low_tire_pressure_fl(), output);
  }

  // optional bool Low_Tire_pressure_RR = 3;
  if (has_low_tire_pressure_rr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->low_tire_pressure_rr(), output);
  }

  // optional bool Low_Tire_pressure_RL = 4;
  if (has_low_tire_pressure_rl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->low_tire_pressure_rl(), output);
  }

  // optional uint32 tire_pressure_FR = 5;
  if (has_tire_pressure_fr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tire_pressure_fr(), output);
  }

  // optional uint32 tire_pressure_FL = 6;
  if (has_tire_pressure_fl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tire_pressure_fl(), output);
  }

  // optional uint32 tire_pressure_RR = 7;
  if (has_tire_pressure_rr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tire_pressure_rr(), output);
  }

  // optional uint32 tire_pressure_RL = 8;
  if (has_tire_pressure_rl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->tire_pressure_rl(), output);
  }

  // optional uint32 Tire_pressure_FR_Low = 9;
  if (has_tire_pressure_fr_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->tire_pressure_fr_low(), output);
  }

  // optional uint32 Tire_pressure_FL_Low = 10;
  if (has_tire_pressure_fl_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->tire_pressure_fl_low(), output);
  }

  // optional uint32 Tire_pressure_RR_Low = 11;
  if (has_tire_pressure_rr_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->tire_pressure_rr_low(), output);
  }

  // optional uint32 Tire_pressure_RL_Low = 12;
  if (has_tire_pressure_rl_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->tire_pressure_rl_low(), output);
  }

  // optional uint32 Tpms_Flag = 13;
  if (has_tpms_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->tpms_flag(), output);
  }

  // optional uint32 TpmsWarningLampRequest = 14;
  if (has_tpmswarninglamprequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->tpmswarninglamprequest(), output);
  }

  // optional uint32 SystemFailure_TPMS = 15;
  if (has_systemfailure_tpms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->systemfailure_tpms(), output);
  }

  // optional uint32 Transmitter_status_FR = 16;
  if (has_transmitter_status_fr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->transmitter_status_fr(), output);
  }

  // optional uint32 Transmitter_status_FL = 17;
  if (has_transmitter_status_fl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->transmitter_status_fl(), output);
  }

  // optional uint32 Transmitter_status_RR = 18;
  if (has_transmitter_status_rr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->transmitter_status_rr(), output);
  }

  // optional uint32 Transmitter_status_RL = 19;
  if (has_transmitter_status_rl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->transmitter_status_rl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.TPMS_Info)
}

::google::protobuf::uint8* TPMS_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.TPMS_Info)
  // optional bool Low_Tire_pressure_FR = 1;
  if (has_low_tire_pressure_fr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->low_tire_pressure_fr(), target);
  }

  // optional bool Low_Tire_pressure_FL = 2;
  if (has_low_tire_pressure_fl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->low_tire_pressure_fl(), target);
  }

  // optional bool Low_Tire_pressure_RR = 3;
  if (has_low_tire_pressure_rr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->low_tire_pressure_rr(), target);
  }

  // optional bool Low_Tire_pressure_RL = 4;
  if (has_low_tire_pressure_rl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->low_tire_pressure_rl(), target);
  }

  // optional uint32 tire_pressure_FR = 5;
  if (has_tire_pressure_fr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tire_pressure_fr(), target);
  }

  // optional uint32 tire_pressure_FL = 6;
  if (has_tire_pressure_fl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tire_pressure_fl(), target);
  }

  // optional uint32 tire_pressure_RR = 7;
  if (has_tire_pressure_rr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tire_pressure_rr(), target);
  }

  // optional uint32 tire_pressure_RL = 8;
  if (has_tire_pressure_rl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->tire_pressure_rl(), target);
  }

  // optional uint32 Tire_pressure_FR_Low = 9;
  if (has_tire_pressure_fr_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->tire_pressure_fr_low(), target);
  }

  // optional uint32 Tire_pressure_FL_Low = 10;
  if (has_tire_pressure_fl_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->tire_pressure_fl_low(), target);
  }

  // optional uint32 Tire_pressure_RR_Low = 11;
  if (has_tire_pressure_rr_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->tire_pressure_rr_low(), target);
  }

  // optional uint32 Tire_pressure_RL_Low = 12;
  if (has_tire_pressure_rl_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->tire_pressure_rl_low(), target);
  }

  // optional uint32 Tpms_Flag = 13;
  if (has_tpms_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->tpms_flag(), target);
  }

  // optional uint32 TpmsWarningLampRequest = 14;
  if (has_tpmswarninglamprequest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->tpmswarninglamprequest(), target);
  }

  // optional uint32 SystemFailure_TPMS = 15;
  if (has_systemfailure_tpms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->systemfailure_tpms(), target);
  }

  // optional uint32 Transmitter_status_FR = 16;
  if (has_transmitter_status_fr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->transmitter_status_fr(), target);
  }

  // optional uint32 Transmitter_status_FL = 17;
  if (has_transmitter_status_fl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->transmitter_status_fl(), target);
  }

  // optional uint32 Transmitter_status_RR = 18;
  if (has_transmitter_status_rr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->transmitter_status_rr(), target);
  }

  // optional uint32 Transmitter_status_RL = 19;
  if (has_transmitter_status_rl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->transmitter_status_rl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.TPMS_Info)
  return target;
}

int TPMS_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Low_Tire_pressure_FR = 1;
    if (has_low_tire_pressure_fr()) {
      total_size += 1 + 1;
    }

    // optional bool Low_Tire_pressure_FL = 2;
    if (has_low_tire_pressure_fl()) {
      total_size += 1 + 1;
    }

    // optional bool Low_Tire_pressure_RR = 3;
    if (has_low_tire_pressure_rr()) {
      total_size += 1 + 1;
    }

    // optional bool Low_Tire_pressure_RL = 4;
    if (has_low_tire_pressure_rl()) {
      total_size += 1 + 1;
    }

    // optional uint32 tire_pressure_FR = 5;
    if (has_tire_pressure_fr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tire_pressure_fr());
    }

    // optional uint32 tire_pressure_FL = 6;
    if (has_tire_pressure_fl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tire_pressure_fl());
    }

    // optional uint32 tire_pressure_RR = 7;
    if (has_tire_pressure_rr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tire_pressure_rr());
    }

    // optional uint32 tire_pressure_RL = 8;
    if (has_tire_pressure_rl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tire_pressure_rl());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Tire_pressure_FR_Low = 9;
    if (has_tire_pressure_fr_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tire_pressure_fr_low());
    }

    // optional uint32 Tire_pressure_FL_Low = 10;
    if (has_tire_pressure_fl_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tire_pressure_fl_low());
    }

    // optional uint32 Tire_pressure_RR_Low = 11;
    if (has_tire_pressure_rr_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tire_pressure_rr_low());
    }

    // optional uint32 Tire_pressure_RL_Low = 12;
    if (has_tire_pressure_rl_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tire_pressure_rl_low());
    }

    // optional uint32 Tpms_Flag = 13;
    if (has_tpms_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tpms_flag());
    }

    // optional uint32 TpmsWarningLampRequest = 14;
    if (has_tpmswarninglamprequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tpmswarninglamprequest());
    }

    // optional uint32 SystemFailure_TPMS = 15;
    if (has_systemfailure_tpms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->systemfailure_tpms());
    }

    // optional uint32 Transmitter_status_FR = 16;
    if (has_transmitter_status_fr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transmitter_status_fr());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 Transmitter_status_FL = 17;
    if (has_transmitter_status_fl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transmitter_status_fl());
    }

    // optional uint32 Transmitter_status_RR = 18;
    if (has_transmitter_status_rr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transmitter_status_rr());
    }

    // optional uint32 Transmitter_status_RL = 19;
    if (has_transmitter_status_rl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transmitter_status_rl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPMS_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPMS_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPMS_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPMS_Info::MergeFrom(const TPMS_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_low_tire_pressure_fr()) {
      set_low_tire_pressure_fr(from.low_tire_pressure_fr());
    }
    if (from.has_low_tire_pressure_fl()) {
      set_low_tire_pressure_fl(from.low_tire_pressure_fl());
    }
    if (from.has_low_tire_pressure_rr()) {
      set_low_tire_pressure_rr(from.low_tire_pressure_rr());
    }
    if (from.has_low_tire_pressure_rl()) {
      set_low_tire_pressure_rl(from.low_tire_pressure_rl());
    }
    if (from.has_tire_pressure_fr()) {
      set_tire_pressure_fr(from.tire_pressure_fr());
    }
    if (from.has_tire_pressure_fl()) {
      set_tire_pressure_fl(from.tire_pressure_fl());
    }
    if (from.has_tire_pressure_rr()) {
      set_tire_pressure_rr(from.tire_pressure_rr());
    }
    if (from.has_tire_pressure_rl()) {
      set_tire_pressure_rl(from.tire_pressure_rl());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tire_pressure_fr_low()) {
      set_tire_pressure_fr_low(from.tire_pressure_fr_low());
    }
    if (from.has_tire_pressure_fl_low()) {
      set_tire_pressure_fl_low(from.tire_pressure_fl_low());
    }
    if (from.has_tire_pressure_rr_low()) {
      set_tire_pressure_rr_low(from.tire_pressure_rr_low());
    }
    if (from.has_tire_pressure_rl_low()) {
      set_tire_pressure_rl_low(from.tire_pressure_rl_low());
    }
    if (from.has_tpms_flag()) {
      set_tpms_flag(from.tpms_flag());
    }
    if (from.has_tpmswarninglamprequest()) {
      set_tpmswarninglamprequest(from.tpmswarninglamprequest());
    }
    if (from.has_systemfailure_tpms()) {
      set_systemfailure_tpms(from.systemfailure_tpms());
    }
    if (from.has_transmitter_status_fr()) {
      set_transmitter_status_fr(from.transmitter_status_fr());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_transmitter_status_fl()) {
      set_transmitter_status_fl(from.transmitter_status_fl());
    }
    if (from.has_transmitter_status_rr()) {
      set_transmitter_status_rr(from.transmitter_status_rr());
    }
    if (from.has_transmitter_status_rl()) {
      set_transmitter_status_rl(from.transmitter_status_rl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPMS_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPMS_Info::CopyFrom(const TPMS_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPMS_Info::IsInitialized() const {

  return true;
}

void TPMS_Info::Swap(TPMS_Info* other) {
  if (other != this) {
    std::swap(low_tire_pressure_fr_, other->low_tire_pressure_fr_);
    std::swap(low_tire_pressure_fl_, other->low_tire_pressure_fl_);
    std::swap(low_tire_pressure_rr_, other->low_tire_pressure_rr_);
    std::swap(low_tire_pressure_rl_, other->low_tire_pressure_rl_);
    std::swap(tire_pressure_fr_, other->tire_pressure_fr_);
    std::swap(tire_pressure_fl_, other->tire_pressure_fl_);
    std::swap(tire_pressure_rr_, other->tire_pressure_rr_);
    std::swap(tire_pressure_rl_, other->tire_pressure_rl_);
    std::swap(tire_pressure_fr_low_, other->tire_pressure_fr_low_);
    std::swap(tire_pressure_fl_low_, other->tire_pressure_fl_low_);
    std::swap(tire_pressure_rr_low_, other->tire_pressure_rr_low_);
    std::swap(tire_pressure_rl_low_, other->tire_pressure_rl_low_);
    std::swap(tpms_flag_, other->tpms_flag_);
    std::swap(tpmswarninglamprequest_, other->tpmswarninglamprequest_);
    std::swap(systemfailure_tpms_, other->systemfailure_tpms_);
    std::swap(transmitter_status_fr_, other->transmitter_status_fr_);
    std::swap(transmitter_status_fl_, other->transmitter_status_fl_);
    std::swap(transmitter_status_rr_, other->transmitter_status_rr_);
    std::swap(transmitter_status_rl_, other->transmitter_status_rl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPMS_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPMS_Info_descriptor_;
  metadata.reflection = TPMS_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WIRE_Info::kReverseGearFieldNumber;
const int WIRE_Info::kNeutralGearFieldNumber;
const int WIRE_Info::kDriverSeatBeltStatusFieldNumber;
const int WIRE_Info::kPassengerSeatBeltStatusFieldNumber;
const int WIRE_Info::kHandBrakeSwitchFieldNumber;
const int WIRE_Info::kACCStatusFieldNumber;
const int WIRE_Info::kIGNStatusFieldNumber;
const int WIRE_Info::kSecurityIndicatorFieldNumber;
const int WIRE_Info::kBatteryStatusFieldNumber;
const int WIRE_Info::kDAHeartBeatFieldNumber;
#endif  // !_MSC_VER

WIRE_Info::WIRE_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.WIRE_Info)
}

void WIRE_Info::InitAsDefaultInstance() {
}

WIRE_Info::WIRE_Info(const WIRE_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.WIRE_Info)
}

void WIRE_Info::SharedCtor() {
  _cached_size_ = 0;
  reverse_gear_ = false;
  neutral_gear_ = false;
  driver_seat_belt_status_ = false;
  passenger_seat_belt_status_ = false;
  handbrakeswitch_ = false;
  acc_status_ = false;
  ign_status_ = false;
  security_indicator_ = false;
  battery_status_ = 0u;
  da_heart_beat_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WIRE_Info::~WIRE_Info() {
  // @@protoc_insertion_point(destructor:tbox.protocol.WIRE_Info)
  SharedDtor();
}

void WIRE_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WIRE_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WIRE_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WIRE_Info_descriptor_;
}

const WIRE_Info& WIRE_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

WIRE_Info* WIRE_Info::default_instance_ = NULL;

WIRE_Info* WIRE_Info::New() const {
  return new WIRE_Info;
}

void WIRE_Info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WIRE_Info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(reverse_gear_, security_indicator_);
  }
  ZR_(battery_status_, da_heart_beat_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WIRE_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.WIRE_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Reverse_Gear = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_gear_)));
          set_has_reverse_gear();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Neutral_Gear;
        break;
      }

      // optional bool Neutral_Gear = 2;
      case 2: {
        if (tag == 16) {
         parse_Neutral_Gear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &neutral_gear_)));
          set_has_neutral_gear();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_driver_seat_belt_status;
        break;
      }

      // optional bool driver_seat_belt_status = 3;
      case 3: {
        if (tag == 24) {
         parse_driver_seat_belt_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_seat_belt_status_)));
          set_has_driver_seat_belt_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_passenger_seat_belt_status;
        break;
      }

      // optional bool passenger_seat_belt_status = 4;
      case 4: {
        if (tag == 32) {
         parse_passenger_seat_belt_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passenger_seat_belt_status_)));
          set_has_passenger_seat_belt_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_HandBrakeSwitch;
        break;
      }

      // optional bool HandBrakeSwitch = 5;
      case 5: {
        if (tag == 40) {
         parse_HandBrakeSwitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &handbrakeswitch_)));
          set_has_handbrakeswitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ACC_status;
        break;
      }

      // optional bool ACC_status = 6;
      case 6: {
        if (tag == 48) {
         parse_ACC_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_status_)));
          set_has_acc_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_IGN_status;
        break;
      }

      // optional bool IGN_status = 7;
      case 7: {
        if (tag == 56) {
         parse_IGN_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ign_status_)));
          set_has_ign_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_Security_Indicator;
        break;
      }

      // optional bool Security_Indicator = 8;
      case 8: {
        if (tag == 64) {
         parse_Security_Indicator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &security_indicator_)));
          set_has_security_indicator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_battery_status;
        break;
      }

      // optional uint32 battery_status = 9;
      case 9: {
        if (tag == 72) {
         parse_battery_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battery_status_)));
          set_has_battery_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_DA_Heart_Beat;
        break;
      }

      // optional bool DA_Heart_Beat = 10;
      case 10: {
        if (tag == 80) {
         parse_DA_Heart_Beat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &da_heart_beat_)));
          set_has_da_heart_beat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.WIRE_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.WIRE_Info)
  return false;
#undef DO_
}

void WIRE_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.WIRE_Info)
  // optional bool Reverse_Gear = 1;
  if (has_reverse_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->reverse_gear(), output);
  }

  // optional bool Neutral_Gear = 2;
  if (has_neutral_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->neutral_gear(), output);
  }

  // optional bool driver_seat_belt_status = 3;
  if (has_driver_seat_belt_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->driver_seat_belt_status(), output);
  }

  // optional bool passenger_seat_belt_status = 4;
  if (has_passenger_seat_belt_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->passenger_seat_belt_status(), output);
  }

  // optional bool HandBrakeSwitch = 5;
  if (has_handbrakeswitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->handbrakeswitch(), output);
  }

  // optional bool ACC_status = 6;
  if (has_acc_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->acc_status(), output);
  }

  // optional bool IGN_status = 7;
  if (has_ign_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->ign_status(), output);
  }

  // optional bool Security_Indicator = 8;
  if (has_security_indicator()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->security_indicator(), output);
  }

  // optional uint32 battery_status = 9;
  if (has_battery_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->battery_status(), output);
  }

  // optional bool DA_Heart_Beat = 10;
  if (has_da_heart_beat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->da_heart_beat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.WIRE_Info)
}

::google::protobuf::uint8* WIRE_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.WIRE_Info)
  // optional bool Reverse_Gear = 1;
  if (has_reverse_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->reverse_gear(), target);
  }

  // optional bool Neutral_Gear = 2;
  if (has_neutral_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->neutral_gear(), target);
  }

  // optional bool driver_seat_belt_status = 3;
  if (has_driver_seat_belt_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->driver_seat_belt_status(), target);
  }

  // optional bool passenger_seat_belt_status = 4;
  if (has_passenger_seat_belt_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->passenger_seat_belt_status(), target);
  }

  // optional bool HandBrakeSwitch = 5;
  if (has_handbrakeswitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->handbrakeswitch(), target);
  }

  // optional bool ACC_status = 6;
  if (has_acc_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->acc_status(), target);
  }

  // optional bool IGN_status = 7;
  if (has_ign_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->ign_status(), target);
  }

  // optional bool Security_Indicator = 8;
  if (has_security_indicator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->security_indicator(), target);
  }

  // optional uint32 battery_status = 9;
  if (has_battery_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->battery_status(), target);
  }

  // optional bool DA_Heart_Beat = 10;
  if (has_da_heart_beat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->da_heart_beat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.WIRE_Info)
  return target;
}

int WIRE_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Reverse_Gear = 1;
    if (has_reverse_gear()) {
      total_size += 1 + 1;
    }

    // optional bool Neutral_Gear = 2;
    if (has_neutral_gear()) {
      total_size += 1 + 1;
    }

    // optional bool driver_seat_belt_status = 3;
    if (has_driver_seat_belt_status()) {
      total_size += 1 + 1;
    }

    // optional bool passenger_seat_belt_status = 4;
    if (has_passenger_seat_belt_status()) {
      total_size += 1 + 1;
    }

    // optional bool HandBrakeSwitch = 5;
    if (has_handbrakeswitch()) {
      total_size += 1 + 1;
    }

    // optional bool ACC_status = 6;
    if (has_acc_status()) {
      total_size += 1 + 1;
    }

    // optional bool IGN_status = 7;
    if (has_ign_status()) {
      total_size += 1 + 1;
    }

    // optional bool Security_Indicator = 8;
    if (has_security_indicator()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 battery_status = 9;
    if (has_battery_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battery_status());
    }

    // optional bool DA_Heart_Beat = 10;
    if (has_da_heart_beat()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WIRE_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WIRE_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WIRE_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WIRE_Info::MergeFrom(const WIRE_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reverse_gear()) {
      set_reverse_gear(from.reverse_gear());
    }
    if (from.has_neutral_gear()) {
      set_neutral_gear(from.neutral_gear());
    }
    if (from.has_driver_seat_belt_status()) {
      set_driver_seat_belt_status(from.driver_seat_belt_status());
    }
    if (from.has_passenger_seat_belt_status()) {
      set_passenger_seat_belt_status(from.passenger_seat_belt_status());
    }
    if (from.has_handbrakeswitch()) {
      set_handbrakeswitch(from.handbrakeswitch());
    }
    if (from.has_acc_status()) {
      set_acc_status(from.acc_status());
    }
    if (from.has_ign_status()) {
      set_ign_status(from.ign_status());
    }
    if (from.has_security_indicator()) {
      set_security_indicator(from.security_indicator());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_battery_status()) {
      set_battery_status(from.battery_status());
    }
    if (from.has_da_heart_beat()) {
      set_da_heart_beat(from.da_heart_beat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WIRE_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WIRE_Info::CopyFrom(const WIRE_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WIRE_Info::IsInitialized() const {

  return true;
}

void WIRE_Info::Swap(WIRE_Info* other) {
  if (other != this) {
    std::swap(reverse_gear_, other->reverse_gear_);
    std::swap(neutral_gear_, other->neutral_gear_);
    std::swap(driver_seat_belt_status_, other->driver_seat_belt_status_);
    std::swap(passenger_seat_belt_status_, other->passenger_seat_belt_status_);
    std::swap(handbrakeswitch_, other->handbrakeswitch_);
    std::swap(acc_status_, other->acc_status_);
    std::swap(ign_status_, other->ign_status_);
    std::swap(security_indicator_, other->security_indicator_);
    std::swap(battery_status_, other->battery_status_);
    std::swap(da_heart_beat_, other->da_heart_beat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WIRE_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WIRE_Info_descriptor_;
  metadata.reflection = WIRE_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ECO_Info::kRapidAccelerationCountFieldNumber;
const int ECO_Info::kRapidDecelerationCountFieldNumber;
const int ECO_Info::kSharpTurnCountFieldNumber;
#endif  // !_MSC_VER

ECO_Info::ECO_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.ECO_Info)
}

void ECO_Info::InitAsDefaultInstance() {
}

ECO_Info::ECO_Info(const ECO_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.ECO_Info)
}

void ECO_Info::SharedCtor() {
  _cached_size_ = 0;
  rapid_acceleration_count_ = 0u;
  rapid_deceleration_count_ = 0u;
  sharp_turn_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ECO_Info::~ECO_Info() {
  // @@protoc_insertion_point(destructor:tbox.protocol.ECO_Info)
  SharedDtor();
}

void ECO_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ECO_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ECO_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECO_Info_descriptor_;
}

const ECO_Info& ECO_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

ECO_Info* ECO_Info::default_instance_ = NULL;

ECO_Info* ECO_Info::New() const {
  return new ECO_Info;
}

void ECO_Info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ECO_Info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rapid_acceleration_count_, sharp_turn_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ECO_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.ECO_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rapid_acceleration_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rapid_acceleration_count_)));
          set_has_rapid_acceleration_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rapid_deceleration_count;
        break;
      }

      // optional uint32 rapid_deceleration_count = 2;
      case 2: {
        if (tag == 16) {
         parse_rapid_deceleration_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rapid_deceleration_count_)));
          set_has_rapid_deceleration_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sharp_turn_count;
        break;
      }

      // optional uint32 sharp_turn_count = 3;
      case 3: {
        if (tag == 24) {
         parse_sharp_turn_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sharp_turn_count_)));
          set_has_sharp_turn_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.ECO_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.ECO_Info)
  return false;
#undef DO_
}

void ECO_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.ECO_Info)
  // optional uint32 rapid_acceleration_count = 1;
  if (has_rapid_acceleration_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rapid_acceleration_count(), output);
  }

  // optional uint32 rapid_deceleration_count = 2;
  if (has_rapid_deceleration_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rapid_deceleration_count(), output);
  }

  // optional uint32 sharp_turn_count = 3;
  if (has_sharp_turn_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sharp_turn_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.ECO_Info)
}

::google::protobuf::uint8* ECO_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.ECO_Info)
  // optional uint32 rapid_acceleration_count = 1;
  if (has_rapid_acceleration_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rapid_acceleration_count(), target);
  }

  // optional uint32 rapid_deceleration_count = 2;
  if (has_rapid_deceleration_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rapid_deceleration_count(), target);
  }

  // optional uint32 sharp_turn_count = 3;
  if (has_sharp_turn_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sharp_turn_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.ECO_Info)
  return target;
}

int ECO_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rapid_acceleration_count = 1;
    if (has_rapid_acceleration_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rapid_acceleration_count());
    }

    // optional uint32 rapid_deceleration_count = 2;
    if (has_rapid_deceleration_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rapid_deceleration_count());
    }

    // optional uint32 sharp_turn_count = 3;
    if (has_sharp_turn_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sharp_turn_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ECO_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ECO_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ECO_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ECO_Info::MergeFrom(const ECO_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rapid_acceleration_count()) {
      set_rapid_acceleration_count(from.rapid_acceleration_count());
    }
    if (from.has_rapid_deceleration_count()) {
      set_rapid_deceleration_count(from.rapid_deceleration_count());
    }
    if (from.has_sharp_turn_count()) {
      set_sharp_turn_count(from.sharp_turn_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ECO_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ECO_Info::CopyFrom(const ECO_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECO_Info::IsInitialized() const {

  return true;
}

void ECO_Info::Swap(ECO_Info* other) {
  if (other != this) {
    std::swap(rapid_acceleration_count_, other->rapid_acceleration_count_);
    std::swap(rapid_deceleration_count_, other->rapid_deceleration_count_);
    std::swap(sharp_turn_count_, other->sharp_turn_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ECO_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ECO_Info_descriptor_;
  metadata.reflection = ECO_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ALARM_Info::kAlarmTypeFieldNumber;
const int ALARM_Info::kAlarmTypeExFieldNumber;
const int ALARM_Info::kTransmitterFailFieldNumber;
const int ALARM_Info::kLowTirePressureFieldNumber;
#endif  // !_MSC_VER

ALARM_Info::ALARM_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.ALARM_Info)
}

void ALARM_Info::InitAsDefaultInstance() {
}

ALARM_Info::ALARM_Info(const ALARM_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.ALARM_Info)
}

void ALARM_Info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  alarm_type_ = 0u;
  alarm_typeex_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transmitter_fail_ = 0u;
  lowtirepressure_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ALARM_Info::~ALARM_Info() {
  // @@protoc_insertion_point(destructor:tbox.protocol.ALARM_Info)
  SharedDtor();
}

void ALARM_Info::SharedDtor() {
  if (alarm_typeex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alarm_typeex_;
  }
  if (this != default_instance_) {
  }
}

void ALARM_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ALARM_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ALARM_Info_descriptor_;
}

const ALARM_Info& ALARM_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

ALARM_Info* ALARM_Info::default_instance_ = NULL;

ALARM_Info* ALARM_Info::New() const {
  return new ALARM_Info;
}

void ALARM_Info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ALARM_Info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(alarm_type_, lowtirepressure_);
    if (has_alarm_typeex()) {
      if (alarm_typeex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        alarm_typeex_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ALARM_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.ALARM_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 alarm_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alarm_type_)));
          set_has_alarm_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_alarm_typeEx;
        break;
      }

      // optional bytes alarm_typeEx = 2;
      case 2: {
        if (tag == 18) {
         parse_alarm_typeEx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_alarm_typeex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Transmitter_Fail;
        break;
      }

      // optional uint32 Transmitter_Fail = 3;
      case 3: {
        if (tag == 24) {
         parse_Transmitter_Fail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transmitter_fail_)));
          set_has_transmitter_fail();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_LowTirePressure;
        break;
      }

      // optional uint32 LowTirePressure = 4;
      case 4: {
        if (tag == 32) {
         parse_LowTirePressure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lowtirepressure_)));
          set_has_lowtirepressure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.ALARM_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.ALARM_Info)
  return false;
#undef DO_
}

void ALARM_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.ALARM_Info)
  // optional uint32 alarm_type = 1;
  if (has_alarm_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->alarm_type(), output);
  }

  // optional bytes alarm_typeEx = 2;
  if (has_alarm_typeex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->alarm_typeex(), output);
  }

  // optional uint32 Transmitter_Fail = 3;
  if (has_transmitter_fail()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->transmitter_fail(), output);
  }

  // optional uint32 LowTirePressure = 4;
  if (has_lowtirepressure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lowtirepressure(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.ALARM_Info)
}

::google::protobuf::uint8* ALARM_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.ALARM_Info)
  // optional uint32 alarm_type = 1;
  if (has_alarm_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->alarm_type(), target);
  }

  // optional bytes alarm_typeEx = 2;
  if (has_alarm_typeex()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->alarm_typeex(), target);
  }

  // optional uint32 Transmitter_Fail = 3;
  if (has_transmitter_fail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->transmitter_fail(), target);
  }

  // optional uint32 LowTirePressure = 4;
  if (has_lowtirepressure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lowtirepressure(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.ALARM_Info)
  return target;
}

int ALARM_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 alarm_type = 1;
    if (has_alarm_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alarm_type());
    }

    // optional bytes alarm_typeEx = 2;
    if (has_alarm_typeex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->alarm_typeex());
    }

    // optional uint32 Transmitter_Fail = 3;
    if (has_transmitter_fail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transmitter_fail());
    }

    // optional uint32 LowTirePressure = 4;
    if (has_lowtirepressure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lowtirepressure());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ALARM_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ALARM_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ALARM_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ALARM_Info::MergeFrom(const ALARM_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alarm_type()) {
      set_alarm_type(from.alarm_type());
    }
    if (from.has_alarm_typeex()) {
      set_alarm_typeex(from.alarm_typeex());
    }
    if (from.has_transmitter_fail()) {
      set_transmitter_fail(from.transmitter_fail());
    }
    if (from.has_lowtirepressure()) {
      set_lowtirepressure(from.lowtirepressure());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ALARM_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ALARM_Info::CopyFrom(const ALARM_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ALARM_Info::IsInitialized() const {

  return true;
}

void ALARM_Info::Swap(ALARM_Info* other) {
  if (other != this) {
    std::swap(alarm_type_, other->alarm_type_);
    std::swap(alarm_typeex_, other->alarm_typeex_);
    std::swap(transmitter_fail_, other->transmitter_fail_);
    std::swap(lowtirepressure_, other->lowtirepressure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ALARM_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ALARM_Info_descriptor_;
  metadata.reflection = ALARM_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ITM_Info::kHavcModeFieldNumber;
const int ITM_Info::kHavcCirculationFieldNumber;
const int ITM_Info::kHavcTemperatureFieldNumber;
const int ITM_Info::kHavcAirVolumeFieldNumber;
const int ITM_Info::kAVMPhotoUploadResultFieldNumber;
#endif  // !_MSC_VER

ITM_Info::ITM_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.ITM_Info)
}

void ITM_Info::InitAsDefaultInstance() {
}

ITM_Info::ITM_Info(const ITM_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.ITM_Info)
}

void ITM_Info::SharedCtor() {
  _cached_size_ = 0;
  havc_mode_ = 0u;
  havc_circulation_ = 0u;
  havc_temperature_ = 0u;
  havc_air_volume_ = 0u;
  avmphotouploadresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ITM_Info::~ITM_Info() {
  // @@protoc_insertion_point(destructor:tbox.protocol.ITM_Info)
  SharedDtor();
}

void ITM_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ITM_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ITM_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ITM_Info_descriptor_;
}

const ITM_Info& ITM_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

ITM_Info* ITM_Info::default_instance_ = NULL;

ITM_Info* ITM_Info::New() const {
  return new ITM_Info;
}

void ITM_Info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ITM_Info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(havc_mode_, avmphotouploadresult_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ITM_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.ITM_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 havc_mode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &havc_mode_)));
          set_has_havc_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_havc_circulation;
        break;
      }

      // optional uint32 havc_circulation = 2;
      case 2: {
        if (tag == 16) {
         parse_havc_circulation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &havc_circulation_)));
          set_has_havc_circulation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_havc_temperature;
        break;
      }

      // optional uint32 havc_temperature = 3;
      case 3: {
        if (tag == 24) {
         parse_havc_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &havc_temperature_)));
          set_has_havc_temperature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_havc_air_volume;
        break;
      }

      // optional uint32 havc_air_volume = 4;
      case 4: {
        if (tag == 32) {
         parse_havc_air_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &havc_air_volume_)));
          set_has_havc_air_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_AVMPhotoUploadResult;
        break;
      }

      // optional uint32 AVMPhotoUploadResult = 5;
      case 5: {
        if (tag == 40) {
         parse_AVMPhotoUploadResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avmphotouploadresult_)));
          set_has_avmphotouploadresult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.ITM_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.ITM_Info)
  return false;
#undef DO_
}

void ITM_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.ITM_Info)
  // optional uint32 havc_mode = 1;
  if (has_havc_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->havc_mode(), output);
  }

  // optional uint32 havc_circulation = 2;
  if (has_havc_circulation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->havc_circulation(), output);
  }

  // optional uint32 havc_temperature = 3;
  if (has_havc_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->havc_temperature(), output);
  }

  // optional uint32 havc_air_volume = 4;
  if (has_havc_air_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->havc_air_volume(), output);
  }

  // optional uint32 AVMPhotoUploadResult = 5;
  if (has_avmphotouploadresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->avmphotouploadresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.ITM_Info)
}

::google::protobuf::uint8* ITM_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.ITM_Info)
  // optional uint32 havc_mode = 1;
  if (has_havc_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->havc_mode(), target);
  }

  // optional uint32 havc_circulation = 2;
  if (has_havc_circulation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->havc_circulation(), target);
  }

  // optional uint32 havc_temperature = 3;
  if (has_havc_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->havc_temperature(), target);
  }

  // optional uint32 havc_air_volume = 4;
  if (has_havc_air_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->havc_air_volume(), target);
  }

  // optional uint32 AVMPhotoUploadResult = 5;
  if (has_avmphotouploadresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->avmphotouploadresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.ITM_Info)
  return target;
}

int ITM_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 havc_mode = 1;
    if (has_havc_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->havc_mode());
    }

    // optional uint32 havc_circulation = 2;
    if (has_havc_circulation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->havc_circulation());
    }

    // optional uint32 havc_temperature = 3;
    if (has_havc_temperature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->havc_temperature());
    }

    // optional uint32 havc_air_volume = 4;
    if (has_havc_air_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->havc_air_volume());
    }

    // optional uint32 AVMPhotoUploadResult = 5;
    if (has_avmphotouploadresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avmphotouploadresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ITM_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ITM_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ITM_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ITM_Info::MergeFrom(const ITM_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_havc_mode()) {
      set_havc_mode(from.havc_mode());
    }
    if (from.has_havc_circulation()) {
      set_havc_circulation(from.havc_circulation());
    }
    if (from.has_havc_temperature()) {
      set_havc_temperature(from.havc_temperature());
    }
    if (from.has_havc_air_volume()) {
      set_havc_air_volume(from.havc_air_volume());
    }
    if (from.has_avmphotouploadresult()) {
      set_avmphotouploadresult(from.avmphotouploadresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ITM_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ITM_Info::CopyFrom(const ITM_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ITM_Info::IsInitialized() const {

  return true;
}

void ITM_Info::Swap(ITM_Info* other) {
  if (other != this) {
    std::swap(havc_mode_, other->havc_mode_);
    std::swap(havc_circulation_, other->havc_circulation_);
    std::swap(havc_temperature_, other->havc_temperature_);
    std::swap(havc_air_volume_, other->havc_air_volume_);
    std::swap(avmphotouploadresult_, other->avmphotouploadresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ITM_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ITM_Info_descriptor_;
  metadata.reflection = ITM_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IKEY_Info::kFuelCutRequestFieldNumber;
const int IKEY_Info::kRemoteEngingRunFlagFieldNumber;
const int IKEY_Info::kRESFailureFeedbackFieldNumber;
const int IKEY_Info::kPEPSEngineforbidStFieldNumber;
const int IKEY_Info::kStartAuthStsFieldNumber;
#endif  // !_MSC_VER

IKEY_Info::IKEY_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.IKEY_Info)
}

void IKEY_Info::InitAsDefaultInstance() {
}

IKEY_Info::IKEY_Info(const IKEY_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.IKEY_Info)
}

void IKEY_Info::SharedCtor() {
  _cached_size_ = 0;
  fuel_cut_request_ = false;
  remote_enging_run_flag_ = 0u;
  res_failurefeedback_ = 0u;
  peps_engineforbidst_ = 0u;
  startauthsts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IKEY_Info::~IKEY_Info() {
  // @@protoc_insertion_point(destructor:tbox.protocol.IKEY_Info)
  SharedDtor();
}

void IKEY_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IKEY_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IKEY_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IKEY_Info_descriptor_;
}

const IKEY_Info& IKEY_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

IKEY_Info* IKEY_Info::default_instance_ = NULL;

IKEY_Info* IKEY_Info::New() const {
  return new IKEY_Info;
}

void IKEY_Info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IKEY_Info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(fuel_cut_request_, startauthsts_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IKEY_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.IKEY_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Fuel_Cut_Request = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fuel_cut_request_)));
          set_has_fuel_cut_request();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_remote_enging_run_flag;
        break;
      }

      // optional uint32 remote_enging_run_flag = 2;
      case 2: {
        if (tag == 16) {
         parse_remote_enging_run_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_enging_run_flag_)));
          set_has_remote_enging_run_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RES_FailureFeedback;
        break;
      }

      // optional uint32 RES_FailureFeedback = 3;
      case 3: {
        if (tag == 24) {
         parse_RES_FailureFeedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &res_failurefeedback_)));
          set_has_res_failurefeedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PEPS_EngineforbidSt;
        break;
      }

      // optional uint32 PEPS_EngineforbidSt = 4;
      case 4: {
        if (tag == 32) {
         parse_PEPS_EngineforbidSt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peps_engineforbidst_)));
          set_has_peps_engineforbidst();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_StartAuthSts;
        break;
      }

      // optional uint32 StartAuthSts = 5;
      case 5: {
        if (tag == 40) {
         parse_StartAuthSts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startauthsts_)));
          set_has_startauthsts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.IKEY_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.IKEY_Info)
  return false;
#undef DO_
}

void IKEY_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.IKEY_Info)
  // optional bool Fuel_Cut_Request = 1;
  if (has_fuel_cut_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->fuel_cut_request(), output);
  }

  // optional uint32 remote_enging_run_flag = 2;
  if (has_remote_enging_run_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remote_enging_run_flag(), output);
  }

  // optional uint32 RES_FailureFeedback = 3;
  if (has_res_failurefeedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->res_failurefeedback(), output);
  }

  // optional uint32 PEPS_EngineforbidSt = 4;
  if (has_peps_engineforbidst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->peps_engineforbidst(), output);
  }

  // optional uint32 StartAuthSts = 5;
  if (has_startauthsts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->startauthsts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.IKEY_Info)
}

::google::protobuf::uint8* IKEY_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.IKEY_Info)
  // optional bool Fuel_Cut_Request = 1;
  if (has_fuel_cut_request()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->fuel_cut_request(), target);
  }

  // optional uint32 remote_enging_run_flag = 2;
  if (has_remote_enging_run_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->remote_enging_run_flag(), target);
  }

  // optional uint32 RES_FailureFeedback = 3;
  if (has_res_failurefeedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->res_failurefeedback(), target);
  }

  // optional uint32 PEPS_EngineforbidSt = 4;
  if (has_peps_engineforbidst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->peps_engineforbidst(), target);
  }

  // optional uint32 StartAuthSts = 5;
  if (has_startauthsts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->startauthsts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.IKEY_Info)
  return target;
}

int IKEY_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Fuel_Cut_Request = 1;
    if (has_fuel_cut_request()) {
      total_size += 1 + 1;
    }

    // optional uint32 remote_enging_run_flag = 2;
    if (has_remote_enging_run_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remote_enging_run_flag());
    }

    // optional uint32 RES_FailureFeedback = 3;
    if (has_res_failurefeedback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->res_failurefeedback());
    }

    // optional uint32 PEPS_EngineforbidSt = 4;
    if (has_peps_engineforbidst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->peps_engineforbidst());
    }

    // optional uint32 StartAuthSts = 5;
    if (has_startauthsts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startauthsts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IKEY_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IKEY_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IKEY_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IKEY_Info::MergeFrom(const IKEY_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fuel_cut_request()) {
      set_fuel_cut_request(from.fuel_cut_request());
    }
    if (from.has_remote_enging_run_flag()) {
      set_remote_enging_run_flag(from.remote_enging_run_flag());
    }
    if (from.has_res_failurefeedback()) {
      set_res_failurefeedback(from.res_failurefeedback());
    }
    if (from.has_peps_engineforbidst()) {
      set_peps_engineforbidst(from.peps_engineforbidst());
    }
    if (from.has_startauthsts()) {
      set_startauthsts(from.startauthsts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IKEY_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IKEY_Info::CopyFrom(const IKEY_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IKEY_Info::IsInitialized() const {

  return true;
}

void IKEY_Info::Swap(IKEY_Info* other) {
  if (other != this) {
    std::swap(fuel_cut_request_, other->fuel_cut_request_);
    std::swap(remote_enging_run_flag_, other->remote_enging_run_flag_);
    std::swap(res_failurefeedback_, other->res_failurefeedback_);
    std::swap(peps_engineforbidst_, other->peps_engineforbidst_);
    std::swap(startauthsts_, other->startauthsts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IKEY_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IKEY_Info_descriptor_;
  metadata.reflection = IKEY_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int COMMON_Info::kDVRWorkStatusFieldNumber;
const int COMMON_Info::kSHVMDRVSeatVentFieldNumber;
const int COMMON_Info::kSHVMPasSeatVentFieldNumber;
const int COMMON_Info::kExternalTempFieldNumber;
const int COMMON_Info::kSunroofWindowStatusFieldNumber;
const int COMMON_Info::kDVRRemoteCommandResultFieldNumber;
const int COMMON_Info::kUserSOCFieldNumber;
const int COMMON_Info::kDCDCFaultTypeBLMSFieldNumber;
const int COMMON_Info::kDCDCcurrentOutputBLMSFieldNumber;
const int COMMON_Info::kHVBatteryEnergyLevelFieldNumber;
#endif  // !_MSC_VER

COMMON_Info::COMMON_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.COMMON_Info)
}

void COMMON_Info::InitAsDefaultInstance() {
}

COMMON_Info::COMMON_Info(const COMMON_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.COMMON_Info)
}

void COMMON_Info::SharedCtor() {
  _cached_size_ = 0;
  dvrworkstatus_ = 0u;
  shvm_drvseatvent_ = 0u;
  shvm_passeatvent_ = 0u;
  external_temp_ = 0u;
  sunroof_window_status_ = 0u;
  dvr_remotecommandresult_ = 0u;
  usersoc_ = 0u;
  dcdc_fault_type_blms_ = 0u;
  dcdccurrentoutput_blms_ = 0u;
  hvbatteryenergylevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

COMMON_Info::~COMMON_Info() {
  // @@protoc_insertion_point(destructor:tbox.protocol.COMMON_Info)
  SharedDtor();
}

void COMMON_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void COMMON_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* COMMON_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return COMMON_Info_descriptor_;
}

const COMMON_Info& COMMON_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

COMMON_Info* COMMON_Info::default_instance_ = NULL;

COMMON_Info* COMMON_Info::New() const {
  return new COMMON_Info;
}

void COMMON_Info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<COMMON_Info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(dvrworkstatus_, dcdc_fault_type_blms_);
  }
  ZR_(dcdccurrentoutput_blms_, hvbatteryenergylevel_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool COMMON_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.COMMON_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 DVRWorkStatus = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dvrworkstatus_)));
          set_has_dvrworkstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SHVM_DRVSeatVent;
        break;
      }

      // optional uint32 SHVM_DRVSeatVent = 2;
      case 2: {
        if (tag == 16) {
         parse_SHVM_DRVSeatVent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shvm_drvseatvent_)));
          set_has_shvm_drvseatvent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SHVM_PasSeatVent;
        break;
      }

      // optional uint32 SHVM_PasSeatVent = 3;
      case 3: {
        if (tag == 24) {
         parse_SHVM_PasSeatVent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shvm_passeatvent_)));
          set_has_shvm_passeatvent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_External_Temp;
        break;
      }

      // optional uint32 External_Temp = 4;
      case 4: {
        if (tag == 32) {
         parse_External_Temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &external_temp_)));
          set_has_external_temp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sunroof_window_status;
        break;
      }

      // optional uint32 sunroof_window_status = 5;
      case 5: {
        if (tag == 40) {
         parse_sunroof_window_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sunroof_window_status_)));
          set_has_sunroof_window_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_DVR_RemoteCommandResult;
        break;
      }

      // optional uint32 DVR_RemoteCommandResult = 6;
      case 6: {
        if (tag == 48) {
         parse_DVR_RemoteCommandResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dvr_remotecommandresult_)));
          set_has_dvr_remotecommandresult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_UserSOC;
        break;
      }

      // optional uint32 UserSOC = 7;
      case 7: {
        if (tag == 56) {
         parse_UserSOC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usersoc_)));
          set_has_usersoc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_DCDC_Fault_Type_BLMS;
        break;
      }

      // optional uint32 DCDC_Fault_Type_BLMS = 8;
      case 8: {
        if (tag == 64) {
         parse_DCDC_Fault_Type_BLMS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dcdc_fault_type_blms_)));
          set_has_dcdc_fault_type_blms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_DCDCcurrentOutput_BLMS;
        break;
      }

      // optional uint32 DCDCcurrentOutput_BLMS = 9;
      case 9: {
        if (tag == 72) {
         parse_DCDCcurrentOutput_BLMS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dcdccurrentoutput_blms_)));
          set_has_dcdccurrentoutput_blms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_HVBatteryEnergyLevel;
        break;
      }

      // optional uint32 HVBatteryEnergyLevel = 10;
      case 10: {
        if (tag == 80) {
         parse_HVBatteryEnergyLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hvbatteryenergylevel_)));
          set_has_hvbatteryenergylevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.COMMON_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.COMMON_Info)
  return false;
#undef DO_
}

void COMMON_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.COMMON_Info)
  // optional uint32 DVRWorkStatus = 1;
  if (has_dvrworkstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dvrworkstatus(), output);
  }

  // optional uint32 SHVM_DRVSeatVent = 2;
  if (has_shvm_drvseatvent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shvm_drvseatvent(), output);
  }

  // optional uint32 SHVM_PasSeatVent = 3;
  if (has_shvm_passeatvent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shvm_passeatvent(), output);
  }

  // optional uint32 External_Temp = 4;
  if (has_external_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->external_temp(), output);
  }

  // optional uint32 sunroof_window_status = 5;
  if (has_sunroof_window_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sunroof_window_status(), output);
  }

  // optional uint32 DVR_RemoteCommandResult = 6;
  if (has_dvr_remotecommandresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dvr_remotecommandresult(), output);
  }

  // optional uint32 UserSOC = 7;
  if (has_usersoc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->usersoc(), output);
  }

  // optional uint32 DCDC_Fault_Type_BLMS = 8;
  if (has_dcdc_fault_type_blms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->dcdc_fault_type_blms(), output);
  }

  // optional uint32 DCDCcurrentOutput_BLMS = 9;
  if (has_dcdccurrentoutput_blms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->dcdccurrentoutput_blms(), output);
  }

  // optional uint32 HVBatteryEnergyLevel = 10;
  if (has_hvbatteryenergylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->hvbatteryenergylevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.COMMON_Info)
}

::google::protobuf::uint8* COMMON_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.COMMON_Info)
  // optional uint32 DVRWorkStatus = 1;
  if (has_dvrworkstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dvrworkstatus(), target);
  }

  // optional uint32 SHVM_DRVSeatVent = 2;
  if (has_shvm_drvseatvent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shvm_drvseatvent(), target);
  }

  // optional uint32 SHVM_PasSeatVent = 3;
  if (has_shvm_passeatvent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->shvm_passeatvent(), target);
  }

  // optional uint32 External_Temp = 4;
  if (has_external_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->external_temp(), target);
  }

  // optional uint32 sunroof_window_status = 5;
  if (has_sunroof_window_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sunroof_window_status(), target);
  }

  // optional uint32 DVR_RemoteCommandResult = 6;
  if (has_dvr_remotecommandresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dvr_remotecommandresult(), target);
  }

  // optional uint32 UserSOC = 7;
  if (has_usersoc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->usersoc(), target);
  }

  // optional uint32 DCDC_Fault_Type_BLMS = 8;
  if (has_dcdc_fault_type_blms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->dcdc_fault_type_blms(), target);
  }

  // optional uint32 DCDCcurrentOutput_BLMS = 9;
  if (has_dcdccurrentoutput_blms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->dcdccurrentoutput_blms(), target);
  }

  // optional uint32 HVBatteryEnergyLevel = 10;
  if (has_hvbatteryenergylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->hvbatteryenergylevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.COMMON_Info)
  return target;
}

int COMMON_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 DVRWorkStatus = 1;
    if (has_dvrworkstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dvrworkstatus());
    }

    // optional uint32 SHVM_DRVSeatVent = 2;
    if (has_shvm_drvseatvent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shvm_drvseatvent());
    }

    // optional uint32 SHVM_PasSeatVent = 3;
    if (has_shvm_passeatvent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shvm_passeatvent());
    }

    // optional uint32 External_Temp = 4;
    if (has_external_temp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->external_temp());
    }

    // optional uint32 sunroof_window_status = 5;
    if (has_sunroof_window_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sunroof_window_status());
    }

    // optional uint32 DVR_RemoteCommandResult = 6;
    if (has_dvr_remotecommandresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dvr_remotecommandresult());
    }

    // optional uint32 UserSOC = 7;
    if (has_usersoc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usersoc());
    }

    // optional uint32 DCDC_Fault_Type_BLMS = 8;
    if (has_dcdc_fault_type_blms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dcdc_fault_type_blms());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 DCDCcurrentOutput_BLMS = 9;
    if (has_dcdccurrentoutput_blms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dcdccurrentoutput_blms());
    }

    // optional uint32 HVBatteryEnergyLevel = 10;
    if (has_hvbatteryenergylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hvbatteryenergylevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void COMMON_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const COMMON_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const COMMON_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void COMMON_Info::MergeFrom(const COMMON_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dvrworkstatus()) {
      set_dvrworkstatus(from.dvrworkstatus());
    }
    if (from.has_shvm_drvseatvent()) {
      set_shvm_drvseatvent(from.shvm_drvseatvent());
    }
    if (from.has_shvm_passeatvent()) {
      set_shvm_passeatvent(from.shvm_passeatvent());
    }
    if (from.has_external_temp()) {
      set_external_temp(from.external_temp());
    }
    if (from.has_sunroof_window_status()) {
      set_sunroof_window_status(from.sunroof_window_status());
    }
    if (from.has_dvr_remotecommandresult()) {
      set_dvr_remotecommandresult(from.dvr_remotecommandresult());
    }
    if (from.has_usersoc()) {
      set_usersoc(from.usersoc());
    }
    if (from.has_dcdc_fault_type_blms()) {
      set_dcdc_fault_type_blms(from.dcdc_fault_type_blms());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dcdccurrentoutput_blms()) {
      set_dcdccurrentoutput_blms(from.dcdccurrentoutput_blms());
    }
    if (from.has_hvbatteryenergylevel()) {
      set_hvbatteryenergylevel(from.hvbatteryenergylevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void COMMON_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COMMON_Info::CopyFrom(const COMMON_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COMMON_Info::IsInitialized() const {

  return true;
}

void COMMON_Info::Swap(COMMON_Info* other) {
  if (other != this) {
    std::swap(dvrworkstatus_, other->dvrworkstatus_);
    std::swap(shvm_drvseatvent_, other->shvm_drvseatvent_);
    std::swap(shvm_passeatvent_, other->shvm_passeatvent_);
    std::swap(external_temp_, other->external_temp_);
    std::swap(sunroof_window_status_, other->sunroof_window_status_);
    std::swap(dvr_remotecommandresult_, other->dvr_remotecommandresult_);
    std::swap(usersoc_, other->usersoc_);
    std::swap(dcdc_fault_type_blms_, other->dcdc_fault_type_blms_);
    std::swap(dcdccurrentoutput_blms_, other->dcdccurrentoutput_blms_);
    std::swap(hvbatteryenergylevel_, other->hvbatteryenergylevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata COMMON_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = COMMON_Info_descriptor_;
  metadata.reflection = COMMON_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HVAC_Info::kAirConditionStatusDriverTempFieldNumber;
const int HVAC_Info::kAirConditionStatusPassengerTempFieldNumber;
const int HVAC_Info::kAirConditionStatusFanVolumeFieldNumber;
const int HVAC_Info::kAirConditionStatusACINDFieldNumber;
const int HVAC_Info::kAirConditionStatusCirculateINDFieldNumber;
const int HVAC_Info::kAirConditionStatusONOFFINDFieldNumber;
const int HVAC_Info::kAirConditionStatusAUTOINDFieldNumber;
const int HVAC_Info::kAirConditionStatusDUALINDFieldNumber;
const int HVAC_Info::kAirConditionStatusSYNCINDFieldNumber;
const int HVAC_Info::kAirConditionStatusFrontDefrostINDFieldNumber;
const int HVAC_Info::kAirConditionStatusRearDefrostINDFieldNumber;
const int HVAC_Info::kAirConditionStatusModeFieldNumber;
const int HVAC_Info::kSteeringHeatStatusSWFieldNumber;
const int HVAC_Info::kSeatHeatStatusDriverFieldNumber;
const int HVAC_Info::kSeatHeatStatusPassenagerFieldNumber;
const int HVAC_Info::kBlowerFanMotorStatusACFieldNumber;
const int HVAC_Info::kACStopAutoForbiddenFieldNumber;
const int HVAC_Info::kAirCondEcoActivationStateFieldNumber;
#endif  // !_MSC_VER

HVAC_Info::HVAC_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.HVAC_Info)
}

void HVAC_Info::InitAsDefaultInstance() {
}

HVAC_Info::HVAC_Info(const HVAC_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.HVAC_Info)
}

void HVAC_Info::SharedCtor() {
  _cached_size_ = 0;
  air_condition_status_driver_temp_ = 0u;
  air_condition_status_passenger_temp_ = 0u;
  air_condition_status_fan_volume_ = 0u;
  air_condition_status_ac_ind_ = 0u;
  air_condition_status_circulate_ind_ = 0u;
  air_condition_status_on_off_ind_ = 0u;
  air_condition_status_auto_ind_ = 0u;
  air_condition_status_dual_ind_ = 0u;
  air_condition_status_sync_ind_ = 0u;
  air_condition_status_front_defrost_ind_ = 0u;
  air_condition_status_rear_defrost_ind_ = 0u;
  air_condition_status_mode_ = 0u;
  steering_heat_status_sw_ = 0u;
  seat_heat_status_driver_ = 0u;
  seat_heat_status_passenager_ = 0u;
  blowerfanmotorstatus_ac_ = 0u;
  ac_stopautoforbidden_ = 0u;
  aircondecoactivationstate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HVAC_Info::~HVAC_Info() {
  // @@protoc_insertion_point(destructor:tbox.protocol.HVAC_Info)
  SharedDtor();
}

void HVAC_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HVAC_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HVAC_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HVAC_Info_descriptor_;
}

const HVAC_Info& HVAC_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

HVAC_Info* HVAC_Info::default_instance_ = NULL;

HVAC_Info* HVAC_Info::New() const {
  return new HVAC_Info;
}

void HVAC_Info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HVAC_Info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(air_condition_status_driver_temp_, air_condition_status_dual_ind_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(air_condition_status_sync_ind_, blowerfanmotorstatus_ac_);
  }
  ZR_(ac_stopautoforbidden_, aircondecoactivationstate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HVAC_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.HVAC_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Air_condition_status_driver_temp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &air_condition_status_driver_temp_)));
          set_has_air_condition_status_driver_temp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Air_condition_status_passenger_temp;
        break;
      }

      // optional uint32 Air_condition_status_passenger_temp = 2;
      case 2: {
        if (tag == 16) {
         parse_Air_condition_status_passenger_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &air_condition_status_passenger_temp_)));
          set_has_air_condition_status_passenger_temp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Air_condition_status_Fan_volume;
        break;
      }

      // optional uint32 Air_condition_status_Fan_volume = 3;
      case 3: {
        if (tag == 24) {
         parse_Air_condition_status_Fan_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &air_condition_status_fan_volume_)));
          set_has_air_condition_status_fan_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Air_condition_status_AC_IND;
        break;
      }

      // optional uint32 Air_condition_status_AC_IND = 4;
      case 4: {
        if (tag == 32) {
         parse_Air_condition_status_AC_IND:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &air_condition_status_ac_ind_)));
          set_has_air_condition_status_ac_ind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Air_condition_status_circulate_IND;
        break;
      }

      // optional uint32 Air_condition_status_circulate_IND = 5;
      case 5: {
        if (tag == 40) {
         parse_Air_condition_status_circulate_IND:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &air_condition_status_circulate_ind_)));
          set_has_air_condition_status_circulate_ind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Air_condition_status_ON_OFF_IND;
        break;
      }

      // optional uint32 Air_condition_status_ON_OFF_IND = 6;
      case 6: {
        if (tag == 48) {
         parse_Air_condition_status_ON_OFF_IND:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &air_condition_status_on_off_ind_)));
          set_has_air_condition_status_on_off_ind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Air_condition_status_AUTO_IND;
        break;
      }

      // optional uint32 Air_condition_status_AUTO_IND = 7;
      case 7: {
        if (tag == 56) {
         parse_Air_condition_status_AUTO_IND:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &air_condition_status_auto_ind_)));
          set_has_air_condition_status_auto_ind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_Air_condition_status_DUAL_IND;
        break;
      }

      // optional uint32 Air_condition_status_DUAL_IND = 8;
      case 8: {
        if (tag == 64) {
         parse_Air_condition_status_DUAL_IND:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &air_condition_status_dual_ind_)));
          set_has_air_condition_status_dual_ind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_Air_condition_status_SYNC_IND;
        break;
      }

      // optional uint32 Air_condition_status_SYNC_IND = 9;
      case 9: {
        if (tag == 72) {
         parse_Air_condition_status_SYNC_IND:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &air_condition_status_sync_ind_)));
          set_has_air_condition_status_sync_ind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_Air_condition_status_Front_Defrost_IND;
        break;
      }

      // optional uint32 Air_condition_status_Front_Defrost_IND = 10;
      case 10: {
        if (tag == 80) {
         parse_Air_condition_status_Front_Defrost_IND:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &air_condition_status_front_defrost_ind_)));
          set_has_air_condition_status_front_defrost_ind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_Air_condition_status_Rear_Defrost_IND;
        break;
      }

      // optional uint32 Air_condition_status_Rear_Defrost_IND = 11;
      case 11: {
        if (tag == 88) {
         parse_Air_condition_status_Rear_Defrost_IND:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &air_condition_status_rear_defrost_ind_)));
          set_has_air_condition_status_rear_defrost_ind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_Air_condition_status_Mode;
        break;
      }

      // optional uint32 Air_condition_status_Mode = 12;
      case 12: {
        if (tag == 96) {
         parse_Air_condition_status_Mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &air_condition_status_mode_)));
          set_has_air_condition_status_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_Steering_Heat_status_SW;
        break;
      }

      // optional uint32 Steering_Heat_status_SW = 13;
      case 13: {
        if (tag == 104) {
         parse_Steering_Heat_status_SW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steering_heat_status_sw_)));
          set_has_steering_heat_status_sw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_Seat_Heat_status_driver;
        break;
      }

      // optional uint32 Seat_Heat_status_driver = 14;
      case 14: {
        if (tag == 112) {
         parse_Seat_Heat_status_driver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_heat_status_driver_)));
          set_has_seat_heat_status_driver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_Seat_Heat_status_passenager;
        break;
      }

      // optional uint32 Seat_Heat_status_passenager = 15;
      case 15: {
        if (tag == 120) {
         parse_Seat_Heat_status_passenager:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_heat_status_passenager_)));
          set_has_seat_heat_status_passenager();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_BlowerFanMotorStatus_AC;
        break;
      }

      // optional uint32 BlowerFanMotorStatus_AC = 16;
      case 16: {
        if (tag == 128) {
         parse_BlowerFanMotorStatus_AC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blowerfanmotorstatus_ac_)));
          set_has_blowerfanmotorstatus_ac();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_AC_StopAutoForbidden;
        break;
      }

      // optional uint32 AC_StopAutoForbidden = 17;
      case 17: {
        if (tag == 136) {
         parse_AC_StopAutoForbidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ac_stopautoforbidden_)));
          set_has_ac_stopautoforbidden();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_AirCondEcoActivationState;
        break;
      }

      // optional uint32 AirCondEcoActivationState = 18;
      case 18: {
        if (tag == 144) {
         parse_AirCondEcoActivationState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aircondecoactivationstate_)));
          set_has_aircondecoactivationstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.HVAC_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.HVAC_Info)
  return false;
#undef DO_
}

void HVAC_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.HVAC_Info)
  // optional uint32 Air_condition_status_driver_temp = 1;
  if (has_air_condition_status_driver_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->air_condition_status_driver_temp(), output);
  }

  // optional uint32 Air_condition_status_passenger_temp = 2;
  if (has_air_condition_status_passenger_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->air_condition_status_passenger_temp(), output);
  }

  // optional uint32 Air_condition_status_Fan_volume = 3;
  if (has_air_condition_status_fan_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->air_condition_status_fan_volume(), output);
  }

  // optional uint32 Air_condition_status_AC_IND = 4;
  if (has_air_condition_status_ac_ind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->air_condition_status_ac_ind(), output);
  }

  // optional uint32 Air_condition_status_circulate_IND = 5;
  if (has_air_condition_status_circulate_ind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->air_condition_status_circulate_ind(), output);
  }

  // optional uint32 Air_condition_status_ON_OFF_IND = 6;
  if (has_air_condition_status_on_off_ind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->air_condition_status_on_off_ind(), output);
  }

  // optional uint32 Air_condition_status_AUTO_IND = 7;
  if (has_air_condition_status_auto_ind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->air_condition_status_auto_ind(), output);
  }

  // optional uint32 Air_condition_status_DUAL_IND = 8;
  if (has_air_condition_status_dual_ind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->air_condition_status_dual_ind(), output);
  }

  // optional uint32 Air_condition_status_SYNC_IND = 9;
  if (has_air_condition_status_sync_ind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->air_condition_status_sync_ind(), output);
  }

  // optional uint32 Air_condition_status_Front_Defrost_IND = 10;
  if (has_air_condition_status_front_defrost_ind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->air_condition_status_front_defrost_ind(), output);
  }

  // optional uint32 Air_condition_status_Rear_Defrost_IND = 11;
  if (has_air_condition_status_rear_defrost_ind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->air_condition_status_rear_defrost_ind(), output);
  }

  // optional uint32 Air_condition_status_Mode = 12;
  if (has_air_condition_status_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->air_condition_status_mode(), output);
  }

  // optional uint32 Steering_Heat_status_SW = 13;
  if (has_steering_heat_status_sw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->steering_heat_status_sw(), output);
  }

  // optional uint32 Seat_Heat_status_driver = 14;
  if (has_seat_heat_status_driver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->seat_heat_status_driver(), output);
  }

  // optional uint32 Seat_Heat_status_passenager = 15;
  if (has_seat_heat_status_passenager()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->seat_heat_status_passenager(), output);
  }

  // optional uint32 BlowerFanMotorStatus_AC = 16;
  if (has_blowerfanmotorstatus_ac()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->blowerfanmotorstatus_ac(), output);
  }

  // optional uint32 AC_StopAutoForbidden = 17;
  if (has_ac_stopautoforbidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->ac_stopautoforbidden(), output);
  }

  // optional uint32 AirCondEcoActivationState = 18;
  if (has_aircondecoactivationstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->aircondecoactivationstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.HVAC_Info)
}

::google::protobuf::uint8* HVAC_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.HVAC_Info)
  // optional uint32 Air_condition_status_driver_temp = 1;
  if (has_air_condition_status_driver_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->air_condition_status_driver_temp(), target);
  }

  // optional uint32 Air_condition_status_passenger_temp = 2;
  if (has_air_condition_status_passenger_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->air_condition_status_passenger_temp(), target);
  }

  // optional uint32 Air_condition_status_Fan_volume = 3;
  if (has_air_condition_status_fan_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->air_condition_status_fan_volume(), target);
  }

  // optional uint32 Air_condition_status_AC_IND = 4;
  if (has_air_condition_status_ac_ind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->air_condition_status_ac_ind(), target);
  }

  // optional uint32 Air_condition_status_circulate_IND = 5;
  if (has_air_condition_status_circulate_ind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->air_condition_status_circulate_ind(), target);
  }

  // optional uint32 Air_condition_status_ON_OFF_IND = 6;
  if (has_air_condition_status_on_off_ind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->air_condition_status_on_off_ind(), target);
  }

  // optional uint32 Air_condition_status_AUTO_IND = 7;
  if (has_air_condition_status_auto_ind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->air_condition_status_auto_ind(), target);
  }

  // optional uint32 Air_condition_status_DUAL_IND = 8;
  if (has_air_condition_status_dual_ind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->air_condition_status_dual_ind(), target);
  }

  // optional uint32 Air_condition_status_SYNC_IND = 9;
  if (has_air_condition_status_sync_ind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->air_condition_status_sync_ind(), target);
  }

  // optional uint32 Air_condition_status_Front_Defrost_IND = 10;
  if (has_air_condition_status_front_defrost_ind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->air_condition_status_front_defrost_ind(), target);
  }

  // optional uint32 Air_condition_status_Rear_Defrost_IND = 11;
  if (has_air_condition_status_rear_defrost_ind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->air_condition_status_rear_defrost_ind(), target);
  }

  // optional uint32 Air_condition_status_Mode = 12;
  if (has_air_condition_status_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->air_condition_status_mode(), target);
  }

  // optional uint32 Steering_Heat_status_SW = 13;
  if (has_steering_heat_status_sw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->steering_heat_status_sw(), target);
  }

  // optional uint32 Seat_Heat_status_driver = 14;
  if (has_seat_heat_status_driver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->seat_heat_status_driver(), target);
  }

  // optional uint32 Seat_Heat_status_passenager = 15;
  if (has_seat_heat_status_passenager()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->seat_heat_status_passenager(), target);
  }

  // optional uint32 BlowerFanMotorStatus_AC = 16;
  if (has_blowerfanmotorstatus_ac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->blowerfanmotorstatus_ac(), target);
  }

  // optional uint32 AC_StopAutoForbidden = 17;
  if (has_ac_stopautoforbidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->ac_stopautoforbidden(), target);
  }

  // optional uint32 AirCondEcoActivationState = 18;
  if (has_aircondecoactivationstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->aircondecoactivationstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.HVAC_Info)
  return target;
}

int HVAC_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Air_condition_status_driver_temp = 1;
    if (has_air_condition_status_driver_temp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->air_condition_status_driver_temp());
    }

    // optional uint32 Air_condition_status_passenger_temp = 2;
    if (has_air_condition_status_passenger_temp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->air_condition_status_passenger_temp());
    }

    // optional uint32 Air_condition_status_Fan_volume = 3;
    if (has_air_condition_status_fan_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->air_condition_status_fan_volume());
    }

    // optional uint32 Air_condition_status_AC_IND = 4;
    if (has_air_condition_status_ac_ind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->air_condition_status_ac_ind());
    }

    // optional uint32 Air_condition_status_circulate_IND = 5;
    if (has_air_condition_status_circulate_ind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->air_condition_status_circulate_ind());
    }

    // optional uint32 Air_condition_status_ON_OFF_IND = 6;
    if (has_air_condition_status_on_off_ind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->air_condition_status_on_off_ind());
    }

    // optional uint32 Air_condition_status_AUTO_IND = 7;
    if (has_air_condition_status_auto_ind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->air_condition_status_auto_ind());
    }

    // optional uint32 Air_condition_status_DUAL_IND = 8;
    if (has_air_condition_status_dual_ind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->air_condition_status_dual_ind());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Air_condition_status_SYNC_IND = 9;
    if (has_air_condition_status_sync_ind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->air_condition_status_sync_ind());
    }

    // optional uint32 Air_condition_status_Front_Defrost_IND = 10;
    if (has_air_condition_status_front_defrost_ind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->air_condition_status_front_defrost_ind());
    }

    // optional uint32 Air_condition_status_Rear_Defrost_IND = 11;
    if (has_air_condition_status_rear_defrost_ind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->air_condition_status_rear_defrost_ind());
    }

    // optional uint32 Air_condition_status_Mode = 12;
    if (has_air_condition_status_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->air_condition_status_mode());
    }

    // optional uint32 Steering_Heat_status_SW = 13;
    if (has_steering_heat_status_sw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steering_heat_status_sw());
    }

    // optional uint32 Seat_Heat_status_driver = 14;
    if (has_seat_heat_status_driver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat_heat_status_driver());
    }

    // optional uint32 Seat_Heat_status_passenager = 15;
    if (has_seat_heat_status_passenager()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat_heat_status_passenager());
    }

    // optional uint32 BlowerFanMotorStatus_AC = 16;
    if (has_blowerfanmotorstatus_ac()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blowerfanmotorstatus_ac());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 AC_StopAutoForbidden = 17;
    if (has_ac_stopautoforbidden()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ac_stopautoforbidden());
    }

    // optional uint32 AirCondEcoActivationState = 18;
    if (has_aircondecoactivationstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aircondecoactivationstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HVAC_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HVAC_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HVAC_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HVAC_Info::MergeFrom(const HVAC_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_air_condition_status_driver_temp()) {
      set_air_condition_status_driver_temp(from.air_condition_status_driver_temp());
    }
    if (from.has_air_condition_status_passenger_temp()) {
      set_air_condition_status_passenger_temp(from.air_condition_status_passenger_temp());
    }
    if (from.has_air_condition_status_fan_volume()) {
      set_air_condition_status_fan_volume(from.air_condition_status_fan_volume());
    }
    if (from.has_air_condition_status_ac_ind()) {
      set_air_condition_status_ac_ind(from.air_condition_status_ac_ind());
    }
    if (from.has_air_condition_status_circulate_ind()) {
      set_air_condition_status_circulate_ind(from.air_condition_status_circulate_ind());
    }
    if (from.has_air_condition_status_on_off_ind()) {
      set_air_condition_status_on_off_ind(from.air_condition_status_on_off_ind());
    }
    if (from.has_air_condition_status_auto_ind()) {
      set_air_condition_status_auto_ind(from.air_condition_status_auto_ind());
    }
    if (from.has_air_condition_status_dual_ind()) {
      set_air_condition_status_dual_ind(from.air_condition_status_dual_ind());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_air_condition_status_sync_ind()) {
      set_air_condition_status_sync_ind(from.air_condition_status_sync_ind());
    }
    if (from.has_air_condition_status_front_defrost_ind()) {
      set_air_condition_status_front_defrost_ind(from.air_condition_status_front_defrost_ind());
    }
    if (from.has_air_condition_status_rear_defrost_ind()) {
      set_air_condition_status_rear_defrost_ind(from.air_condition_status_rear_defrost_ind());
    }
    if (from.has_air_condition_status_mode()) {
      set_air_condition_status_mode(from.air_condition_status_mode());
    }
    if (from.has_steering_heat_status_sw()) {
      set_steering_heat_status_sw(from.steering_heat_status_sw());
    }
    if (from.has_seat_heat_status_driver()) {
      set_seat_heat_status_driver(from.seat_heat_status_driver());
    }
    if (from.has_seat_heat_status_passenager()) {
      set_seat_heat_status_passenager(from.seat_heat_status_passenager());
    }
    if (from.has_blowerfanmotorstatus_ac()) {
      set_blowerfanmotorstatus_ac(from.blowerfanmotorstatus_ac());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ac_stopautoforbidden()) {
      set_ac_stopautoforbidden(from.ac_stopautoforbidden());
    }
    if (from.has_aircondecoactivationstate()) {
      set_aircondecoactivationstate(from.aircondecoactivationstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HVAC_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HVAC_Info::CopyFrom(const HVAC_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HVAC_Info::IsInitialized() const {

  return true;
}

void HVAC_Info::Swap(HVAC_Info* other) {
  if (other != this) {
    std::swap(air_condition_status_driver_temp_, other->air_condition_status_driver_temp_);
    std::swap(air_condition_status_passenger_temp_, other->air_condition_status_passenger_temp_);
    std::swap(air_condition_status_fan_volume_, other->air_condition_status_fan_volume_);
    std::swap(air_condition_status_ac_ind_, other->air_condition_status_ac_ind_);
    std::swap(air_condition_status_circulate_ind_, other->air_condition_status_circulate_ind_);
    std::swap(air_condition_status_on_off_ind_, other->air_condition_status_on_off_ind_);
    std::swap(air_condition_status_auto_ind_, other->air_condition_status_auto_ind_);
    std::swap(air_condition_status_dual_ind_, other->air_condition_status_dual_ind_);
    std::swap(air_condition_status_sync_ind_, other->air_condition_status_sync_ind_);
    std::swap(air_condition_status_front_defrost_ind_, other->air_condition_status_front_defrost_ind_);
    std::swap(air_condition_status_rear_defrost_ind_, other->air_condition_status_rear_defrost_ind_);
    std::swap(air_condition_status_mode_, other->air_condition_status_mode_);
    std::swap(steering_heat_status_sw_, other->steering_heat_status_sw_);
    std::swap(seat_heat_status_driver_, other->seat_heat_status_driver_);
    std::swap(seat_heat_status_passenager_, other->seat_heat_status_passenager_);
    std::swap(blowerfanmotorstatus_ac_, other->blowerfanmotorstatus_ac_);
    std::swap(ac_stopautoforbidden_, other->ac_stopautoforbidden_);
    std::swap(aircondecoactivationstate_, other->aircondecoactivationstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HVAC_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HVAC_Info_descriptor_;
  metadata.reflection = HVAC_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SBOX_info::kPM25OnOffStateFieldNumber;
const int SBOX_info::kPM25FaultStateFieldNumber;
const int SBOX_info::kPM25StateFieldNumber;
const int SBOX_info::kPM25ValueFieldNumber;
const int SBOX_info::kSeatPositionFeedbackFieldNumber;
const int SBOX_info::kSeatHeaterFeedbackMainFieldNumber;
const int SBOX_info::kSeatHeaterFeedbackFRFieldNumber;
const int SBOX_info::kHAVCModeFeedbackFieldNumber;
const int SBOX_info::kHAVCCirculationFeedbackFieldNumber;
const int SBOX_info::kHAVCTemperatureFeedbackFieldNumber;
const int SBOX_info::kHAVCAirVolumeFeedbackFieldNumber;
const int SBOX_info::kAUTOFieldNumber;
const int SBOX_info::kHVACTypeFieldNumber;
const int SBOX_info::kDirectOutsideTempFieldNumber;
const int SBOX_info::kDefrostStateFieldNumber;
const int SBOX_info::kCoolingWarmingFeedbackFieldNumber;
const int SBOX_info::kSBOXControlDataACONOFFFieldNumber;
const int SBOX_info::kUVCINFeedbackFieldNumber;
const int SBOX_info::kUVSStateFeedbackFieldNumber;
const int SBOX_info::kEUCUStateFeedbackFieldNumber;
#endif  // !_MSC_VER

SBOX_info::SBOX_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.SBOX_info)
}

void SBOX_info::InitAsDefaultInstance() {
}

SBOX_info::SBOX_info(const SBOX_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.SBOX_info)
}

void SBOX_info::SharedCtor() {
  _cached_size_ = 0;
  pm25onoffstate_ = false;
  pm25faultstate_ = false;
  pm25state_ = 0u;
  pm25value_ = 0u;
  seat_position_feedback_ = 0u;
  seat_heater_feedback_main_ = 0u;
  seat_heater_feedback_fr_ = 0u;
  havc_mode_feedback_ = 0u;
  havc_circulation_feedback_ = 0u;
  havc_temperature_feedback_ = 0u;
  havc_air_volume_feedback_ = 0u;
  auto__ = 0u;
  hvac_type_ = false;
  directoutsidetemp_ = 0u;
  defroststate_ = 0u;
  cooling_warming_feedback_ = 0u;
  s_box_controldata_ac_on_off_ = 0u;
  uvc_in_feedback_ = 0u;
  uvs_state_feedback_ = false;
  eucu_state_feedback_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SBOX_info::~SBOX_info() {
  // @@protoc_insertion_point(destructor:tbox.protocol.SBOX_info)
  SharedDtor();
}

void SBOX_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SBOX_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SBOX_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SBOX_info_descriptor_;
}

const SBOX_info& SBOX_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

SBOX_info* SBOX_info::default_instance_ = NULL;

SBOX_info* SBOX_info::New() const {
  return new SBOX_info;
}

void SBOX_info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SBOX_info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(pm25state_, pm25faultstate_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(havc_circulation_feedback_, cooling_warming_feedback_);
    hvac_type_ = false;
  }
  if (_has_bits_[16 / 32] & 983040) {
    ZR_(s_box_controldata_ac_on_off_, eucu_state_feedback_);
    uvs_state_feedback_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SBOX_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.SBOX_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool PM25OnOffState = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pm25onoffstate_)));
          set_has_pm25onoffstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PM25FaultState;
        break;
      }

      // optional bool PM25FaultState = 2;
      case 2: {
        if (tag == 16) {
         parse_PM25FaultState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pm25faultstate_)));
          set_has_pm25faultstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PM25State;
        break;
      }

      // optional uint32 PM25State = 3;
      case 3: {
        if (tag == 24) {
         parse_PM25State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pm25state_)));
          set_has_pm25state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PM25Value;
        break;
      }

      // optional uint32 PM25Value = 4;
      case 4: {
        if (tag == 32) {
         parse_PM25Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pm25value_)));
          set_has_pm25value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Seat_Position_Feedback;
        break;
      }

      // optional uint32 Seat_Position_Feedback = 5;
      case 5: {
        if (tag == 40) {
         parse_Seat_Position_Feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_position_feedback_)));
          set_has_seat_position_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Seat_Heater_Feedback_Main;
        break;
      }

      // optional uint32 Seat_Heater_Feedback_Main = 6;
      case 6: {
        if (tag == 48) {
         parse_Seat_Heater_Feedback_Main:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_heater_feedback_main_)));
          set_has_seat_heater_feedback_main();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Seat_Heater_Feedback_FR;
        break;
      }

      // optional uint32 Seat_Heater_Feedback_FR = 7;
      case 7: {
        if (tag == 56) {
         parse_Seat_Heater_Feedback_FR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_heater_feedback_fr_)));
          set_has_seat_heater_feedback_fr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_HAVC_mode_feedback;
        break;
      }

      // optional uint32 HAVC_mode_feedback = 8;
      case 8: {
        if (tag == 64) {
         parse_HAVC_mode_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &havc_mode_feedback_)));
          set_has_havc_mode_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_HAVC_circulation_feedback;
        break;
      }

      // optional uint32 HAVC_circulation_feedback = 9;
      case 9: {
        if (tag == 72) {
         parse_HAVC_circulation_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &havc_circulation_feedback_)));
          set_has_havc_circulation_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_HAVC_temperature_feedback;
        break;
      }

      // optional uint32 HAVC_temperature_feedback = 10;
      case 10: {
        if (tag == 80) {
         parse_HAVC_temperature_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &havc_temperature_feedback_)));
          set_has_havc_temperature_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_HAVC_air_volume_feedback;
        break;
      }

      // optional uint32 HAVC_air_volume_feedback = 11;
      case 11: {
        if (tag == 88) {
         parse_HAVC_air_volume_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &havc_air_volume_feedback_)));
          set_has_havc_air_volume_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_AUTO;
        break;
      }

      // optional uint32 AUTO = 12;
      case 12: {
        if (tag == 96) {
         parse_AUTO:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auto__)));
          set_has_auto_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_HVAC_Type;
        break;
      }

      // optional bool HVAC_Type = 13;
      case 13: {
        if (tag == 104) {
         parse_HVAC_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hvac_type_)));
          set_has_hvac_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_DirectOutsideTemp;
        break;
      }

      // optional uint32 DirectOutsideTemp = 14;
      case 14: {
        if (tag == 112) {
         parse_DirectOutsideTemp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &directoutsidetemp_)));
          set_has_directoutsidetemp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_DefrostState;
        break;
      }

      // optional uint32 DefrostState = 15;
      case 15: {
        if (tag == 120) {
         parse_DefrostState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defroststate_)));
          set_has_defroststate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_Cooling_Warming_Feedback;
        break;
      }

      // optional uint32 Cooling_Warming_Feedback = 16;
      case 16: {
        if (tag == 128) {
         parse_Cooling_Warming_Feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cooling_warming_feedback_)));
          set_has_cooling_warming_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_S_BOX_ControlData_AC_ON_OFF;
        break;
      }

      // optional uint32 S_BOX_ControlData_AC_ON_OFF = 17;
      case 17: {
        if (tag == 136) {
         parse_S_BOX_ControlData_AC_ON_OFF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &s_box_controldata_ac_on_off_)));
          set_has_s_box_controldata_ac_on_off();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_UVC_IN_feedback;
        break;
      }

      // optional uint32 UVC_IN_feedback = 18;
      case 18: {
        if (tag == 144) {
         parse_UVC_IN_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uvc_in_feedback_)));
          set_has_uvc_in_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_UVS_state_feedback;
        break;
      }

      // optional bool UVS_state_feedback = 19;
      case 19: {
        if (tag == 152) {
         parse_UVS_state_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uvs_state_feedback_)));
          set_has_uvs_state_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_EUCU_state_feedback;
        break;
      }

      // optional bool EUCU_state_feedback = 20;
      case 20: {
        if (tag == 160) {
         parse_EUCU_state_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eucu_state_feedback_)));
          set_has_eucu_state_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.SBOX_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.SBOX_info)
  return false;
#undef DO_
}

void SBOX_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.SBOX_info)
  // optional bool PM25OnOffState = 1;
  if (has_pm25onoffstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->pm25onoffstate(), output);
  }

  // optional bool PM25FaultState = 2;
  if (has_pm25faultstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->pm25faultstate(), output);
  }

  // optional uint32 PM25State = 3;
  if (has_pm25state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pm25state(), output);
  }

  // optional uint32 PM25Value = 4;
  if (has_pm25value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pm25value(), output);
  }

  // optional uint32 Seat_Position_Feedback = 5;
  if (has_seat_position_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seat_position_feedback(), output);
  }

  // optional uint32 Seat_Heater_Feedback_Main = 6;
  if (has_seat_heater_feedback_main()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->seat_heater_feedback_main(), output);
  }

  // optional uint32 Seat_Heater_Feedback_FR = 7;
  if (has_seat_heater_feedback_fr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->seat_heater_feedback_fr(), output);
  }

  // optional uint32 HAVC_mode_feedback = 8;
  if (has_havc_mode_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->havc_mode_feedback(), output);
  }

  // optional uint32 HAVC_circulation_feedback = 9;
  if (has_havc_circulation_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->havc_circulation_feedback(), output);
  }

  // optional uint32 HAVC_temperature_feedback = 10;
  if (has_havc_temperature_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->havc_temperature_feedback(), output);
  }

  // optional uint32 HAVC_air_volume_feedback = 11;
  if (has_havc_air_volume_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->havc_air_volume_feedback(), output);
  }

  // optional uint32 AUTO = 12;
  if (has_auto_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->auto_(), output);
  }

  // optional bool HVAC_Type = 13;
  if (has_hvac_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->hvac_type(), output);
  }

  // optional uint32 DirectOutsideTemp = 14;
  if (has_directoutsidetemp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->directoutsidetemp(), output);
  }

  // optional uint32 DefrostState = 15;
  if (has_defroststate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->defroststate(), output);
  }

  // optional uint32 Cooling_Warming_Feedback = 16;
  if (has_cooling_warming_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->cooling_warming_feedback(), output);
  }

  // optional uint32 S_BOX_ControlData_AC_ON_OFF = 17;
  if (has_s_box_controldata_ac_on_off()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->s_box_controldata_ac_on_off(), output);
  }

  // optional uint32 UVC_IN_feedback = 18;
  if (has_uvc_in_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->uvc_in_feedback(), output);
  }

  // optional bool UVS_state_feedback = 19;
  if (has_uvs_state_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->uvs_state_feedback(), output);
  }

  // optional bool EUCU_state_feedback = 20;
  if (has_eucu_state_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->eucu_state_feedback(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.SBOX_info)
}

::google::protobuf::uint8* SBOX_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.SBOX_info)
  // optional bool PM25OnOffState = 1;
  if (has_pm25onoffstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->pm25onoffstate(), target);
  }

  // optional bool PM25FaultState = 2;
  if (has_pm25faultstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->pm25faultstate(), target);
  }

  // optional uint32 PM25State = 3;
  if (has_pm25state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pm25state(), target);
  }

  // optional uint32 PM25Value = 4;
  if (has_pm25value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pm25value(), target);
  }

  // optional uint32 Seat_Position_Feedback = 5;
  if (has_seat_position_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seat_position_feedback(), target);
  }

  // optional uint32 Seat_Heater_Feedback_Main = 6;
  if (has_seat_heater_feedback_main()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->seat_heater_feedback_main(), target);
  }

  // optional uint32 Seat_Heater_Feedback_FR = 7;
  if (has_seat_heater_feedback_fr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->seat_heater_feedback_fr(), target);
  }

  // optional uint32 HAVC_mode_feedback = 8;
  if (has_havc_mode_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->havc_mode_feedback(), target);
  }

  // optional uint32 HAVC_circulation_feedback = 9;
  if (has_havc_circulation_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->havc_circulation_feedback(), target);
  }

  // optional uint32 HAVC_temperature_feedback = 10;
  if (has_havc_temperature_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->havc_temperature_feedback(), target);
  }

  // optional uint32 HAVC_air_volume_feedback = 11;
  if (has_havc_air_volume_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->havc_air_volume_feedback(), target);
  }

  // optional uint32 AUTO = 12;
  if (has_auto_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->auto_(), target);
  }

  // optional bool HVAC_Type = 13;
  if (has_hvac_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->hvac_type(), target);
  }

  // optional uint32 DirectOutsideTemp = 14;
  if (has_directoutsidetemp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->directoutsidetemp(), target);
  }

  // optional uint32 DefrostState = 15;
  if (has_defroststate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->defroststate(), target);
  }

  // optional uint32 Cooling_Warming_Feedback = 16;
  if (has_cooling_warming_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->cooling_warming_feedback(), target);
  }

  // optional uint32 S_BOX_ControlData_AC_ON_OFF = 17;
  if (has_s_box_controldata_ac_on_off()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->s_box_controldata_ac_on_off(), target);
  }

  // optional uint32 UVC_IN_feedback = 18;
  if (has_uvc_in_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->uvc_in_feedback(), target);
  }

  // optional bool UVS_state_feedback = 19;
  if (has_uvs_state_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->uvs_state_feedback(), target);
  }

  // optional bool EUCU_state_feedback = 20;
  if (has_eucu_state_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->eucu_state_feedback(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.SBOX_info)
  return target;
}

int SBOX_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool PM25OnOffState = 1;
    if (has_pm25onoffstate()) {
      total_size += 1 + 1;
    }

    // optional bool PM25FaultState = 2;
    if (has_pm25faultstate()) {
      total_size += 1 + 1;
    }

    // optional uint32 PM25State = 3;
    if (has_pm25state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pm25state());
    }

    // optional uint32 PM25Value = 4;
    if (has_pm25value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pm25value());
    }

    // optional uint32 Seat_Position_Feedback = 5;
    if (has_seat_position_feedback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat_position_feedback());
    }

    // optional uint32 Seat_Heater_Feedback_Main = 6;
    if (has_seat_heater_feedback_main()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat_heater_feedback_main());
    }

    // optional uint32 Seat_Heater_Feedback_FR = 7;
    if (has_seat_heater_feedback_fr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seat_heater_feedback_fr());
    }

    // optional uint32 HAVC_mode_feedback = 8;
    if (has_havc_mode_feedback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->havc_mode_feedback());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 HAVC_circulation_feedback = 9;
    if (has_havc_circulation_feedback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->havc_circulation_feedback());
    }

    // optional uint32 HAVC_temperature_feedback = 10;
    if (has_havc_temperature_feedback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->havc_temperature_feedback());
    }

    // optional uint32 HAVC_air_volume_feedback = 11;
    if (has_havc_air_volume_feedback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->havc_air_volume_feedback());
    }

    // optional uint32 AUTO = 12;
    if (has_auto_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auto_());
    }

    // optional bool HVAC_Type = 13;
    if (has_hvac_type()) {
      total_size += 1 + 1;
    }

    // optional uint32 DirectOutsideTemp = 14;
    if (has_directoutsidetemp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->directoutsidetemp());
    }

    // optional uint32 DefrostState = 15;
    if (has_defroststate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defroststate());
    }

    // optional uint32 Cooling_Warming_Feedback = 16;
    if (has_cooling_warming_feedback()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cooling_warming_feedback());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 S_BOX_ControlData_AC_ON_OFF = 17;
    if (has_s_box_controldata_ac_on_off()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->s_box_controldata_ac_on_off());
    }

    // optional uint32 UVC_IN_feedback = 18;
    if (has_uvc_in_feedback()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uvc_in_feedback());
    }

    // optional bool UVS_state_feedback = 19;
    if (has_uvs_state_feedback()) {
      total_size += 2 + 1;
    }

    // optional bool EUCU_state_feedback = 20;
    if (has_eucu_state_feedback()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SBOX_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SBOX_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SBOX_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SBOX_info::MergeFrom(const SBOX_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pm25onoffstate()) {
      set_pm25onoffstate(from.pm25onoffstate());
    }
    if (from.has_pm25faultstate()) {
      set_pm25faultstate(from.pm25faultstate());
    }
    if (from.has_pm25state()) {
      set_pm25state(from.pm25state());
    }
    if (from.has_pm25value()) {
      set_pm25value(from.pm25value());
    }
    if (from.has_seat_position_feedback()) {
      set_seat_position_feedback(from.seat_position_feedback());
    }
    if (from.has_seat_heater_feedback_main()) {
      set_seat_heater_feedback_main(from.seat_heater_feedback_main());
    }
    if (from.has_seat_heater_feedback_fr()) {
      set_seat_heater_feedback_fr(from.seat_heater_feedback_fr());
    }
    if (from.has_havc_mode_feedback()) {
      set_havc_mode_feedback(from.havc_mode_feedback());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_havc_circulation_feedback()) {
      set_havc_circulation_feedback(from.havc_circulation_feedback());
    }
    if (from.has_havc_temperature_feedback()) {
      set_havc_temperature_feedback(from.havc_temperature_feedback());
    }
    if (from.has_havc_air_volume_feedback()) {
      set_havc_air_volume_feedback(from.havc_air_volume_feedback());
    }
    if (from.has_auto_()) {
      set_auto_(from.auto_());
    }
    if (from.has_hvac_type()) {
      set_hvac_type(from.hvac_type());
    }
    if (from.has_directoutsidetemp()) {
      set_directoutsidetemp(from.directoutsidetemp());
    }
    if (from.has_defroststate()) {
      set_defroststate(from.defroststate());
    }
    if (from.has_cooling_warming_feedback()) {
      set_cooling_warming_feedback(from.cooling_warming_feedback());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_s_box_controldata_ac_on_off()) {
      set_s_box_controldata_ac_on_off(from.s_box_controldata_ac_on_off());
    }
    if (from.has_uvc_in_feedback()) {
      set_uvc_in_feedback(from.uvc_in_feedback());
    }
    if (from.has_uvs_state_feedback()) {
      set_uvs_state_feedback(from.uvs_state_feedback());
    }
    if (from.has_eucu_state_feedback()) {
      set_eucu_state_feedback(from.eucu_state_feedback());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SBOX_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SBOX_info::CopyFrom(const SBOX_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SBOX_info::IsInitialized() const {

  return true;
}

void SBOX_info::Swap(SBOX_info* other) {
  if (other != this) {
    std::swap(pm25onoffstate_, other->pm25onoffstate_);
    std::swap(pm25faultstate_, other->pm25faultstate_);
    std::swap(pm25state_, other->pm25state_);
    std::swap(pm25value_, other->pm25value_);
    std::swap(seat_position_feedback_, other->seat_position_feedback_);
    std::swap(seat_heater_feedback_main_, other->seat_heater_feedback_main_);
    std::swap(seat_heater_feedback_fr_, other->seat_heater_feedback_fr_);
    std::swap(havc_mode_feedback_, other->havc_mode_feedback_);
    std::swap(havc_circulation_feedback_, other->havc_circulation_feedback_);
    std::swap(havc_temperature_feedback_, other->havc_temperature_feedback_);
    std::swap(havc_air_volume_feedback_, other->havc_air_volume_feedback_);
    std::swap(auto__, other->auto__);
    std::swap(hvac_type_, other->hvac_type_);
    std::swap(directoutsidetemp_, other->directoutsidetemp_);
    std::swap(defroststate_, other->defroststate_);
    std::swap(cooling_warming_feedback_, other->cooling_warming_feedback_);
    std::swap(s_box_controldata_ac_on_off_, other->s_box_controldata_ac_on_off_);
    std::swap(uvc_in_feedback_, other->uvc_in_feedback_);
    std::swap(uvs_state_feedback_, other->uvs_state_feedback_);
    std::swap(eucu_state_feedback_, other->eucu_state_feedback_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SBOX_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SBOX_info_descriptor_;
  metadata.reflection = SBOX_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DVR_Info::kDVRCollisionHappenFieldNumber;
const int DVR_Info::kDVRCollisionPhotoTransmitFieldNumber;
const int DVR_Info::kDVRCollisionVideoTransmitFieldNumber;
const int DVR_Info::kDVRResponseFieldNumber;
#endif  // !_MSC_VER

DVR_Info::DVR_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.DVR_Info)
}

void DVR_Info::InitAsDefaultInstance() {
}

DVR_Info::DVR_Info(const DVR_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.DVR_Info)
}

void DVR_Info::SharedCtor() {
  _cached_size_ = 0;
  dvr_collision_happen_ = 0u;
  dvr_collisionphoto_transmit_ = 0u;
  dvr_collisionvideo_transmit_ = 0u;
  dvr_response_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DVR_Info::~DVR_Info() {
  // @@protoc_insertion_point(destructor:tbox.protocol.DVR_Info)
  SharedDtor();
}

void DVR_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DVR_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DVR_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DVR_Info_descriptor_;
}

const DVR_Info& DVR_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

DVR_Info* DVR_Info::default_instance_ = NULL;

DVR_Info* DVR_Info::New() const {
  return new DVR_Info;
}

void DVR_Info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DVR_Info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dvr_collision_happen_, dvr_response_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DVR_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.DVR_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 DVR_Collision_Happen = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dvr_collision_happen_)));
          set_has_dvr_collision_happen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DVR_CollisionPhoto_Transmit;
        break;
      }

      // optional uint32 DVR_CollisionPhoto_Transmit = 2;
      case 2: {
        if (tag == 16) {
         parse_DVR_CollisionPhoto_Transmit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dvr_collisionphoto_transmit_)));
          set_has_dvr_collisionphoto_transmit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DVR_CollisionVideo_Transmit;
        break;
      }

      // optional uint32 DVR_CollisionVideo_Transmit = 3;
      case 3: {
        if (tag == 24) {
         parse_DVR_CollisionVideo_Transmit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dvr_collisionvideo_transmit_)));
          set_has_dvr_collisionvideo_transmit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DVR_Response;
        break;
      }

      // optional uint32 DVR_Response = 4;
      case 4: {
        if (tag == 32) {
         parse_DVR_Response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dvr_response_)));
          set_has_dvr_response();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.DVR_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.DVR_Info)
  return false;
#undef DO_
}

void DVR_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.DVR_Info)
  // optional uint32 DVR_Collision_Happen = 1;
  if (has_dvr_collision_happen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dvr_collision_happen(), output);
  }

  // optional uint32 DVR_CollisionPhoto_Transmit = 2;
  if (has_dvr_collisionphoto_transmit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dvr_collisionphoto_transmit(), output);
  }

  // optional uint32 DVR_CollisionVideo_Transmit = 3;
  if (has_dvr_collisionvideo_transmit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dvr_collisionvideo_transmit(), output);
  }

  // optional uint32 DVR_Response = 4;
  if (has_dvr_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dvr_response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.DVR_Info)
}

::google::protobuf::uint8* DVR_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.DVR_Info)
  // optional uint32 DVR_Collision_Happen = 1;
  if (has_dvr_collision_happen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dvr_collision_happen(), target);
  }

  // optional uint32 DVR_CollisionPhoto_Transmit = 2;
  if (has_dvr_collisionphoto_transmit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dvr_collisionphoto_transmit(), target);
  }

  // optional uint32 DVR_CollisionVideo_Transmit = 3;
  if (has_dvr_collisionvideo_transmit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dvr_collisionvideo_transmit(), target);
  }

  // optional uint32 DVR_Response = 4;
  if (has_dvr_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dvr_response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.DVR_Info)
  return target;
}

int DVR_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 DVR_Collision_Happen = 1;
    if (has_dvr_collision_happen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dvr_collision_happen());
    }

    // optional uint32 DVR_CollisionPhoto_Transmit = 2;
    if (has_dvr_collisionphoto_transmit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dvr_collisionphoto_transmit());
    }

    // optional uint32 DVR_CollisionVideo_Transmit = 3;
    if (has_dvr_collisionvideo_transmit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dvr_collisionvideo_transmit());
    }

    // optional uint32 DVR_Response = 4;
    if (has_dvr_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dvr_response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DVR_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DVR_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DVR_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DVR_Info::MergeFrom(const DVR_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dvr_collision_happen()) {
      set_dvr_collision_happen(from.dvr_collision_happen());
    }
    if (from.has_dvr_collisionphoto_transmit()) {
      set_dvr_collisionphoto_transmit(from.dvr_collisionphoto_transmit());
    }
    if (from.has_dvr_collisionvideo_transmit()) {
      set_dvr_collisionvideo_transmit(from.dvr_collisionvideo_transmit());
    }
    if (from.has_dvr_response()) {
      set_dvr_response(from.dvr_response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DVR_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DVR_Info::CopyFrom(const DVR_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DVR_Info::IsInitialized() const {

  return true;
}

void DVR_Info::Swap(DVR_Info* other) {
  if (other != this) {
    std::swap(dvr_collision_happen_, other->dvr_collision_happen_);
    std::swap(dvr_collisionphoto_transmit_, other->dvr_collisionphoto_transmit_);
    std::swap(dvr_collisionvideo_transmit_, other->dvr_collisionvideo_transmit_);
    std::swap(dvr_response_, other->dvr_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DVR_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DVR_Info_descriptor_;
  metadata.reflection = DVR_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Basic_Info::kEcmInfoFieldNumber;
const int Basic_Info::kAbsvdcInfoFieldNumber;
const int Basic_Info::kMeterInfoFieldNumber;
const int Basic_Info::kBcmInfoFieldNumber;
const int Basic_Info::kAcuInfoFieldNumber;
const int Basic_Info::kAtInfoFieldNumber;
const int Basic_Info::kStrgInfoFieldNumber;
const int Basic_Info::kEpsInfoFieldNumber;
const int Basic_Info::kUsmInfoFieldNumber;
const int Basic_Info::kTpmsInfoFieldNumber;
const int Basic_Info::kWireInfoFieldNumber;
const int Basic_Info::kEcoInfoFieldNumber;
const int Basic_Info::kAlarmInfoFieldNumber;
const int Basic_Info::kItmInfoFieldNumber;
const int Basic_Info::kIkeyInfoFieldNumber;
const int Basic_Info::kCommonInfoFieldNumber;
const int Basic_Info::kSboxInfoFieldNumber;
const int Basic_Info::kHvacInfoFieldNumber;
const int Basic_Info::kDvrInfoFieldNumber;
#endif  // !_MSC_VER

Basic_Info::Basic_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.Basic_Info)
}

void Basic_Info::InitAsDefaultInstance() {
  ecm_info_ = const_cast< ::tbox::protocol::ECM_Info*>(&::tbox::protocol::ECM_Info::default_instance());
  absvdc_info_ = const_cast< ::tbox::protocol::ABSVDC_Info*>(&::tbox::protocol::ABSVDC_Info::default_instance());
  meter_info_ = const_cast< ::tbox::protocol::METER_Info*>(&::tbox::protocol::METER_Info::default_instance());
  bcm_info_ = const_cast< ::tbox::protocol::BCM_Info*>(&::tbox::protocol::BCM_Info::default_instance());
  acu_info_ = const_cast< ::tbox::protocol::ACU_Info*>(&::tbox::protocol::ACU_Info::default_instance());
  at_info_ = const_cast< ::tbox::protocol::AT_Info*>(&::tbox::protocol::AT_Info::default_instance());
  strg_info_ = const_cast< ::tbox::protocol::STRG_Info*>(&::tbox::protocol::STRG_Info::default_instance());
  eps_info_ = const_cast< ::tbox::protocol::EPS_Info*>(&::tbox::protocol::EPS_Info::default_instance());
  usm_info_ = const_cast< ::tbox::protocol::USM_Info*>(&::tbox::protocol::USM_Info::default_instance());
  tpms_info_ = const_cast< ::tbox::protocol::TPMS_Info*>(&::tbox::protocol::TPMS_Info::default_instance());
  wire_info_ = const_cast< ::tbox::protocol::WIRE_Info*>(&::tbox::protocol::WIRE_Info::default_instance());
  eco_info_ = const_cast< ::tbox::protocol::ECO_Info*>(&::tbox::protocol::ECO_Info::default_instance());
  alarm_info_ = const_cast< ::tbox::protocol::ALARM_Info*>(&::tbox::protocol::ALARM_Info::default_instance());
  itm_info_ = const_cast< ::tbox::protocol::ITM_Info*>(&::tbox::protocol::ITM_Info::default_instance());
  ikey_info_ = const_cast< ::tbox::protocol::IKEY_Info*>(&::tbox::protocol::IKEY_Info::default_instance());
  common_info_ = const_cast< ::tbox::protocol::COMMON_Info*>(&::tbox::protocol::COMMON_Info::default_instance());
  sbox_info_ = const_cast< ::tbox::protocol::SBOX_info*>(&::tbox::protocol::SBOX_info::default_instance());
  hvac_info_ = const_cast< ::tbox::protocol::HVAC_Info*>(&::tbox::protocol::HVAC_Info::default_instance());
  dvr_info_ = const_cast< ::tbox::protocol::DVR_Info*>(&::tbox::protocol::DVR_Info::default_instance());
}

Basic_Info::Basic_Info(const Basic_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.Basic_Info)
}

void Basic_Info::SharedCtor() {
  _cached_size_ = 0;
  ecm_info_ = NULL;
  absvdc_info_ = NULL;
  meter_info_ = NULL;
  bcm_info_ = NULL;
  acu_info_ = NULL;
  at_info_ = NULL;
  strg_info_ = NULL;
  eps_info_ = NULL;
  usm_info_ = NULL;
  tpms_info_ = NULL;
  wire_info_ = NULL;
  eco_info_ = NULL;
  alarm_info_ = NULL;
  itm_info_ = NULL;
  ikey_info_ = NULL;
  common_info_ = NULL;
  sbox_info_ = NULL;
  hvac_info_ = NULL;
  dvr_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Basic_Info::~Basic_Info() {
  // @@protoc_insertion_point(destructor:tbox.protocol.Basic_Info)
  SharedDtor();
}

void Basic_Info::SharedDtor() {
  if (this != default_instance_) {
    delete ecm_info_;
    delete absvdc_info_;
    delete meter_info_;
    delete bcm_info_;
    delete acu_info_;
    delete at_info_;
    delete strg_info_;
    delete eps_info_;
    delete usm_info_;
    delete tpms_info_;
    delete wire_info_;
    delete eco_info_;
    delete alarm_info_;
    delete itm_info_;
    delete ikey_info_;
    delete common_info_;
    delete sbox_info_;
    delete hvac_info_;
    delete dvr_info_;
  }
}

void Basic_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Basic_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Basic_Info_descriptor_;
}

const Basic_Info& Basic_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

Basic_Info* Basic_Info::default_instance_ = NULL;

Basic_Info* Basic_Info::New() const {
  return new Basic_Info;
}

void Basic_Info::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_ecm_info()) {
      if (ecm_info_ != NULL) ecm_info_->::tbox::protocol::ECM_Info::Clear();
    }
    if (has_absvdc_info()) {
      if (absvdc_info_ != NULL) absvdc_info_->::tbox::protocol::ABSVDC_Info::Clear();
    }
    if (has_meter_info()) {
      if (meter_info_ != NULL) meter_info_->::tbox::protocol::METER_Info::Clear();
    }
    if (has_bcm_info()) {
      if (bcm_info_ != NULL) bcm_info_->::tbox::protocol::BCM_Info::Clear();
    }
    if (has_acu_info()) {
      if (acu_info_ != NULL) acu_info_->::tbox::protocol::ACU_Info::Clear();
    }
    if (has_at_info()) {
      if (at_info_ != NULL) at_info_->::tbox::protocol::AT_Info::Clear();
    }
    if (has_strg_info()) {
      if (strg_info_ != NULL) strg_info_->::tbox::protocol::STRG_Info::Clear();
    }
    if (has_eps_info()) {
      if (eps_info_ != NULL) eps_info_->::tbox::protocol::EPS_Info::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_usm_info()) {
      if (usm_info_ != NULL) usm_info_->::tbox::protocol::USM_Info::Clear();
    }
    if (has_tpms_info()) {
      if (tpms_info_ != NULL) tpms_info_->::tbox::protocol::TPMS_Info::Clear();
    }
    if (has_wire_info()) {
      if (wire_info_ != NULL) wire_info_->::tbox::protocol::WIRE_Info::Clear();
    }
    if (has_eco_info()) {
      if (eco_info_ != NULL) eco_info_->::tbox::protocol::ECO_Info::Clear();
    }
    if (has_alarm_info()) {
      if (alarm_info_ != NULL) alarm_info_->::tbox::protocol::ALARM_Info::Clear();
    }
    if (has_itm_info()) {
      if (itm_info_ != NULL) itm_info_->::tbox::protocol::ITM_Info::Clear();
    }
    if (has_ikey_info()) {
      if (ikey_info_ != NULL) ikey_info_->::tbox::protocol::IKEY_Info::Clear();
    }
    if (has_common_info()) {
      if (common_info_ != NULL) common_info_->::tbox::protocol::COMMON_Info::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 458752) {
    if (has_sbox_info()) {
      if (sbox_info_ != NULL) sbox_info_->::tbox::protocol::SBOX_info::Clear();
    }
    if (has_hvac_info()) {
      if (hvac_info_ != NULL) hvac_info_->::tbox::protocol::HVAC_Info::Clear();
    }
    if (has_dvr_info()) {
      if (dvr_info_ != NULL) dvr_info_->::tbox::protocol::DVR_Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Basic_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.Basic_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tbox.protocol.ECM_Info ecm_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ecm_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_absvdc_info;
        break;
      }

      // optional .tbox.protocol.ABSVDC_Info absvdc_info = 2;
      case 2: {
        if (tag == 18) {
         parse_absvdc_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_absvdc_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_meter_info;
        break;
      }

      // optional .tbox.protocol.METER_Info meter_info = 3;
      case 3: {
        if (tag == 26) {
         parse_meter_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meter_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bcm_info;
        break;
      }

      // optional .tbox.protocol.BCM_Info bcm_info = 4;
      case 4: {
        if (tag == 34) {
         parse_bcm_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bcm_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_acu_info;
        break;
      }

      // optional .tbox.protocol.ACU_Info acu_info = 5;
      case 5: {
        if (tag == 42) {
         parse_acu_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acu_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_at_info;
        break;
      }

      // optional .tbox.protocol.AT_Info at_info = 6;
      case 6: {
        if (tag == 50) {
         parse_at_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_at_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_strg_info;
        break;
      }

      // optional .tbox.protocol.STRG_Info strg_info = 7;
      case 7: {
        if (tag == 58) {
         parse_strg_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strg_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_eps_info;
        break;
      }

      // optional .tbox.protocol.EPS_Info eps_info = 8;
      case 8: {
        if (tag == 66) {
         parse_eps_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eps_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_usm_info;
        break;
      }

      // optional .tbox.protocol.USM_Info usm_info = 9;
      case 9: {
        if (tag == 74) {
         parse_usm_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usm_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_tpms_info;
        break;
      }

      // optional .tbox.protocol.TPMS_Info tpms_info = 10;
      case 10: {
        if (tag == 82) {
         parse_tpms_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tpms_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_wire_info;
        break;
      }

      // optional .tbox.protocol.WIRE_Info wire_info = 11;
      case 11: {
        if (tag == 90) {
         parse_wire_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wire_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_eco_info;
        break;
      }

      // optional .tbox.protocol.ECO_Info eco_info = 12;
      case 12: {
        if (tag == 98) {
         parse_eco_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eco_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_alarm_info;
        break;
      }

      // optional .tbox.protocol.ALARM_Info alarm_info = 13;
      case 13: {
        if (tag == 106) {
         parse_alarm_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alarm_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_itm_info;
        break;
      }

      // optional .tbox.protocol.ITM_Info itm_info = 14;
      case 14: {
        if (tag == 114) {
         parse_itm_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itm_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_ikey_info;
        break;
      }

      // optional .tbox.protocol.IKEY_Info ikey_info = 15;
      case 15: {
        if (tag == 122) {
         parse_ikey_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ikey_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_common_info;
        break;
      }

      // optional .tbox.protocol.COMMON_Info common_info = 16;
      case 16: {
        if (tag == 130) {
         parse_common_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_sbox_info;
        break;
      }

      // optional .tbox.protocol.SBOX_info sbox_info = 17;
      case 17: {
        if (tag == 138) {
         parse_sbox_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sbox_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_hvac_info;
        break;
      }

      // optional .tbox.protocol.HVAC_Info hvac_info = 18;
      case 18: {
        if (tag == 146) {
         parse_hvac_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hvac_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_dvr_info;
        break;
      }

      // optional .tbox.protocol.DVR_Info dvr_info = 19;
      case 19: {
        if (tag == 154) {
         parse_dvr_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dvr_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.Basic_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.Basic_Info)
  return false;
#undef DO_
}

void Basic_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.Basic_Info)
  // optional .tbox.protocol.ECM_Info ecm_info = 1;
  if (has_ecm_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ecm_info(), output);
  }

  // optional .tbox.protocol.ABSVDC_Info absvdc_info = 2;
  if (has_absvdc_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->absvdc_info(), output);
  }

  // optional .tbox.protocol.METER_Info meter_info = 3;
  if (has_meter_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->meter_info(), output);
  }

  // optional .tbox.protocol.BCM_Info bcm_info = 4;
  if (has_bcm_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bcm_info(), output);
  }

  // optional .tbox.protocol.ACU_Info acu_info = 5;
  if (has_acu_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->acu_info(), output);
  }

  // optional .tbox.protocol.AT_Info at_info = 6;
  if (has_at_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->at_info(), output);
  }

  // optional .tbox.protocol.STRG_Info strg_info = 7;
  if (has_strg_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->strg_info(), output);
  }

  // optional .tbox.protocol.EPS_Info eps_info = 8;
  if (has_eps_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->eps_info(), output);
  }

  // optional .tbox.protocol.USM_Info usm_info = 9;
  if (has_usm_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->usm_info(), output);
  }

  // optional .tbox.protocol.TPMS_Info tpms_info = 10;
  if (has_tpms_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->tpms_info(), output);
  }

  // optional .tbox.protocol.WIRE_Info wire_info = 11;
  if (has_wire_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->wire_info(), output);
  }

  // optional .tbox.protocol.ECO_Info eco_info = 12;
  if (has_eco_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->eco_info(), output);
  }

  // optional .tbox.protocol.ALARM_Info alarm_info = 13;
  if (has_alarm_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->alarm_info(), output);
  }

  // optional .tbox.protocol.ITM_Info itm_info = 14;
  if (has_itm_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->itm_info(), output);
  }

  // optional .tbox.protocol.IKEY_Info ikey_info = 15;
  if (has_ikey_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->ikey_info(), output);
  }

  // optional .tbox.protocol.COMMON_Info common_info = 16;
  if (has_common_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->common_info(), output);
  }

  // optional .tbox.protocol.SBOX_info sbox_info = 17;
  if (has_sbox_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->sbox_info(), output);
  }

  // optional .tbox.protocol.HVAC_Info hvac_info = 18;
  if (has_hvac_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->hvac_info(), output);
  }

  // optional .tbox.protocol.DVR_Info dvr_info = 19;
  if (has_dvr_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->dvr_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.Basic_Info)
}

::google::protobuf::uint8* Basic_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.Basic_Info)
  // optional .tbox.protocol.ECM_Info ecm_info = 1;
  if (has_ecm_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ecm_info(), target);
  }

  // optional .tbox.protocol.ABSVDC_Info absvdc_info = 2;
  if (has_absvdc_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->absvdc_info(), target);
  }

  // optional .tbox.protocol.METER_Info meter_info = 3;
  if (has_meter_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->meter_info(), target);
  }

  // optional .tbox.protocol.BCM_Info bcm_info = 4;
  if (has_bcm_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bcm_info(), target);
  }

  // optional .tbox.protocol.ACU_Info acu_info = 5;
  if (has_acu_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->acu_info(), target);
  }

  // optional .tbox.protocol.AT_Info at_info = 6;
  if (has_at_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->at_info(), target);
  }

  // optional .tbox.protocol.STRG_Info strg_info = 7;
  if (has_strg_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->strg_info(), target);
  }

  // optional .tbox.protocol.EPS_Info eps_info = 8;
  if (has_eps_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->eps_info(), target);
  }

  // optional .tbox.protocol.USM_Info usm_info = 9;
  if (has_usm_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->usm_info(), target);
  }

  // optional .tbox.protocol.TPMS_Info tpms_info = 10;
  if (has_tpms_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->tpms_info(), target);
  }

  // optional .tbox.protocol.WIRE_Info wire_info = 11;
  if (has_wire_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->wire_info(), target);
  }

  // optional .tbox.protocol.ECO_Info eco_info = 12;
  if (has_eco_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->eco_info(), target);
  }

  // optional .tbox.protocol.ALARM_Info alarm_info = 13;
  if (has_alarm_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->alarm_info(), target);
  }

  // optional .tbox.protocol.ITM_Info itm_info = 14;
  if (has_itm_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->itm_info(), target);
  }

  // optional .tbox.protocol.IKEY_Info ikey_info = 15;
  if (has_ikey_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->ikey_info(), target);
  }

  // optional .tbox.protocol.COMMON_Info common_info = 16;
  if (has_common_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->common_info(), target);
  }

  // optional .tbox.protocol.SBOX_info sbox_info = 17;
  if (has_sbox_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->sbox_info(), target);
  }

  // optional .tbox.protocol.HVAC_Info hvac_info = 18;
  if (has_hvac_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->hvac_info(), target);
  }

  // optional .tbox.protocol.DVR_Info dvr_info = 19;
  if (has_dvr_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->dvr_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.Basic_Info)
  return target;
}

int Basic_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .tbox.protocol.ECM_Info ecm_info = 1;
    if (has_ecm_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ecm_info());
    }

    // optional .tbox.protocol.ABSVDC_Info absvdc_info = 2;
    if (has_absvdc_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->absvdc_info());
    }

    // optional .tbox.protocol.METER_Info meter_info = 3;
    if (has_meter_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->meter_info());
    }

    // optional .tbox.protocol.BCM_Info bcm_info = 4;
    if (has_bcm_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bcm_info());
    }

    // optional .tbox.protocol.ACU_Info acu_info = 5;
    if (has_acu_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acu_info());
    }

    // optional .tbox.protocol.AT_Info at_info = 6;
    if (has_at_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->at_info());
    }

    // optional .tbox.protocol.STRG_Info strg_info = 7;
    if (has_strg_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strg_info());
    }

    // optional .tbox.protocol.EPS_Info eps_info = 8;
    if (has_eps_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eps_info());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .tbox.protocol.USM_Info usm_info = 9;
    if (has_usm_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usm_info());
    }

    // optional .tbox.protocol.TPMS_Info tpms_info = 10;
    if (has_tpms_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tpms_info());
    }

    // optional .tbox.protocol.WIRE_Info wire_info = 11;
    if (has_wire_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wire_info());
    }

    // optional .tbox.protocol.ECO_Info eco_info = 12;
    if (has_eco_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eco_info());
    }

    // optional .tbox.protocol.ALARM_Info alarm_info = 13;
    if (has_alarm_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alarm_info());
    }

    // optional .tbox.protocol.ITM_Info itm_info = 14;
    if (has_itm_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itm_info());
    }

    // optional .tbox.protocol.IKEY_Info ikey_info = 15;
    if (has_ikey_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ikey_info());
    }

    // optional .tbox.protocol.COMMON_Info common_info = 16;
    if (has_common_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common_info());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .tbox.protocol.SBOX_info sbox_info = 17;
    if (has_sbox_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sbox_info());
    }

    // optional .tbox.protocol.HVAC_Info hvac_info = 18;
    if (has_hvac_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hvac_info());
    }

    // optional .tbox.protocol.DVR_Info dvr_info = 19;
    if (has_dvr_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dvr_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Basic_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Basic_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Basic_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Basic_Info::MergeFrom(const Basic_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ecm_info()) {
      mutable_ecm_info()->::tbox::protocol::ECM_Info::MergeFrom(from.ecm_info());
    }
    if (from.has_absvdc_info()) {
      mutable_absvdc_info()->::tbox::protocol::ABSVDC_Info::MergeFrom(from.absvdc_info());
    }
    if (from.has_meter_info()) {
      mutable_meter_info()->::tbox::protocol::METER_Info::MergeFrom(from.meter_info());
    }
    if (from.has_bcm_info()) {
      mutable_bcm_info()->::tbox::protocol::BCM_Info::MergeFrom(from.bcm_info());
    }
    if (from.has_acu_info()) {
      mutable_acu_info()->::tbox::protocol::ACU_Info::MergeFrom(from.acu_info());
    }
    if (from.has_at_info()) {
      mutable_at_info()->::tbox::protocol::AT_Info::MergeFrom(from.at_info());
    }
    if (from.has_strg_info()) {
      mutable_strg_info()->::tbox::protocol::STRG_Info::MergeFrom(from.strg_info());
    }
    if (from.has_eps_info()) {
      mutable_eps_info()->::tbox::protocol::EPS_Info::MergeFrom(from.eps_info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_usm_info()) {
      mutable_usm_info()->::tbox::protocol::USM_Info::MergeFrom(from.usm_info());
    }
    if (from.has_tpms_info()) {
      mutable_tpms_info()->::tbox::protocol::TPMS_Info::MergeFrom(from.tpms_info());
    }
    if (from.has_wire_info()) {
      mutable_wire_info()->::tbox::protocol::WIRE_Info::MergeFrom(from.wire_info());
    }
    if (from.has_eco_info()) {
      mutable_eco_info()->::tbox::protocol::ECO_Info::MergeFrom(from.eco_info());
    }
    if (from.has_alarm_info()) {
      mutable_alarm_info()->::tbox::protocol::ALARM_Info::MergeFrom(from.alarm_info());
    }
    if (from.has_itm_info()) {
      mutable_itm_info()->::tbox::protocol::ITM_Info::MergeFrom(from.itm_info());
    }
    if (from.has_ikey_info()) {
      mutable_ikey_info()->::tbox::protocol::IKEY_Info::MergeFrom(from.ikey_info());
    }
    if (from.has_common_info()) {
      mutable_common_info()->::tbox::protocol::COMMON_Info::MergeFrom(from.common_info());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sbox_info()) {
      mutable_sbox_info()->::tbox::protocol::SBOX_info::MergeFrom(from.sbox_info());
    }
    if (from.has_hvac_info()) {
      mutable_hvac_info()->::tbox::protocol::HVAC_Info::MergeFrom(from.hvac_info());
    }
    if (from.has_dvr_info()) {
      mutable_dvr_info()->::tbox::protocol::DVR_Info::MergeFrom(from.dvr_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Basic_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Basic_Info::CopyFrom(const Basic_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Basic_Info::IsInitialized() const {

  return true;
}

void Basic_Info::Swap(Basic_Info* other) {
  if (other != this) {
    std::swap(ecm_info_, other->ecm_info_);
    std::swap(absvdc_info_, other->absvdc_info_);
    std::swap(meter_info_, other->meter_info_);
    std::swap(bcm_info_, other->bcm_info_);
    std::swap(acu_info_, other->acu_info_);
    std::swap(at_info_, other->at_info_);
    std::swap(strg_info_, other->strg_info_);
    std::swap(eps_info_, other->eps_info_);
    std::swap(usm_info_, other->usm_info_);
    std::swap(tpms_info_, other->tpms_info_);
    std::swap(wire_info_, other->wire_info_);
    std::swap(eco_info_, other->eco_info_);
    std::swap(alarm_info_, other->alarm_info_);
    std::swap(itm_info_, other->itm_info_);
    std::swap(ikey_info_, other->ikey_info_);
    std::swap(common_info_, other->common_info_);
    std::swap(sbox_info_, other->sbox_info_);
    std::swap(hvac_info_, other->hvac_info_);
    std::swap(dvr_info_, other->dvr_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Basic_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Basic_Info_descriptor_;
  metadata.reflection = Basic_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vehicle_Info::kInfoTypeFieldNumber;
const int Vehicle_Info::kCollectTimeFieldNumber;
const int Vehicle_Info::kBasicInfoFieldNumber;
const int Vehicle_Info::kTimeStampFieldNumber;
const int Vehicle_Info::kIgnOnTagFieldNumber;
const int Vehicle_Info::kEF82FieldNumber;
const int Vehicle_Info::kVersionFieldNumber;
#endif  // !_MSC_VER

Vehicle_Info::Vehicle_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.Vehicle_Info)
}

void Vehicle_Info::InitAsDefaultInstance() {
  basic_info_ = const_cast< ::tbox::protocol::Basic_Info*>(&::tbox::protocol::Basic_Info::default_instance());
}

Vehicle_Info::Vehicle_Info(const Vehicle_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.Vehicle_Info)
}

void Vehicle_Info::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  info_type_ = false;
  collect_time_ = 0u;
  basic_info_ = NULL;
  time_stamp_ = 0u;
  ignontag_ = 0u;
  ef82_ = 0u;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vehicle_Info::~Vehicle_Info() {
  // @@protoc_insertion_point(destructor:tbox.protocol.Vehicle_Info)
  SharedDtor();
}

void Vehicle_Info::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
    delete basic_info_;
  }
}

void Vehicle_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vehicle_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vehicle_Info_descriptor_;
}

const Vehicle_Info& Vehicle_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

Vehicle_Info* Vehicle_Info::default_instance_ = NULL;

Vehicle_Info* Vehicle_Info::New() const {
  return new Vehicle_Info;
}

void Vehicle_Info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vehicle_Info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(info_type_, collect_time_);
    ZR_(time_stamp_, ignontag_);
    if (has_basic_info()) {
      if (basic_info_ != NULL) basic_info_->::tbox::protocol::Basic_Info::Clear();
    }
    ef82_ = 0u;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vehicle_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.Vehicle_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Info_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &info_type_)));
          set_has_info_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_collect_time;
        break;
      }

      // required uint32 collect_time = 2;
      case 2: {
        if (tag == 16) {
         parse_collect_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collect_time_)));
          set_has_collect_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_basic_info;
        break;
      }

      // required .tbox.protocol.Basic_Info basic_info = 3;
      case 3: {
        if (tag == 26) {
         parse_basic_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 4;
      case 4: {
        if (tag == 32) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_IgnOnTag;
        break;
      }

      // optional uint32 IgnOnTag = 5;
      case 5: {
        if (tag == 40) {
         parse_IgnOnTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ignontag_)));
          set_has_ignontag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_EF82;
        break;
      }

      // optional uint32 EF82 = 6;
      case 6: {
        if (tag == 48) {
         parse_EF82:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ef82_)));
          set_has_ef82();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Version;
        break;
      }

      // optional string Version = 7;
      case 7: {
        if (tag == 58) {
         parse_Version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.Vehicle_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.Vehicle_Info)
  return false;
#undef DO_
}

void Vehicle_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.Vehicle_Info)
  // required bool Info_type = 1;
  if (has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->info_type(), output);
  }

  // required uint32 collect_time = 2;
  if (has_collect_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->collect_time(), output);
  }

  // required .tbox.protocol.Basic_Info basic_info = 3;
  if (has_basic_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->basic_info(), output);
  }

  // required uint32 time_stamp = 4;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_stamp(), output);
  }

  // optional uint32 IgnOnTag = 5;
  if (has_ignontag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ignontag(), output);
  }

  // optional uint32 EF82 = 6;
  if (has_ef82()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ef82(), output);
  }

  // optional string Version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.Vehicle_Info)
}

::google::protobuf::uint8* Vehicle_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.Vehicle_Info)
  // required bool Info_type = 1;
  if (has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->info_type(), target);
  }

  // required uint32 collect_time = 2;
  if (has_collect_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->collect_time(), target);
  }

  // required .tbox.protocol.Basic_Info basic_info = 3;
  if (has_basic_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->basic_info(), target);
  }

  // required uint32 time_stamp = 4;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_stamp(), target);
  }

  // optional uint32 IgnOnTag = 5;
  if (has_ignontag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ignontag(), target);
  }

  // optional uint32 EF82 = 6;
  if (has_ef82()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ef82(), target);
  }

  // optional string Version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.Vehicle_Info)
  return target;
}

int Vehicle_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Info_type = 1;
    if (has_info_type()) {
      total_size += 1 + 1;
    }

    // required uint32 collect_time = 2;
    if (has_collect_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->collect_time());
    }

    // required .tbox.protocol.Basic_Info basic_info = 3;
    if (has_basic_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic_info());
    }

    // required uint32 time_stamp = 4;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

    // optional uint32 IgnOnTag = 5;
    if (has_ignontag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ignontag());
    }

    // optional uint32 EF82 = 6;
    if (has_ef82()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ef82());
    }

    // optional string Version = 7;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vehicle_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vehicle_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vehicle_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vehicle_Info::MergeFrom(const Vehicle_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info_type()) {
      set_info_type(from.info_type());
    }
    if (from.has_collect_time()) {
      set_collect_time(from.collect_time());
    }
    if (from.has_basic_info()) {
      mutable_basic_info()->::tbox::protocol::Basic_Info::MergeFrom(from.basic_info());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_ignontag()) {
      set_ignontag(from.ignontag());
    }
    if (from.has_ef82()) {
      set_ef82(from.ef82());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vehicle_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle_Info::CopyFrom(const Vehicle_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Vehicle_Info::Swap(Vehicle_Info* other) {
  if (other != this) {
    std::swap(info_type_, other->info_type_);
    std::swap(collect_time_, other->collect_time_);
    std::swap(basic_info_, other->basic_info_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(ignontag_, other->ignontag_);
    std::swap(ef82_, other->ef82_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vehicle_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vehicle_Info_descriptor_;
  metadata.reflection = Vehicle_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vehicle_InfoRsp::kErrcodeFieldNumber;
const int Vehicle_InfoRsp::kTimeStampFieldNumber;
#endif  // !_MSC_VER

Vehicle_InfoRsp::Vehicle_InfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.Vehicle_InfoRsp)
}

void Vehicle_InfoRsp::InitAsDefaultInstance() {
}

Vehicle_InfoRsp::Vehicle_InfoRsp(const Vehicle_InfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.Vehicle_InfoRsp)
}

void Vehicle_InfoRsp::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  time_stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vehicle_InfoRsp::~Vehicle_InfoRsp() {
  // @@protoc_insertion_point(destructor:tbox.protocol.Vehicle_InfoRsp)
  SharedDtor();
}

void Vehicle_InfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vehicle_InfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vehicle_InfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vehicle_InfoRsp_descriptor_;
}

const Vehicle_InfoRsp& Vehicle_InfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

Vehicle_InfoRsp* Vehicle_InfoRsp::default_instance_ = NULL;

Vehicle_InfoRsp* Vehicle_InfoRsp::New() const {
  return new Vehicle_InfoRsp;
}

void Vehicle_InfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vehicle_InfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(errcode_, time_stamp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vehicle_InfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.Vehicle_InfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 2;
      case 2: {
        if (tag == 16) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.Vehicle_InfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.Vehicle_InfoRsp)
  return false;
#undef DO_
}

void Vehicle_InfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.Vehicle_InfoRsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.Vehicle_InfoRsp)
}

::google::protobuf::uint8* Vehicle_InfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.Vehicle_InfoRsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.Vehicle_InfoRsp)
  return target;
}

int Vehicle_InfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }

    // required uint32 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vehicle_InfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vehicle_InfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vehicle_InfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vehicle_InfoRsp::MergeFrom(const Vehicle_InfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vehicle_InfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle_InfoRsp::CopyFrom(const Vehicle_InfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle_InfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Vehicle_InfoRsp::Swap(Vehicle_InfoRsp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vehicle_InfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vehicle_InfoRsp_descriptor_;
  metadata.reflection = Vehicle_InfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Location_Info::kInfoTypeFieldNumber;
const int Location_Info::kCollectTimeFieldNumber;
const int Location_Info::kLocationStatusFieldNumber;
const int Location_Info::kLongitudeFieldNumber;
const int Location_Info::kLatitudeFieldNumber;
const int Location_Info::kSpeedFieldNumber;
const int Location_Info::kDirectionFieldNumber;
const int Location_Info::kTimeStampFieldNumber;
const int Location_Info::kIsGPSconversionFieldNumber;
#endif  // !_MSC_VER

Location_Info::Location_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.Location_Info)
}

void Location_Info::InitAsDefaultInstance() {
}

Location_Info::Location_Info(const Location_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.Location_Info)
}

void Location_Info::SharedCtor() {
  _cached_size_ = 0;
  info_type_ = false;
  collect_time_ = 0u;
  location_status_ = 0u;
  longitude_ = 0u;
  latitude_ = 0u;
  speed_ = 0u;
  direction_ = 0u;
  time_stamp_ = 0u;
  isgpsconversion_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Location_Info::~Location_Info() {
  // @@protoc_insertion_point(destructor:tbox.protocol.Location_Info)
  SharedDtor();
}

void Location_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Location_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Location_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Location_Info_descriptor_;
}

const Location_Info& Location_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

Location_Info* Location_Info::default_instance_ = NULL;

Location_Info* Location_Info::New() const {
  return new Location_Info;
}

void Location_Info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Location_Info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(info_type_, time_stamp_);
  }
  isgpsconversion_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Location_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.Location_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Info_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &info_type_)));
          set_has_info_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_collect_time;
        break;
      }

      // required uint32 collect_time = 2;
      case 2: {
        if (tag == 16) {
         parse_collect_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collect_time_)));
          set_has_collect_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_location_status;
        break;
      }

      // required uint32 location_status = 3;
      case 3: {
        if (tag == 24) {
         parse_location_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &location_status_)));
          set_has_location_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_longitude;
        break;
      }

      // required uint32 longitude = 4;
      case 4: {
        if (tag == 32) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_latitude;
        break;
      }

      // required uint32 latitude = 5;
      case 5: {
        if (tag == 40) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_speed;
        break;
      }

      // required uint32 speed = 6;
      case 6: {
        if (tag == 48) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_direction;
        break;
      }

      // required uint32 direction = 7;
      case 7: {
        if (tag == 56) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 8;
      case 8: {
        if (tag == 64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_isGPSconversion;
        break;
      }

      // optional uint32 isGPSconversion = 9;
      case 9: {
        if (tag == 72) {
         parse_isGPSconversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isgpsconversion_)));
          set_has_isgpsconversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.Location_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.Location_Info)
  return false;
#undef DO_
}

void Location_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.Location_Info)
  // required bool Info_type = 1;
  if (has_info_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->info_type(), output);
  }

  // required uint32 collect_time = 2;
  if (has_collect_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->collect_time(), output);
  }

  // required uint32 location_status = 3;
  if (has_location_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->location_status(), output);
  }

  // required uint32 longitude = 4;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->longitude(), output);
  }

  // required uint32 latitude = 5;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->latitude(), output);
  }

  // required uint32 speed = 6;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->speed(), output);
  }

  // required uint32 direction = 7;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->direction(), output);
  }

  // required uint32 time_stamp = 8;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->time_stamp(), output);
  }

  // optional uint32 isGPSconversion = 9;
  if (has_isgpsconversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->isgpsconversion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.Location_Info)
}

::google::protobuf::uint8* Location_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.Location_Info)
  // required bool Info_type = 1;
  if (has_info_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->info_type(), target);
  }

  // required uint32 collect_time = 2;
  if (has_collect_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->collect_time(), target);
  }

  // required uint32 location_status = 3;
  if (has_location_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->location_status(), target);
  }

  // required uint32 longitude = 4;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->longitude(), target);
  }

  // required uint32 latitude = 5;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->latitude(), target);
  }

  // required uint32 speed = 6;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->speed(), target);
  }

  // required uint32 direction = 7;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->direction(), target);
  }

  // required uint32 time_stamp = 8;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->time_stamp(), target);
  }

  // optional uint32 isGPSconversion = 9;
  if (has_isgpsconversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->isgpsconversion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.Location_Info)
  return target;
}

int Location_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Info_type = 1;
    if (has_info_type()) {
      total_size += 1 + 1;
    }

    // required uint32 collect_time = 2;
    if (has_collect_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->collect_time());
    }

    // required uint32 location_status = 3;
    if (has_location_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->location_status());
    }

    // required uint32 longitude = 4;
    if (has_longitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->longitude());
    }

    // required uint32 latitude = 5;
    if (has_latitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->latitude());
    }

    // required uint32 speed = 6;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

    // required uint32 direction = 7;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->direction());
    }

    // required uint32 time_stamp = 8;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 isGPSconversion = 9;
    if (has_isgpsconversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isgpsconversion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Location_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Location_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Location_Info::MergeFrom(const Location_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info_type()) {
      set_info_type(from.info_type());
    }
    if (from.has_collect_time()) {
      set_collect_time(from.collect_time());
    }
    if (from.has_location_status()) {
      set_location_status(from.location_status());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isgpsconversion()) {
      set_isgpsconversion(from.isgpsconversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Location_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location_Info::CopyFrom(const Location_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void Location_Info::Swap(Location_Info* other) {
  if (other != this) {
    std::swap(info_type_, other->info_type_);
    std::swap(collect_time_, other->collect_time_);
    std::swap(location_status_, other->location_status_);
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(speed_, other->speed_);
    std::swap(direction_, other->direction_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(isgpsconversion_, other->isgpsconversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Location_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Location_Info_descriptor_;
  metadata.reflection = Location_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Location_InfoRsp::kErrcodeFieldNumber;
const int Location_InfoRsp::kTimeStampFieldNumber;
#endif  // !_MSC_VER

Location_InfoRsp::Location_InfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.Location_InfoRsp)
}

void Location_InfoRsp::InitAsDefaultInstance() {
}

Location_InfoRsp::Location_InfoRsp(const Location_InfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.Location_InfoRsp)
}

void Location_InfoRsp::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  time_stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Location_InfoRsp::~Location_InfoRsp() {
  // @@protoc_insertion_point(destructor:tbox.protocol.Location_InfoRsp)
  SharedDtor();
}

void Location_InfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Location_InfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Location_InfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Location_InfoRsp_descriptor_;
}

const Location_InfoRsp& Location_InfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

Location_InfoRsp* Location_InfoRsp::default_instance_ = NULL;

Location_InfoRsp* Location_InfoRsp::New() const {
  return new Location_InfoRsp;
}

void Location_InfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Location_InfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(errcode_, time_stamp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Location_InfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.Location_InfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 2;
      case 2: {
        if (tag == 16) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.Location_InfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.Location_InfoRsp)
  return false;
#undef DO_
}

void Location_InfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.Location_InfoRsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.Location_InfoRsp)
}

::google::protobuf::uint8* Location_InfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.Location_InfoRsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.Location_InfoRsp)
  return target;
}

int Location_InfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }

    // required uint32 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location_InfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Location_InfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Location_InfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Location_InfoRsp::MergeFrom(const Location_InfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Location_InfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location_InfoRsp::CopyFrom(const Location_InfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location_InfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Location_InfoRsp::Swap(Location_InfoRsp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Location_InfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Location_InfoRsp_descriptor_;
  metadata.reflection = Location_InfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoteControlResultRsp::kControlTypeFieldNumber;
const int RemoteControlResultRsp::kControlValueFieldNumber;
const int RemoteControlResultRsp::kSerialNumberFieldNumber;
const int RemoteControlResultRsp::kControlResultFieldNumber;
const int RemoteControlResultRsp::kTimeStampFieldNumber;
#endif  // !_MSC_VER

RemoteControlResultRsp::RemoteControlResultRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.RemoteControlResultRsp)
}

void RemoteControlResultRsp::InitAsDefaultInstance() {
}

RemoteControlResultRsp::RemoteControlResultRsp(const RemoteControlResultRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.RemoteControlResultRsp)
}

void RemoteControlResultRsp::SharedCtor() {
  _cached_size_ = 0;
  control_type_ = 0u;
  control_value_ = 0u;
  serial_number_ = 0u;
  control_result_ = 0u;
  time_stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteControlResultRsp::~RemoteControlResultRsp() {
  // @@protoc_insertion_point(destructor:tbox.protocol.RemoteControlResultRsp)
  SharedDtor();
}

void RemoteControlResultRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoteControlResultRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteControlResultRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteControlResultRsp_descriptor_;
}

const RemoteControlResultRsp& RemoteControlResultRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

RemoteControlResultRsp* RemoteControlResultRsp::default_instance_ = NULL;

RemoteControlResultRsp* RemoteControlResultRsp::New() const {
  return new RemoteControlResultRsp;
}

void RemoteControlResultRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RemoteControlResultRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(control_type_, time_stamp_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoteControlResultRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.RemoteControlResultRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 control_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &control_type_)));
          set_has_control_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_control_value;
        break;
      }

      // required uint32 control_value = 2;
      case 2: {
        if (tag == 16) {
         parse_control_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &control_value_)));
          set_has_control_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_serial_number;
        break;
      }

      // required uint32 serial_number = 3;
      case 3: {
        if (tag == 24) {
         parse_serial_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_number_)));
          set_has_serial_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_control_result;
        break;
      }

      // required uint32 control_result = 4;
      case 4: {
        if (tag == 32) {
         parse_control_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &control_result_)));
          set_has_control_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 5;
      case 5: {
        if (tag == 40) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.RemoteControlResultRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.RemoteControlResultRsp)
  return false;
#undef DO_
}

void RemoteControlResultRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.RemoteControlResultRsp)
  // required uint32 control_type = 1;
  if (has_control_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->control_type(), output);
  }

  // required uint32 control_value = 2;
  if (has_control_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->control_value(), output);
  }

  // required uint32 serial_number = 3;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serial_number(), output);
  }

  // required uint32 control_result = 4;
  if (has_control_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->control_result(), output);
  }

  // required uint32 time_stamp = 5;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.RemoteControlResultRsp)
}

::google::protobuf::uint8* RemoteControlResultRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.RemoteControlResultRsp)
  // required uint32 control_type = 1;
  if (has_control_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->control_type(), target);
  }

  // required uint32 control_value = 2;
  if (has_control_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->control_value(), target);
  }

  // required uint32 serial_number = 3;
  if (has_serial_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serial_number(), target);
  }

  // required uint32 control_result = 4;
  if (has_control_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->control_result(), target);
  }

  // required uint32 time_stamp = 5;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.RemoteControlResultRsp)
  return target;
}

int RemoteControlResultRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 control_type = 1;
    if (has_control_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->control_type());
    }

    // required uint32 control_value = 2;
    if (has_control_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->control_value());
    }

    // required uint32 serial_number = 3;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial_number());
    }

    // required uint32 control_result = 4;
    if (has_control_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->control_result());
    }

    // required uint32 time_stamp = 5;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteControlResultRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoteControlResultRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoteControlResultRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoteControlResultRsp::MergeFrom(const RemoteControlResultRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control_type()) {
      set_control_type(from.control_type());
    }
    if (from.has_control_value()) {
      set_control_value(from.control_value());
    }
    if (from.has_serial_number()) {
      set_serial_number(from.serial_number());
    }
    if (from.has_control_result()) {
      set_control_result(from.control_result());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoteControlResultRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteControlResultRsp::CopyFrom(const RemoteControlResultRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteControlResultRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RemoteControlResultRsp::Swap(RemoteControlResultRsp* other) {
  if (other != this) {
    std::swap(control_type_, other->control_type_);
    std::swap(control_value_, other->control_value_);
    std::swap(serial_number_, other->serial_number_);
    std::swap(control_result_, other->control_result_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoteControlResultRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteControlResultRsp_descriptor_;
  metadata.reflection = RemoteControlResultRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoteControlReq::kControlTypeFieldNumber;
const int RemoteControlReq::kControlValueFieldNumber;
const int RemoteControlReq::kSerialNumberFieldNumber;
const int RemoteControlReq::kTimeStampFieldNumber;
const int RemoteControlReq::kSignalDataFieldNumber;
#endif  // !_MSC_VER

RemoteControlReq::RemoteControlReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.RemoteControlReq)
}

void RemoteControlReq::InitAsDefaultInstance() {
}

RemoteControlReq::RemoteControlReq(const RemoteControlReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.RemoteControlReq)
}

void RemoteControlReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  control_type_ = 0u;
  control_value_ = 0u;
  serial_number_ = 0u;
  time_stamp_ = 0u;
  signal_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteControlReq::~RemoteControlReq() {
  // @@protoc_insertion_point(destructor:tbox.protocol.RemoteControlReq)
  SharedDtor();
}

void RemoteControlReq::SharedDtor() {
  if (signal_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signal_data_;
  }
  if (this != default_instance_) {
  }
}

void RemoteControlReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteControlReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteControlReq_descriptor_;
}

const RemoteControlReq& RemoteControlReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

RemoteControlReq* RemoteControlReq::default_instance_ = NULL;

RemoteControlReq* RemoteControlReq::New() const {
  return new RemoteControlReq;
}

void RemoteControlReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RemoteControlReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(control_type_, time_stamp_);
    if (has_signal_data()) {
      if (signal_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signal_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoteControlReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.RemoteControlReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 control_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &control_type_)));
          set_has_control_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_control_value;
        break;
      }

      // required uint32 control_value = 2;
      case 2: {
        if (tag == 16) {
         parse_control_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &control_value_)));
          set_has_control_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_serial_number;
        break;
      }

      // required uint32 serial_number = 3;
      case 3: {
        if (tag == 24) {
         parse_serial_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_number_)));
          set_has_serial_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 4;
      case 4: {
        if (tag == 32) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_signal_data;
        break;
      }

      // optional string signal_data = 5;
      case 5: {
        if (tag == 42) {
         parse_signal_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signal_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signal_data().data(), this->signal_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signal_data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.RemoteControlReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.RemoteControlReq)
  return false;
#undef DO_
}

void RemoteControlReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.RemoteControlReq)
  // required uint32 control_type = 1;
  if (has_control_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->control_type(), output);
  }

  // required uint32 control_value = 2;
  if (has_control_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->control_value(), output);
  }

  // required uint32 serial_number = 3;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serial_number(), output);
  }

  // required uint32 time_stamp = 4;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_stamp(), output);
  }

  // optional string signal_data = 5;
  if (has_signal_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signal_data().data(), this->signal_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signal_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->signal_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.RemoteControlReq)
}

::google::protobuf::uint8* RemoteControlReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.RemoteControlReq)
  // required uint32 control_type = 1;
  if (has_control_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->control_type(), target);
  }

  // required uint32 control_value = 2;
  if (has_control_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->control_value(), target);
  }

  // required uint32 serial_number = 3;
  if (has_serial_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serial_number(), target);
  }

  // required uint32 time_stamp = 4;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_stamp(), target);
  }

  // optional string signal_data = 5;
  if (has_signal_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signal_data().data(), this->signal_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signal_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->signal_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.RemoteControlReq)
  return target;
}

int RemoteControlReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 control_type = 1;
    if (has_control_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->control_type());
    }

    // required uint32 control_value = 2;
    if (has_control_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->control_value());
    }

    // required uint32 serial_number = 3;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial_number());
    }

    // required uint32 time_stamp = 4;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

    // optional string signal_data = 5;
    if (has_signal_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signal_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteControlReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoteControlReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoteControlReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoteControlReq::MergeFrom(const RemoteControlReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control_type()) {
      set_control_type(from.control_type());
    }
    if (from.has_control_value()) {
      set_control_value(from.control_value());
    }
    if (from.has_serial_number()) {
      set_serial_number(from.serial_number());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_signal_data()) {
      set_signal_data(from.signal_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoteControlReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteControlReq::CopyFrom(const RemoteControlReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteControlReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RemoteControlReq::Swap(RemoteControlReq* other) {
  if (other != this) {
    std::swap(control_type_, other->control_type_);
    std::swap(control_value_, other->control_value_);
    std::swap(serial_number_, other->serial_number_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(signal_data_, other->signal_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoteControlReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteControlReq_descriptor_;
  metadata.reflection = RemoteControlReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlowCountRsp::kDataAllowanceFieldNumber;
const int FlowCountRsp::kDataUsageFieldNumber;
const int FlowCountRsp::kDataAvailableFieldNumber;
#endif  // !_MSC_VER

FlowCountRsp::FlowCountRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.FlowCountRsp)
}

void FlowCountRsp::InitAsDefaultInstance() {
}

FlowCountRsp::FlowCountRsp(const FlowCountRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.FlowCountRsp)
}

void FlowCountRsp::SharedCtor() {
  _cached_size_ = 0;
  dataallowance_ = 0u;
  datausage_ = 0u;
  dataavailable_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlowCountRsp::~FlowCountRsp() {
  // @@protoc_insertion_point(destructor:tbox.protocol.FlowCountRsp)
  SharedDtor();
}

void FlowCountRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlowCountRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlowCountRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlowCountRsp_descriptor_;
}

const FlowCountRsp& FlowCountRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

FlowCountRsp* FlowCountRsp::default_instance_ = NULL;

FlowCountRsp* FlowCountRsp::New() const {
  return new FlowCountRsp;
}

void FlowCountRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FlowCountRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dataallowance_, dataavailable_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlowCountRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.FlowCountRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dataAllowance = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dataallowance_)));
          set_has_dataallowance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dataUsage;
        break;
      }

      // required uint32 dataUsage = 2;
      case 2: {
        if (tag == 16) {
         parse_dataUsage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datausage_)));
          set_has_datausage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dataAvailable;
        break;
      }

      // required uint32 dataAvailable = 3;
      case 3: {
        if (tag == 24) {
         parse_dataAvailable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dataavailable_)));
          set_has_dataavailable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.FlowCountRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.FlowCountRsp)
  return false;
#undef DO_
}

void FlowCountRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.FlowCountRsp)
  // required uint32 dataAllowance = 1;
  if (has_dataallowance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dataallowance(), output);
  }

  // required uint32 dataUsage = 2;
  if (has_datausage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->datausage(), output);
  }

  // required uint32 dataAvailable = 3;
  if (has_dataavailable()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dataavailable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.FlowCountRsp)
}

::google::protobuf::uint8* FlowCountRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.FlowCountRsp)
  // required uint32 dataAllowance = 1;
  if (has_dataallowance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dataallowance(), target);
  }

  // required uint32 dataUsage = 2;
  if (has_datausage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->datausage(), target);
  }

  // required uint32 dataAvailable = 3;
  if (has_dataavailable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dataavailable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.FlowCountRsp)
  return target;
}

int FlowCountRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dataAllowance = 1;
    if (has_dataallowance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dataallowance());
    }

    // required uint32 dataUsage = 2;
    if (has_datausage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->datausage());
    }

    // required uint32 dataAvailable = 3;
    if (has_dataavailable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dataavailable());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlowCountRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlowCountRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlowCountRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlowCountRsp::MergeFrom(const FlowCountRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dataallowance()) {
      set_dataallowance(from.dataallowance());
    }
    if (from.has_datausage()) {
      set_datausage(from.datausage());
    }
    if (from.has_dataavailable()) {
      set_dataavailable(from.dataavailable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlowCountRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowCountRsp::CopyFrom(const FlowCountRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowCountRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FlowCountRsp::Swap(FlowCountRsp* other) {
  if (other != this) {
    std::swap(dataallowance_, other->dataallowance_);
    std::swap(datausage_, other->datausage_);
    std::swap(dataavailable_, other->dataavailable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlowCountRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlowCountRsp_descriptor_;
  metadata.reflection = FlowCountRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlowCountLimitReq::kLimitValFieldNumber;
#endif  // !_MSC_VER

FlowCountLimitReq::FlowCountLimitReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.FlowCountLimitReq)
}

void FlowCountLimitReq::InitAsDefaultInstance() {
}

FlowCountLimitReq::FlowCountLimitReq(const FlowCountLimitReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.FlowCountLimitReq)
}

void FlowCountLimitReq::SharedCtor() {
  _cached_size_ = 0;
  limitval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlowCountLimitReq::~FlowCountLimitReq() {
  // @@protoc_insertion_point(destructor:tbox.protocol.FlowCountLimitReq)
  SharedDtor();
}

void FlowCountLimitReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlowCountLimitReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlowCountLimitReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlowCountLimitReq_descriptor_;
}

const FlowCountLimitReq& FlowCountLimitReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

FlowCountLimitReq* FlowCountLimitReq::default_instance_ = NULL;

FlowCountLimitReq* FlowCountLimitReq::New() const {
  return new FlowCountLimitReq;
}

void FlowCountLimitReq::Clear() {
  limitval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlowCountLimitReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.FlowCountLimitReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 limitVal = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limitval_)));
          set_has_limitval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.FlowCountLimitReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.FlowCountLimitReq)
  return false;
#undef DO_
}

void FlowCountLimitReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.FlowCountLimitReq)
  // required uint32 limitVal = 1;
  if (has_limitval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->limitval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.FlowCountLimitReq)
}

::google::protobuf::uint8* FlowCountLimitReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.FlowCountLimitReq)
  // required uint32 limitVal = 1;
  if (has_limitval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->limitval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.FlowCountLimitReq)
  return target;
}

int FlowCountLimitReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 limitVal = 1;
    if (has_limitval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limitval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlowCountLimitReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlowCountLimitReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlowCountLimitReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlowCountLimitReq::MergeFrom(const FlowCountLimitReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_limitval()) {
      set_limitval(from.limitval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlowCountLimitReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowCountLimitReq::CopyFrom(const FlowCountLimitReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowCountLimitReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FlowCountLimitReq::Swap(FlowCountLimitReq* other) {
  if (other != this) {
    std::swap(limitval_, other->limitval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlowCountLimitReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlowCountLimitReq_descriptor_;
  metadata.reflection = FlowCountLimitReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OtaUpgradeReq::kUpgradeinfoFieldNumber;
const int OtaUpgradeReq::kSerialNumberFieldNumber;
const int OtaUpgradeReq::kTimeStampFieldNumber;
#endif  // !_MSC_VER

OtaUpgradeReq::OtaUpgradeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.OtaUpgradeReq)
}

void OtaUpgradeReq::InitAsDefaultInstance() {
}

OtaUpgradeReq::OtaUpgradeReq(const OtaUpgradeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.OtaUpgradeReq)
}

void OtaUpgradeReq::SharedCtor() {
  _cached_size_ = 0;
  serial_number_ = 0u;
  time_stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OtaUpgradeReq::~OtaUpgradeReq() {
  // @@protoc_insertion_point(destructor:tbox.protocol.OtaUpgradeReq)
  SharedDtor();
}

void OtaUpgradeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OtaUpgradeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OtaUpgradeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OtaUpgradeReq_descriptor_;
}

const OtaUpgradeReq& OtaUpgradeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

OtaUpgradeReq* OtaUpgradeReq::default_instance_ = NULL;

OtaUpgradeReq* OtaUpgradeReq::New() const {
  return new OtaUpgradeReq;
}

void OtaUpgradeReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OtaUpgradeReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(serial_number_, time_stamp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  upgradeinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OtaUpgradeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.OtaUpgradeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tbox.protocol.UpgradeInfo upgradeinfo = 1;
      case 1: {
        if (tag == 10) {
         parse_upgradeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_upgradeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_upgradeinfo;
        if (input->ExpectTag(16)) goto parse_serial_number;
        break;
      }

      // required uint32 serial_number = 2;
      case 2: {
        if (tag == 16) {
         parse_serial_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_number_)));
          set_has_serial_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 3;
      case 3: {
        if (tag == 24) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.OtaUpgradeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.OtaUpgradeReq)
  return false;
#undef DO_
}

void OtaUpgradeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.OtaUpgradeReq)
  // repeated .tbox.protocol.UpgradeInfo upgradeinfo = 1;
  for (int i = 0; i < this->upgradeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->upgradeinfo(i), output);
  }

  // required uint32 serial_number = 2;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serial_number(), output);
  }

  // required uint32 time_stamp = 3;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.OtaUpgradeReq)
}

::google::protobuf::uint8* OtaUpgradeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.OtaUpgradeReq)
  // repeated .tbox.protocol.UpgradeInfo upgradeinfo = 1;
  for (int i = 0; i < this->upgradeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->upgradeinfo(i), target);
  }

  // required uint32 serial_number = 2;
  if (has_serial_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serial_number(), target);
  }

  // required uint32 time_stamp = 3;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.OtaUpgradeReq)
  return target;
}

int OtaUpgradeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 serial_number = 2;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial_number());
    }

    // required uint32 time_stamp = 3;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

  }
  // repeated .tbox.protocol.UpgradeInfo upgradeinfo = 1;
  total_size += 1 * this->upgradeinfo_size();
  for (int i = 0; i < this->upgradeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->upgradeinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OtaUpgradeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OtaUpgradeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OtaUpgradeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OtaUpgradeReq::MergeFrom(const OtaUpgradeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  upgradeinfo_.MergeFrom(from.upgradeinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_serial_number()) {
      set_serial_number(from.serial_number());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OtaUpgradeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtaUpgradeReq::CopyFrom(const OtaUpgradeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtaUpgradeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->upgradeinfo())) return false;
  return true;
}

void OtaUpgradeReq::Swap(OtaUpgradeReq* other) {
  if (other != this) {
    upgradeinfo_.Swap(&other->upgradeinfo_);
    std::swap(serial_number_, other->serial_number_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OtaUpgradeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OtaUpgradeReq_descriptor_;
  metadata.reflection = OtaUpgradeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OtaUpgradeRsp::kErrcodeFieldNumber;
const int OtaUpgradeRsp::kTimeStampFieldNumber;
const int OtaUpgradeRsp::kSerialNumberFieldNumber;
#endif  // !_MSC_VER

OtaUpgradeRsp::OtaUpgradeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.OtaUpgradeRsp)
}

void OtaUpgradeRsp::InitAsDefaultInstance() {
}

OtaUpgradeRsp::OtaUpgradeRsp(const OtaUpgradeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.OtaUpgradeRsp)
}

void OtaUpgradeRsp::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  time_stamp_ = 0u;
  serial_number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OtaUpgradeRsp::~OtaUpgradeRsp() {
  // @@protoc_insertion_point(destructor:tbox.protocol.OtaUpgradeRsp)
  SharedDtor();
}

void OtaUpgradeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OtaUpgradeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OtaUpgradeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OtaUpgradeRsp_descriptor_;
}

const OtaUpgradeRsp& OtaUpgradeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

OtaUpgradeRsp* OtaUpgradeRsp::default_instance_ = NULL;

OtaUpgradeRsp* OtaUpgradeRsp::New() const {
  return new OtaUpgradeRsp;
}

void OtaUpgradeRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OtaUpgradeRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(errcode_, serial_number_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OtaUpgradeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.OtaUpgradeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 2;
      case 2: {
        if (tag == 16) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_serial_number;
        break;
      }

      // required uint32 serial_number = 3;
      case 3: {
        if (tag == 24) {
         parse_serial_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_number_)));
          set_has_serial_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.OtaUpgradeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.OtaUpgradeRsp)
  return false;
#undef DO_
}

void OtaUpgradeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.OtaUpgradeRsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_stamp(), output);
  }

  // required uint32 serial_number = 3;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serial_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.OtaUpgradeRsp)
}

::google::protobuf::uint8* OtaUpgradeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.OtaUpgradeRsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_stamp(), target);
  }

  // required uint32 serial_number = 3;
  if (has_serial_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serial_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.OtaUpgradeRsp)
  return target;
}

int OtaUpgradeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }

    // required uint32 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

    // required uint32 serial_number = 3;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OtaUpgradeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OtaUpgradeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OtaUpgradeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OtaUpgradeRsp::MergeFrom(const OtaUpgradeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_serial_number()) {
      set_serial_number(from.serial_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OtaUpgradeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtaUpgradeRsp::CopyFrom(const OtaUpgradeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtaUpgradeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void OtaUpgradeRsp::Swap(OtaUpgradeRsp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(serial_number_, other->serial_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OtaUpgradeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OtaUpgradeRsp_descriptor_;
  metadata.reflection = OtaUpgradeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CancelOtaUpgradeRsp::kErrcodeFieldNumber;
#endif  // !_MSC_VER

CancelOtaUpgradeRsp::CancelOtaUpgradeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.CancelOtaUpgradeRsp)
}

void CancelOtaUpgradeRsp::InitAsDefaultInstance() {
}

CancelOtaUpgradeRsp::CancelOtaUpgradeRsp(const CancelOtaUpgradeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.CancelOtaUpgradeRsp)
}

void CancelOtaUpgradeRsp::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancelOtaUpgradeRsp::~CancelOtaUpgradeRsp() {
  // @@protoc_insertion_point(destructor:tbox.protocol.CancelOtaUpgradeRsp)
  SharedDtor();
}

void CancelOtaUpgradeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CancelOtaUpgradeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelOtaUpgradeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CancelOtaUpgradeRsp_descriptor_;
}

const CancelOtaUpgradeRsp& CancelOtaUpgradeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

CancelOtaUpgradeRsp* CancelOtaUpgradeRsp::default_instance_ = NULL;

CancelOtaUpgradeRsp* CancelOtaUpgradeRsp::New() const {
  return new CancelOtaUpgradeRsp;
}

void CancelOtaUpgradeRsp::Clear() {
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CancelOtaUpgradeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.CancelOtaUpgradeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.CancelOtaUpgradeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.CancelOtaUpgradeRsp)
  return false;
#undef DO_
}

void CancelOtaUpgradeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.CancelOtaUpgradeRsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.CancelOtaUpgradeRsp)
}

::google::protobuf::uint8* CancelOtaUpgradeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.CancelOtaUpgradeRsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.CancelOtaUpgradeRsp)
  return target;
}

int CancelOtaUpgradeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelOtaUpgradeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CancelOtaUpgradeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CancelOtaUpgradeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CancelOtaUpgradeRsp::MergeFrom(const CancelOtaUpgradeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CancelOtaUpgradeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelOtaUpgradeRsp::CopyFrom(const CancelOtaUpgradeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOtaUpgradeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CancelOtaUpgradeRsp::Swap(CancelOtaUpgradeRsp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CancelOtaUpgradeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CancelOtaUpgradeRsp_descriptor_;
  metadata.reflection = CancelOtaUpgradeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OtaUpgradeProgressReq::kUpgradeProgressCodeFieldNumber;
const int OtaUpgradeProgressReq::kErrcodeFieldNumber;
#endif  // !_MSC_VER

OtaUpgradeProgressReq::OtaUpgradeProgressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.OtaUpgradeProgressReq)
}

void OtaUpgradeProgressReq::InitAsDefaultInstance() {
}

OtaUpgradeProgressReq::OtaUpgradeProgressReq(const OtaUpgradeProgressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.OtaUpgradeProgressReq)
}

void OtaUpgradeProgressReq::SharedCtor() {
  _cached_size_ = 0;
  upgradeprogresscode_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OtaUpgradeProgressReq::~OtaUpgradeProgressReq() {
  // @@protoc_insertion_point(destructor:tbox.protocol.OtaUpgradeProgressReq)
  SharedDtor();
}

void OtaUpgradeProgressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OtaUpgradeProgressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OtaUpgradeProgressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OtaUpgradeProgressReq_descriptor_;
}

const OtaUpgradeProgressReq& OtaUpgradeProgressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

OtaUpgradeProgressReq* OtaUpgradeProgressReq::default_instance_ = NULL;

OtaUpgradeProgressReq* OtaUpgradeProgressReq::New() const {
  return new OtaUpgradeProgressReq;
}

void OtaUpgradeProgressReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OtaUpgradeProgressReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(upgradeprogresscode_, errcode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OtaUpgradeProgressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.OtaUpgradeProgressReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tbox.protocol.UpgradeProgressCodeType UpgradeProgressCode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tbox::protocol::UpgradeProgressCodeType_IsValid(value)) {
            set_upgradeprogresscode(static_cast< ::tbox::protocol::UpgradeProgressCodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_errcode;
        break;
      }

      // optional uint32 errcode = 2;
      case 2: {
        if (tag == 16) {
         parse_errcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.OtaUpgradeProgressReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.OtaUpgradeProgressReq)
  return false;
#undef DO_
}

void OtaUpgradeProgressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.OtaUpgradeProgressReq)
  // required .tbox.protocol.UpgradeProgressCodeType UpgradeProgressCode = 1;
  if (has_upgradeprogresscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->upgradeprogresscode(), output);
  }

  // optional uint32 errcode = 2;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->errcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.OtaUpgradeProgressReq)
}

::google::protobuf::uint8* OtaUpgradeProgressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.OtaUpgradeProgressReq)
  // required .tbox.protocol.UpgradeProgressCodeType UpgradeProgressCode = 1;
  if (has_upgradeprogresscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->upgradeprogresscode(), target);
  }

  // optional uint32 errcode = 2;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->errcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.OtaUpgradeProgressReq)
  return target;
}

int OtaUpgradeProgressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tbox.protocol.UpgradeProgressCodeType UpgradeProgressCode = 1;
    if (has_upgradeprogresscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->upgradeprogresscode());
    }

    // optional uint32 errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OtaUpgradeProgressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OtaUpgradeProgressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OtaUpgradeProgressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OtaUpgradeProgressReq::MergeFrom(const OtaUpgradeProgressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upgradeprogresscode()) {
      set_upgradeprogresscode(from.upgradeprogresscode());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OtaUpgradeProgressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtaUpgradeProgressReq::CopyFrom(const OtaUpgradeProgressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtaUpgradeProgressReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OtaUpgradeProgressReq::Swap(OtaUpgradeProgressReq* other) {
  if (other != this) {
    std::swap(upgradeprogresscode_, other->upgradeprogresscode_);
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OtaUpgradeProgressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OtaUpgradeProgressReq_descriptor_;
  metadata.reflection = OtaUpgradeProgressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CertCom::kSerialNumberFieldNumber;
const int CertCom::kCurCertIdFieldNumber;
const int CertCom::kDataStatusFieldNumber;
const int CertCom::kCmdIdFieldNumber;
const int CertCom::kDcmNoFieldNumber;
const int CertCom::kErrcodeFieldNumber;
const int CertCom::kDataInfoFieldNumber;
const int CertCom::kSignDataFieldNumber;
#endif  // !_MSC_VER

CertCom::CertCom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.CertCom)
}

void CertCom::InitAsDefaultInstance() {
}

CertCom::CertCom(const CertCom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.CertCom)
}

void CertCom::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serial_number_ = 0u;
  cur_cert_id_ = 0u;
  data_status_ = 0u;
  cmd_id_ = 0u;
  dcm_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0u;
  data_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CertCom::~CertCom() {
  // @@protoc_insertion_point(destructor:tbox.protocol.CertCom)
  SharedDtor();
}

void CertCom::SharedDtor() {
  if (dcm_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dcm_no_;
  }
  if (data_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_info_;
  }
  if (sign_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_data_;
  }
  if (this != default_instance_) {
  }
}

void CertCom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CertCom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CertCom_descriptor_;
}

const CertCom& CertCom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

CertCom* CertCom::default_instance_ = NULL;

CertCom* CertCom::New() const {
  return new CertCom;
}

void CertCom::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CertCom*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(serial_number_, cmd_id_);
    if (has_dcm_no()) {
      if (dcm_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dcm_no_->clear();
      }
    }
    errcode_ = 0u;
    if (has_data_info()) {
      if (data_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_info_->clear();
      }
    }
    if (has_sign_data()) {
      if (sign_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CertCom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.CertCom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_number_)));
          set_has_serial_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cur_cert_id;
        break;
      }

      // required uint32 cur_cert_id = 2;
      case 2: {
        if (tag == 16) {
         parse_cur_cert_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_cert_id_)));
          set_has_cur_cert_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_data_status;
        break;
      }

      // required uint32 data_status = 3;
      case 3: {
        if (tag == 24) {
         parse_data_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_status_)));
          set_has_data_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cmd_id;
        break;
      }

      // required uint32 cmd_id = 4;
      case 4: {
        if (tag == 32) {
         parse_cmd_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_id_)));
          set_has_cmd_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_dcm_no;
        break;
      }

      // required string dcm_no = 5;
      case 5: {
        if (tag == 42) {
         parse_dcm_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dcm_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dcm_no().data(), this->dcm_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dcm_no");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_errcode;
        break;
      }

      // optional uint32 errcode = 6;
      case 6: {
        if (tag == 48) {
         parse_errcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_data_info;
        break;
      }

      // required bytes data_info = 7;
      case 7: {
        if (tag == 58) {
         parse_data_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sign_data;
        break;
      }

      // optional bytes sign_data = 8;
      case 8: {
        if (tag == 66) {
         parse_sign_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.CertCom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.CertCom)
  return false;
#undef DO_
}

void CertCom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.CertCom)
  // required uint32 serial_number = 1;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial_number(), output);
  }

  // required uint32 cur_cert_id = 2;
  if (has_cur_cert_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_cert_id(), output);
  }

  // required uint32 data_status = 3;
  if (has_data_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->data_status(), output);
  }

  // required uint32 cmd_id = 4;
  if (has_cmd_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cmd_id(), output);
  }

  // required string dcm_no = 5;
  if (has_dcm_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dcm_no().data(), this->dcm_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dcm_no");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->dcm_no(), output);
  }

  // optional uint32 errcode = 6;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->errcode(), output);
  }

  // required bytes data_info = 7;
  if (has_data_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->data_info(), output);
  }

  // optional bytes sign_data = 8;
  if (has_sign_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->sign_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.CertCom)
}

::google::protobuf::uint8* CertCom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.CertCom)
  // required uint32 serial_number = 1;
  if (has_serial_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial_number(), target);
  }

  // required uint32 cur_cert_id = 2;
  if (has_cur_cert_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_cert_id(), target);
  }

  // required uint32 data_status = 3;
  if (has_data_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->data_status(), target);
  }

  // required uint32 cmd_id = 4;
  if (has_cmd_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cmd_id(), target);
  }

  // required string dcm_no = 5;
  if (has_dcm_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dcm_no().data(), this->dcm_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dcm_no");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->dcm_no(), target);
  }

  // optional uint32 errcode = 6;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->errcode(), target);
  }

  // required bytes data_info = 7;
  if (has_data_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->data_info(), target);
  }

  // optional bytes sign_data = 8;
  if (has_sign_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->sign_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.CertCom)
  return target;
}

int CertCom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial_number());
    }

    // required uint32 cur_cert_id = 2;
    if (has_cur_cert_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_cert_id());
    }

    // required uint32 data_status = 3;
    if (has_data_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_status());
    }

    // required uint32 cmd_id = 4;
    if (has_cmd_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd_id());
    }

    // required string dcm_no = 5;
    if (has_dcm_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dcm_no());
    }

    // optional uint32 errcode = 6;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }

    // required bytes data_info = 7;
    if (has_data_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data_info());
    }

    // optional bytes sign_data = 8;
    if (has_sign_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CertCom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CertCom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CertCom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CertCom::MergeFrom(const CertCom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial_number()) {
      set_serial_number(from.serial_number());
    }
    if (from.has_cur_cert_id()) {
      set_cur_cert_id(from.cur_cert_id());
    }
    if (from.has_data_status()) {
      set_data_status(from.data_status());
    }
    if (from.has_cmd_id()) {
      set_cmd_id(from.cmd_id());
    }
    if (from.has_dcm_no()) {
      set_dcm_no(from.dcm_no());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_data_info()) {
      set_data_info(from.data_info());
    }
    if (from.has_sign_data()) {
      set_sign_data(from.sign_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CertCom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CertCom::CopyFrom(const CertCom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertCom::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005f) != 0x0000005f) return false;

  return true;
}

void CertCom::Swap(CertCom* other) {
  if (other != this) {
    std::swap(serial_number_, other->serial_number_);
    std::swap(cur_cert_id_, other->cur_cert_id_);
    std::swap(data_status_, other->data_status_);
    std::swap(cmd_id_, other->cmd_id_);
    std::swap(dcm_no_, other->dcm_no_);
    std::swap(errcode_, other->errcode_);
    std::swap(data_info_, other->data_info_);
    std::swap(sign_data_, other->sign_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CertCom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CertCom_descriptor_;
  metadata.reflection = CertCom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCUCertApply_Req::kTimeStampFieldNumber;
const int TCUCertApply_Req::kVinFieldNumber;
const int TCUCertApply_Req::kCertStatusFieldNumber;
const int TCUCertApply_Req::kDurationFieldNumber;
const int TCUCertApply_Req::kP10CsrFieldNumber;
const int TCUCertApply_Req::kCstSignDataFieldNumber;
const int TCUCertApply_Req::kCertFormatFieldNumber;
const int TCUCertApply_Req::kSignTypeFieldNumber;
#endif  // !_MSC_VER

TCUCertApply_Req::TCUCertApply_Req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.TCUCertApply_Req)
}

void TCUCertApply_Req::InitAsDefaultInstance() {
}

TCUCertApply_Req::TCUCertApply_Req(const TCUCertApply_Req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.TCUCertApply_Req)
}

void TCUCertApply_Req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_stamp_ = 0u;
  vin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cert_status_ = 0u;
  duration_ = 0u;
  p10_csr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cst_sign_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cert_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCUCertApply_Req::~TCUCertApply_Req() {
  // @@protoc_insertion_point(destructor:tbox.protocol.TCUCertApply_Req)
  SharedDtor();
}

void TCUCertApply_Req::SharedDtor() {
  if (vin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vin_;
  }
  if (p10_csr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete p10_csr_;
  }
  if (cst_sign_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cst_sign_data_;
  }
  if (cert_format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cert_format_;
  }
  if (this != default_instance_) {
  }
}

void TCUCertApply_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCUCertApply_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCUCertApply_Req_descriptor_;
}

const TCUCertApply_Req& TCUCertApply_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

TCUCertApply_Req* TCUCertApply_Req::default_instance_ = NULL;

TCUCertApply_Req* TCUCertApply_Req::New() const {
  return new TCUCertApply_Req;
}

void TCUCertApply_Req::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCUCertApply_Req*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(time_stamp_, cert_status_);
    ZR_(duration_, sign_type_);
    if (has_vin()) {
      if (vin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vin_->clear();
      }
    }
    if (has_p10_csr()) {
      if (p10_csr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        p10_csr_->clear();
      }
    }
    if (has_cst_sign_data()) {
      if (cst_sign_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cst_sign_data_->clear();
      }
    }
    if (has_cert_format()) {
      if (cert_format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cert_format_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCUCertApply_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.TCUCertApply_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time_stamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vin;
        break;
      }

      // required string vin = 2;
      case 2: {
        if (tag == 18) {
         parse_vin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vin().data(), this->vin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vin");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cert_status;
        break;
      }

      // required uint32 cert_status = 3;
      case 3: {
        if (tag == 24) {
         parse_cert_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cert_status_)));
          set_has_cert_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_duration;
        break;
      }

      // required uint32 duration = 4;
      case 4: {
        if (tag == 32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_p10_csr;
        break;
      }

      // required bytes p10_csr = 5;
      case 5: {
        if (tag == 42) {
         parse_p10_csr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_p10_csr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_cst_sign_data;
        break;
      }

      // optional bytes cst_sign_data = 6;
      case 6: {
        if (tag == 50) {
         parse_cst_sign_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cst_sign_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_cert_format;
        break;
      }

      // optional string cert_format = 7;
      case 7: {
        if (tag == 58) {
         parse_cert_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cert_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cert_format().data(), this->cert_format().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cert_format");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_sign_type;
        break;
      }

      // optional uint32 sign_type = 8;
      case 8: {
        if (tag == 64) {
         parse_sign_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sign_type_)));
          set_has_sign_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.TCUCertApply_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.TCUCertApply_Req)
  return false;
#undef DO_
}

void TCUCertApply_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.TCUCertApply_Req)
  // required uint32 time_stamp = 1;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time_stamp(), output);
  }

  // required string vin = 2;
  if (has_vin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vin().data(), this->vin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vin(), output);
  }

  // required uint32 cert_status = 3;
  if (has_cert_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cert_status(), output);
  }

  // required uint32 duration = 4;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->duration(), output);
  }

  // required bytes p10_csr = 5;
  if (has_p10_csr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->p10_csr(), output);
  }

  // optional bytes cst_sign_data = 6;
  if (has_cst_sign_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->cst_sign_data(), output);
  }

  // optional string cert_format = 7;
  if (has_cert_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cert_format().data(), this->cert_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cert_format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->cert_format(), output);
  }

  // optional uint32 sign_type = 8;
  if (has_sign_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->sign_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.TCUCertApply_Req)
}

::google::protobuf::uint8* TCUCertApply_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.TCUCertApply_Req)
  // required uint32 time_stamp = 1;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time_stamp(), target);
  }

  // required string vin = 2;
  if (has_vin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vin().data(), this->vin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vin(), target);
  }

  // required uint32 cert_status = 3;
  if (has_cert_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cert_status(), target);
  }

  // required uint32 duration = 4;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->duration(), target);
  }

  // required bytes p10_csr = 5;
  if (has_p10_csr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->p10_csr(), target);
  }

  // optional bytes cst_sign_data = 6;
  if (has_cst_sign_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->cst_sign_data(), target);
  }

  // optional string cert_format = 7;
  if (has_cert_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cert_format().data(), this->cert_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cert_format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->cert_format(), target);
  }

  // optional uint32 sign_type = 8;
  if (has_sign_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->sign_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.TCUCertApply_Req)
  return target;
}

int TCUCertApply_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time_stamp = 1;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

    // required string vin = 2;
    if (has_vin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vin());
    }

    // required uint32 cert_status = 3;
    if (has_cert_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cert_status());
    }

    // required uint32 duration = 4;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // required bytes p10_csr = 5;
    if (has_p10_csr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->p10_csr());
    }

    // optional bytes cst_sign_data = 6;
    if (has_cst_sign_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cst_sign_data());
    }

    // optional string cert_format = 7;
    if (has_cert_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cert_format());
    }

    // optional uint32 sign_type = 8;
    if (has_sign_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sign_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCUCertApply_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCUCertApply_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCUCertApply_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCUCertApply_Req::MergeFrom(const TCUCertApply_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_vin()) {
      set_vin(from.vin());
    }
    if (from.has_cert_status()) {
      set_cert_status(from.cert_status());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_p10_csr()) {
      set_p10_csr(from.p10_csr());
    }
    if (from.has_cst_sign_data()) {
      set_cst_sign_data(from.cst_sign_data());
    }
    if (from.has_cert_format()) {
      set_cert_format(from.cert_format());
    }
    if (from.has_sign_type()) {
      set_sign_type(from.sign_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCUCertApply_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCUCertApply_Req::CopyFrom(const TCUCertApply_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCUCertApply_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void TCUCertApply_Req::Swap(TCUCertApply_Req* other) {
  if (other != this) {
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(vin_, other->vin_);
    std::swap(cert_status_, other->cert_status_);
    std::swap(duration_, other->duration_);
    std::swap(p10_csr_, other->p10_csr_);
    std::swap(cst_sign_data_, other->cst_sign_data_);
    std::swap(cert_format_, other->cert_format_);
    std::swap(sign_type_, other->sign_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCUCertApply_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCUCertApply_Req_descriptor_;
  metadata.reflection = TCUCertApply_Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCUCertApply_Rsp::kTimeStampFieldNumber;
const int TCUCertApply_Rsp::kRecvStatusFieldNumber;
#endif  // !_MSC_VER

TCUCertApply_Rsp::TCUCertApply_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.TCUCertApply_Rsp)
}

void TCUCertApply_Rsp::InitAsDefaultInstance() {
}

TCUCertApply_Rsp::TCUCertApply_Rsp(const TCUCertApply_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.TCUCertApply_Rsp)
}

void TCUCertApply_Rsp::SharedCtor() {
  _cached_size_ = 0;
  time_stamp_ = 0u;
  recv_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCUCertApply_Rsp::~TCUCertApply_Rsp() {
  // @@protoc_insertion_point(destructor:tbox.protocol.TCUCertApply_Rsp)
  SharedDtor();
}

void TCUCertApply_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCUCertApply_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCUCertApply_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCUCertApply_Rsp_descriptor_;
}

const TCUCertApply_Rsp& TCUCertApply_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

TCUCertApply_Rsp* TCUCertApply_Rsp::default_instance_ = NULL;

TCUCertApply_Rsp* TCUCertApply_Rsp::New() const {
  return new TCUCertApply_Rsp;
}

void TCUCertApply_Rsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCUCertApply_Rsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(time_stamp_, recv_status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCUCertApply_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.TCUCertApply_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time_stamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_recv_status;
        break;
      }

      // optional uint32 recv_status = 2;
      case 2: {
        if (tag == 16) {
         parse_recv_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recv_status_)));
          set_has_recv_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.TCUCertApply_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.TCUCertApply_Rsp)
  return false;
#undef DO_
}

void TCUCertApply_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.TCUCertApply_Rsp)
  // required uint32 time_stamp = 1;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time_stamp(), output);
  }

  // optional uint32 recv_status = 2;
  if (has_recv_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->recv_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.TCUCertApply_Rsp)
}

::google::protobuf::uint8* TCUCertApply_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.TCUCertApply_Rsp)
  // required uint32 time_stamp = 1;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time_stamp(), target);
  }

  // optional uint32 recv_status = 2;
  if (has_recv_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->recv_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.TCUCertApply_Rsp)
  return target;
}

int TCUCertApply_Rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time_stamp = 1;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

    // optional uint32 recv_status = 2;
    if (has_recv_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recv_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCUCertApply_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCUCertApply_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCUCertApply_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCUCertApply_Rsp::MergeFrom(const TCUCertApply_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_recv_status()) {
      set_recv_status(from.recv_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCUCertApply_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCUCertApply_Rsp::CopyFrom(const TCUCertApply_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCUCertApply_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TCUCertApply_Rsp::Swap(TCUCertApply_Rsp* other) {
  if (other != this) {
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(recv_status_, other->recv_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCUCertApply_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCUCertApply_Rsp_descriptor_;
  metadata.reflection = TCUCertApply_Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CertIssue_Req::kTimeStampFieldNumber;
const int CertIssue_Req::kCertApplyStatusFieldNumber;
const int CertIssue_Req::kApplyCertIdFieldNumber;
const int CertIssue_Req::kCertDataFieldNumber;
#endif  // !_MSC_VER

CertIssue_Req::CertIssue_Req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.CertIssue_Req)
}

void CertIssue_Req::InitAsDefaultInstance() {
}

CertIssue_Req::CertIssue_Req(const CertIssue_Req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.CertIssue_Req)
}

void CertIssue_Req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_stamp_ = 0u;
  cert_apply_status_ = 0u;
  apply_cert_id_ = 0u;
  cert_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CertIssue_Req::~CertIssue_Req() {
  // @@protoc_insertion_point(destructor:tbox.protocol.CertIssue_Req)
  SharedDtor();
}

void CertIssue_Req::SharedDtor() {
  if (cert_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cert_data_;
  }
  if (this != default_instance_) {
  }
}

void CertIssue_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CertIssue_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CertIssue_Req_descriptor_;
}

const CertIssue_Req& CertIssue_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

CertIssue_Req* CertIssue_Req::default_instance_ = NULL;

CertIssue_Req* CertIssue_Req::New() const {
  return new CertIssue_Req;
}

void CertIssue_Req::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CertIssue_Req*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(time_stamp_, cert_apply_status_);
    apply_cert_id_ = 0u;
    if (has_cert_data()) {
      if (cert_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cert_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CertIssue_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.CertIssue_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time_stamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cert_apply_status;
        break;
      }

      // required uint32 cert_apply_status = 2;
      case 2: {
        if (tag == 16) {
         parse_cert_apply_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cert_apply_status_)));
          set_has_cert_apply_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_apply_cert_id;
        break;
      }

      // optional uint32 apply_cert_id = 3;
      case 3: {
        if (tag == 24) {
         parse_apply_cert_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apply_cert_id_)));
          set_has_apply_cert_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cert_data;
        break;
      }

      // optional bytes cert_data = 4;
      case 4: {
        if (tag == 34) {
         parse_cert_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cert_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.CertIssue_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.CertIssue_Req)
  return false;
#undef DO_
}

void CertIssue_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.CertIssue_Req)
  // required uint32 time_stamp = 1;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time_stamp(), output);
  }

  // required uint32 cert_apply_status = 2;
  if (has_cert_apply_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cert_apply_status(), output);
  }

  // optional uint32 apply_cert_id = 3;
  if (has_apply_cert_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->apply_cert_id(), output);
  }

  // optional bytes cert_data = 4;
  if (has_cert_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->cert_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.CertIssue_Req)
}

::google::protobuf::uint8* CertIssue_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.CertIssue_Req)
  // required uint32 time_stamp = 1;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time_stamp(), target);
  }

  // required uint32 cert_apply_status = 2;
  if (has_cert_apply_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cert_apply_status(), target);
  }

  // optional uint32 apply_cert_id = 3;
  if (has_apply_cert_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->apply_cert_id(), target);
  }

  // optional bytes cert_data = 4;
  if (has_cert_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->cert_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.CertIssue_Req)
  return target;
}

int CertIssue_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time_stamp = 1;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

    // required uint32 cert_apply_status = 2;
    if (has_cert_apply_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cert_apply_status());
    }

    // optional uint32 apply_cert_id = 3;
    if (has_apply_cert_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apply_cert_id());
    }

    // optional bytes cert_data = 4;
    if (has_cert_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cert_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CertIssue_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CertIssue_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CertIssue_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CertIssue_Req::MergeFrom(const CertIssue_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_cert_apply_status()) {
      set_cert_apply_status(from.cert_apply_status());
    }
    if (from.has_apply_cert_id()) {
      set_apply_cert_id(from.apply_cert_id());
    }
    if (from.has_cert_data()) {
      set_cert_data(from.cert_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CertIssue_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CertIssue_Req::CopyFrom(const CertIssue_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertIssue_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CertIssue_Req::Swap(CertIssue_Req* other) {
  if (other != this) {
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(cert_apply_status_, other->cert_apply_status_);
    std::swap(apply_cert_id_, other->apply_cert_id_);
    std::swap(cert_data_, other->cert_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CertIssue_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CertIssue_Req_descriptor_;
  metadata.reflection = CertIssue_Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CertIssue_Rsp::kTimeStampFieldNumber;
const int CertIssue_Rsp::kCertRecvStatusFieldNumber;
const int CertIssue_Rsp::kApplyCertIdFieldNumber;
#endif  // !_MSC_VER

CertIssue_Rsp::CertIssue_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.CertIssue_Rsp)
}

void CertIssue_Rsp::InitAsDefaultInstance() {
}

CertIssue_Rsp::CertIssue_Rsp(const CertIssue_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.CertIssue_Rsp)
}

void CertIssue_Rsp::SharedCtor() {
  _cached_size_ = 0;
  time_stamp_ = 0u;
  cert_recv_status_ = 0u;
  apply_cert_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CertIssue_Rsp::~CertIssue_Rsp() {
  // @@protoc_insertion_point(destructor:tbox.protocol.CertIssue_Rsp)
  SharedDtor();
}

void CertIssue_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CertIssue_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CertIssue_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CertIssue_Rsp_descriptor_;
}

const CertIssue_Rsp& CertIssue_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

CertIssue_Rsp* CertIssue_Rsp::default_instance_ = NULL;

CertIssue_Rsp* CertIssue_Rsp::New() const {
  return new CertIssue_Rsp;
}

void CertIssue_Rsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CertIssue_Rsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(time_stamp_, apply_cert_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CertIssue_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.CertIssue_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time_stamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cert_recv_status;
        break;
      }

      // required uint32 cert_recv_status = 2;
      case 2: {
        if (tag == 16) {
         parse_cert_recv_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cert_recv_status_)));
          set_has_cert_recv_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_apply_cert_id;
        break;
      }

      // optional uint32 apply_cert_id = 3;
      case 3: {
        if (tag == 24) {
         parse_apply_cert_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apply_cert_id_)));
          set_has_apply_cert_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.CertIssue_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.CertIssue_Rsp)
  return false;
#undef DO_
}

void CertIssue_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.CertIssue_Rsp)
  // required uint32 time_stamp = 1;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time_stamp(), output);
  }

  // required uint32 cert_recv_status = 2;
  if (has_cert_recv_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cert_recv_status(), output);
  }

  // optional uint32 apply_cert_id = 3;
  if (has_apply_cert_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->apply_cert_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.CertIssue_Rsp)
}

::google::protobuf::uint8* CertIssue_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.CertIssue_Rsp)
  // required uint32 time_stamp = 1;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time_stamp(), target);
  }

  // required uint32 cert_recv_status = 2;
  if (has_cert_recv_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cert_recv_status(), target);
  }

  // optional uint32 apply_cert_id = 3;
  if (has_apply_cert_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->apply_cert_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.CertIssue_Rsp)
  return target;
}

int CertIssue_Rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time_stamp = 1;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

    // required uint32 cert_recv_status = 2;
    if (has_cert_recv_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cert_recv_status());
    }

    // optional uint32 apply_cert_id = 3;
    if (has_apply_cert_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apply_cert_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CertIssue_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CertIssue_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CertIssue_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CertIssue_Rsp::MergeFrom(const CertIssue_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_cert_recv_status()) {
      set_cert_recv_status(from.cert_recv_status());
    }
    if (from.has_apply_cert_id()) {
      set_apply_cert_id(from.apply_cert_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CertIssue_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CertIssue_Rsp::CopyFrom(const CertIssue_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertIssue_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CertIssue_Rsp::Swap(CertIssue_Rsp* other) {
  if (other != this) {
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(cert_recv_status_, other->cert_recv_status_);
    std::swap(apply_cert_id_, other->apply_cert_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CertIssue_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CertIssue_Rsp_descriptor_;
  metadata.reflection = CertIssue_Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RSALoginReq::kTcuDeviceSnFieldNumber;
const int RSALoginReq::kImsiFieldNumber;
const int RSALoginReq::kImeiFieldNumber;
const int RSALoginReq::kSoftwareVersionFieldNumber;
const int RSALoginReq::kHardwareVersionFieldNumber;
const int RSALoginReq::kTimeStampFieldNumber;
const int RSALoginReq::kG4VersionFieldNumber;
const int RSALoginReq::kVehicleTypeFieldNumber;
#endif  // !_MSC_VER

RSALoginReq::RSALoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.RSALoginReq)
}

void RSALoginReq::InitAsDefaultInstance() {
}

RSALoginReq::RSALoginReq(const RSALoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.RSALoginReq)
}

void RSALoginReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tcu_device_sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imsi_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  software_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hardware_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_stamp_ = 0u;
  g4_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicle_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RSALoginReq::~RSALoginReq() {
  // @@protoc_insertion_point(destructor:tbox.protocol.RSALoginReq)
  SharedDtor();
}

void RSALoginReq::SharedDtor() {
  if (tcu_device_sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tcu_device_sn_;
  }
  if (imsi_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imsi_;
  }
  if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imei_;
  }
  if (software_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete software_version_;
  }
  if (hardware_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hardware_version_;
  }
  if (g4_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete g4_version_;
  }
  if (vehicle_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vehicle_type_;
  }
  if (this != default_instance_) {
  }
}

void RSALoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RSALoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RSALoginReq_descriptor_;
}

const RSALoginReq& RSALoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

RSALoginReq* RSALoginReq::default_instance_ = NULL;

RSALoginReq* RSALoginReq::New() const {
  return new RSALoginReq;
}

void RSALoginReq::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_tcu_device_sn()) {
      if (tcu_device_sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tcu_device_sn_->clear();
      }
    }
    if (has_imsi()) {
      if (imsi_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imsi_->clear();
      }
    }
    if (has_imei()) {
      if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imei_->clear();
      }
    }
    if (has_software_version()) {
      if (software_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        software_version_->clear();
      }
    }
    if (has_hardware_version()) {
      if (hardware_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hardware_version_->clear();
      }
    }
    time_stamp_ = 0u;
    if (has_g4_version()) {
      if (g4_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        g4_version_->clear();
      }
    }
    if (has_vehicle_type()) {
      if (vehicle_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vehicle_type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RSALoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.RSALoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tcu_device_sn = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tcu_device_sn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tcu_device_sn().data(), this->tcu_device_sn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tcu_device_sn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_imsi;
        break;
      }

      // required string imsi = 2;
      case 2: {
        if (tag == 18) {
         parse_imsi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imsi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imsi().data(), this->imsi().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "imsi");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_imei;
        break;
      }

      // required string imei = 3;
      case 3: {
        if (tag == 26) {
         parse_imei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "imei");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_software_version;
        break;
      }

      // required string software_version = 4;
      case 4: {
        if (tag == 34) {
         parse_software_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_software_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->software_version().data(), this->software_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "software_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_hardware_version;
        break;
      }

      // required string hardware_version = 5;
      case 5: {
        if (tag == 42) {
         parse_hardware_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hardware_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hardware_version().data(), this->hardware_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hardware_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 6;
      case 6: {
        if (tag == 48) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_g4_version;
        break;
      }

      // optional string g4_version = 7;
      case 7: {
        if (tag == 58) {
         parse_g4_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_g4_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->g4_version().data(), this->g4_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "g4_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_vehicle_type;
        break;
      }

      // optional string vehicle_type = 8;
      case 8: {
        if (tag == 66) {
         parse_vehicle_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicle_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vehicle_type().data(), this->vehicle_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vehicle_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.RSALoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.RSALoginReq)
  return false;
#undef DO_
}

void RSALoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.RSALoginReq)
  // required string tcu_device_sn = 1;
  if (has_tcu_device_sn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcu_device_sn().data(), this->tcu_device_sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tcu_device_sn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tcu_device_sn(), output);
  }

  // required string imsi = 2;
  if (has_imsi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imsi().data(), this->imsi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imsi");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->imsi(), output);
  }

  // required string imei = 3;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->imei(), output);
  }

  // required string software_version = 4;
  if (has_software_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->software_version().data(), this->software_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "software_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->software_version(), output);
  }

  // required string hardware_version = 5;
  if (has_hardware_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware_version().data(), this->hardware_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hardware_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->hardware_version(), output);
  }

  // required uint32 time_stamp = 6;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time_stamp(), output);
  }

  // optional string g4_version = 7;
  if (has_g4_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->g4_version().data(), this->g4_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "g4_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->g4_version(), output);
  }

  // optional string vehicle_type = 8;
  if (has_vehicle_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vehicle_type().data(), this->vehicle_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vehicle_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->vehicle_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.RSALoginReq)
}

::google::protobuf::uint8* RSALoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.RSALoginReq)
  // required string tcu_device_sn = 1;
  if (has_tcu_device_sn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcu_device_sn().data(), this->tcu_device_sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tcu_device_sn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tcu_device_sn(), target);
  }

  // required string imsi = 2;
  if (has_imsi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imsi().data(), this->imsi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imsi");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->imsi(), target);
  }

  // required string imei = 3;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->imei(), target);
  }

  // required string software_version = 4;
  if (has_software_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->software_version().data(), this->software_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "software_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->software_version(), target);
  }

  // required string hardware_version = 5;
  if (has_hardware_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware_version().data(), this->hardware_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hardware_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->hardware_version(), target);
  }

  // required uint32 time_stamp = 6;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time_stamp(), target);
  }

  // optional string g4_version = 7;
  if (has_g4_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->g4_version().data(), this->g4_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "g4_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->g4_version(), target);
  }

  // optional string vehicle_type = 8;
  if (has_vehicle_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vehicle_type().data(), this->vehicle_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vehicle_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->vehicle_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.RSALoginReq)
  return target;
}

int RSALoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string tcu_device_sn = 1;
    if (has_tcu_device_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tcu_device_sn());
    }

    // required string imsi = 2;
    if (has_imsi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imsi());
    }

    // required string imei = 3;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

    // required string software_version = 4;
    if (has_software_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->software_version());
    }

    // required string hardware_version = 5;
    if (has_hardware_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hardware_version());
    }

    // required uint32 time_stamp = 6;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

    // optional string g4_version = 7;
    if (has_g4_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->g4_version());
    }

    // optional string vehicle_type = 8;
    if (has_vehicle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vehicle_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RSALoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RSALoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RSALoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RSALoginReq::MergeFrom(const RSALoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tcu_device_sn()) {
      set_tcu_device_sn(from.tcu_device_sn());
    }
    if (from.has_imsi()) {
      set_imsi(from.imsi());
    }
    if (from.has_imei()) {
      set_imei(from.imei());
    }
    if (from.has_software_version()) {
      set_software_version(from.software_version());
    }
    if (from.has_hardware_version()) {
      set_hardware_version(from.hardware_version());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_g4_version()) {
      set_g4_version(from.g4_version());
    }
    if (from.has_vehicle_type()) {
      set_vehicle_type(from.vehicle_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RSALoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RSALoginReq::CopyFrom(const RSALoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSALoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void RSALoginReq::Swap(RSALoginReq* other) {
  if (other != this) {
    std::swap(tcu_device_sn_, other->tcu_device_sn_);
    std::swap(imsi_, other->imsi_);
    std::swap(imei_, other->imei_);
    std::swap(software_version_, other->software_version_);
    std::swap(hardware_version_, other->hardware_version_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(g4_version_, other->g4_version_);
    std::swap(vehicle_type_, other->vehicle_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RSALoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RSALoginReq_descriptor_;
  metadata.reflection = RSALoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendRSARsp::kErrcodeFieldNumber;
const int SendRSARsp::kNLenFieldNumber;
const int SendRSARsp::kNStringFieldNumber;
const int SendRSARsp::kE1LenFieldNumber;
const int SendRSARsp::kE1StringFieldNumber;
#endif  // !_MSC_VER

SendRSARsp::SendRSARsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.SendRSARsp)
}

void SendRSARsp::InitAsDefaultInstance() {
}

SendRSARsp::SendRSARsp(const SendRSARsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.SendRSARsp)
}

void SendRSARsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = 0u;
  n_len_ = 0u;
  n_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  e1_len_ = 0u;
  e1_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendRSARsp::~SendRSARsp() {
  // @@protoc_insertion_point(destructor:tbox.protocol.SendRSARsp)
  SharedDtor();
}

void SendRSARsp::SharedDtor() {
  if (n_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete n_string_;
  }
  if (e1_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete e1_string_;
  }
  if (this != default_instance_) {
  }
}

void SendRSARsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendRSARsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendRSARsp_descriptor_;
}

const SendRSARsp& SendRSARsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

SendRSARsp* SendRSARsp::default_instance_ = NULL;

SendRSARsp* SendRSARsp::New() const {
  return new SendRSARsp;
}

void SendRSARsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SendRSARsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(errcode_, n_len_);
    if (has_n_string()) {
      if (n_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        n_string_->clear();
      }
    }
    e1_len_ = 0u;
    if (has_e1_string()) {
      if (e1_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        e1_string_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendRSARsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.SendRSARsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_N_len;
        break;
      }

      // optional uint32 N_len = 2;
      case 2: {
        if (tag == 16) {
         parse_N_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_len_)));
          set_has_n_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_N_string;
        break;
      }

      // optional bytes N_string = 3;
      case 3: {
        if (tag == 26) {
         parse_N_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_n_string()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_E1_len;
        break;
      }

      // optional uint32 E1_len = 4;
      case 4: {
        if (tag == 32) {
         parse_E1_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &e1_len_)));
          set_has_e1_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_E1_string;
        break;
      }

      // optional bytes E1_string = 5;
      case 5: {
        if (tag == 42) {
         parse_E1_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_e1_string()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.SendRSARsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.SendRSARsp)
  return false;
#undef DO_
}

void SendRSARsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.SendRSARsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }

  // optional uint32 N_len = 2;
  if (has_n_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->n_len(), output);
  }

  // optional bytes N_string = 3;
  if (has_n_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->n_string(), output);
  }

  // optional uint32 E1_len = 4;
  if (has_e1_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->e1_len(), output);
  }

  // optional bytes E1_string = 5;
  if (has_e1_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->e1_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.SendRSARsp)
}

::google::protobuf::uint8* SendRSARsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.SendRSARsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }

  // optional uint32 N_len = 2;
  if (has_n_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->n_len(), target);
  }

  // optional bytes N_string = 3;
  if (has_n_string()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->n_string(), target);
  }

  // optional uint32 E1_len = 4;
  if (has_e1_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->e1_len(), target);
  }

  // optional bytes E1_string = 5;
  if (has_e1_string()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->e1_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.SendRSARsp)
  return target;
}

int SendRSARsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }

    // optional uint32 N_len = 2;
    if (has_n_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_len());
    }

    // optional bytes N_string = 3;
    if (has_n_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->n_string());
    }

    // optional uint32 E1_len = 4;
    if (has_e1_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->e1_len());
    }

    // optional bytes E1_string = 5;
    if (has_e1_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->e1_string());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendRSARsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendRSARsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendRSARsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendRSARsp::MergeFrom(const SendRSARsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_n_len()) {
      set_n_len(from.n_len());
    }
    if (from.has_n_string()) {
      set_n_string(from.n_string());
    }
    if (from.has_e1_len()) {
      set_e1_len(from.e1_len());
    }
    if (from.has_e1_string()) {
      set_e1_string(from.e1_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendRSARsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendRSARsp::CopyFrom(const SendRSARsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendRSARsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SendRSARsp::Swap(SendRSARsp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(n_len_, other->n_len_);
    std::swap(n_string_, other->n_string_);
    std::swap(e1_len_, other->e1_len_);
    std::swap(e1_string_, other->e1_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendRSARsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendRSARsp_descriptor_;
  metadata.reflection = SendRSARsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendRC4Req::kDaDeviceSnFieldNumber;
const int SendRC4Req::kVinFieldNumber;
const int SendRC4Req::kIccidFieldNumber;
const int SendRC4Req::kSerialNumberFieldNumber;
const int SendRC4Req::kKeyLenFieldNumber;
const int SendRC4Req::kKeyFieldNumber;
const int SendRC4Req::kUpgradingFieldNumber;
const int SendRC4Req::kBcmRegStatusFieldNumber;
const int SendRC4Req::kGpsContrlstatusFieldNumber;
const int SendRC4Req::kVelContrlstatusFieldNumber;
#endif  // !_MSC_VER

SendRC4Req::SendRC4Req()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.SendRC4Req)
}

void SendRC4Req::InitAsDefaultInstance() {
}

SendRC4Req::SendRC4Req(const SendRC4Req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.SendRC4Req)
}

void SendRC4Req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  da_device_sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iccid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_ = 0u;
  key_len_ = 0u;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upgrading_ = false;
  bcm_reg_status_ = false;
  gps_contrlstatus_ = 0u;
  vel_contrlstatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendRC4Req::~SendRC4Req() {
  // @@protoc_insertion_point(destructor:tbox.protocol.SendRC4Req)
  SharedDtor();
}

void SendRC4Req::SharedDtor() {
  if (da_device_sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete da_device_sn_;
  }
  if (vin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vin_;
  }
  if (iccid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iccid_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void SendRC4Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendRC4Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendRC4Req_descriptor_;
}

const SendRC4Req& SendRC4Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

SendRC4Req* SendRC4Req::default_instance_ = NULL;

SendRC4Req* SendRC4Req::New() const {
  return new SendRC4Req;
}

void SendRC4Req::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SendRC4Req*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(serial_number_, key_len_);
    ZR_(upgrading_, bcm_reg_status_);
    if (has_da_device_sn()) {
      if (da_device_sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        da_device_sn_->clear();
      }
    }
    if (has_vin()) {
      if (vin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vin_->clear();
      }
    }
    if (has_iccid()) {
      if (iccid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        iccid_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
  }
  ZR_(gps_contrlstatus_, vel_contrlstatus_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendRC4Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.SendRC4Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string da_device_sn = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_da_device_sn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->da_device_sn().data(), this->da_device_sn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "da_device_sn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vin;
        break;
      }

      // required string vin = 2;
      case 2: {
        if (tag == 18) {
         parse_vin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vin().data(), this->vin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vin");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_iccid;
        break;
      }

      // required string iccid = 3;
      case 3: {
        if (tag == 26) {
         parse_iccid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iccid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iccid().data(), this->iccid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "iccid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_serial_number;
        break;
      }

      // required uint32 serial_number = 4;
      case 4: {
        if (tag == 32) {
         parse_serial_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_number_)));
          set_has_serial_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_key_len;
        break;
      }

      // required uint32 key_len = 5;
      case 5: {
        if (tag == 40) {
         parse_key_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_len_)));
          set_has_key_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_key;
        break;
      }

      // required bytes key = 6;
      case 6: {
        if (tag == 50) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_upgrading;
        break;
      }

      // optional bool upgrading = 7;
      case 7: {
        if (tag == 56) {
         parse_upgrading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upgrading_)));
          set_has_upgrading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bcm_reg_status;
        break;
      }

      // optional bool bcm_reg_status = 8;
      case 8: {
        if (tag == 64) {
         parse_bcm_reg_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bcm_reg_status_)));
          set_has_bcm_reg_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_gps_contrlstatus;
        break;
      }

      // optional uint32 gps_contrlstatus = 9;
      case 9: {
        if (tag == 72) {
         parse_gps_contrlstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gps_contrlstatus_)));
          set_has_gps_contrlstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_vel_contrlstatus;
        break;
      }

      // optional uint32 vel_contrlstatus = 10;
      case 10: {
        if (tag == 80) {
         parse_vel_contrlstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vel_contrlstatus_)));
          set_has_vel_contrlstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.SendRC4Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.SendRC4Req)
  return false;
#undef DO_
}

void SendRC4Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.SendRC4Req)
  // required string da_device_sn = 1;
  if (has_da_device_sn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->da_device_sn().data(), this->da_device_sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "da_device_sn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->da_device_sn(), output);
  }

  // required string vin = 2;
  if (has_vin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vin().data(), this->vin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vin(), output);
  }

  // required string iccid = 3;
  if (has_iccid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iccid().data(), this->iccid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iccid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->iccid(), output);
  }

  // required uint32 serial_number = 4;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->serial_number(), output);
  }

  // required uint32 key_len = 5;
  if (has_key_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->key_len(), output);
  }

  // required bytes key = 6;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->key(), output);
  }

  // optional bool upgrading = 7;
  if (has_upgrading()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->upgrading(), output);
  }

  // optional bool bcm_reg_status = 8;
  if (has_bcm_reg_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->bcm_reg_status(), output);
  }

  // optional uint32 gps_contrlstatus = 9;
  if (has_gps_contrlstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->gps_contrlstatus(), output);
  }

  // optional uint32 vel_contrlstatus = 10;
  if (has_vel_contrlstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->vel_contrlstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.SendRC4Req)
}

::google::protobuf::uint8* SendRC4Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.SendRC4Req)
  // required string da_device_sn = 1;
  if (has_da_device_sn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->da_device_sn().data(), this->da_device_sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "da_device_sn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->da_device_sn(), target);
  }

  // required string vin = 2;
  if (has_vin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vin().data(), this->vin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vin(), target);
  }

  // required string iccid = 3;
  if (has_iccid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iccid().data(), this->iccid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iccid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->iccid(), target);
  }

  // required uint32 serial_number = 4;
  if (has_serial_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->serial_number(), target);
  }

  // required uint32 key_len = 5;
  if (has_key_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->key_len(), target);
  }

  // required bytes key = 6;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->key(), target);
  }

  // optional bool upgrading = 7;
  if (has_upgrading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->upgrading(), target);
  }

  // optional bool bcm_reg_status = 8;
  if (has_bcm_reg_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->bcm_reg_status(), target);
  }

  // optional uint32 gps_contrlstatus = 9;
  if (has_gps_contrlstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->gps_contrlstatus(), target);
  }

  // optional uint32 vel_contrlstatus = 10;
  if (has_vel_contrlstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->vel_contrlstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.SendRC4Req)
  return target;
}

int SendRC4Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string da_device_sn = 1;
    if (has_da_device_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->da_device_sn());
    }

    // required string vin = 2;
    if (has_vin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vin());
    }

    // required string iccid = 3;
    if (has_iccid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iccid());
    }

    // required uint32 serial_number = 4;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial_number());
    }

    // required uint32 key_len = 5;
    if (has_key_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key_len());
    }

    // required bytes key = 6;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bool upgrading = 7;
    if (has_upgrading()) {
      total_size += 1 + 1;
    }

    // optional bool bcm_reg_status = 8;
    if (has_bcm_reg_status()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 gps_contrlstatus = 9;
    if (has_gps_contrlstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gps_contrlstatus());
    }

    // optional uint32 vel_contrlstatus = 10;
    if (has_vel_contrlstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vel_contrlstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendRC4Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendRC4Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendRC4Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendRC4Req::MergeFrom(const SendRC4Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_da_device_sn()) {
      set_da_device_sn(from.da_device_sn());
    }
    if (from.has_vin()) {
      set_vin(from.vin());
    }
    if (from.has_iccid()) {
      set_iccid(from.iccid());
    }
    if (from.has_serial_number()) {
      set_serial_number(from.serial_number());
    }
    if (from.has_key_len()) {
      set_key_len(from.key_len());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_upgrading()) {
      set_upgrading(from.upgrading());
    }
    if (from.has_bcm_reg_status()) {
      set_bcm_reg_status(from.bcm_reg_status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gps_contrlstatus()) {
      set_gps_contrlstatus(from.gps_contrlstatus());
    }
    if (from.has_vel_contrlstatus()) {
      set_vel_contrlstatus(from.vel_contrlstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendRC4Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendRC4Req::CopyFrom(const SendRC4Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendRC4Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void SendRC4Req::Swap(SendRC4Req* other) {
  if (other != this) {
    std::swap(da_device_sn_, other->da_device_sn_);
    std::swap(vin_, other->vin_);
    std::swap(iccid_, other->iccid_);
    std::swap(serial_number_, other->serial_number_);
    std::swap(key_len_, other->key_len_);
    std::swap(key_, other->key_);
    std::swap(upgrading_, other->upgrading_);
    std::swap(bcm_reg_status_, other->bcm_reg_status_);
    std::swap(gps_contrlstatus_, other->gps_contrlstatus_);
    std::swap(vel_contrlstatus_, other->vel_contrlstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendRC4Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendRC4Req_descriptor_;
  metadata.reflection = SendRC4Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendRC4Resp::kErrcodeFieldNumber;
const int SendRC4Resp::kSerialNumberFieldNumber;
const int SendRC4Resp::kTimeStampFieldNumber;
const int SendRC4Resp::kUpgradeinfoFieldNumber;
#endif  // !_MSC_VER

SendRC4Resp::SendRC4Resp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.SendRC4Resp)
}

void SendRC4Resp::InitAsDefaultInstance() {
}

SendRC4Resp::SendRC4Resp(const SendRC4Resp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.SendRC4Resp)
}

void SendRC4Resp::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  serial_number_ = 0u;
  time_stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendRC4Resp::~SendRC4Resp() {
  // @@protoc_insertion_point(destructor:tbox.protocol.SendRC4Resp)
  SharedDtor();
}

void SendRC4Resp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendRC4Resp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendRC4Resp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendRC4Resp_descriptor_;
}

const SendRC4Resp& SendRC4Resp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

SendRC4Resp* SendRC4Resp::default_instance_ = NULL;

SendRC4Resp* SendRC4Resp::New() const {
  return new SendRC4Resp;
}

void SendRC4Resp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SendRC4Resp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(errcode_, serial_number_);
    time_stamp_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  upgradeinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendRC4Resp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.SendRC4Resp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serial_number;
        break;
      }

      // required uint32 serial_number = 2;
      case 2: {
        if (tag == 16) {
         parse_serial_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_number_)));
          set_has_serial_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 3;
      case 3: {
        if (tag == 24) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_upgradeinfo;
        break;
      }

      // repeated .tbox.protocol.UpgradeInfo upgradeinfo = 4;
      case 4: {
        if (tag == 34) {
         parse_upgradeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_upgradeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_upgradeinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.SendRC4Resp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.SendRC4Resp)
  return false;
#undef DO_
}

void SendRC4Resp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.SendRC4Resp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }

  // required uint32 serial_number = 2;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serial_number(), output);
  }

  // required uint32 time_stamp = 3;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_stamp(), output);
  }

  // repeated .tbox.protocol.UpgradeInfo upgradeinfo = 4;
  for (int i = 0; i < this->upgradeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->upgradeinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.SendRC4Resp)
}

::google::protobuf::uint8* SendRC4Resp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.SendRC4Resp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }

  // required uint32 serial_number = 2;
  if (has_serial_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serial_number(), target);
  }

  // required uint32 time_stamp = 3;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_stamp(), target);
  }

  // repeated .tbox.protocol.UpgradeInfo upgradeinfo = 4;
  for (int i = 0; i < this->upgradeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->upgradeinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.SendRC4Resp)
  return target;
}

int SendRC4Resp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }

    // required uint32 serial_number = 2;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial_number());
    }

    // required uint32 time_stamp = 3;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

  }
  // repeated .tbox.protocol.UpgradeInfo upgradeinfo = 4;
  total_size += 1 * this->upgradeinfo_size();
  for (int i = 0; i < this->upgradeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->upgradeinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendRC4Resp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendRC4Resp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendRC4Resp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendRC4Resp::MergeFrom(const SendRC4Resp& from) {
  GOOGLE_CHECK_NE(&from, this);
  upgradeinfo_.MergeFrom(from.upgradeinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_serial_number()) {
      set_serial_number(from.serial_number());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendRC4Resp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendRC4Resp::CopyFrom(const SendRC4Resp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendRC4Resp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->upgradeinfo())) return false;
  return true;
}

void SendRC4Resp::Swap(SendRC4Resp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(serial_number_, other->serial_number_);
    std::swap(time_stamp_, other->time_stamp_);
    upgradeinfo_.Swap(&other->upgradeinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendRC4Resp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendRC4Resp_descriptor_;
  metadata.reflection = SendRC4Resp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WakeUpDVRRsp::kSerialNumberFieldNumber;
const int WakeUpDVRRsp::kControlResultFieldNumber;
#endif  // !_MSC_VER

WakeUpDVRRsp::WakeUpDVRRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.WakeUpDVRRsp)
}

void WakeUpDVRRsp::InitAsDefaultInstance() {
}

WakeUpDVRRsp::WakeUpDVRRsp(const WakeUpDVRRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.WakeUpDVRRsp)
}

void WakeUpDVRRsp::SharedCtor() {
  _cached_size_ = 0;
  serial_number_ = 0u;
  control_result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WakeUpDVRRsp::~WakeUpDVRRsp() {
  // @@protoc_insertion_point(destructor:tbox.protocol.WakeUpDVRRsp)
  SharedDtor();
}

void WakeUpDVRRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WakeUpDVRRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WakeUpDVRRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WakeUpDVRRsp_descriptor_;
}

const WakeUpDVRRsp& WakeUpDVRRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

WakeUpDVRRsp* WakeUpDVRRsp::default_instance_ = NULL;

WakeUpDVRRsp* WakeUpDVRRsp::New() const {
  return new WakeUpDVRRsp;
}

void WakeUpDVRRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WakeUpDVRRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(serial_number_, control_result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WakeUpDVRRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.WakeUpDVRRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_number_)));
          set_has_serial_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_control_result;
        break;
      }

      // required uint32 control_result = 2;
      case 2: {
        if (tag == 16) {
         parse_control_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &control_result_)));
          set_has_control_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.WakeUpDVRRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.WakeUpDVRRsp)
  return false;
#undef DO_
}

void WakeUpDVRRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.WakeUpDVRRsp)
  // required uint32 serial_number = 1;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial_number(), output);
  }

  // required uint32 control_result = 2;
  if (has_control_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->control_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.WakeUpDVRRsp)
}

::google::protobuf::uint8* WakeUpDVRRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.WakeUpDVRRsp)
  // required uint32 serial_number = 1;
  if (has_serial_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial_number(), target);
  }

  // required uint32 control_result = 2;
  if (has_control_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->control_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.WakeUpDVRRsp)
  return target;
}

int WakeUpDVRRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial_number());
    }

    // required uint32 control_result = 2;
    if (has_control_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->control_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WakeUpDVRRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WakeUpDVRRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WakeUpDVRRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WakeUpDVRRsp::MergeFrom(const WakeUpDVRRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial_number()) {
      set_serial_number(from.serial_number());
    }
    if (from.has_control_result()) {
      set_control_result(from.control_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WakeUpDVRRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WakeUpDVRRsp::CopyFrom(const WakeUpDVRRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WakeUpDVRRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WakeUpDVRRsp::Swap(WakeUpDVRRsp* other) {
  if (other != this) {
    std::swap(serial_number_, other->serial_number_);
    std::swap(control_result_, other->control_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WakeUpDVRRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WakeUpDVRRsp_descriptor_;
  metadata.reflection = WakeUpDVRRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WakeUpDVRReq::kSerialNumberFieldNumber;
const int WakeUpDVRReq::kTimeStampFieldNumber;
#endif  // !_MSC_VER

WakeUpDVRReq::WakeUpDVRReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.WakeUpDVRReq)
}

void WakeUpDVRReq::InitAsDefaultInstance() {
}

WakeUpDVRReq::WakeUpDVRReq(const WakeUpDVRReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.WakeUpDVRReq)
}

void WakeUpDVRReq::SharedCtor() {
  _cached_size_ = 0;
  serial_number_ = 0u;
  time_stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WakeUpDVRReq::~WakeUpDVRReq() {
  // @@protoc_insertion_point(destructor:tbox.protocol.WakeUpDVRReq)
  SharedDtor();
}

void WakeUpDVRReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WakeUpDVRReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WakeUpDVRReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WakeUpDVRReq_descriptor_;
}

const WakeUpDVRReq& WakeUpDVRReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

WakeUpDVRReq* WakeUpDVRReq::default_instance_ = NULL;

WakeUpDVRReq* WakeUpDVRReq::New() const {
  return new WakeUpDVRReq;
}

void WakeUpDVRReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WakeUpDVRReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(serial_number_, time_stamp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WakeUpDVRReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.WakeUpDVRReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_number_)));
          set_has_serial_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 2;
      case 2: {
        if (tag == 16) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.WakeUpDVRReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.WakeUpDVRReq)
  return false;
#undef DO_
}

void WakeUpDVRReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.WakeUpDVRReq)
  // required uint32 serial_number = 1;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial_number(), output);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.WakeUpDVRReq)
}

::google::protobuf::uint8* WakeUpDVRReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.WakeUpDVRReq)
  // required uint32 serial_number = 1;
  if (has_serial_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial_number(), target);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.WakeUpDVRReq)
  return target;
}

int WakeUpDVRReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial_number());
    }

    // required uint32 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WakeUpDVRReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WakeUpDVRReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WakeUpDVRReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WakeUpDVRReq::MergeFrom(const WakeUpDVRReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial_number()) {
      set_serial_number(from.serial_number());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WakeUpDVRReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WakeUpDVRReq::CopyFrom(const WakeUpDVRReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WakeUpDVRReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WakeUpDVRReq::Swap(WakeUpDVRReq* other) {
  if (other != this) {
    std::swap(serial_number_, other->serial_number_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WakeUpDVRReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WakeUpDVRReq_descriptor_;
  metadata.reflection = WakeUpDVRReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RmtDiagRsp::kResultFieldNumber;
const int RmtDiagRsp::kSerialNumberFieldNumber;
const int RmtDiagRsp::kTimeStampFieldNumber;
const int RmtDiagRsp::kDiagAVMFieldNumber;
const int RmtDiagRsp::kDiagSONARFieldNumber;
const int RmtDiagRsp::kDiagBSWFieldNumber;
const int RmtDiagRsp::kDiagECMFieldNumber;
const int RmtDiagRsp::kDiagTCMFieldNumber;
const int RmtDiagRsp::kDiagUSMFieldNumber;
const int RmtDiagRsp::kDiagBCMFieldNumber;
const int RmtDiagRsp::kDiagFEBCAMERAFieldNumber;
const int RmtDiagRsp::kDiagFEBRADARFieldNumber;
const int RmtDiagRsp::kDiagDVRFieldNumber;
const int RmtDiagRsp::kDiagVDCFieldNumber;
const int RmtDiagRsp::kDiagEPSFieldNumber;
const int RmtDiagRsp::kDiagGWFieldNumber;
const int RmtDiagRsp::kDiagTPMSFieldNumber;
const int RmtDiagRsp::kDiagMETERFieldNumber;
const int RmtDiagRsp::kDiagTCUFieldNumber;
const int RmtDiagRsp::kDiagACUFieldNumber;
const int RmtDiagRsp::kDiagDAFieldNumber;
#endif  // !_MSC_VER

RmtDiagRsp::RmtDiagRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.RmtDiagRsp)
}

void RmtDiagRsp::InitAsDefaultInstance() {
}

RmtDiagRsp::RmtDiagRsp(const RmtDiagRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.RmtDiagRsp)
}

void RmtDiagRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  serial_number_ = 0u;
  time_stamp_ = 0u;
  diag_avm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diag_sonar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diag_bsw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diag_ecm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diag_tcm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diag_usm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diag_bcm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diag_feb_camera_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diag_feb_radar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diag_dvr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diag_vdc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diag_eps_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diag_gw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diag_tpms_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diag_meter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diag_tcu_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diag_acu_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diag_da_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RmtDiagRsp::~RmtDiagRsp() {
  // @@protoc_insertion_point(destructor:tbox.protocol.RmtDiagRsp)
  SharedDtor();
}

void RmtDiagRsp::SharedDtor() {
  if (diag_avm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_avm_;
  }
  if (diag_sonar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_sonar_;
  }
  if (diag_bsw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_bsw_;
  }
  if (diag_ecm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_ecm_;
  }
  if (diag_tcm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_tcm_;
  }
  if (diag_usm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_usm_;
  }
  if (diag_bcm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_bcm_;
  }
  if (diag_feb_camera_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_feb_camera_;
  }
  if (diag_feb_radar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_feb_radar_;
  }
  if (diag_dvr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_dvr_;
  }
  if (diag_vdc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_vdc_;
  }
  if (diag_eps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_eps_;
  }
  if (diag_gw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_gw_;
  }
  if (diag_tpms_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_tpms_;
  }
  if (diag_meter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_meter_;
  }
  if (diag_tcu_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_tcu_;
  }
  if (diag_acu_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_acu_;
  }
  if (diag_da_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_da_;
  }
  if (this != default_instance_) {
  }
}

void RmtDiagRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RmtDiagRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RmtDiagRsp_descriptor_;
}

const RmtDiagRsp& RmtDiagRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

RmtDiagRsp* RmtDiagRsp::default_instance_ = NULL;

RmtDiagRsp* RmtDiagRsp::New() const {
  return new RmtDiagRsp;
}

void RmtDiagRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RmtDiagRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(result_, serial_number_);
    time_stamp_ = 0u;
    if (has_diag_avm()) {
      if (diag_avm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diag_avm_->clear();
      }
    }
    if (has_diag_sonar()) {
      if (diag_sonar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diag_sonar_->clear();
      }
    }
    if (has_diag_bsw()) {
      if (diag_bsw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diag_bsw_->clear();
      }
    }
    if (has_diag_ecm()) {
      if (diag_ecm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diag_ecm_->clear();
      }
    }
    if (has_diag_tcm()) {
      if (diag_tcm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diag_tcm_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_diag_usm()) {
      if (diag_usm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diag_usm_->clear();
      }
    }
    if (has_diag_bcm()) {
      if (diag_bcm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diag_bcm_->clear();
      }
    }
    if (has_diag_feb_camera()) {
      if (diag_feb_camera_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diag_feb_camera_->clear();
      }
    }
    if (has_diag_feb_radar()) {
      if (diag_feb_radar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diag_feb_radar_->clear();
      }
    }
    if (has_diag_dvr()) {
      if (diag_dvr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diag_dvr_->clear();
      }
    }
    if (has_diag_vdc()) {
      if (diag_vdc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diag_vdc_->clear();
      }
    }
    if (has_diag_eps()) {
      if (diag_eps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diag_eps_->clear();
      }
    }
    if (has_diag_gw()) {
      if (diag_gw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diag_gw_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 2031616) {
    if (has_diag_tpms()) {
      if (diag_tpms_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diag_tpms_->clear();
      }
    }
    if (has_diag_meter()) {
      if (diag_meter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diag_meter_->clear();
      }
    }
    if (has_diag_tcu()) {
      if (diag_tcu_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diag_tcu_->clear();
      }
    }
    if (has_diag_acu()) {
      if (diag_acu_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diag_acu_->clear();
      }
    }
    if (has_diag_da()) {
      if (diag_da_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        diag_da_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RmtDiagRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.RmtDiagRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tbox.protocol.RmtDiagRspCode result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tbox::protocol::RmtDiagRspCode_IsValid(value)) {
            set_result(static_cast< ::tbox::protocol::RmtDiagRspCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serial_number;
        break;
      }

      // required uint32 serial_number = 2;
      case 2: {
        if (tag == 16) {
         parse_serial_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_number_)));
          set_has_serial_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 3;
      case 3: {
        if (tag == 24) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Diag_AVM;
        break;
      }

      // optional bytes Diag_AVM = 4;
      case 4: {
        if (tag == 34) {
         parse_Diag_AVM:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diag_avm()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Diag_SONAR;
        break;
      }

      // optional bytes Diag_SONAR = 5;
      case 5: {
        if (tag == 42) {
         parse_Diag_SONAR:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diag_sonar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Diag_BSW;
        break;
      }

      // optional bytes Diag_BSW = 6;
      case 6: {
        if (tag == 50) {
         parse_Diag_BSW:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diag_bsw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Diag_ECM;
        break;
      }

      // optional bytes Diag_ECM = 7;
      case 7: {
        if (tag == 58) {
         parse_Diag_ECM:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diag_ecm()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Diag_TCM;
        break;
      }

      // optional bytes Diag_TCM = 8;
      case 8: {
        if (tag == 66) {
         parse_Diag_TCM:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diag_tcm()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Diag_USM;
        break;
      }

      // optional bytes Diag_USM = 9;
      case 9: {
        if (tag == 74) {
         parse_Diag_USM:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diag_usm()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_Diag_BCM;
        break;
      }

      // optional bytes Diag_BCM = 10;
      case 10: {
        if (tag == 82) {
         parse_Diag_BCM:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diag_bcm()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_Diag_FEB_CAMERA;
        break;
      }

      // optional bytes Diag_FEB_CAMERA = 11;
      case 11: {
        if (tag == 90) {
         parse_Diag_FEB_CAMERA:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diag_feb_camera()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_Diag_FEB_RADAR;
        break;
      }

      // optional bytes Diag_FEB_RADAR = 12;
      case 12: {
        if (tag == 98) {
         parse_Diag_FEB_RADAR:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diag_feb_radar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_Diag_DVR;
        break;
      }

      // optional bytes Diag_DVR = 13;
      case 13: {
        if (tag == 106) {
         parse_Diag_DVR:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diag_dvr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_Diag_VDC;
        break;
      }

      // optional bytes Diag_VDC = 14;
      case 14: {
        if (tag == 114) {
         parse_Diag_VDC:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diag_vdc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_Diag_EPS;
        break;
      }

      // optional bytes Diag_EPS = 15;
      case 15: {
        if (tag == 122) {
         parse_Diag_EPS:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diag_eps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_Diag_GW;
        break;
      }

      // optional bytes Diag_GW = 16;
      case 16: {
        if (tag == 130) {
         parse_Diag_GW:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diag_gw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_Diag_TPMS;
        break;
      }

      // optional bytes Diag_TPMS = 17;
      case 17: {
        if (tag == 138) {
         parse_Diag_TPMS:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diag_tpms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_Diag_METER;
        break;
      }

      // optional bytes Diag_METER = 18;
      case 18: {
        if (tag == 146) {
         parse_Diag_METER:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diag_meter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_Diag_TCU;
        break;
      }

      // optional bytes Diag_TCU = 19;
      case 19: {
        if (tag == 154) {
         parse_Diag_TCU:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diag_tcu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_Diag_ACU;
        break;
      }

      // optional bytes Diag_ACU = 20;
      case 20: {
        if (tag == 162) {
         parse_Diag_ACU:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diag_acu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_Diag_DA;
        break;
      }

      // optional bytes Diag_DA = 21;
      case 21: {
        if (tag == 170) {
         parse_Diag_DA:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diag_da()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.RmtDiagRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.RmtDiagRsp)
  return false;
#undef DO_
}

void RmtDiagRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.RmtDiagRsp)
  // required .tbox.protocol.RmtDiagRspCode result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // required uint32 serial_number = 2;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serial_number(), output);
  }

  // required uint32 time_stamp = 3;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_stamp(), output);
  }

  // optional bytes Diag_AVM = 4;
  if (has_diag_avm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->diag_avm(), output);
  }

  // optional bytes Diag_SONAR = 5;
  if (has_diag_sonar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->diag_sonar(), output);
  }

  // optional bytes Diag_BSW = 6;
  if (has_diag_bsw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->diag_bsw(), output);
  }

  // optional bytes Diag_ECM = 7;
  if (has_diag_ecm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->diag_ecm(), output);
  }

  // optional bytes Diag_TCM = 8;
  if (has_diag_tcm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->diag_tcm(), output);
  }

  // optional bytes Diag_USM = 9;
  if (has_diag_usm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->diag_usm(), output);
  }

  // optional bytes Diag_BCM = 10;
  if (has_diag_bcm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->diag_bcm(), output);
  }

  // optional bytes Diag_FEB_CAMERA = 11;
  if (has_diag_feb_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->diag_feb_camera(), output);
  }

  // optional bytes Diag_FEB_RADAR = 12;
  if (has_diag_feb_radar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->diag_feb_radar(), output);
  }

  // optional bytes Diag_DVR = 13;
  if (has_diag_dvr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->diag_dvr(), output);
  }

  // optional bytes Diag_VDC = 14;
  if (has_diag_vdc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->diag_vdc(), output);
  }

  // optional bytes Diag_EPS = 15;
  if (has_diag_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->diag_eps(), output);
  }

  // optional bytes Diag_GW = 16;
  if (has_diag_gw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->diag_gw(), output);
  }

  // optional bytes Diag_TPMS = 17;
  if (has_diag_tpms()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->diag_tpms(), output);
  }

  // optional bytes Diag_METER = 18;
  if (has_diag_meter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->diag_meter(), output);
  }

  // optional bytes Diag_TCU = 19;
  if (has_diag_tcu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->diag_tcu(), output);
  }

  // optional bytes Diag_ACU = 20;
  if (has_diag_acu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->diag_acu(), output);
  }

  // optional bytes Diag_DA = 21;
  if (has_diag_da()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->diag_da(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.RmtDiagRsp)
}

::google::protobuf::uint8* RmtDiagRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.RmtDiagRsp)
  // required .tbox.protocol.RmtDiagRspCode result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // required uint32 serial_number = 2;
  if (has_serial_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serial_number(), target);
  }

  // required uint32 time_stamp = 3;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_stamp(), target);
  }

  // optional bytes Diag_AVM = 4;
  if (has_diag_avm()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->diag_avm(), target);
  }

  // optional bytes Diag_SONAR = 5;
  if (has_diag_sonar()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->diag_sonar(), target);
  }

  // optional bytes Diag_BSW = 6;
  if (has_diag_bsw()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->diag_bsw(), target);
  }

  // optional bytes Diag_ECM = 7;
  if (has_diag_ecm()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->diag_ecm(), target);
  }

  // optional bytes Diag_TCM = 8;
  if (has_diag_tcm()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->diag_tcm(), target);
  }

  // optional bytes Diag_USM = 9;
  if (has_diag_usm()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->diag_usm(), target);
  }

  // optional bytes Diag_BCM = 10;
  if (has_diag_bcm()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->diag_bcm(), target);
  }

  // optional bytes Diag_FEB_CAMERA = 11;
  if (has_diag_feb_camera()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->diag_feb_camera(), target);
  }

  // optional bytes Diag_FEB_RADAR = 12;
  if (has_diag_feb_radar()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->diag_feb_radar(), target);
  }

  // optional bytes Diag_DVR = 13;
  if (has_diag_dvr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->diag_dvr(), target);
  }

  // optional bytes Diag_VDC = 14;
  if (has_diag_vdc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->diag_vdc(), target);
  }

  // optional bytes Diag_EPS = 15;
  if (has_diag_eps()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->diag_eps(), target);
  }

  // optional bytes Diag_GW = 16;
  if (has_diag_gw()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->diag_gw(), target);
  }

  // optional bytes Diag_TPMS = 17;
  if (has_diag_tpms()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->diag_tpms(), target);
  }

  // optional bytes Diag_METER = 18;
  if (has_diag_meter()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->diag_meter(), target);
  }

  // optional bytes Diag_TCU = 19;
  if (has_diag_tcu()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->diag_tcu(), target);
  }

  // optional bytes Diag_ACU = 20;
  if (has_diag_acu()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->diag_acu(), target);
  }

  // optional bytes Diag_DA = 21;
  if (has_diag_da()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->diag_da(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.RmtDiagRsp)
  return target;
}

int RmtDiagRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tbox.protocol.RmtDiagRspCode result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required uint32 serial_number = 2;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial_number());
    }

    // required uint32 time_stamp = 3;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

    // optional bytes Diag_AVM = 4;
    if (has_diag_avm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->diag_avm());
    }

    // optional bytes Diag_SONAR = 5;
    if (has_diag_sonar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->diag_sonar());
    }

    // optional bytes Diag_BSW = 6;
    if (has_diag_bsw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->diag_bsw());
    }

    // optional bytes Diag_ECM = 7;
    if (has_diag_ecm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->diag_ecm());
    }

    // optional bytes Diag_TCM = 8;
    if (has_diag_tcm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->diag_tcm());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes Diag_USM = 9;
    if (has_diag_usm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->diag_usm());
    }

    // optional bytes Diag_BCM = 10;
    if (has_diag_bcm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->diag_bcm());
    }

    // optional bytes Diag_FEB_CAMERA = 11;
    if (has_diag_feb_camera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->diag_feb_camera());
    }

    // optional bytes Diag_FEB_RADAR = 12;
    if (has_diag_feb_radar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->diag_feb_radar());
    }

    // optional bytes Diag_DVR = 13;
    if (has_diag_dvr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->diag_dvr());
    }

    // optional bytes Diag_VDC = 14;
    if (has_diag_vdc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->diag_vdc());
    }

    // optional bytes Diag_EPS = 15;
    if (has_diag_eps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->diag_eps());
    }

    // optional bytes Diag_GW = 16;
    if (has_diag_gw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->diag_gw());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes Diag_TPMS = 17;
    if (has_diag_tpms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->diag_tpms());
    }

    // optional bytes Diag_METER = 18;
    if (has_diag_meter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->diag_meter());
    }

    // optional bytes Diag_TCU = 19;
    if (has_diag_tcu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->diag_tcu());
    }

    // optional bytes Diag_ACU = 20;
    if (has_diag_acu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->diag_acu());
    }

    // optional bytes Diag_DA = 21;
    if (has_diag_da()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->diag_da());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RmtDiagRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RmtDiagRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RmtDiagRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RmtDiagRsp::MergeFrom(const RmtDiagRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_serial_number()) {
      set_serial_number(from.serial_number());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_diag_avm()) {
      set_diag_avm(from.diag_avm());
    }
    if (from.has_diag_sonar()) {
      set_diag_sonar(from.diag_sonar());
    }
    if (from.has_diag_bsw()) {
      set_diag_bsw(from.diag_bsw());
    }
    if (from.has_diag_ecm()) {
      set_diag_ecm(from.diag_ecm());
    }
    if (from.has_diag_tcm()) {
      set_diag_tcm(from.diag_tcm());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_diag_usm()) {
      set_diag_usm(from.diag_usm());
    }
    if (from.has_diag_bcm()) {
      set_diag_bcm(from.diag_bcm());
    }
    if (from.has_diag_feb_camera()) {
      set_diag_feb_camera(from.diag_feb_camera());
    }
    if (from.has_diag_feb_radar()) {
      set_diag_feb_radar(from.diag_feb_radar());
    }
    if (from.has_diag_dvr()) {
      set_diag_dvr(from.diag_dvr());
    }
    if (from.has_diag_vdc()) {
      set_diag_vdc(from.diag_vdc());
    }
    if (from.has_diag_eps()) {
      set_diag_eps(from.diag_eps());
    }
    if (from.has_diag_gw()) {
      set_diag_gw(from.diag_gw());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_diag_tpms()) {
      set_diag_tpms(from.diag_tpms());
    }
    if (from.has_diag_meter()) {
      set_diag_meter(from.diag_meter());
    }
    if (from.has_diag_tcu()) {
      set_diag_tcu(from.diag_tcu());
    }
    if (from.has_diag_acu()) {
      set_diag_acu(from.diag_acu());
    }
    if (from.has_diag_da()) {
      set_diag_da(from.diag_da());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RmtDiagRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RmtDiagRsp::CopyFrom(const RmtDiagRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RmtDiagRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RmtDiagRsp::Swap(RmtDiagRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(serial_number_, other->serial_number_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(diag_avm_, other->diag_avm_);
    std::swap(diag_sonar_, other->diag_sonar_);
    std::swap(diag_bsw_, other->diag_bsw_);
    std::swap(diag_ecm_, other->diag_ecm_);
    std::swap(diag_tcm_, other->diag_tcm_);
    std::swap(diag_usm_, other->diag_usm_);
    std::swap(diag_bcm_, other->diag_bcm_);
    std::swap(diag_feb_camera_, other->diag_feb_camera_);
    std::swap(diag_feb_radar_, other->diag_feb_radar_);
    std::swap(diag_dvr_, other->diag_dvr_);
    std::swap(diag_vdc_, other->diag_vdc_);
    std::swap(diag_eps_, other->diag_eps_);
    std::swap(diag_gw_, other->diag_gw_);
    std::swap(diag_tpms_, other->diag_tpms_);
    std::swap(diag_meter_, other->diag_meter_);
    std::swap(diag_tcu_, other->diag_tcu_);
    std::swap(diag_acu_, other->diag_acu_);
    std::swap(diag_da_, other->diag_da_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RmtDiagRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RmtDiagRsp_descriptor_;
  metadata.reflection = RmtDiagRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RmtDiagReq::kSerialNumberFieldNumber;
const int RmtDiagReq::kTimeStampFieldNumber;
#endif  // !_MSC_VER

RmtDiagReq::RmtDiagReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.RmtDiagReq)
}

void RmtDiagReq::InitAsDefaultInstance() {
}

RmtDiagReq::RmtDiagReq(const RmtDiagReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.RmtDiagReq)
}

void RmtDiagReq::SharedCtor() {
  _cached_size_ = 0;
  serial_number_ = 0u;
  time_stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RmtDiagReq::~RmtDiagReq() {
  // @@protoc_insertion_point(destructor:tbox.protocol.RmtDiagReq)
  SharedDtor();
}

void RmtDiagReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RmtDiagReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RmtDiagReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RmtDiagReq_descriptor_;
}

const RmtDiagReq& RmtDiagReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

RmtDiagReq* RmtDiagReq::default_instance_ = NULL;

RmtDiagReq* RmtDiagReq::New() const {
  return new RmtDiagReq;
}

void RmtDiagReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RmtDiagReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(serial_number_, time_stamp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RmtDiagReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.RmtDiagReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_number_)));
          set_has_serial_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 2;
      case 2: {
        if (tag == 16) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.RmtDiagReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.RmtDiagReq)
  return false;
#undef DO_
}

void RmtDiagReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.RmtDiagReq)
  // required uint32 serial_number = 1;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial_number(), output);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.RmtDiagReq)
}

::google::protobuf::uint8* RmtDiagReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.RmtDiagReq)
  // required uint32 serial_number = 1;
  if (has_serial_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial_number(), target);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.RmtDiagReq)
  return target;
}

int RmtDiagReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial_number());
    }

    // required uint32 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RmtDiagReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RmtDiagReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RmtDiagReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RmtDiagReq::MergeFrom(const RmtDiagReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial_number()) {
      set_serial_number(from.serial_number());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RmtDiagReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RmtDiagReq::CopyFrom(const RmtDiagReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RmtDiagReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RmtDiagReq::Swap(RmtDiagReq* other) {
  if (other != this) {
    std::swap(serial_number_, other->serial_number_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RmtDiagReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RmtDiagReq_descriptor_;
  metadata.reflection = RmtDiagReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fault_List_info::kFaultListOneFieldNumber;
#endif  // !_MSC_VER

Fault_List_info::Fault_List_info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.Fault_List_info)
}

void Fault_List_info::InitAsDefaultInstance() {
}

Fault_List_info::Fault_List_info(const Fault_List_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.Fault_List_info)
}

void Fault_List_info::SharedCtor() {
  _cached_size_ = 0;
  fault_list_one_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fault_List_info::~Fault_List_info() {
  // @@protoc_insertion_point(destructor:tbox.protocol.Fault_List_info)
  SharedDtor();
}

void Fault_List_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fault_List_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fault_List_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fault_List_info_descriptor_;
}

const Fault_List_info& Fault_List_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

Fault_List_info* Fault_List_info::default_instance_ = NULL;

Fault_List_info* Fault_List_info::New() const {
  return new Fault_List_info;
}

void Fault_List_info::Clear() {
  fault_list_one_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fault_List_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.Fault_List_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Fault_List_one = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fault_list_one_)));
          set_has_fault_list_one();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.Fault_List_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.Fault_List_info)
  return false;
#undef DO_
}

void Fault_List_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.Fault_List_info)
  // optional uint32 Fault_List_one = 1;
  if (has_fault_list_one()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fault_list_one(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.Fault_List_info)
}

::google::protobuf::uint8* Fault_List_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.Fault_List_info)
  // optional uint32 Fault_List_one = 1;
  if (has_fault_list_one()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fault_list_one(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.Fault_List_info)
  return target;
}

int Fault_List_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Fault_List_one = 1;
    if (has_fault_list_one()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fault_list_one());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fault_List_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fault_List_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fault_List_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fault_List_info::MergeFrom(const Fault_List_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fault_list_one()) {
      set_fault_list_one(from.fault_list_one());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fault_List_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fault_List_info::CopyFrom(const Fault_List_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fault_List_info::IsInitialized() const {

  return true;
}

void Fault_List_info::Swap(Fault_List_info* other) {
  if (other != this) {
    std::swap(fault_list_one_, other->fault_list_one_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fault_List_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fault_List_info_descriptor_;
  metadata.reflection = Fault_List_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FourGExtendCmdRsp::kSerialNumberFieldNumber;
const int FourGExtendCmdRsp::kTimeStampFieldNumber;
const int FourGExtendCmdRsp::kCommanderIdFieldNumber;
const int FourGExtendCmdRsp::kResultInfoFieldNumber;
#endif  // !_MSC_VER

FourGExtendCmdRsp::FourGExtendCmdRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.FourGExtendCmdRsp)
}

void FourGExtendCmdRsp::InitAsDefaultInstance() {
}

FourGExtendCmdRsp::FourGExtendCmdRsp(const FourGExtendCmdRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.FourGExtendCmdRsp)
}

void FourGExtendCmdRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serial_number_ = 0u;
  time_stamp_ = 0u;
  commander_id_ = 0u;
  result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FourGExtendCmdRsp::~FourGExtendCmdRsp() {
  // @@protoc_insertion_point(destructor:tbox.protocol.FourGExtendCmdRsp)
  SharedDtor();
}

void FourGExtendCmdRsp::SharedDtor() {
  if (result_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_info_;
  }
  if (this != default_instance_) {
  }
}

void FourGExtendCmdRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FourGExtendCmdRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FourGExtendCmdRsp_descriptor_;
}

const FourGExtendCmdRsp& FourGExtendCmdRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

FourGExtendCmdRsp* FourGExtendCmdRsp::default_instance_ = NULL;

FourGExtendCmdRsp* FourGExtendCmdRsp::New() const {
  return new FourGExtendCmdRsp;
}

void FourGExtendCmdRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FourGExtendCmdRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(serial_number_, time_stamp_);
    commander_id_ = 0u;
    if (has_result_info()) {
      if (result_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_info_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FourGExtendCmdRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.FourGExtendCmdRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_number_)));
          set_has_serial_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 2;
      case 2: {
        if (tag == 16) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_commander_id;
        break;
      }

      // required uint32 commander_id = 3;
      case 3: {
        if (tag == 24) {
         parse_commander_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commander_id_)));
          set_has_commander_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_result_info;
        break;
      }

      // required bytes result_info = 4;
      case 4: {
        if (tag == 34) {
         parse_result_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.FourGExtendCmdRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.FourGExtendCmdRsp)
  return false;
#undef DO_
}

void FourGExtendCmdRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.FourGExtendCmdRsp)
  // required uint32 serial_number = 1;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial_number(), output);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_stamp(), output);
  }

  // required uint32 commander_id = 3;
  if (has_commander_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->commander_id(), output);
  }

  // required bytes result_info = 4;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->result_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.FourGExtendCmdRsp)
}

::google::protobuf::uint8* FourGExtendCmdRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.FourGExtendCmdRsp)
  // required uint32 serial_number = 1;
  if (has_serial_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial_number(), target);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_stamp(), target);
  }

  // required uint32 commander_id = 3;
  if (has_commander_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->commander_id(), target);
  }

  // required bytes result_info = 4;
  if (has_result_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->result_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.FourGExtendCmdRsp)
  return target;
}

int FourGExtendCmdRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial_number());
    }

    // required uint32 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

    // required uint32 commander_id = 3;
    if (has_commander_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commander_id());
    }

    // required bytes result_info = 4;
    if (has_result_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FourGExtendCmdRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FourGExtendCmdRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FourGExtendCmdRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FourGExtendCmdRsp::MergeFrom(const FourGExtendCmdRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial_number()) {
      set_serial_number(from.serial_number());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_commander_id()) {
      set_commander_id(from.commander_id());
    }
    if (from.has_result_info()) {
      set_result_info(from.result_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FourGExtendCmdRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FourGExtendCmdRsp::CopyFrom(const FourGExtendCmdRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FourGExtendCmdRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void FourGExtendCmdRsp::Swap(FourGExtendCmdRsp* other) {
  if (other != this) {
    std::swap(serial_number_, other->serial_number_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(commander_id_, other->commander_id_);
    std::swap(result_info_, other->result_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FourGExtendCmdRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FourGExtendCmdRsp_descriptor_;
  metadata.reflection = FourGExtendCmdRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FourGExtendCmdReq::kSerialNumberFieldNumber;
const int FourGExtendCmdReq::kTimeStampFieldNumber;
const int FourGExtendCmdReq::kCommanderIdFieldNumber;
const int FourGExtendCmdReq::kResultInfoFieldNumber;
const int FourGExtendCmdReq::kJaegercontextFieldNumber;
#endif  // !_MSC_VER

FourGExtendCmdReq::FourGExtendCmdReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.FourGExtendCmdReq)
}

void FourGExtendCmdReq::InitAsDefaultInstance() {
}

FourGExtendCmdReq::FourGExtendCmdReq(const FourGExtendCmdReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.FourGExtendCmdReq)
}

void FourGExtendCmdReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serial_number_ = 0u;
  time_stamp_ = 0u;
  commander_id_ = 0u;
  result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jaegercontext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FourGExtendCmdReq::~FourGExtendCmdReq() {
  // @@protoc_insertion_point(destructor:tbox.protocol.FourGExtendCmdReq)
  SharedDtor();
}

void FourGExtendCmdReq::SharedDtor() {
  if (result_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_info_;
  }
  if (jaegercontext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jaegercontext_;
  }
  if (this != default_instance_) {
  }
}

void FourGExtendCmdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FourGExtendCmdReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FourGExtendCmdReq_descriptor_;
}

const FourGExtendCmdReq& FourGExtendCmdReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

FourGExtendCmdReq* FourGExtendCmdReq::default_instance_ = NULL;

FourGExtendCmdReq* FourGExtendCmdReq::New() const {
  return new FourGExtendCmdReq;
}

void FourGExtendCmdReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FourGExtendCmdReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(serial_number_, time_stamp_);
    commander_id_ = 0u;
    if (has_result_info()) {
      if (result_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_info_->clear();
      }
    }
    if (has_jaegercontext()) {
      if (jaegercontext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        jaegercontext_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FourGExtendCmdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.FourGExtendCmdReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_number_)));
          set_has_serial_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 2;
      case 2: {
        if (tag == 16) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_commander_id;
        break;
      }

      // required uint32 commander_id = 3;
      case 3: {
        if (tag == 24) {
         parse_commander_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commander_id_)));
          set_has_commander_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_result_info;
        break;
      }

      // required bytes result_info = 4;
      case 4: {
        if (tag == 34) {
         parse_result_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_jaegercontext;
        break;
      }

      // optional string jaegercontext = 5;
      case 5: {
        if (tag == 42) {
         parse_jaegercontext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jaegercontext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->jaegercontext().data(), this->jaegercontext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jaegercontext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.FourGExtendCmdReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.FourGExtendCmdReq)
  return false;
#undef DO_
}

void FourGExtendCmdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.FourGExtendCmdReq)
  // required uint32 serial_number = 1;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial_number(), output);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_stamp(), output);
  }

  // required uint32 commander_id = 3;
  if (has_commander_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->commander_id(), output);
  }

  // required bytes result_info = 4;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->result_info(), output);
  }

  // optional string jaegercontext = 5;
  if (has_jaegercontext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jaegercontext().data(), this->jaegercontext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jaegercontext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->jaegercontext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.FourGExtendCmdReq)
}

::google::protobuf::uint8* FourGExtendCmdReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.FourGExtendCmdReq)
  // required uint32 serial_number = 1;
  if (has_serial_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial_number(), target);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_stamp(), target);
  }

  // required uint32 commander_id = 3;
  if (has_commander_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->commander_id(), target);
  }

  // required bytes result_info = 4;
  if (has_result_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->result_info(), target);
  }

  // optional string jaegercontext = 5;
  if (has_jaegercontext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jaegercontext().data(), this->jaegercontext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jaegercontext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->jaegercontext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.FourGExtendCmdReq)
  return target;
}

int FourGExtendCmdReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial_number());
    }

    // required uint32 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

    // required uint32 commander_id = 3;
    if (has_commander_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commander_id());
    }

    // required bytes result_info = 4;
    if (has_result_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_info());
    }

    // optional string jaegercontext = 5;
    if (has_jaegercontext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jaegercontext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FourGExtendCmdReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FourGExtendCmdReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FourGExtendCmdReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FourGExtendCmdReq::MergeFrom(const FourGExtendCmdReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial_number()) {
      set_serial_number(from.serial_number());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_commander_id()) {
      set_commander_id(from.commander_id());
    }
    if (from.has_result_info()) {
      set_result_info(from.result_info());
    }
    if (from.has_jaegercontext()) {
      set_jaegercontext(from.jaegercontext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FourGExtendCmdReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FourGExtendCmdReq::CopyFrom(const FourGExtendCmdReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FourGExtendCmdReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void FourGExtendCmdReq::Swap(FourGExtendCmdReq* other) {
  if (other != this) {
    std::swap(serial_number_, other->serial_number_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(commander_id_, other->commander_id_);
    std::swap(result_info_, other->result_info_);
    std::swap(jaegercontext_, other->jaegercontext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FourGExtendCmdReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FourGExtendCmdReq_descriptor_;
  metadata.reflection = FourGExtendCmdReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCUExtendCmdReq::kSerialNumberFieldNumber;
const int TCUExtendCmdReq::kTimeStampFieldNumber;
const int TCUExtendCmdReq::kCommanderIdFieldNumber;
const int TCUExtendCmdReq::kResultInfoFieldNumber;
#endif  // !_MSC_VER

TCUExtendCmdReq::TCUExtendCmdReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.TCUExtendCmdReq)
}

void TCUExtendCmdReq::InitAsDefaultInstance() {
}

TCUExtendCmdReq::TCUExtendCmdReq(const TCUExtendCmdReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.TCUExtendCmdReq)
}

void TCUExtendCmdReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serial_number_ = 0u;
  time_stamp_ = 0u;
  commander_id_ = 0u;
  result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCUExtendCmdReq::~TCUExtendCmdReq() {
  // @@protoc_insertion_point(destructor:tbox.protocol.TCUExtendCmdReq)
  SharedDtor();
}

void TCUExtendCmdReq::SharedDtor() {
  if (result_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_info_;
  }
  if (this != default_instance_) {
  }
}

void TCUExtendCmdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCUExtendCmdReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCUExtendCmdReq_descriptor_;
}

const TCUExtendCmdReq& TCUExtendCmdReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

TCUExtendCmdReq* TCUExtendCmdReq::default_instance_ = NULL;

TCUExtendCmdReq* TCUExtendCmdReq::New() const {
  return new TCUExtendCmdReq;
}

void TCUExtendCmdReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCUExtendCmdReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(serial_number_, time_stamp_);
    commander_id_ = 0u;
    if (has_result_info()) {
      if (result_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_info_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCUExtendCmdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.TCUExtendCmdReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_number_)));
          set_has_serial_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 2;
      case 2: {
        if (tag == 16) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_commander_id;
        break;
      }

      // required uint32 commander_id = 3;
      case 3: {
        if (tag == 24) {
         parse_commander_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commander_id_)));
          set_has_commander_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_result_info;
        break;
      }

      // required bytes result_info = 4;
      case 4: {
        if (tag == 34) {
         parse_result_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.TCUExtendCmdReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.TCUExtendCmdReq)
  return false;
#undef DO_
}

void TCUExtendCmdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.TCUExtendCmdReq)
  // required uint32 serial_number = 1;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial_number(), output);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_stamp(), output);
  }

  // required uint32 commander_id = 3;
  if (has_commander_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->commander_id(), output);
  }

  // required bytes result_info = 4;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->result_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.TCUExtendCmdReq)
}

::google::protobuf::uint8* TCUExtendCmdReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.TCUExtendCmdReq)
  // required uint32 serial_number = 1;
  if (has_serial_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial_number(), target);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_stamp(), target);
  }

  // required uint32 commander_id = 3;
  if (has_commander_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->commander_id(), target);
  }

  // required bytes result_info = 4;
  if (has_result_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->result_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.TCUExtendCmdReq)
  return target;
}

int TCUExtendCmdReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial_number());
    }

    // required uint32 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

    // required uint32 commander_id = 3;
    if (has_commander_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commander_id());
    }

    // required bytes result_info = 4;
    if (has_result_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCUExtendCmdReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCUExtendCmdReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCUExtendCmdReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCUExtendCmdReq::MergeFrom(const TCUExtendCmdReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial_number()) {
      set_serial_number(from.serial_number());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_commander_id()) {
      set_commander_id(from.commander_id());
    }
    if (from.has_result_info()) {
      set_result_info(from.result_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCUExtendCmdReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCUExtendCmdReq::CopyFrom(const TCUExtendCmdReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCUExtendCmdReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TCUExtendCmdReq::Swap(TCUExtendCmdReq* other) {
  if (other != this) {
    std::swap(serial_number_, other->serial_number_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(commander_id_, other->commander_id_);
    std::swap(result_info_, other->result_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCUExtendCmdReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCUExtendCmdReq_descriptor_;
  metadata.reflection = TCUExtendCmdReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCUExtendCmdRsp::kSerialNumberFieldNumber;
const int TCUExtendCmdRsp::kTimeStampFieldNumber;
const int TCUExtendCmdRsp::kCommanderIdFieldNumber;
const int TCUExtendCmdRsp::kResultInfoFieldNumber;
#endif  // !_MSC_VER

TCUExtendCmdRsp::TCUExtendCmdRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.TCUExtendCmdRsp)
}

void TCUExtendCmdRsp::InitAsDefaultInstance() {
}

TCUExtendCmdRsp::TCUExtendCmdRsp(const TCUExtendCmdRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.TCUExtendCmdRsp)
}

void TCUExtendCmdRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serial_number_ = 0u;
  time_stamp_ = 0u;
  commander_id_ = 0u;
  result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCUExtendCmdRsp::~TCUExtendCmdRsp() {
  // @@protoc_insertion_point(destructor:tbox.protocol.TCUExtendCmdRsp)
  SharedDtor();
}

void TCUExtendCmdRsp::SharedDtor() {
  if (result_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_info_;
  }
  if (this != default_instance_) {
  }
}

void TCUExtendCmdRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCUExtendCmdRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCUExtendCmdRsp_descriptor_;
}

const TCUExtendCmdRsp& TCUExtendCmdRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

TCUExtendCmdRsp* TCUExtendCmdRsp::default_instance_ = NULL;

TCUExtendCmdRsp* TCUExtendCmdRsp::New() const {
  return new TCUExtendCmdRsp;
}

void TCUExtendCmdRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCUExtendCmdRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(serial_number_, time_stamp_);
    commander_id_ = 0u;
    if (has_result_info()) {
      if (result_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_info_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCUExtendCmdRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.TCUExtendCmdRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_number_)));
          set_has_serial_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 2;
      case 2: {
        if (tag == 16) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_commander_id;
        break;
      }

      // required uint32 commander_id = 3;
      case 3: {
        if (tag == 24) {
         parse_commander_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commander_id_)));
          set_has_commander_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_result_info;
        break;
      }

      // required bytes result_info = 4;
      case 4: {
        if (tag == 34) {
         parse_result_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.TCUExtendCmdRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.TCUExtendCmdRsp)
  return false;
#undef DO_
}

void TCUExtendCmdRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.TCUExtendCmdRsp)
  // required uint32 serial_number = 1;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial_number(), output);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_stamp(), output);
  }

  // required uint32 commander_id = 3;
  if (has_commander_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->commander_id(), output);
  }

  // required bytes result_info = 4;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->result_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.TCUExtendCmdRsp)
}

::google::protobuf::uint8* TCUExtendCmdRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.TCUExtendCmdRsp)
  // required uint32 serial_number = 1;
  if (has_serial_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial_number(), target);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_stamp(), target);
  }

  // required uint32 commander_id = 3;
  if (has_commander_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->commander_id(), target);
  }

  // required bytes result_info = 4;
  if (has_result_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->result_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.TCUExtendCmdRsp)
  return target;
}

int TCUExtendCmdRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial_number());
    }

    // required uint32 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

    // required uint32 commander_id = 3;
    if (has_commander_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commander_id());
    }

    // required bytes result_info = 4;
    if (has_result_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCUExtendCmdRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCUExtendCmdRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCUExtendCmdRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCUExtendCmdRsp::MergeFrom(const TCUExtendCmdRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial_number()) {
      set_serial_number(from.serial_number());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_commander_id()) {
      set_commander_id(from.commander_id());
    }
    if (from.has_result_info()) {
      set_result_info(from.result_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCUExtendCmdRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCUExtendCmdRsp::CopyFrom(const TCUExtendCmdRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCUExtendCmdRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TCUExtendCmdRsp::Swap(TCUExtendCmdRsp* other) {
  if (other != this) {
    std::swap(serial_number_, other->serial_number_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(commander_id_, other->commander_id_);
    std::swap(result_info_, other->result_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCUExtendCmdRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCUExtendCmdRsp_descriptor_;
  metadata.reflection = TCUExtendCmdRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Net4GSwitchStatusReq::kNet4GStatusFieldNumber;
const int Net4GSwitchStatusReq::kTcuDeviceSnFieldNumber;
const int Net4GSwitchStatusReq::kTimeStampFieldNumber;
#endif  // !_MSC_VER

Net4GSwitchStatusReq::Net4GSwitchStatusReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.Net4GSwitchStatusReq)
}

void Net4GSwitchStatusReq::InitAsDefaultInstance() {
}

Net4GSwitchStatusReq::Net4GSwitchStatusReq(const Net4GSwitchStatusReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.Net4GSwitchStatusReq)
}

void Net4GSwitchStatusReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  net_4g_status_ = 0u;
  tcu_device_sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Net4GSwitchStatusReq::~Net4GSwitchStatusReq() {
  // @@protoc_insertion_point(destructor:tbox.protocol.Net4GSwitchStatusReq)
  SharedDtor();
}

void Net4GSwitchStatusReq::SharedDtor() {
  if (tcu_device_sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tcu_device_sn_;
  }
  if (this != default_instance_) {
  }
}

void Net4GSwitchStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Net4GSwitchStatusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Net4GSwitchStatusReq_descriptor_;
}

const Net4GSwitchStatusReq& Net4GSwitchStatusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

Net4GSwitchStatusReq* Net4GSwitchStatusReq::default_instance_ = NULL;

Net4GSwitchStatusReq* Net4GSwitchStatusReq::New() const {
  return new Net4GSwitchStatusReq;
}

void Net4GSwitchStatusReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Net4GSwitchStatusReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(net_4g_status_, time_stamp_);
    if (has_tcu_device_sn()) {
      if (tcu_device_sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tcu_device_sn_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Net4GSwitchStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.Net4GSwitchStatusReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 net_4g_status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_4g_status_)));
          set_has_net_4g_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tcu_device_sn;
        break;
      }

      // optional string tcu_device_sn = 2;
      case 2: {
        if (tag == 18) {
         parse_tcu_device_sn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tcu_device_sn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tcu_device_sn().data(), this->tcu_device_sn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tcu_device_sn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_stamp;
        break;
      }

      // optional uint32 time_stamp = 3;
      case 3: {
        if (tag == 24) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.Net4GSwitchStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.Net4GSwitchStatusReq)
  return false;
#undef DO_
}

void Net4GSwitchStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.Net4GSwitchStatusReq)
  // optional uint32 net_4g_status = 1;
  if (has_net_4g_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->net_4g_status(), output);
  }

  // optional string tcu_device_sn = 2;
  if (has_tcu_device_sn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcu_device_sn().data(), this->tcu_device_sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tcu_device_sn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tcu_device_sn(), output);
  }

  // optional uint32 time_stamp = 3;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.Net4GSwitchStatusReq)
}

::google::protobuf::uint8* Net4GSwitchStatusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.Net4GSwitchStatusReq)
  // optional uint32 net_4g_status = 1;
  if (has_net_4g_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->net_4g_status(), target);
  }

  // optional string tcu_device_sn = 2;
  if (has_tcu_device_sn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcu_device_sn().data(), this->tcu_device_sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tcu_device_sn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tcu_device_sn(), target);
  }

  // optional uint32 time_stamp = 3;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.Net4GSwitchStatusReq)
  return target;
}

int Net4GSwitchStatusReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 net_4g_status = 1;
    if (has_net_4g_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_4g_status());
    }

    // optional string tcu_device_sn = 2;
    if (has_tcu_device_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tcu_device_sn());
    }

    // optional uint32 time_stamp = 3;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Net4GSwitchStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Net4GSwitchStatusReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Net4GSwitchStatusReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Net4GSwitchStatusReq::MergeFrom(const Net4GSwitchStatusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_net_4g_status()) {
      set_net_4g_status(from.net_4g_status());
    }
    if (from.has_tcu_device_sn()) {
      set_tcu_device_sn(from.tcu_device_sn());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Net4GSwitchStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Net4GSwitchStatusReq::CopyFrom(const Net4GSwitchStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Net4GSwitchStatusReq::IsInitialized() const {

  return true;
}

void Net4GSwitchStatusReq::Swap(Net4GSwitchStatusReq* other) {
  if (other != this) {
    std::swap(net_4g_status_, other->net_4g_status_);
    std::swap(tcu_device_sn_, other->tcu_device_sn_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Net4GSwitchStatusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Net4GSwitchStatusReq_descriptor_;
  metadata.reflection = Net4GSwitchStatusReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Net4GSwitchStatusRsp::kNet4GStatusFieldNumber;
#endif  // !_MSC_VER

Net4GSwitchStatusRsp::Net4GSwitchStatusRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.Net4GSwitchStatusRsp)
}

void Net4GSwitchStatusRsp::InitAsDefaultInstance() {
}

Net4GSwitchStatusRsp::Net4GSwitchStatusRsp(const Net4GSwitchStatusRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.Net4GSwitchStatusRsp)
}

void Net4GSwitchStatusRsp::SharedCtor() {
  _cached_size_ = 0;
  net_4g_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Net4GSwitchStatusRsp::~Net4GSwitchStatusRsp() {
  // @@protoc_insertion_point(destructor:tbox.protocol.Net4GSwitchStatusRsp)
  SharedDtor();
}

void Net4GSwitchStatusRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Net4GSwitchStatusRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Net4GSwitchStatusRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Net4GSwitchStatusRsp_descriptor_;
}

const Net4GSwitchStatusRsp& Net4GSwitchStatusRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

Net4GSwitchStatusRsp* Net4GSwitchStatusRsp::default_instance_ = NULL;

Net4GSwitchStatusRsp* Net4GSwitchStatusRsp::New() const {
  return new Net4GSwitchStatusRsp;
}

void Net4GSwitchStatusRsp::Clear() {
  net_4g_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Net4GSwitchStatusRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.Net4GSwitchStatusRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 net_4g_status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_4g_status_)));
          set_has_net_4g_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.Net4GSwitchStatusRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.Net4GSwitchStatusRsp)
  return false;
#undef DO_
}

void Net4GSwitchStatusRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.Net4GSwitchStatusRsp)
  // optional uint32 net_4g_status = 1;
  if (has_net_4g_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->net_4g_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.Net4GSwitchStatusRsp)
}

::google::protobuf::uint8* Net4GSwitchStatusRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.Net4GSwitchStatusRsp)
  // optional uint32 net_4g_status = 1;
  if (has_net_4g_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->net_4g_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.Net4GSwitchStatusRsp)
  return target;
}

int Net4GSwitchStatusRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 net_4g_status = 1;
    if (has_net_4g_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_4g_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Net4GSwitchStatusRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Net4GSwitchStatusRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Net4GSwitchStatusRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Net4GSwitchStatusRsp::MergeFrom(const Net4GSwitchStatusRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_net_4g_status()) {
      set_net_4g_status(from.net_4g_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Net4GSwitchStatusRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Net4GSwitchStatusRsp::CopyFrom(const Net4GSwitchStatusRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Net4GSwitchStatusRsp::IsInitialized() const {

  return true;
}

void Net4GSwitchStatusRsp::Swap(Net4GSwitchStatusRsp* other) {
  if (other != this) {
    std::swap(net_4g_status_, other->net_4g_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Net4GSwitchStatusRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Net4GSwitchStatusRsp_descriptor_;
  metadata.reflection = Net4GSwitchStatusRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int netGpsSwitchStatusReq::kGpsStatusFieldNumber;
const int netGpsSwitchStatusReq::kTcuDeviceSnFieldNumber;
const int netGpsSwitchStatusReq::kTimeStampFieldNumber;
#endif  // !_MSC_VER

netGpsSwitchStatusReq::netGpsSwitchStatusReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.netGpsSwitchStatusReq)
}

void netGpsSwitchStatusReq::InitAsDefaultInstance() {
}

netGpsSwitchStatusReq::netGpsSwitchStatusReq(const netGpsSwitchStatusReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.netGpsSwitchStatusReq)
}

void netGpsSwitchStatusReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gps_status_ = 0u;
  tcu_device_sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

netGpsSwitchStatusReq::~netGpsSwitchStatusReq() {
  // @@protoc_insertion_point(destructor:tbox.protocol.netGpsSwitchStatusReq)
  SharedDtor();
}

void netGpsSwitchStatusReq::SharedDtor() {
  if (tcu_device_sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tcu_device_sn_;
  }
  if (this != default_instance_) {
  }
}

void netGpsSwitchStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* netGpsSwitchStatusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return netGpsSwitchStatusReq_descriptor_;
}

const netGpsSwitchStatusReq& netGpsSwitchStatusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

netGpsSwitchStatusReq* netGpsSwitchStatusReq::default_instance_ = NULL;

netGpsSwitchStatusReq* netGpsSwitchStatusReq::New() const {
  return new netGpsSwitchStatusReq;
}

void netGpsSwitchStatusReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<netGpsSwitchStatusReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gps_status_, time_stamp_);
    if (has_tcu_device_sn()) {
      if (tcu_device_sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tcu_device_sn_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool netGpsSwitchStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.netGpsSwitchStatusReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gps_status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gps_status_)));
          set_has_gps_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tcu_device_sn;
        break;
      }

      // optional string tcu_device_sn = 2;
      case 2: {
        if (tag == 18) {
         parse_tcu_device_sn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tcu_device_sn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tcu_device_sn().data(), this->tcu_device_sn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tcu_device_sn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_stamp;
        break;
      }

      // optional uint32 time_stamp = 3;
      case 3: {
        if (tag == 24) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.netGpsSwitchStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.netGpsSwitchStatusReq)
  return false;
#undef DO_
}

void netGpsSwitchStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.netGpsSwitchStatusReq)
  // optional uint32 gps_status = 1;
  if (has_gps_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gps_status(), output);
  }

  // optional string tcu_device_sn = 2;
  if (has_tcu_device_sn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcu_device_sn().data(), this->tcu_device_sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tcu_device_sn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tcu_device_sn(), output);
  }

  // optional uint32 time_stamp = 3;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.netGpsSwitchStatusReq)
}

::google::protobuf::uint8* netGpsSwitchStatusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.netGpsSwitchStatusReq)
  // optional uint32 gps_status = 1;
  if (has_gps_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gps_status(), target);
  }

  // optional string tcu_device_sn = 2;
  if (has_tcu_device_sn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tcu_device_sn().data(), this->tcu_device_sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tcu_device_sn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tcu_device_sn(), target);
  }

  // optional uint32 time_stamp = 3;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.netGpsSwitchStatusReq)
  return target;
}

int netGpsSwitchStatusReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gps_status = 1;
    if (has_gps_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gps_status());
    }

    // optional string tcu_device_sn = 2;
    if (has_tcu_device_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tcu_device_sn());
    }

    // optional uint32 time_stamp = 3;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void netGpsSwitchStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const netGpsSwitchStatusReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const netGpsSwitchStatusReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void netGpsSwitchStatusReq::MergeFrom(const netGpsSwitchStatusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gps_status()) {
      set_gps_status(from.gps_status());
    }
    if (from.has_tcu_device_sn()) {
      set_tcu_device_sn(from.tcu_device_sn());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void netGpsSwitchStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void netGpsSwitchStatusReq::CopyFrom(const netGpsSwitchStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool netGpsSwitchStatusReq::IsInitialized() const {

  return true;
}

void netGpsSwitchStatusReq::Swap(netGpsSwitchStatusReq* other) {
  if (other != this) {
    std::swap(gps_status_, other->gps_status_);
    std::swap(tcu_device_sn_, other->tcu_device_sn_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata netGpsSwitchStatusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = netGpsSwitchStatusReq_descriptor_;
  metadata.reflection = netGpsSwitchStatusReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int netGpsSwitchStatusRsp::kGpsStatusFieldNumber;
#endif  // !_MSC_VER

netGpsSwitchStatusRsp::netGpsSwitchStatusRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tbox.protocol.netGpsSwitchStatusRsp)
}

void netGpsSwitchStatusRsp::InitAsDefaultInstance() {
}

netGpsSwitchStatusRsp::netGpsSwitchStatusRsp(const netGpsSwitchStatusRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tbox.protocol.netGpsSwitchStatusRsp)
}

void netGpsSwitchStatusRsp::SharedCtor() {
  _cached_size_ = 0;
  gps_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

netGpsSwitchStatusRsp::~netGpsSwitchStatusRsp() {
  // @@protoc_insertion_point(destructor:tbox.protocol.netGpsSwitchStatusRsp)
  SharedDtor();
}

void netGpsSwitchStatusRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void netGpsSwitchStatusRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* netGpsSwitchStatusRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return netGpsSwitchStatusRsp_descriptor_;
}

const netGpsSwitchStatusRsp& netGpsSwitchStatusRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  return *default_instance_;
}

netGpsSwitchStatusRsp* netGpsSwitchStatusRsp::default_instance_ = NULL;

netGpsSwitchStatusRsp* netGpsSwitchStatusRsp::New() const {
  return new netGpsSwitchStatusRsp;
}

void netGpsSwitchStatusRsp::Clear() {
  gps_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool netGpsSwitchStatusRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tbox.protocol.netGpsSwitchStatusRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gps_status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gps_status_)));
          set_has_gps_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tbox.protocol.netGpsSwitchStatusRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tbox.protocol.netGpsSwitchStatusRsp)
  return false;
#undef DO_
}

void netGpsSwitchStatusRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tbox.protocol.netGpsSwitchStatusRsp)
  // optional uint32 gps_status = 1;
  if (has_gps_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gps_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tbox.protocol.netGpsSwitchStatusRsp)
}

::google::protobuf::uint8* netGpsSwitchStatusRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tbox.protocol.netGpsSwitchStatusRsp)
  // optional uint32 gps_status = 1;
  if (has_gps_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gps_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tbox.protocol.netGpsSwitchStatusRsp)
  return target;
}

int netGpsSwitchStatusRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gps_status = 1;
    if (has_gps_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gps_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void netGpsSwitchStatusRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const netGpsSwitchStatusRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const netGpsSwitchStatusRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void netGpsSwitchStatusRsp::MergeFrom(const netGpsSwitchStatusRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gps_status()) {
      set_gps_status(from.gps_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void netGpsSwitchStatusRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void netGpsSwitchStatusRsp::CopyFrom(const netGpsSwitchStatusRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool netGpsSwitchStatusRsp::IsInitialized() const {

  return true;
}

void netGpsSwitchStatusRsp::Swap(netGpsSwitchStatusRsp* other) {
  if (other != this) {
    std::swap(gps_status_, other->gps_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata netGpsSwitchStatusRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = netGpsSwitchStatusRsp_descriptor_;
  metadata.reflection = netGpsSwitchStatusRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace tbox

// @@protoc_insertion_point(global_scope)
