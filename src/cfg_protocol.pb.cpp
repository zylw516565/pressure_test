// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cfg_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cfg_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dyncfg {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* upBoolItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  upBoolItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* upUInt32Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  upUInt32Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* upUInt64Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  upUInt64Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* upFloatItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  upFloatItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* upDoubleItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  upDoubleItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* upStringItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  upStringItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* upBytesItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  upBytesItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* upDynamicData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  upDynamicData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DynDataUploadReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DynDataUploadReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DynDataUploadRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DynDataUploadRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NAD_FrameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NAD_FrameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NAD_SignalInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NAD_SignalInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBCdictInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBCdictInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBCdictInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBCdictInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBCdynInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBCdynInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NADUpLoadDictReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NADUpLoadDictReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NADUpLoadDictRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NADUpLoadDictRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NADDynInfoValReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NADDynInfoValReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NADDynInfoValRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NADDynInfoValRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DYN_DATA_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DYN_ULOAD_ENUM_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cfg_5fprotocol_2eproto() {
  protobuf_AddDesc_cfg_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cfg_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  upBoolItem_descriptor_ = file->message_type(0);
  static const int upBoolItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upBoolItem, data_sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upBoolItem, data_bool_value_),
  };
  upBoolItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      upBoolItem_descriptor_,
      upBoolItem::default_instance_,
      upBoolItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upBoolItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upBoolItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(upBoolItem));
  upUInt32Item_descriptor_ = file->message_type(1);
  static const int upUInt32Item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upUInt32Item, data_sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upUInt32Item, data_u32_value_),
  };
  upUInt32Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      upUInt32Item_descriptor_,
      upUInt32Item::default_instance_,
      upUInt32Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upUInt32Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upUInt32Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(upUInt32Item));
  upUInt64Item_descriptor_ = file->message_type(2);
  static const int upUInt64Item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upUInt64Item, data_sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upUInt64Item, data_u64_value_),
  };
  upUInt64Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      upUInt64Item_descriptor_,
      upUInt64Item::default_instance_,
      upUInt64Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upUInt64Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upUInt64Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(upUInt64Item));
  upFloatItem_descriptor_ = file->message_type(3);
  static const int upFloatItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upFloatItem, data_sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upFloatItem, data_f_value_),
  };
  upFloatItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      upFloatItem_descriptor_,
      upFloatItem::default_instance_,
      upFloatItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upFloatItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upFloatItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(upFloatItem));
  upDoubleItem_descriptor_ = file->message_type(4);
  static const int upDoubleItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upDoubleItem, data_sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upDoubleItem, data_d_value_),
  };
  upDoubleItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      upDoubleItem_descriptor_,
      upDoubleItem::default_instance_,
      upDoubleItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upDoubleItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upDoubleItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(upDoubleItem));
  upStringItem_descriptor_ = file->message_type(5);
  static const int upStringItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upStringItem, data_sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upStringItem, data_str_value_),
  };
  upStringItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      upStringItem_descriptor_,
      upStringItem::default_instance_,
      upStringItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upStringItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upStringItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(upStringItem));
  upBytesItem_descriptor_ = file->message_type(6);
  static const int upBytesItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upBytesItem, data_sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upBytesItem, data_bytes_value_),
  };
  upBytesItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      upBytesItem_descriptor_,
      upBytesItem::default_instance_,
      upBytesItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upBytesItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upBytesItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(upBytesItem));
  upDynamicData_descriptor_ = file->message_type(7);
  static const int upDynamicData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upDynamicData, collect_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upDynamicData, data_bool_arr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upDynamicData, data_u32_arr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upDynamicData, data_u64_arr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upDynamicData, data_str_arr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upDynamicData, data_bytes_arr_),
  };
  upDynamicData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      upDynamicData_descriptor_,
      upDynamicData::default_instance_,
      upDynamicData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upDynamicData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(upDynamicData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(upDynamicData));
  DynDataUploadReq_descriptor_ = file->message_type(8);
  static const int DynDataUploadReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynDataUploadReq, dynamic_data_),
  };
  DynDataUploadReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DynDataUploadReq_descriptor_,
      DynDataUploadReq::default_instance_,
      DynDataUploadReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynDataUploadReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynDataUploadReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DynDataUploadReq));
  DynDataUploadRsp_descriptor_ = file->message_type(9);
  static const int DynDataUploadRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynDataUploadRsp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynDataUploadRsp, time_stamp_),
  };
  DynDataUploadRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DynDataUploadRsp_descriptor_,
      DynDataUploadRsp::default_instance_,
      DynDataUploadRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynDataUploadRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynDataUploadRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DynDataUploadRsp));
  NAD_FrameInfo_descriptor_ = file->message_type(10);
  static const int NAD_FrameInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAD_FrameInfo, frame_sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAD_FrameInfo, frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAD_FrameInfo, frame_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAD_FrameInfo, dlc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAD_FrameInfo, is_eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAD_FrameInfo, signal_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAD_FrameInfo, signals_),
  };
  NAD_FrameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NAD_FrameInfo_descriptor_,
      NAD_FrameInfo::default_instance_,
      NAD_FrameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAD_FrameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAD_FrameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NAD_FrameInfo));
  NAD_SignalInfo_descriptor_ = file->message_type(11);
  static const int NAD_SignalInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAD_SignalInfo, data_sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAD_SignalInfo, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAD_SignalInfo, sin_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAD_SignalInfo, sin_sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAD_SignalInfo, startbit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAD_SignalInfo, bitsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAD_SignalInfo, endian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAD_SignalInfo, upload_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAD_SignalInfo, frequency_),
  };
  NAD_SignalInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NAD_SignalInfo_descriptor_,
      NAD_SignalInfo::default_instance_,
      NAD_SignalInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAD_SignalInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NAD_SignalInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NAD_SignalInfo));
  DBCdictInfoReq_descriptor_ = file->message_type(12);
  static const int DBCdictInfoReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCdictInfoReq, vehicle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCdictInfoReq, filepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCdictInfoReq, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCdictInfoReq, filesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCdictInfoReq, sha256_),
  };
  DBCdictInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBCdictInfoReq_descriptor_,
      DBCdictInfoReq::default_instance_,
      DBCdictInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCdictInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCdictInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBCdictInfoReq));
  DBCdictInfoRsp_descriptor_ = file->message_type(13);
  static const int DBCdictInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCdictInfoRsp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCdictInfoRsp, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCdictInfoRsp, curdictversion_),
  };
  DBCdictInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBCdictInfoRsp_descriptor_,
      DBCdictInfoRsp::default_instance_,
      DBCdictInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCdictInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCdictInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBCdictInfoRsp));
  DBCdynInfo_descriptor_ = file->message_type(14);
  static const int DBCdynInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCdynInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCdynInfo, vehicle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCdynInfo, frame_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCdynInfo, frames_),
  };
  DBCdynInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBCdynInfo_descriptor_,
      DBCdynInfo::default_instance_,
      DBCdynInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCdynInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBCdynInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBCdynInfo));
  NADUpLoadDictReq_descriptor_ = file->message_type(15);
  static const int NADUpLoadDictReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NADUpLoadDictReq, rsp_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NADUpLoadDictReq, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NADUpLoadDictReq, vehicle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NADUpLoadDictReq, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NADUpLoadDictReq, frame_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NADUpLoadDictReq, data_sn_),
  };
  NADUpLoadDictReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NADUpLoadDictReq_descriptor_,
      NADUpLoadDictReq::default_instance_,
      NADUpLoadDictReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NADUpLoadDictReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NADUpLoadDictReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NADUpLoadDictReq));
  NADUpLoadDictRsp_descriptor_ = file->message_type(16);
  static const int NADUpLoadDictRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NADUpLoadDictRsp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NADUpLoadDictRsp, time_stamp_),
  };
  NADUpLoadDictRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NADUpLoadDictRsp_descriptor_,
      NADUpLoadDictRsp::default_instance_,
      NADUpLoadDictRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NADUpLoadDictRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NADUpLoadDictRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NADUpLoadDictRsp));
  NADDynInfoValReq_descriptor_ = file->message_type(17);
  static const int NADDynInfoValReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NADDynInfoValReq, frame_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NADDynInfoValReq, frames_),
  };
  NADDynInfoValReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NADDynInfoValReq_descriptor_,
      NADDynInfoValReq::default_instance_,
      NADDynInfoValReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NADDynInfoValReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NADDynInfoValReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NADDynInfoValReq));
  NADDynInfoValRsp_descriptor_ = file->message_type(18);
  static const int NADDynInfoValRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NADDynInfoValRsp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NADDynInfoValRsp, time_stamp_),
  };
  NADDynInfoValRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NADDynInfoValRsp_descriptor_,
      NADDynInfoValRsp::default_instance_,
      NADDynInfoValRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NADDynInfoValRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NADDynInfoValRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NADDynInfoValRsp));
  DYN_DATA_TYPE_descriptor_ = file->enum_type(0);
  DYN_ULOAD_ENUM_TYPE_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cfg_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    upBoolItem_descriptor_, &upBoolItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    upUInt32Item_descriptor_, &upUInt32Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    upUInt64Item_descriptor_, &upUInt64Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    upFloatItem_descriptor_, &upFloatItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    upDoubleItem_descriptor_, &upDoubleItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    upStringItem_descriptor_, &upStringItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    upBytesItem_descriptor_, &upBytesItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    upDynamicData_descriptor_, &upDynamicData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DynDataUploadReq_descriptor_, &DynDataUploadReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DynDataUploadRsp_descriptor_, &DynDataUploadRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NAD_FrameInfo_descriptor_, &NAD_FrameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NAD_SignalInfo_descriptor_, &NAD_SignalInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBCdictInfoReq_descriptor_, &DBCdictInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBCdictInfoRsp_descriptor_, &DBCdictInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBCdynInfo_descriptor_, &DBCdynInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NADUpLoadDictReq_descriptor_, &NADUpLoadDictReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NADUpLoadDictRsp_descriptor_, &NADUpLoadDictRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NADDynInfoValReq_descriptor_, &NADDynInfoValReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NADDynInfoValRsp_descriptor_, &NADDynInfoValRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cfg_5fprotocol_2eproto() {
  delete upBoolItem::default_instance_;
  delete upBoolItem_reflection_;
  delete upUInt32Item::default_instance_;
  delete upUInt32Item_reflection_;
  delete upUInt64Item::default_instance_;
  delete upUInt64Item_reflection_;
  delete upFloatItem::default_instance_;
  delete upFloatItem_reflection_;
  delete upDoubleItem::default_instance_;
  delete upDoubleItem_reflection_;
  delete upStringItem::default_instance_;
  delete upStringItem_reflection_;
  delete upBytesItem::default_instance_;
  delete upBytesItem_reflection_;
  delete upDynamicData::default_instance_;
  delete upDynamicData_reflection_;
  delete DynDataUploadReq::default_instance_;
  delete DynDataUploadReq_reflection_;
  delete DynDataUploadRsp::default_instance_;
  delete DynDataUploadRsp_reflection_;
  delete NAD_FrameInfo::default_instance_;
  delete NAD_FrameInfo_reflection_;
  delete NAD_SignalInfo::default_instance_;
  delete NAD_SignalInfo_reflection_;
  delete DBCdictInfoReq::default_instance_;
  delete DBCdictInfoReq_reflection_;
  delete DBCdictInfoRsp::default_instance_;
  delete DBCdictInfoRsp_reflection_;
  delete DBCdynInfo::default_instance_;
  delete DBCdynInfo_reflection_;
  delete NADUpLoadDictReq::default_instance_;
  delete NADUpLoadDictReq_reflection_;
  delete NADUpLoadDictRsp::default_instance_;
  delete NADUpLoadDictRsp_reflection_;
  delete NADDynInfoValReq::default_instance_;
  delete NADDynInfoValReq_reflection_;
  delete NADDynInfoValRsp::default_instance_;
  delete NADDynInfoValRsp_reflection_;
}

void protobuf_AddDesc_cfg_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022cfg_protocol.proto\022\tdyncfg.pb\"6\n\nupBoo"
    "lItem\022\017\n\007data_sn\030\001 \002(\r\022\027\n\017data_bool_valu"
    "e\030\002 \002(\010\"7\n\014upUInt32Item\022\017\n\007data_sn\030\001 \002(\r"
    "\022\026\n\016data_u32_value\030\002 \002(\r\"7\n\014upUInt64Item"
    "\022\017\n\007data_sn\030\001 \002(\r\022\026\n\016data_u64_value\030\002 \002("
    "\004\"4\n\013upFloatItem\022\017\n\007data_sn\030\001 \002(\r\022\024\n\014dat"
    "a_f_value\030\002 \002(\002\"5\n\014upDoubleItem\022\017\n\007data_"
    "sn\030\001 \002(\r\022\024\n\014data_d_value\030\002 \002(\001\"7\n\014upStri"
    "ngItem\022\017\n\007data_sn\030\001 \002(\r\022\026\n\016data_str_valu"
    "e\030\002 \002(\t\"8\n\013upBytesItem\022\017\n\007data_sn\030\001 \002(\r\022"
    "\030\n\020data_bytes_value\030\002 \002(\014\"\220\002\n\rupDynamicD"
    "ata\022\024\n\014collect_time\030\001 \002(\r\022,\n\rdata_bool_a"
    "rr\030\002 \003(\0132\025.dyncfg.pb.upBoolItem\022-\n\014data_"
    "u32_arr\030\003 \003(\0132\027.dyncfg.pb.upUInt32Item\022-"
    "\n\014data_u64_arr\030\004 \003(\0132\027.dyncfg.pb.upUInt6"
    "4Item\022-\n\014data_str_arr\030\005 \003(\0132\027.dyncfg.pb."
    "upStringItem\022.\n\016data_bytes_arr\030\006 \003(\0132\026.d"
    "yncfg.pb.upBytesItem\"B\n\020DynDataUploadReq"
    "\022.\n\014dynamic_data\030\002 \002(\0132\030.dyncfg.pb.upDyn"
    "amicData\"7\n\020DynDataUploadRsp\022\017\n\007errcode\030"
    "\001 \002(\r\022\022\n\ntime_stamp\030\002 \002(\r\"\244\001\n\rNAD_FrameI"
    "nfo\022\020\n\010frame_sn\030\001 \002(\r\022\020\n\010frame_id\030\002 \002(\r\022"
    "\022\n\nframe_type\030\003 \002(\r\022\013\n\003dlc\030\004 \002(\r\022\016\n\006is_e"
    "id\030\005 \002(\r\022\022\n\nsignal_num\030\006 \001(\r\022*\n\007signals\030"
    "\007 \003(\0132\031.dyncfg.pb.NAD_SignalInfo\"\313\001\n\016NAD"
    "_SignalInfo\022\017\n\007data_sn\030\001 \002(\r\022+\n\tdata_typ"
    "e\030\002 \002(\0162\030.dyncfg.pb.DYN_DATA_TYPE\022\020\n\010sin"
    "_Name\030\003 \002(\t\022\016\n\006sin_Sn\030\004 \001(\r\022\020\n\010startBit\030"
    "\005 \002(\r\022\017\n\007bitSize\030\006 \002(\r\022\016\n\006endian\030\007 \002(\r\022\023"
    "\n\013upload_mode\030\010 \001(\r\022\021\n\tfrequency\030\t \002(\r\"k"
    "\n\016DBCdictInfoReq\022\024\n\014vehicle_type\030\001 \002(\t\022\020"
    "\n\010filepath\030\002 \002(\t\022\017\n\007version\030\003 \002(\t\022\020\n\010fil"
    "esize\030\004 \002(\r\022\016\n\006sha256\030\005 \002(\014\"M\n\016DBCdictIn"
    "foRsp\022\017\n\007errcode\030\001 \002(\r\022\022\n\ntime_stamp\030\002 \002"
    "(\r\022\026\n\016curDictVersion\030\003 \002(\r\"p\n\nDBCdynInfo"
    "\022\017\n\007version\030\001 \002(\t\022\024\n\014vehicle_type\030\002 \002(\t\022"
    "\021\n\tframe_num\030\003 \002(\r\022(\n\006frames\030\004 \003(\0132\030.dyn"
    "cfg.pb.NAD_FrameInfo\"\243\001\n\020NADUpLoadDictRe"
    "q\0220\n\010rsp_type\030\001 \002(\0162\036.dyncfg.pb.DYN_ULOA"
    "D_ENUM_TYPE\022\017\n\007version\030\002 \002(\t\022\024\n\014vehicle_"
    "type\030\003 \002(\t\022\022\n\ntime_stamp\030\004 \002(\r\022\021\n\tframe_"
    "num\030\005 \002(\r\022\017\n\007data_sn\030\006 \003(\r\"7\n\020NADUpLoadD"
    "ictRsp\022\017\n\007errcode\030\001 \002(\r\022\022\n\ntime_stamp\030\002 "
    "\002(\r\"O\n\020NADDynInfoValReq\022\021\n\tframe_num\030\001 \002"
    "(\r\022(\n\006frames\030\002 \003(\0132\030.dyncfg.pb.NAD_Frame"
    "Info\"7\n\020NADDynInfoValRsp\022\017\n\007errcode\030\001 \002("
    "\r\022\022\n\ntime_stamp\030\002 \002(\r*_\n\rDYN_DATA_TYPE\022\017"
    "\n\013DDT_BOOLEAN\020\000\022\016\n\nDDT_UINT32\020\001\022\016\n\nDDT_U"
    "INT64\020\002\022\016\n\nDDT_STRING\020\003\022\r\n\tDDT_BYTES\020\004*\213"
    "\001\n\023DYN_ULOAD_ENUM_TYPE\022\025\n\021ULD_ENUM_START"
    "_UP\020\000\022\030\n\024ULD_ENUM_USE_NEW_VER\020\001\022\024\n\020ULD_E"
    "NUM_ANY_ERR\020\002\022\024\n\020ULD_ENUM_ERR_CNT\020\003\022\027\n\023U"
    "LD_ENUM_ERR_CONFIG\020\004", 2100);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cfg_protocol.proto", &protobuf_RegisterTypes);
  upBoolItem::default_instance_ = new upBoolItem();
  upUInt32Item::default_instance_ = new upUInt32Item();
  upUInt64Item::default_instance_ = new upUInt64Item();
  upFloatItem::default_instance_ = new upFloatItem();
  upDoubleItem::default_instance_ = new upDoubleItem();
  upStringItem::default_instance_ = new upStringItem();
  upBytesItem::default_instance_ = new upBytesItem();
  upDynamicData::default_instance_ = new upDynamicData();
  DynDataUploadReq::default_instance_ = new DynDataUploadReq();
  DynDataUploadRsp::default_instance_ = new DynDataUploadRsp();
  NAD_FrameInfo::default_instance_ = new NAD_FrameInfo();
  NAD_SignalInfo::default_instance_ = new NAD_SignalInfo();
  DBCdictInfoReq::default_instance_ = new DBCdictInfoReq();
  DBCdictInfoRsp::default_instance_ = new DBCdictInfoRsp();
  DBCdynInfo::default_instance_ = new DBCdynInfo();
  NADUpLoadDictReq::default_instance_ = new NADUpLoadDictReq();
  NADUpLoadDictRsp::default_instance_ = new NADUpLoadDictRsp();
  NADDynInfoValReq::default_instance_ = new NADDynInfoValReq();
  NADDynInfoValRsp::default_instance_ = new NADDynInfoValRsp();
  upBoolItem::default_instance_->InitAsDefaultInstance();
  upUInt32Item::default_instance_->InitAsDefaultInstance();
  upUInt64Item::default_instance_->InitAsDefaultInstance();
  upFloatItem::default_instance_->InitAsDefaultInstance();
  upDoubleItem::default_instance_->InitAsDefaultInstance();
  upStringItem::default_instance_->InitAsDefaultInstance();
  upBytesItem::default_instance_->InitAsDefaultInstance();
  upDynamicData::default_instance_->InitAsDefaultInstance();
  DynDataUploadReq::default_instance_->InitAsDefaultInstance();
  DynDataUploadRsp::default_instance_->InitAsDefaultInstance();
  NAD_FrameInfo::default_instance_->InitAsDefaultInstance();
  NAD_SignalInfo::default_instance_->InitAsDefaultInstance();
  DBCdictInfoReq::default_instance_->InitAsDefaultInstance();
  DBCdictInfoRsp::default_instance_->InitAsDefaultInstance();
  DBCdynInfo::default_instance_->InitAsDefaultInstance();
  NADUpLoadDictReq::default_instance_->InitAsDefaultInstance();
  NADUpLoadDictRsp::default_instance_->InitAsDefaultInstance();
  NADDynInfoValReq::default_instance_->InitAsDefaultInstance();
  NADDynInfoValRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cfg_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cfg_5fprotocol_2eproto {
  StaticDescriptorInitializer_cfg_5fprotocol_2eproto() {
    protobuf_AddDesc_cfg_5fprotocol_2eproto();
  }
} static_descriptor_initializer_cfg_5fprotocol_2eproto_;
const ::google::protobuf::EnumDescriptor* DYN_DATA_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DYN_DATA_TYPE_descriptor_;
}
bool DYN_DATA_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DYN_ULOAD_ENUM_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DYN_ULOAD_ENUM_TYPE_descriptor_;
}
bool DYN_ULOAD_ENUM_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int upBoolItem::kDataSnFieldNumber;
const int upBoolItem::kDataBoolValueFieldNumber;
#endif  // !_MSC_VER

upBoolItem::upBoolItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dyncfg.pb.upBoolItem)
}

void upBoolItem::InitAsDefaultInstance() {
}

upBoolItem::upBoolItem(const upBoolItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dyncfg.pb.upBoolItem)
}

void upBoolItem::SharedCtor() {
  _cached_size_ = 0;
  data_sn_ = 0u;
  data_bool_value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

upBoolItem::~upBoolItem() {
  // @@protoc_insertion_point(destructor:dyncfg.pb.upBoolItem)
  SharedDtor();
}

void upBoolItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void upBoolItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* upBoolItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return upBoolItem_descriptor_;
}

const upBoolItem& upBoolItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfg_5fprotocol_2eproto();
  return *default_instance_;
}

upBoolItem* upBoolItem::default_instance_ = NULL;

upBoolItem* upBoolItem::New() const {
  return new upBoolItem;
}

void upBoolItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<upBoolItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(data_sn_, data_bool_value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool upBoolItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dyncfg.pb.upBoolItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 data_sn = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_sn_)));
          set_has_data_sn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_data_bool_value;
        break;
      }

      // required bool data_bool_value = 2;
      case 2: {
        if (tag == 16) {
         parse_data_bool_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &data_bool_value_)));
          set_has_data_bool_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dyncfg.pb.upBoolItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dyncfg.pb.upBoolItem)
  return false;
#undef DO_
}

void upBoolItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dyncfg.pb.upBoolItem)
  // required uint32 data_sn = 1;
  if (has_data_sn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data_sn(), output);
  }

  // required bool data_bool_value = 2;
  if (has_data_bool_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->data_bool_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dyncfg.pb.upBoolItem)
}

::google::protobuf::uint8* upBoolItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dyncfg.pb.upBoolItem)
  // required uint32 data_sn = 1;
  if (has_data_sn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->data_sn(), target);
  }

  // required bool data_bool_value = 2;
  if (has_data_bool_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->data_bool_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dyncfg.pb.upBoolItem)
  return target;
}

int upBoolItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 data_sn = 1;
    if (has_data_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_sn());
    }

    // required bool data_bool_value = 2;
    if (has_data_bool_value()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void upBoolItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const upBoolItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const upBoolItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void upBoolItem::MergeFrom(const upBoolItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_sn()) {
      set_data_sn(from.data_sn());
    }
    if (from.has_data_bool_value()) {
      set_data_bool_value(from.data_bool_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void upBoolItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void upBoolItem::CopyFrom(const upBoolItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool upBoolItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void upBoolItem::Swap(upBoolItem* other) {
  if (other != this) {
    std::swap(data_sn_, other->data_sn_);
    std::swap(data_bool_value_, other->data_bool_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata upBoolItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = upBoolItem_descriptor_;
  metadata.reflection = upBoolItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int upUInt32Item::kDataSnFieldNumber;
const int upUInt32Item::kDataU32ValueFieldNumber;
#endif  // !_MSC_VER

upUInt32Item::upUInt32Item()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dyncfg.pb.upUInt32Item)
}

void upUInt32Item::InitAsDefaultInstance() {
}

upUInt32Item::upUInt32Item(const upUInt32Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dyncfg.pb.upUInt32Item)
}

void upUInt32Item::SharedCtor() {
  _cached_size_ = 0;
  data_sn_ = 0u;
  data_u32_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

upUInt32Item::~upUInt32Item() {
  // @@protoc_insertion_point(destructor:dyncfg.pb.upUInt32Item)
  SharedDtor();
}

void upUInt32Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void upUInt32Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* upUInt32Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return upUInt32Item_descriptor_;
}

const upUInt32Item& upUInt32Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfg_5fprotocol_2eproto();
  return *default_instance_;
}

upUInt32Item* upUInt32Item::default_instance_ = NULL;

upUInt32Item* upUInt32Item::New() const {
  return new upUInt32Item;
}

void upUInt32Item::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<upUInt32Item*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(data_sn_, data_u32_value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool upUInt32Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dyncfg.pb.upUInt32Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 data_sn = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_sn_)));
          set_has_data_sn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_data_u32_value;
        break;
      }

      // required uint32 data_u32_value = 2;
      case 2: {
        if (tag == 16) {
         parse_data_u32_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_u32_value_)));
          set_has_data_u32_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dyncfg.pb.upUInt32Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dyncfg.pb.upUInt32Item)
  return false;
#undef DO_
}

void upUInt32Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dyncfg.pb.upUInt32Item)
  // required uint32 data_sn = 1;
  if (has_data_sn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data_sn(), output);
  }

  // required uint32 data_u32_value = 2;
  if (has_data_u32_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->data_u32_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dyncfg.pb.upUInt32Item)
}

::google::protobuf::uint8* upUInt32Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dyncfg.pb.upUInt32Item)
  // required uint32 data_sn = 1;
  if (has_data_sn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->data_sn(), target);
  }

  // required uint32 data_u32_value = 2;
  if (has_data_u32_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->data_u32_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dyncfg.pb.upUInt32Item)
  return target;
}

int upUInt32Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 data_sn = 1;
    if (has_data_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_sn());
    }

    // required uint32 data_u32_value = 2;
    if (has_data_u32_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_u32_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void upUInt32Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const upUInt32Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const upUInt32Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void upUInt32Item::MergeFrom(const upUInt32Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_sn()) {
      set_data_sn(from.data_sn());
    }
    if (from.has_data_u32_value()) {
      set_data_u32_value(from.data_u32_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void upUInt32Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void upUInt32Item::CopyFrom(const upUInt32Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool upUInt32Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void upUInt32Item::Swap(upUInt32Item* other) {
  if (other != this) {
    std::swap(data_sn_, other->data_sn_);
    std::swap(data_u32_value_, other->data_u32_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata upUInt32Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = upUInt32Item_descriptor_;
  metadata.reflection = upUInt32Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int upUInt64Item::kDataSnFieldNumber;
const int upUInt64Item::kDataU64ValueFieldNumber;
#endif  // !_MSC_VER

upUInt64Item::upUInt64Item()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dyncfg.pb.upUInt64Item)
}

void upUInt64Item::InitAsDefaultInstance() {
}

upUInt64Item::upUInt64Item(const upUInt64Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dyncfg.pb.upUInt64Item)
}

void upUInt64Item::SharedCtor() {
  _cached_size_ = 0;
  data_sn_ = 0u;
  data_u64_value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

upUInt64Item::~upUInt64Item() {
  // @@protoc_insertion_point(destructor:dyncfg.pb.upUInt64Item)
  SharedDtor();
}

void upUInt64Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void upUInt64Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* upUInt64Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return upUInt64Item_descriptor_;
}

const upUInt64Item& upUInt64Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfg_5fprotocol_2eproto();
  return *default_instance_;
}

upUInt64Item* upUInt64Item::default_instance_ = NULL;

upUInt64Item* upUInt64Item::New() const {
  return new upUInt64Item;
}

void upUInt64Item::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<upUInt64Item*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(data_u64_value_, data_sn_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool upUInt64Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dyncfg.pb.upUInt64Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 data_sn = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_sn_)));
          set_has_data_sn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_data_u64_value;
        break;
      }

      // required uint64 data_u64_value = 2;
      case 2: {
        if (tag == 16) {
         parse_data_u64_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_u64_value_)));
          set_has_data_u64_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dyncfg.pb.upUInt64Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dyncfg.pb.upUInt64Item)
  return false;
#undef DO_
}

void upUInt64Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dyncfg.pb.upUInt64Item)
  // required uint32 data_sn = 1;
  if (has_data_sn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data_sn(), output);
  }

  // required uint64 data_u64_value = 2;
  if (has_data_u64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->data_u64_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dyncfg.pb.upUInt64Item)
}

::google::protobuf::uint8* upUInt64Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dyncfg.pb.upUInt64Item)
  // required uint32 data_sn = 1;
  if (has_data_sn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->data_sn(), target);
  }

  // required uint64 data_u64_value = 2;
  if (has_data_u64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->data_u64_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dyncfg.pb.upUInt64Item)
  return target;
}

int upUInt64Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 data_sn = 1;
    if (has_data_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_sn());
    }

    // required uint64 data_u64_value = 2;
    if (has_data_u64_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->data_u64_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void upUInt64Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const upUInt64Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const upUInt64Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void upUInt64Item::MergeFrom(const upUInt64Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_sn()) {
      set_data_sn(from.data_sn());
    }
    if (from.has_data_u64_value()) {
      set_data_u64_value(from.data_u64_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void upUInt64Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void upUInt64Item::CopyFrom(const upUInt64Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool upUInt64Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void upUInt64Item::Swap(upUInt64Item* other) {
  if (other != this) {
    std::swap(data_sn_, other->data_sn_);
    std::swap(data_u64_value_, other->data_u64_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata upUInt64Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = upUInt64Item_descriptor_;
  metadata.reflection = upUInt64Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int upFloatItem::kDataSnFieldNumber;
const int upFloatItem::kDataFValueFieldNumber;
#endif  // !_MSC_VER

upFloatItem::upFloatItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dyncfg.pb.upFloatItem)
}

void upFloatItem::InitAsDefaultInstance() {
}

upFloatItem::upFloatItem(const upFloatItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dyncfg.pb.upFloatItem)
}

void upFloatItem::SharedCtor() {
  _cached_size_ = 0;
  data_sn_ = 0u;
  data_f_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

upFloatItem::~upFloatItem() {
  // @@protoc_insertion_point(destructor:dyncfg.pb.upFloatItem)
  SharedDtor();
}

void upFloatItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void upFloatItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* upFloatItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return upFloatItem_descriptor_;
}

const upFloatItem& upFloatItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfg_5fprotocol_2eproto();
  return *default_instance_;
}

upFloatItem* upFloatItem::default_instance_ = NULL;

upFloatItem* upFloatItem::New() const {
  return new upFloatItem;
}

void upFloatItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<upFloatItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(data_sn_, data_f_value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool upFloatItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dyncfg.pb.upFloatItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 data_sn = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_sn_)));
          set_has_data_sn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_data_f_value;
        break;
      }

      // required float data_f_value = 2;
      case 2: {
        if (tag == 21) {
         parse_data_f_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_f_value_)));
          set_has_data_f_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dyncfg.pb.upFloatItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dyncfg.pb.upFloatItem)
  return false;
#undef DO_
}

void upFloatItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dyncfg.pb.upFloatItem)
  // required uint32 data_sn = 1;
  if (has_data_sn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data_sn(), output);
  }

  // required float data_f_value = 2;
  if (has_data_f_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->data_f_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dyncfg.pb.upFloatItem)
}

::google::protobuf::uint8* upFloatItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dyncfg.pb.upFloatItem)
  // required uint32 data_sn = 1;
  if (has_data_sn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->data_sn(), target);
  }

  // required float data_f_value = 2;
  if (has_data_f_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->data_f_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dyncfg.pb.upFloatItem)
  return target;
}

int upFloatItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 data_sn = 1;
    if (has_data_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_sn());
    }

    // required float data_f_value = 2;
    if (has_data_f_value()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void upFloatItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const upFloatItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const upFloatItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void upFloatItem::MergeFrom(const upFloatItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_sn()) {
      set_data_sn(from.data_sn());
    }
    if (from.has_data_f_value()) {
      set_data_f_value(from.data_f_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void upFloatItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void upFloatItem::CopyFrom(const upFloatItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool upFloatItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void upFloatItem::Swap(upFloatItem* other) {
  if (other != this) {
    std::swap(data_sn_, other->data_sn_);
    std::swap(data_f_value_, other->data_f_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata upFloatItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = upFloatItem_descriptor_;
  metadata.reflection = upFloatItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int upDoubleItem::kDataSnFieldNumber;
const int upDoubleItem::kDataDValueFieldNumber;
#endif  // !_MSC_VER

upDoubleItem::upDoubleItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dyncfg.pb.upDoubleItem)
}

void upDoubleItem::InitAsDefaultInstance() {
}

upDoubleItem::upDoubleItem(const upDoubleItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dyncfg.pb.upDoubleItem)
}

void upDoubleItem::SharedCtor() {
  _cached_size_ = 0;
  data_sn_ = 0u;
  data_d_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

upDoubleItem::~upDoubleItem() {
  // @@protoc_insertion_point(destructor:dyncfg.pb.upDoubleItem)
  SharedDtor();
}

void upDoubleItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void upDoubleItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* upDoubleItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return upDoubleItem_descriptor_;
}

const upDoubleItem& upDoubleItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfg_5fprotocol_2eproto();
  return *default_instance_;
}

upDoubleItem* upDoubleItem::default_instance_ = NULL;

upDoubleItem* upDoubleItem::New() const {
  return new upDoubleItem;
}

void upDoubleItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<upDoubleItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(data_d_value_, data_sn_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool upDoubleItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dyncfg.pb.upDoubleItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 data_sn = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_sn_)));
          set_has_data_sn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_data_d_value;
        break;
      }

      // required double data_d_value = 2;
      case 2: {
        if (tag == 17) {
         parse_data_d_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &data_d_value_)));
          set_has_data_d_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dyncfg.pb.upDoubleItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dyncfg.pb.upDoubleItem)
  return false;
#undef DO_
}

void upDoubleItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dyncfg.pb.upDoubleItem)
  // required uint32 data_sn = 1;
  if (has_data_sn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data_sn(), output);
  }

  // required double data_d_value = 2;
  if (has_data_d_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->data_d_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dyncfg.pb.upDoubleItem)
}

::google::protobuf::uint8* upDoubleItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dyncfg.pb.upDoubleItem)
  // required uint32 data_sn = 1;
  if (has_data_sn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->data_sn(), target);
  }

  // required double data_d_value = 2;
  if (has_data_d_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->data_d_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dyncfg.pb.upDoubleItem)
  return target;
}

int upDoubleItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 data_sn = 1;
    if (has_data_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_sn());
    }

    // required double data_d_value = 2;
    if (has_data_d_value()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void upDoubleItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const upDoubleItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const upDoubleItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void upDoubleItem::MergeFrom(const upDoubleItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_sn()) {
      set_data_sn(from.data_sn());
    }
    if (from.has_data_d_value()) {
      set_data_d_value(from.data_d_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void upDoubleItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void upDoubleItem::CopyFrom(const upDoubleItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool upDoubleItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void upDoubleItem::Swap(upDoubleItem* other) {
  if (other != this) {
    std::swap(data_sn_, other->data_sn_);
    std::swap(data_d_value_, other->data_d_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata upDoubleItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = upDoubleItem_descriptor_;
  metadata.reflection = upDoubleItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int upStringItem::kDataSnFieldNumber;
const int upStringItem::kDataStrValueFieldNumber;
#endif  // !_MSC_VER

upStringItem::upStringItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dyncfg.pb.upStringItem)
}

void upStringItem::InitAsDefaultInstance() {
}

upStringItem::upStringItem(const upStringItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dyncfg.pb.upStringItem)
}

void upStringItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_sn_ = 0u;
  data_str_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

upStringItem::~upStringItem() {
  // @@protoc_insertion_point(destructor:dyncfg.pb.upStringItem)
  SharedDtor();
}

void upStringItem::SharedDtor() {
  if (data_str_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_str_value_;
  }
  if (this != default_instance_) {
  }
}

void upStringItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* upStringItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return upStringItem_descriptor_;
}

const upStringItem& upStringItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfg_5fprotocol_2eproto();
  return *default_instance_;
}

upStringItem* upStringItem::default_instance_ = NULL;

upStringItem* upStringItem::New() const {
  return new upStringItem;
}

void upStringItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    data_sn_ = 0u;
    if (has_data_str_value()) {
      if (data_str_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_str_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool upStringItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dyncfg.pb.upStringItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 data_sn = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_sn_)));
          set_has_data_sn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data_str_value;
        break;
      }

      // required string data_str_value = 2;
      case 2: {
        if (tag == 18) {
         parse_data_str_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_str_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_str_value().data(), this->data_str_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data_str_value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dyncfg.pb.upStringItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dyncfg.pb.upStringItem)
  return false;
#undef DO_
}

void upStringItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dyncfg.pb.upStringItem)
  // required uint32 data_sn = 1;
  if (has_data_sn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data_sn(), output);
  }

  // required string data_str_value = 2;
  if (has_data_str_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_str_value().data(), this->data_str_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data_str_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data_str_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dyncfg.pb.upStringItem)
}

::google::protobuf::uint8* upStringItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dyncfg.pb.upStringItem)
  // required uint32 data_sn = 1;
  if (has_data_sn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->data_sn(), target);
  }

  // required string data_str_value = 2;
  if (has_data_str_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_str_value().data(), this->data_str_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data_str_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data_str_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dyncfg.pb.upStringItem)
  return target;
}

int upStringItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 data_sn = 1;
    if (has_data_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_sn());
    }

    // required string data_str_value = 2;
    if (has_data_str_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_str_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void upStringItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const upStringItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const upStringItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void upStringItem::MergeFrom(const upStringItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_sn()) {
      set_data_sn(from.data_sn());
    }
    if (from.has_data_str_value()) {
      set_data_str_value(from.data_str_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void upStringItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void upStringItem::CopyFrom(const upStringItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool upStringItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void upStringItem::Swap(upStringItem* other) {
  if (other != this) {
    std::swap(data_sn_, other->data_sn_);
    std::swap(data_str_value_, other->data_str_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata upStringItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = upStringItem_descriptor_;
  metadata.reflection = upStringItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int upBytesItem::kDataSnFieldNumber;
const int upBytesItem::kDataBytesValueFieldNumber;
#endif  // !_MSC_VER

upBytesItem::upBytesItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dyncfg.pb.upBytesItem)
}

void upBytesItem::InitAsDefaultInstance() {
}

upBytesItem::upBytesItem(const upBytesItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dyncfg.pb.upBytesItem)
}

void upBytesItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_sn_ = 0u;
  data_bytes_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

upBytesItem::~upBytesItem() {
  // @@protoc_insertion_point(destructor:dyncfg.pb.upBytesItem)
  SharedDtor();
}

void upBytesItem::SharedDtor() {
  if (data_bytes_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_bytes_value_;
  }
  if (this != default_instance_) {
  }
}

void upBytesItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* upBytesItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return upBytesItem_descriptor_;
}

const upBytesItem& upBytesItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfg_5fprotocol_2eproto();
  return *default_instance_;
}

upBytesItem* upBytesItem::default_instance_ = NULL;

upBytesItem* upBytesItem::New() const {
  return new upBytesItem;
}

void upBytesItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    data_sn_ = 0u;
    if (has_data_bytes_value()) {
      if (data_bytes_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_bytes_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool upBytesItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dyncfg.pb.upBytesItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 data_sn = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_sn_)));
          set_has_data_sn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data_bytes_value;
        break;
      }

      // required bytes data_bytes_value = 2;
      case 2: {
        if (tag == 18) {
         parse_data_bytes_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data_bytes_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dyncfg.pb.upBytesItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dyncfg.pb.upBytesItem)
  return false;
#undef DO_
}

void upBytesItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dyncfg.pb.upBytesItem)
  // required uint32 data_sn = 1;
  if (has_data_sn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data_sn(), output);
  }

  // required bytes data_bytes_value = 2;
  if (has_data_bytes_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data_bytes_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dyncfg.pb.upBytesItem)
}

::google::protobuf::uint8* upBytesItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dyncfg.pb.upBytesItem)
  // required uint32 data_sn = 1;
  if (has_data_sn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->data_sn(), target);
  }

  // required bytes data_bytes_value = 2;
  if (has_data_bytes_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data_bytes_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dyncfg.pb.upBytesItem)
  return target;
}

int upBytesItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 data_sn = 1;
    if (has_data_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_sn());
    }

    // required bytes data_bytes_value = 2;
    if (has_data_bytes_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data_bytes_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void upBytesItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const upBytesItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const upBytesItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void upBytesItem::MergeFrom(const upBytesItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_sn()) {
      set_data_sn(from.data_sn());
    }
    if (from.has_data_bytes_value()) {
      set_data_bytes_value(from.data_bytes_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void upBytesItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void upBytesItem::CopyFrom(const upBytesItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool upBytesItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void upBytesItem::Swap(upBytesItem* other) {
  if (other != this) {
    std::swap(data_sn_, other->data_sn_);
    std::swap(data_bytes_value_, other->data_bytes_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata upBytesItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = upBytesItem_descriptor_;
  metadata.reflection = upBytesItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int upDynamicData::kCollectTimeFieldNumber;
const int upDynamicData::kDataBoolArrFieldNumber;
const int upDynamicData::kDataU32ArrFieldNumber;
const int upDynamicData::kDataU64ArrFieldNumber;
const int upDynamicData::kDataStrArrFieldNumber;
const int upDynamicData::kDataBytesArrFieldNumber;
#endif  // !_MSC_VER

upDynamicData::upDynamicData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dyncfg.pb.upDynamicData)
}

void upDynamicData::InitAsDefaultInstance() {
}

upDynamicData::upDynamicData(const upDynamicData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dyncfg.pb.upDynamicData)
}

void upDynamicData::SharedCtor() {
  _cached_size_ = 0;
  collect_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

upDynamicData::~upDynamicData() {
  // @@protoc_insertion_point(destructor:dyncfg.pb.upDynamicData)
  SharedDtor();
}

void upDynamicData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void upDynamicData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* upDynamicData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return upDynamicData_descriptor_;
}

const upDynamicData& upDynamicData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfg_5fprotocol_2eproto();
  return *default_instance_;
}

upDynamicData* upDynamicData::default_instance_ = NULL;

upDynamicData* upDynamicData::New() const {
  return new upDynamicData;
}

void upDynamicData::Clear() {
  collect_time_ = 0u;
  data_bool_arr_.Clear();
  data_u32_arr_.Clear();
  data_u64_arr_.Clear();
  data_str_arr_.Clear();
  data_bytes_arr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool upDynamicData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dyncfg.pb.upDynamicData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 collect_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collect_time_)));
          set_has_collect_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data_bool_arr;
        break;
      }

      // repeated .dyncfg.pb.upBoolItem data_bool_arr = 2;
      case 2: {
        if (tag == 18) {
         parse_data_bool_arr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_bool_arr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data_bool_arr;
        if (input->ExpectTag(26)) goto parse_data_u32_arr;
        break;
      }

      // repeated .dyncfg.pb.upUInt32Item data_u32_arr = 3;
      case 3: {
        if (tag == 26) {
         parse_data_u32_arr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_u32_arr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data_u32_arr;
        if (input->ExpectTag(34)) goto parse_data_u64_arr;
        break;
      }

      // repeated .dyncfg.pb.upUInt64Item data_u64_arr = 4;
      case 4: {
        if (tag == 34) {
         parse_data_u64_arr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_u64_arr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data_u64_arr;
        if (input->ExpectTag(42)) goto parse_data_str_arr;
        break;
      }

      // repeated .dyncfg.pb.upStringItem data_str_arr = 5;
      case 5: {
        if (tag == 42) {
         parse_data_str_arr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_str_arr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data_str_arr;
        if (input->ExpectTag(50)) goto parse_data_bytes_arr;
        break;
      }

      // repeated .dyncfg.pb.upBytesItem data_bytes_arr = 6;
      case 6: {
        if (tag == 50) {
         parse_data_bytes_arr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_bytes_arr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data_bytes_arr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dyncfg.pb.upDynamicData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dyncfg.pb.upDynamicData)
  return false;
#undef DO_
}

void upDynamicData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dyncfg.pb.upDynamicData)
  // required uint32 collect_time = 1;
  if (has_collect_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->collect_time(), output);
  }

  // repeated .dyncfg.pb.upBoolItem data_bool_arr = 2;
  for (int i = 0; i < this->data_bool_arr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data_bool_arr(i), output);
  }

  // repeated .dyncfg.pb.upUInt32Item data_u32_arr = 3;
  for (int i = 0; i < this->data_u32_arr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data_u32_arr(i), output);
  }

  // repeated .dyncfg.pb.upUInt64Item data_u64_arr = 4;
  for (int i = 0; i < this->data_u64_arr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data_u64_arr(i), output);
  }

  // repeated .dyncfg.pb.upStringItem data_str_arr = 5;
  for (int i = 0; i < this->data_str_arr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data_str_arr(i), output);
  }

  // repeated .dyncfg.pb.upBytesItem data_bytes_arr = 6;
  for (int i = 0; i < this->data_bytes_arr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->data_bytes_arr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dyncfg.pb.upDynamicData)
}

::google::protobuf::uint8* upDynamicData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dyncfg.pb.upDynamicData)
  // required uint32 collect_time = 1;
  if (has_collect_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->collect_time(), target);
  }

  // repeated .dyncfg.pb.upBoolItem data_bool_arr = 2;
  for (int i = 0; i < this->data_bool_arr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data_bool_arr(i), target);
  }

  // repeated .dyncfg.pb.upUInt32Item data_u32_arr = 3;
  for (int i = 0; i < this->data_u32_arr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data_u32_arr(i), target);
  }

  // repeated .dyncfg.pb.upUInt64Item data_u64_arr = 4;
  for (int i = 0; i < this->data_u64_arr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data_u64_arr(i), target);
  }

  // repeated .dyncfg.pb.upStringItem data_str_arr = 5;
  for (int i = 0; i < this->data_str_arr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data_str_arr(i), target);
  }

  // repeated .dyncfg.pb.upBytesItem data_bytes_arr = 6;
  for (int i = 0; i < this->data_bytes_arr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->data_bytes_arr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dyncfg.pb.upDynamicData)
  return target;
}

int upDynamicData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 collect_time = 1;
    if (has_collect_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->collect_time());
    }

  }
  // repeated .dyncfg.pb.upBoolItem data_bool_arr = 2;
  total_size += 1 * this->data_bool_arr_size();
  for (int i = 0; i < this->data_bool_arr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_bool_arr(i));
  }

  // repeated .dyncfg.pb.upUInt32Item data_u32_arr = 3;
  total_size += 1 * this->data_u32_arr_size();
  for (int i = 0; i < this->data_u32_arr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_u32_arr(i));
  }

  // repeated .dyncfg.pb.upUInt64Item data_u64_arr = 4;
  total_size += 1 * this->data_u64_arr_size();
  for (int i = 0; i < this->data_u64_arr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_u64_arr(i));
  }

  // repeated .dyncfg.pb.upStringItem data_str_arr = 5;
  total_size += 1 * this->data_str_arr_size();
  for (int i = 0; i < this->data_str_arr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_str_arr(i));
  }

  // repeated .dyncfg.pb.upBytesItem data_bytes_arr = 6;
  total_size += 1 * this->data_bytes_arr_size();
  for (int i = 0; i < this->data_bytes_arr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_bytes_arr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void upDynamicData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const upDynamicData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const upDynamicData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void upDynamicData::MergeFrom(const upDynamicData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_bool_arr_.MergeFrom(from.data_bool_arr_);
  data_u32_arr_.MergeFrom(from.data_u32_arr_);
  data_u64_arr_.MergeFrom(from.data_u64_arr_);
  data_str_arr_.MergeFrom(from.data_str_arr_);
  data_bytes_arr_.MergeFrom(from.data_bytes_arr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_collect_time()) {
      set_collect_time(from.collect_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void upDynamicData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void upDynamicData::CopyFrom(const upDynamicData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool upDynamicData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data_bool_arr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->data_u32_arr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->data_u64_arr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->data_str_arr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->data_bytes_arr())) return false;
  return true;
}

void upDynamicData::Swap(upDynamicData* other) {
  if (other != this) {
    std::swap(collect_time_, other->collect_time_);
    data_bool_arr_.Swap(&other->data_bool_arr_);
    data_u32_arr_.Swap(&other->data_u32_arr_);
    data_u64_arr_.Swap(&other->data_u64_arr_);
    data_str_arr_.Swap(&other->data_str_arr_);
    data_bytes_arr_.Swap(&other->data_bytes_arr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata upDynamicData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = upDynamicData_descriptor_;
  metadata.reflection = upDynamicData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DynDataUploadReq::kDynamicDataFieldNumber;
#endif  // !_MSC_VER

DynDataUploadReq::DynDataUploadReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dyncfg.pb.DynDataUploadReq)
}

void DynDataUploadReq::InitAsDefaultInstance() {
  dynamic_data_ = const_cast< ::dyncfg::pb::upDynamicData*>(&::dyncfg::pb::upDynamicData::default_instance());
}

DynDataUploadReq::DynDataUploadReq(const DynDataUploadReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dyncfg.pb.DynDataUploadReq)
}

void DynDataUploadReq::SharedCtor() {
  _cached_size_ = 0;
  dynamic_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DynDataUploadReq::~DynDataUploadReq() {
  // @@protoc_insertion_point(destructor:dyncfg.pb.DynDataUploadReq)
  SharedDtor();
}

void DynDataUploadReq::SharedDtor() {
  if (this != default_instance_) {
    delete dynamic_data_;
  }
}

void DynDataUploadReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynDataUploadReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DynDataUploadReq_descriptor_;
}

const DynDataUploadReq& DynDataUploadReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfg_5fprotocol_2eproto();
  return *default_instance_;
}

DynDataUploadReq* DynDataUploadReq::default_instance_ = NULL;

DynDataUploadReq* DynDataUploadReq::New() const {
  return new DynDataUploadReq;
}

void DynDataUploadReq::Clear() {
  if (has_dynamic_data()) {
    if (dynamic_data_ != NULL) dynamic_data_->::dyncfg::pb::upDynamicData::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DynDataUploadReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dyncfg.pb.DynDataUploadReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .dyncfg.pb.upDynamicData dynamic_data = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dynamic_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dyncfg.pb.DynDataUploadReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dyncfg.pb.DynDataUploadReq)
  return false;
#undef DO_
}

void DynDataUploadReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dyncfg.pb.DynDataUploadReq)
  // required .dyncfg.pb.upDynamicData dynamic_data = 2;
  if (has_dynamic_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dynamic_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dyncfg.pb.DynDataUploadReq)
}

::google::protobuf::uint8* DynDataUploadReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dyncfg.pb.DynDataUploadReq)
  // required .dyncfg.pb.upDynamicData dynamic_data = 2;
  if (has_dynamic_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dynamic_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dyncfg.pb.DynDataUploadReq)
  return target;
}

int DynDataUploadReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .dyncfg.pb.upDynamicData dynamic_data = 2;
    if (has_dynamic_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dynamic_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynDataUploadReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DynDataUploadReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DynDataUploadReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DynDataUploadReq::MergeFrom(const DynDataUploadReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dynamic_data()) {
      mutable_dynamic_data()->::dyncfg::pb::upDynamicData::MergeFrom(from.dynamic_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DynDataUploadReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynDataUploadReq::CopyFrom(const DynDataUploadReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynDataUploadReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_dynamic_data()) {
    if (!this->dynamic_data().IsInitialized()) return false;
  }
  return true;
}

void DynDataUploadReq::Swap(DynDataUploadReq* other) {
  if (other != this) {
    std::swap(dynamic_data_, other->dynamic_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DynDataUploadReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DynDataUploadReq_descriptor_;
  metadata.reflection = DynDataUploadReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DynDataUploadRsp::kErrcodeFieldNumber;
const int DynDataUploadRsp::kTimeStampFieldNumber;
#endif  // !_MSC_VER

DynDataUploadRsp::DynDataUploadRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dyncfg.pb.DynDataUploadRsp)
}

void DynDataUploadRsp::InitAsDefaultInstance() {
}

DynDataUploadRsp::DynDataUploadRsp(const DynDataUploadRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dyncfg.pb.DynDataUploadRsp)
}

void DynDataUploadRsp::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  time_stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DynDataUploadRsp::~DynDataUploadRsp() {
  // @@protoc_insertion_point(destructor:dyncfg.pb.DynDataUploadRsp)
  SharedDtor();
}

void DynDataUploadRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DynDataUploadRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynDataUploadRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DynDataUploadRsp_descriptor_;
}

const DynDataUploadRsp& DynDataUploadRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfg_5fprotocol_2eproto();
  return *default_instance_;
}

DynDataUploadRsp* DynDataUploadRsp::default_instance_ = NULL;

DynDataUploadRsp* DynDataUploadRsp::New() const {
  return new DynDataUploadRsp;
}

void DynDataUploadRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DynDataUploadRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(errcode_, time_stamp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DynDataUploadRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dyncfg.pb.DynDataUploadRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 2;
      case 2: {
        if (tag == 16) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dyncfg.pb.DynDataUploadRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dyncfg.pb.DynDataUploadRsp)
  return false;
#undef DO_
}

void DynDataUploadRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dyncfg.pb.DynDataUploadRsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dyncfg.pb.DynDataUploadRsp)
}

::google::protobuf::uint8* DynDataUploadRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dyncfg.pb.DynDataUploadRsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dyncfg.pb.DynDataUploadRsp)
  return target;
}

int DynDataUploadRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }

    // required uint32 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynDataUploadRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DynDataUploadRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DynDataUploadRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DynDataUploadRsp::MergeFrom(const DynDataUploadRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DynDataUploadRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynDataUploadRsp::CopyFrom(const DynDataUploadRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynDataUploadRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DynDataUploadRsp::Swap(DynDataUploadRsp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DynDataUploadRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DynDataUploadRsp_descriptor_;
  metadata.reflection = DynDataUploadRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NAD_FrameInfo::kFrameSnFieldNumber;
const int NAD_FrameInfo::kFrameIdFieldNumber;
const int NAD_FrameInfo::kFrameTypeFieldNumber;
const int NAD_FrameInfo::kDlcFieldNumber;
const int NAD_FrameInfo::kIsEidFieldNumber;
const int NAD_FrameInfo::kSignalNumFieldNumber;
const int NAD_FrameInfo::kSignalsFieldNumber;
#endif  // !_MSC_VER

NAD_FrameInfo::NAD_FrameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dyncfg.pb.NAD_FrameInfo)
}

void NAD_FrameInfo::InitAsDefaultInstance() {
}

NAD_FrameInfo::NAD_FrameInfo(const NAD_FrameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dyncfg.pb.NAD_FrameInfo)
}

void NAD_FrameInfo::SharedCtor() {
  _cached_size_ = 0;
  frame_sn_ = 0u;
  frame_id_ = 0u;
  frame_type_ = 0u;
  dlc_ = 0u;
  is_eid_ = 0u;
  signal_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NAD_FrameInfo::~NAD_FrameInfo() {
  // @@protoc_insertion_point(destructor:dyncfg.pb.NAD_FrameInfo)
  SharedDtor();
}

void NAD_FrameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NAD_FrameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NAD_FrameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NAD_FrameInfo_descriptor_;
}

const NAD_FrameInfo& NAD_FrameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfg_5fprotocol_2eproto();
  return *default_instance_;
}

NAD_FrameInfo* NAD_FrameInfo::default_instance_ = NULL;

NAD_FrameInfo* NAD_FrameInfo::New() const {
  return new NAD_FrameInfo;
}

void NAD_FrameInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NAD_FrameInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(frame_sn_, signal_num_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  signals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NAD_FrameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dyncfg.pb.NAD_FrameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 frame_sn = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_sn_)));
          set_has_frame_sn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_frame_id;
        break;
      }

      // required uint32 frame_id = 2;
      case 2: {
        if (tag == 16) {
         parse_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_id_)));
          set_has_frame_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_frame_type;
        break;
      }

      // required uint32 frame_type = 3;
      case 3: {
        if (tag == 24) {
         parse_frame_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_type_)));
          set_has_frame_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dlc;
        break;
      }

      // required uint32 dlc = 4;
      case 4: {
        if (tag == 32) {
         parse_dlc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dlc_)));
          set_has_dlc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_eid;
        break;
      }

      // required uint32 is_eid = 5;
      case 5: {
        if (tag == 40) {
         parse_is_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_eid_)));
          set_has_is_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_signal_num;
        break;
      }

      // optional uint32 signal_num = 6;
      case 6: {
        if (tag == 48) {
         parse_signal_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signal_num_)));
          set_has_signal_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_signals;
        break;
      }

      // repeated .dyncfg.pb.NAD_SignalInfo signals = 7;
      case 7: {
        if (tag == 58) {
         parse_signals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_signals;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dyncfg.pb.NAD_FrameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dyncfg.pb.NAD_FrameInfo)
  return false;
#undef DO_
}

void NAD_FrameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dyncfg.pb.NAD_FrameInfo)
  // required uint32 frame_sn = 1;
  if (has_frame_sn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->frame_sn(), output);
  }

  // required uint32 frame_id = 2;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->frame_id(), output);
  }

  // required uint32 frame_type = 3;
  if (has_frame_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->frame_type(), output);
  }

  // required uint32 dlc = 4;
  if (has_dlc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dlc(), output);
  }

  // required uint32 is_eid = 5;
  if (has_is_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->is_eid(), output);
  }

  // optional uint32 signal_num = 6;
  if (has_signal_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->signal_num(), output);
  }

  // repeated .dyncfg.pb.NAD_SignalInfo signals = 7;
  for (int i = 0; i < this->signals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->signals(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dyncfg.pb.NAD_FrameInfo)
}

::google::protobuf::uint8* NAD_FrameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dyncfg.pb.NAD_FrameInfo)
  // required uint32 frame_sn = 1;
  if (has_frame_sn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->frame_sn(), target);
  }

  // required uint32 frame_id = 2;
  if (has_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->frame_id(), target);
  }

  // required uint32 frame_type = 3;
  if (has_frame_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->frame_type(), target);
  }

  // required uint32 dlc = 4;
  if (has_dlc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dlc(), target);
  }

  // required uint32 is_eid = 5;
  if (has_is_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->is_eid(), target);
  }

  // optional uint32 signal_num = 6;
  if (has_signal_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->signal_num(), target);
  }

  // repeated .dyncfg.pb.NAD_SignalInfo signals = 7;
  for (int i = 0; i < this->signals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->signals(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dyncfg.pb.NAD_FrameInfo)
  return target;
}

int NAD_FrameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 frame_sn = 1;
    if (has_frame_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frame_sn());
    }

    // required uint32 frame_id = 2;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frame_id());
    }

    // required uint32 frame_type = 3;
    if (has_frame_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frame_type());
    }

    // required uint32 dlc = 4;
    if (has_dlc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dlc());
    }

    // required uint32 is_eid = 5;
    if (has_is_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_eid());
    }

    // optional uint32 signal_num = 6;
    if (has_signal_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->signal_num());
    }

  }
  // repeated .dyncfg.pb.NAD_SignalInfo signals = 7;
  total_size += 1 * this->signals_size();
  for (int i = 0; i < this->signals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signals(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NAD_FrameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NAD_FrameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NAD_FrameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NAD_FrameInfo::MergeFrom(const NAD_FrameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  signals_.MergeFrom(from.signals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frame_sn()) {
      set_frame_sn(from.frame_sn());
    }
    if (from.has_frame_id()) {
      set_frame_id(from.frame_id());
    }
    if (from.has_frame_type()) {
      set_frame_type(from.frame_type());
    }
    if (from.has_dlc()) {
      set_dlc(from.dlc());
    }
    if (from.has_is_eid()) {
      set_is_eid(from.is_eid());
    }
    if (from.has_signal_num()) {
      set_signal_num(from.signal_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NAD_FrameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NAD_FrameInfo::CopyFrom(const NAD_FrameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NAD_FrameInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->signals())) return false;
  return true;
}

void NAD_FrameInfo::Swap(NAD_FrameInfo* other) {
  if (other != this) {
    std::swap(frame_sn_, other->frame_sn_);
    std::swap(frame_id_, other->frame_id_);
    std::swap(frame_type_, other->frame_type_);
    std::swap(dlc_, other->dlc_);
    std::swap(is_eid_, other->is_eid_);
    std::swap(signal_num_, other->signal_num_);
    signals_.Swap(&other->signals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NAD_FrameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NAD_FrameInfo_descriptor_;
  metadata.reflection = NAD_FrameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NAD_SignalInfo::kDataSnFieldNumber;
const int NAD_SignalInfo::kDataTypeFieldNumber;
const int NAD_SignalInfo::kSinNameFieldNumber;
const int NAD_SignalInfo::kSinSnFieldNumber;
const int NAD_SignalInfo::kStartBitFieldNumber;
const int NAD_SignalInfo::kBitSizeFieldNumber;
const int NAD_SignalInfo::kEndianFieldNumber;
const int NAD_SignalInfo::kUploadModeFieldNumber;
const int NAD_SignalInfo::kFrequencyFieldNumber;
#endif  // !_MSC_VER

NAD_SignalInfo::NAD_SignalInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dyncfg.pb.NAD_SignalInfo)
}

void NAD_SignalInfo::InitAsDefaultInstance() {
}

NAD_SignalInfo::NAD_SignalInfo(const NAD_SignalInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dyncfg.pb.NAD_SignalInfo)
}

void NAD_SignalInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_sn_ = 0u;
  data_type_ = 0;
  sin_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sin_sn_ = 0u;
  startbit_ = 0u;
  bitsize_ = 0u;
  endian_ = 0u;
  upload_mode_ = 0u;
  frequency_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NAD_SignalInfo::~NAD_SignalInfo() {
  // @@protoc_insertion_point(destructor:dyncfg.pb.NAD_SignalInfo)
  SharedDtor();
}

void NAD_SignalInfo::SharedDtor() {
  if (sin_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sin_name_;
  }
  if (this != default_instance_) {
  }
}

void NAD_SignalInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NAD_SignalInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NAD_SignalInfo_descriptor_;
}

const NAD_SignalInfo& NAD_SignalInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfg_5fprotocol_2eproto();
  return *default_instance_;
}

NAD_SignalInfo* NAD_SignalInfo::default_instance_ = NULL;

NAD_SignalInfo* NAD_SignalInfo::New() const {
  return new NAD_SignalInfo;
}

void NAD_SignalInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NAD_SignalInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(data_sn_, data_type_);
    ZR_(sin_sn_, upload_mode_);
    if (has_sin_name()) {
      if (sin_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sin_name_->clear();
      }
    }
  }
  frequency_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NAD_SignalInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dyncfg.pb.NAD_SignalInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 data_sn = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_sn_)));
          set_has_data_sn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_data_type;
        break;
      }

      // required .dyncfg.pb.DYN_DATA_TYPE data_type = 2;
      case 2: {
        if (tag == 16) {
         parse_data_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dyncfg::pb::DYN_DATA_TYPE_IsValid(value)) {
            set_data_type(static_cast< ::dyncfg::pb::DYN_DATA_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sin_Name;
        break;
      }

      // required string sin_Name = 3;
      case 3: {
        if (tag == 26) {
         parse_sin_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sin_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sin_name().data(), this->sin_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sin_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sin_Sn;
        break;
      }

      // optional uint32 sin_Sn = 4;
      case 4: {
        if (tag == 32) {
         parse_sin_Sn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sin_sn_)));
          set_has_sin_sn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_startBit;
        break;
      }

      // required uint32 startBit = 5;
      case 5: {
        if (tag == 40) {
         parse_startBit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startbit_)));
          set_has_startbit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bitSize;
        break;
      }

      // required uint32 bitSize = 6;
      case 6: {
        if (tag == 48) {
         parse_bitSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitsize_)));
          set_has_bitsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_endian;
        break;
      }

      // required uint32 endian = 7;
      case 7: {
        if (tag == 56) {
         parse_endian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endian_)));
          set_has_endian();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_upload_mode;
        break;
      }

      // optional uint32 upload_mode = 8;
      case 8: {
        if (tag == 64) {
         parse_upload_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upload_mode_)));
          set_has_upload_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_frequency;
        break;
      }

      // required uint32 frequency = 9;
      case 9: {
        if (tag == 72) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dyncfg.pb.NAD_SignalInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dyncfg.pb.NAD_SignalInfo)
  return false;
#undef DO_
}

void NAD_SignalInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dyncfg.pb.NAD_SignalInfo)
  // required uint32 data_sn = 1;
  if (has_data_sn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data_sn(), output);
  }

  // required .dyncfg.pb.DYN_DATA_TYPE data_type = 2;
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->data_type(), output);
  }

  // required string sin_Name = 3;
  if (has_sin_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sin_name().data(), this->sin_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sin_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sin_name(), output);
  }

  // optional uint32 sin_Sn = 4;
  if (has_sin_sn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sin_sn(), output);
  }

  // required uint32 startBit = 5;
  if (has_startbit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->startbit(), output);
  }

  // required uint32 bitSize = 6;
  if (has_bitsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bitsize(), output);
  }

  // required uint32 endian = 7;
  if (has_endian()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->endian(), output);
  }

  // optional uint32 upload_mode = 8;
  if (has_upload_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->upload_mode(), output);
  }

  // required uint32 frequency = 9;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->frequency(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dyncfg.pb.NAD_SignalInfo)
}

::google::protobuf::uint8* NAD_SignalInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dyncfg.pb.NAD_SignalInfo)
  // required uint32 data_sn = 1;
  if (has_data_sn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->data_sn(), target);
  }

  // required .dyncfg.pb.DYN_DATA_TYPE data_type = 2;
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->data_type(), target);
  }

  // required string sin_Name = 3;
  if (has_sin_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sin_name().data(), this->sin_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sin_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sin_name(), target);
  }

  // optional uint32 sin_Sn = 4;
  if (has_sin_sn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sin_sn(), target);
  }

  // required uint32 startBit = 5;
  if (has_startbit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->startbit(), target);
  }

  // required uint32 bitSize = 6;
  if (has_bitsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->bitsize(), target);
  }

  // required uint32 endian = 7;
  if (has_endian()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->endian(), target);
  }

  // optional uint32 upload_mode = 8;
  if (has_upload_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->upload_mode(), target);
  }

  // required uint32 frequency = 9;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->frequency(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dyncfg.pb.NAD_SignalInfo)
  return target;
}

int NAD_SignalInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 data_sn = 1;
    if (has_data_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_sn());
    }

    // required .dyncfg.pb.DYN_DATA_TYPE data_type = 2;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
    }

    // required string sin_Name = 3;
    if (has_sin_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sin_name());
    }

    // optional uint32 sin_Sn = 4;
    if (has_sin_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sin_sn());
    }

    // required uint32 startBit = 5;
    if (has_startbit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startbit());
    }

    // required uint32 bitSize = 6;
    if (has_bitsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bitsize());
    }

    // required uint32 endian = 7;
    if (has_endian()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endian());
    }

    // optional uint32 upload_mode = 8;
    if (has_upload_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upload_mode());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 frequency = 9;
    if (has_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frequency());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NAD_SignalInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NAD_SignalInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NAD_SignalInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NAD_SignalInfo::MergeFrom(const NAD_SignalInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_sn()) {
      set_data_sn(from.data_sn());
    }
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
    if (from.has_sin_name()) {
      set_sin_name(from.sin_name());
    }
    if (from.has_sin_sn()) {
      set_sin_sn(from.sin_sn());
    }
    if (from.has_startbit()) {
      set_startbit(from.startbit());
    }
    if (from.has_bitsize()) {
      set_bitsize(from.bitsize());
    }
    if (from.has_endian()) {
      set_endian(from.endian());
    }
    if (from.has_upload_mode()) {
      set_upload_mode(from.upload_mode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NAD_SignalInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NAD_SignalInfo::CopyFrom(const NAD_SignalInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NAD_SignalInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000177) != 0x00000177) return false;

  return true;
}

void NAD_SignalInfo::Swap(NAD_SignalInfo* other) {
  if (other != this) {
    std::swap(data_sn_, other->data_sn_);
    std::swap(data_type_, other->data_type_);
    std::swap(sin_name_, other->sin_name_);
    std::swap(sin_sn_, other->sin_sn_);
    std::swap(startbit_, other->startbit_);
    std::swap(bitsize_, other->bitsize_);
    std::swap(endian_, other->endian_);
    std::swap(upload_mode_, other->upload_mode_);
    std::swap(frequency_, other->frequency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NAD_SignalInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NAD_SignalInfo_descriptor_;
  metadata.reflection = NAD_SignalInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBCdictInfoReq::kVehicleTypeFieldNumber;
const int DBCdictInfoReq::kFilepathFieldNumber;
const int DBCdictInfoReq::kVersionFieldNumber;
const int DBCdictInfoReq::kFilesizeFieldNumber;
const int DBCdictInfoReq::kSha256FieldNumber;
#endif  // !_MSC_VER

DBCdictInfoReq::DBCdictInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dyncfg.pb.DBCdictInfoReq)
}

void DBCdictInfoReq::InitAsDefaultInstance() {
}

DBCdictInfoReq::DBCdictInfoReq(const DBCdictInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dyncfg.pb.DBCdictInfoReq)
}

void DBCdictInfoReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  vehicle_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filesize_ = 0u;
  sha256_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBCdictInfoReq::~DBCdictInfoReq() {
  // @@protoc_insertion_point(destructor:dyncfg.pb.DBCdictInfoReq)
  SharedDtor();
}

void DBCdictInfoReq::SharedDtor() {
  if (vehicle_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vehicle_type_;
  }
  if (filepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filepath_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (sha256_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sha256_;
  }
  if (this != default_instance_) {
  }
}

void DBCdictInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBCdictInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBCdictInfoReq_descriptor_;
}

const DBCdictInfoReq& DBCdictInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfg_5fprotocol_2eproto();
  return *default_instance_;
}

DBCdictInfoReq* DBCdictInfoReq::default_instance_ = NULL;

DBCdictInfoReq* DBCdictInfoReq::New() const {
  return new DBCdictInfoReq;
}

void DBCdictInfoReq::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_vehicle_type()) {
      if (vehicle_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vehicle_type_->clear();
      }
    }
    if (has_filepath()) {
      if (filepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filepath_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    filesize_ = 0u;
    if (has_sha256()) {
      if (sha256_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sha256_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBCdictInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dyncfg.pb.DBCdictInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string vehicle_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicle_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vehicle_type().data(), this->vehicle_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vehicle_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_filepath;
        break;
      }

      // required string filepath = 2;
      case 2: {
        if (tag == 18) {
         parse_filepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filepath().data(), this->filepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // required string version = 3;
      case 3: {
        if (tag == 26) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_filesize;
        break;
      }

      // required uint32 filesize = 4;
      case 4: {
        if (tag == 32) {
         parse_filesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sha256;
        break;
      }

      // required bytes sha256 = 5;
      case 5: {
        if (tag == 42) {
         parse_sha256:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha256()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dyncfg.pb.DBCdictInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dyncfg.pb.DBCdictInfoReq)
  return false;
#undef DO_
}

void DBCdictInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dyncfg.pb.DBCdictInfoReq)
  // required string vehicle_type = 1;
  if (has_vehicle_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vehicle_type().data(), this->vehicle_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vehicle_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vehicle_type(), output);
  }

  // required string filepath = 2;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filepath(), output);
  }

  // required string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  // required uint32 filesize = 4;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->filesize(), output);
  }

  // required bytes sha256 = 5;
  if (has_sha256()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->sha256(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dyncfg.pb.DBCdictInfoReq)
}

::google::protobuf::uint8* DBCdictInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dyncfg.pb.DBCdictInfoReq)
  // required string vehicle_type = 1;
  if (has_vehicle_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vehicle_type().data(), this->vehicle_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vehicle_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vehicle_type(), target);
  }

  // required string filepath = 2;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filepath(), target);
  }

  // required string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // required uint32 filesize = 4;
  if (has_filesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->filesize(), target);
  }

  // required bytes sha256 = 5;
  if (has_sha256()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->sha256(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dyncfg.pb.DBCdictInfoReq)
  return target;
}

int DBCdictInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string vehicle_type = 1;
    if (has_vehicle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vehicle_type());
    }

    // required string filepath = 2;
    if (has_filepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filepath());
    }

    // required string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // required uint32 filesize = 4;
    if (has_filesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filesize());
    }

    // required bytes sha256 = 5;
    if (has_sha256()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha256());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBCdictInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBCdictInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBCdictInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBCdictInfoReq::MergeFrom(const DBCdictInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vehicle_type()) {
      set_vehicle_type(from.vehicle_type());
    }
    if (from.has_filepath()) {
      set_filepath(from.filepath());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
    if (from.has_sha256()) {
      set_sha256(from.sha256());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBCdictInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBCdictInfoReq::CopyFrom(const DBCdictInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCdictInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void DBCdictInfoReq::Swap(DBCdictInfoReq* other) {
  if (other != this) {
    std::swap(vehicle_type_, other->vehicle_type_);
    std::swap(filepath_, other->filepath_);
    std::swap(version_, other->version_);
    std::swap(filesize_, other->filesize_);
    std::swap(sha256_, other->sha256_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBCdictInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBCdictInfoReq_descriptor_;
  metadata.reflection = DBCdictInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBCdictInfoRsp::kErrcodeFieldNumber;
const int DBCdictInfoRsp::kTimeStampFieldNumber;
const int DBCdictInfoRsp::kCurDictVersionFieldNumber;
#endif  // !_MSC_VER

DBCdictInfoRsp::DBCdictInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dyncfg.pb.DBCdictInfoRsp)
}

void DBCdictInfoRsp::InitAsDefaultInstance() {
}

DBCdictInfoRsp::DBCdictInfoRsp(const DBCdictInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dyncfg.pb.DBCdictInfoRsp)
}

void DBCdictInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  time_stamp_ = 0u;
  curdictversion_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBCdictInfoRsp::~DBCdictInfoRsp() {
  // @@protoc_insertion_point(destructor:dyncfg.pb.DBCdictInfoRsp)
  SharedDtor();
}

void DBCdictInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBCdictInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBCdictInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBCdictInfoRsp_descriptor_;
}

const DBCdictInfoRsp& DBCdictInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfg_5fprotocol_2eproto();
  return *default_instance_;
}

DBCdictInfoRsp* DBCdictInfoRsp::default_instance_ = NULL;

DBCdictInfoRsp* DBCdictInfoRsp::New() const {
  return new DBCdictInfoRsp;
}

void DBCdictInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBCdictInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(errcode_, curdictversion_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBCdictInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dyncfg.pb.DBCdictInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 2;
      case 2: {
        if (tag == 16) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curDictVersion;
        break;
      }

      // required uint32 curDictVersion = 3;
      case 3: {
        if (tag == 24) {
         parse_curDictVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curdictversion_)));
          set_has_curdictversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dyncfg.pb.DBCdictInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dyncfg.pb.DBCdictInfoRsp)
  return false;
#undef DO_
}

void DBCdictInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dyncfg.pb.DBCdictInfoRsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_stamp(), output);
  }

  // required uint32 curDictVersion = 3;
  if (has_curdictversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curdictversion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dyncfg.pb.DBCdictInfoRsp)
}

::google::protobuf::uint8* DBCdictInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dyncfg.pb.DBCdictInfoRsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_stamp(), target);
  }

  // required uint32 curDictVersion = 3;
  if (has_curdictversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curdictversion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dyncfg.pb.DBCdictInfoRsp)
  return target;
}

int DBCdictInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }

    // required uint32 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

    // required uint32 curDictVersion = 3;
    if (has_curdictversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curdictversion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBCdictInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBCdictInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBCdictInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBCdictInfoRsp::MergeFrom(const DBCdictInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_curdictversion()) {
      set_curdictversion(from.curdictversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBCdictInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBCdictInfoRsp::CopyFrom(const DBCdictInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCdictInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DBCdictInfoRsp::Swap(DBCdictInfoRsp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(curdictversion_, other->curdictversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBCdictInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBCdictInfoRsp_descriptor_;
  metadata.reflection = DBCdictInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBCdynInfo::kVersionFieldNumber;
const int DBCdynInfo::kVehicleTypeFieldNumber;
const int DBCdynInfo::kFrameNumFieldNumber;
const int DBCdynInfo::kFramesFieldNumber;
#endif  // !_MSC_VER

DBCdynInfo::DBCdynInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dyncfg.pb.DBCdynInfo)
}

void DBCdynInfo::InitAsDefaultInstance() {
}

DBCdynInfo::DBCdynInfo(const DBCdynInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dyncfg.pb.DBCdynInfo)
}

void DBCdynInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicle_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBCdynInfo::~DBCdynInfo() {
  // @@protoc_insertion_point(destructor:dyncfg.pb.DBCdynInfo)
  SharedDtor();
}

void DBCdynInfo::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (vehicle_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vehicle_type_;
  }
  if (this != default_instance_) {
  }
}

void DBCdynInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBCdynInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBCdynInfo_descriptor_;
}

const DBCdynInfo& DBCdynInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfg_5fprotocol_2eproto();
  return *default_instance_;
}

DBCdynInfo* DBCdynInfo::default_instance_ = NULL;

DBCdynInfo* DBCdynInfo::New() const {
  return new DBCdynInfo;
}

void DBCdynInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_vehicle_type()) {
      if (vehicle_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vehicle_type_->clear();
      }
    }
    frame_num_ = 0u;
  }
  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBCdynInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dyncfg.pb.DBCdynInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vehicle_type;
        break;
      }

      // required string vehicle_type = 2;
      case 2: {
        if (tag == 18) {
         parse_vehicle_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicle_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vehicle_type().data(), this->vehicle_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vehicle_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_frame_num;
        break;
      }

      // required uint32 frame_num = 3;
      case 3: {
        if (tag == 24) {
         parse_frame_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_num_)));
          set_has_frame_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_frames;
        break;
      }

      // repeated .dyncfg.pb.NAD_FrameInfo frames = 4;
      case 4: {
        if (tag == 34) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_frames;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dyncfg.pb.DBCdynInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dyncfg.pb.DBCdynInfo)
  return false;
#undef DO_
}

void DBCdynInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dyncfg.pb.DBCdynInfo)
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // required string vehicle_type = 2;
  if (has_vehicle_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vehicle_type().data(), this->vehicle_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vehicle_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vehicle_type(), output);
  }

  // required uint32 frame_num = 3;
  if (has_frame_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->frame_num(), output);
  }

  // repeated .dyncfg.pb.NAD_FrameInfo frames = 4;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->frames(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dyncfg.pb.DBCdynInfo)
}

::google::protobuf::uint8* DBCdynInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dyncfg.pb.DBCdynInfo)
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // required string vehicle_type = 2;
  if (has_vehicle_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vehicle_type().data(), this->vehicle_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vehicle_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vehicle_type(), target);
  }

  // required uint32 frame_num = 3;
  if (has_frame_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->frame_num(), target);
  }

  // repeated .dyncfg.pb.NAD_FrameInfo frames = 4;
  for (int i = 0; i < this->frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->frames(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dyncfg.pb.DBCdynInfo)
  return target;
}

int DBCdynInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // required string vehicle_type = 2;
    if (has_vehicle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vehicle_type());
    }

    // required uint32 frame_num = 3;
    if (has_frame_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frame_num());
    }

  }
  // repeated .dyncfg.pb.NAD_FrameInfo frames = 4;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBCdynInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBCdynInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBCdynInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBCdynInfo::MergeFrom(const DBCdynInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_vehicle_type()) {
      set_vehicle_type(from.vehicle_type());
    }
    if (from.has_frame_num()) {
      set_frame_num(from.frame_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBCdynInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBCdynInfo::CopyFrom(const DBCdynInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCdynInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->frames())) return false;
  return true;
}

void DBCdynInfo::Swap(DBCdynInfo* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(vehicle_type_, other->vehicle_type_);
    std::swap(frame_num_, other->frame_num_);
    frames_.Swap(&other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBCdynInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBCdynInfo_descriptor_;
  metadata.reflection = DBCdynInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NADUpLoadDictReq::kRspTypeFieldNumber;
const int NADUpLoadDictReq::kVersionFieldNumber;
const int NADUpLoadDictReq::kVehicleTypeFieldNumber;
const int NADUpLoadDictReq::kTimeStampFieldNumber;
const int NADUpLoadDictReq::kFrameNumFieldNumber;
const int NADUpLoadDictReq::kDataSnFieldNumber;
#endif  // !_MSC_VER

NADUpLoadDictReq::NADUpLoadDictReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dyncfg.pb.NADUpLoadDictReq)
}

void NADUpLoadDictReq::InitAsDefaultInstance() {
}

NADUpLoadDictReq::NADUpLoadDictReq(const NADUpLoadDictReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dyncfg.pb.NADUpLoadDictReq)
}

void NADUpLoadDictReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rsp_type_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicle_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_stamp_ = 0u;
  frame_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NADUpLoadDictReq::~NADUpLoadDictReq() {
  // @@protoc_insertion_point(destructor:dyncfg.pb.NADUpLoadDictReq)
  SharedDtor();
}

void NADUpLoadDictReq::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (vehicle_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vehicle_type_;
  }
  if (this != default_instance_) {
  }
}

void NADUpLoadDictReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NADUpLoadDictReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NADUpLoadDictReq_descriptor_;
}

const NADUpLoadDictReq& NADUpLoadDictReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfg_5fprotocol_2eproto();
  return *default_instance_;
}

NADUpLoadDictReq* NADUpLoadDictReq::default_instance_ = NULL;

NADUpLoadDictReq* NADUpLoadDictReq::New() const {
  return new NADUpLoadDictReq;
}

void NADUpLoadDictReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NADUpLoadDictReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(rsp_type_, time_stamp_);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_vehicle_type()) {
      if (vehicle_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vehicle_type_->clear();
      }
    }
    frame_num_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_sn_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NADUpLoadDictReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dyncfg.pb.NADUpLoadDictReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .dyncfg.pb.DYN_ULOAD_ENUM_TYPE rsp_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dyncfg::pb::DYN_ULOAD_ENUM_TYPE_IsValid(value)) {
            set_rsp_type(static_cast< ::dyncfg::pb::DYN_ULOAD_ENUM_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // required string version = 2;
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vehicle_type;
        break;
      }

      // required string vehicle_type = 3;
      case 3: {
        if (tag == 26) {
         parse_vehicle_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicle_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vehicle_type().data(), this->vehicle_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vehicle_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 4;
      case 4: {
        if (tag == 32) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_frame_num;
        break;
      }

      // required uint32 frame_num = 5;
      case 5: {
        if (tag == 40) {
         parse_frame_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_num_)));
          set_has_frame_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_data_sn;
        break;
      }

      // repeated uint32 data_sn = 6;
      case 6: {
        if (tag == 48) {
         parse_data_sn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_data_sn())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_data_sn())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_data_sn;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dyncfg.pb.NADUpLoadDictReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dyncfg.pb.NADUpLoadDictReq)
  return false;
#undef DO_
}

void NADUpLoadDictReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dyncfg.pb.NADUpLoadDictReq)
  // required .dyncfg.pb.DYN_ULOAD_ENUM_TYPE rsp_type = 1;
  if (has_rsp_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rsp_type(), output);
  }

  // required string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // required string vehicle_type = 3;
  if (has_vehicle_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vehicle_type().data(), this->vehicle_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vehicle_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->vehicle_type(), output);
  }

  // required uint32 time_stamp = 4;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_stamp(), output);
  }

  // required uint32 frame_num = 5;
  if (has_frame_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->frame_num(), output);
  }

  // repeated uint32 data_sn = 6;
  for (int i = 0; i < this->data_sn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->data_sn(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dyncfg.pb.NADUpLoadDictReq)
}

::google::protobuf::uint8* NADUpLoadDictReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dyncfg.pb.NADUpLoadDictReq)
  // required .dyncfg.pb.DYN_ULOAD_ENUM_TYPE rsp_type = 1;
  if (has_rsp_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rsp_type(), target);
  }

  // required string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // required string vehicle_type = 3;
  if (has_vehicle_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vehicle_type().data(), this->vehicle_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vehicle_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vehicle_type(), target);
  }

  // required uint32 time_stamp = 4;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_stamp(), target);
  }

  // required uint32 frame_num = 5;
  if (has_frame_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->frame_num(), target);
  }

  // repeated uint32 data_sn = 6;
  for (int i = 0; i < this->data_sn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->data_sn(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dyncfg.pb.NADUpLoadDictReq)
  return target;
}

int NADUpLoadDictReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .dyncfg.pb.DYN_ULOAD_ENUM_TYPE rsp_type = 1;
    if (has_rsp_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rsp_type());
    }

    // required string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // required string vehicle_type = 3;
    if (has_vehicle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vehicle_type());
    }

    // required uint32 time_stamp = 4;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

    // required uint32 frame_num = 5;
    if (has_frame_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frame_num());
    }

  }
  // repeated uint32 data_sn = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->data_sn_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->data_sn(i));
    }
    total_size += 1 * this->data_sn_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NADUpLoadDictReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NADUpLoadDictReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NADUpLoadDictReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NADUpLoadDictReq::MergeFrom(const NADUpLoadDictReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_sn_.MergeFrom(from.data_sn_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_type()) {
      set_rsp_type(from.rsp_type());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_vehicle_type()) {
      set_vehicle_type(from.vehicle_type());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_frame_num()) {
      set_frame_num(from.frame_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NADUpLoadDictReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NADUpLoadDictReq::CopyFrom(const NADUpLoadDictReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NADUpLoadDictReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void NADUpLoadDictReq::Swap(NADUpLoadDictReq* other) {
  if (other != this) {
    std::swap(rsp_type_, other->rsp_type_);
    std::swap(version_, other->version_);
    std::swap(vehicle_type_, other->vehicle_type_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(frame_num_, other->frame_num_);
    data_sn_.Swap(&other->data_sn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NADUpLoadDictReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NADUpLoadDictReq_descriptor_;
  metadata.reflection = NADUpLoadDictReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NADUpLoadDictRsp::kErrcodeFieldNumber;
const int NADUpLoadDictRsp::kTimeStampFieldNumber;
#endif  // !_MSC_VER

NADUpLoadDictRsp::NADUpLoadDictRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dyncfg.pb.NADUpLoadDictRsp)
}

void NADUpLoadDictRsp::InitAsDefaultInstance() {
}

NADUpLoadDictRsp::NADUpLoadDictRsp(const NADUpLoadDictRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dyncfg.pb.NADUpLoadDictRsp)
}

void NADUpLoadDictRsp::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  time_stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NADUpLoadDictRsp::~NADUpLoadDictRsp() {
  // @@protoc_insertion_point(destructor:dyncfg.pb.NADUpLoadDictRsp)
  SharedDtor();
}

void NADUpLoadDictRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NADUpLoadDictRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NADUpLoadDictRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NADUpLoadDictRsp_descriptor_;
}

const NADUpLoadDictRsp& NADUpLoadDictRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfg_5fprotocol_2eproto();
  return *default_instance_;
}

NADUpLoadDictRsp* NADUpLoadDictRsp::default_instance_ = NULL;

NADUpLoadDictRsp* NADUpLoadDictRsp::New() const {
  return new NADUpLoadDictRsp;
}

void NADUpLoadDictRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NADUpLoadDictRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(errcode_, time_stamp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NADUpLoadDictRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dyncfg.pb.NADUpLoadDictRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 2;
      case 2: {
        if (tag == 16) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dyncfg.pb.NADUpLoadDictRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dyncfg.pb.NADUpLoadDictRsp)
  return false;
#undef DO_
}

void NADUpLoadDictRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dyncfg.pb.NADUpLoadDictRsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dyncfg.pb.NADUpLoadDictRsp)
}

::google::protobuf::uint8* NADUpLoadDictRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dyncfg.pb.NADUpLoadDictRsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dyncfg.pb.NADUpLoadDictRsp)
  return target;
}

int NADUpLoadDictRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }

    // required uint32 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NADUpLoadDictRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NADUpLoadDictRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NADUpLoadDictRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NADUpLoadDictRsp::MergeFrom(const NADUpLoadDictRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NADUpLoadDictRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NADUpLoadDictRsp::CopyFrom(const NADUpLoadDictRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NADUpLoadDictRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NADUpLoadDictRsp::Swap(NADUpLoadDictRsp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NADUpLoadDictRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NADUpLoadDictRsp_descriptor_;
  metadata.reflection = NADUpLoadDictRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NADDynInfoValReq::kFrameNumFieldNumber;
const int NADDynInfoValReq::kFramesFieldNumber;
#endif  // !_MSC_VER

NADDynInfoValReq::NADDynInfoValReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dyncfg.pb.NADDynInfoValReq)
}

void NADDynInfoValReq::InitAsDefaultInstance() {
}

NADDynInfoValReq::NADDynInfoValReq(const NADDynInfoValReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dyncfg.pb.NADDynInfoValReq)
}

void NADDynInfoValReq::SharedCtor() {
  _cached_size_ = 0;
  frame_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NADDynInfoValReq::~NADDynInfoValReq() {
  // @@protoc_insertion_point(destructor:dyncfg.pb.NADDynInfoValReq)
  SharedDtor();
}

void NADDynInfoValReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NADDynInfoValReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NADDynInfoValReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NADDynInfoValReq_descriptor_;
}

const NADDynInfoValReq& NADDynInfoValReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfg_5fprotocol_2eproto();
  return *default_instance_;
}

NADDynInfoValReq* NADDynInfoValReq::default_instance_ = NULL;

NADDynInfoValReq* NADDynInfoValReq::New() const {
  return new NADDynInfoValReq;
}

void NADDynInfoValReq::Clear() {
  frame_num_ = 0u;
  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NADDynInfoValReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dyncfg.pb.NADDynInfoValReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 frame_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_num_)));
          set_has_frame_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_frames;
        break;
      }

      // repeated .dyncfg.pb.NAD_FrameInfo frames = 2;
      case 2: {
        if (tag == 18) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_frames;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dyncfg.pb.NADDynInfoValReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dyncfg.pb.NADDynInfoValReq)
  return false;
#undef DO_
}

void NADDynInfoValReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dyncfg.pb.NADDynInfoValReq)
  // required uint32 frame_num = 1;
  if (has_frame_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->frame_num(), output);
  }

  // repeated .dyncfg.pb.NAD_FrameInfo frames = 2;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->frames(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dyncfg.pb.NADDynInfoValReq)
}

::google::protobuf::uint8* NADDynInfoValReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dyncfg.pb.NADDynInfoValReq)
  // required uint32 frame_num = 1;
  if (has_frame_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->frame_num(), target);
  }

  // repeated .dyncfg.pb.NAD_FrameInfo frames = 2;
  for (int i = 0; i < this->frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->frames(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dyncfg.pb.NADDynInfoValReq)
  return target;
}

int NADDynInfoValReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 frame_num = 1;
    if (has_frame_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frame_num());
    }

  }
  // repeated .dyncfg.pb.NAD_FrameInfo frames = 2;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NADDynInfoValReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NADDynInfoValReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NADDynInfoValReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NADDynInfoValReq::MergeFrom(const NADDynInfoValReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frame_num()) {
      set_frame_num(from.frame_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NADDynInfoValReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NADDynInfoValReq::CopyFrom(const NADDynInfoValReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NADDynInfoValReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->frames())) return false;
  return true;
}

void NADDynInfoValReq::Swap(NADDynInfoValReq* other) {
  if (other != this) {
    std::swap(frame_num_, other->frame_num_);
    frames_.Swap(&other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NADDynInfoValReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NADDynInfoValReq_descriptor_;
  metadata.reflection = NADDynInfoValReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NADDynInfoValRsp::kErrcodeFieldNumber;
const int NADDynInfoValRsp::kTimeStampFieldNumber;
#endif  // !_MSC_VER

NADDynInfoValRsp::NADDynInfoValRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dyncfg.pb.NADDynInfoValRsp)
}

void NADDynInfoValRsp::InitAsDefaultInstance() {
}

NADDynInfoValRsp::NADDynInfoValRsp(const NADDynInfoValRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dyncfg.pb.NADDynInfoValRsp)
}

void NADDynInfoValRsp::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  time_stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NADDynInfoValRsp::~NADDynInfoValRsp() {
  // @@protoc_insertion_point(destructor:dyncfg.pb.NADDynInfoValRsp)
  SharedDtor();
}

void NADDynInfoValRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NADDynInfoValRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NADDynInfoValRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NADDynInfoValRsp_descriptor_;
}

const NADDynInfoValRsp& NADDynInfoValRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfg_5fprotocol_2eproto();
  return *default_instance_;
}

NADDynInfoValRsp* NADDynInfoValRsp::default_instance_ = NULL;

NADDynInfoValRsp* NADDynInfoValRsp::New() const {
  return new NADDynInfoValRsp;
}

void NADDynInfoValRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NADDynInfoValRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(errcode_, time_stamp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NADDynInfoValRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dyncfg.pb.NADDynInfoValRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_stamp;
        break;
      }

      // required uint32 time_stamp = 2;
      case 2: {
        if (tag == 16) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dyncfg.pb.NADDynInfoValRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dyncfg.pb.NADDynInfoValRsp)
  return false;
#undef DO_
}

void NADDynInfoValRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dyncfg.pb.NADDynInfoValRsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dyncfg.pb.NADDynInfoValRsp)
}

::google::protobuf::uint8* NADDynInfoValRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dyncfg.pb.NADDynInfoValRsp)
  // required uint32 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }

  // required uint32 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dyncfg.pb.NADDynInfoValRsp)
  return target;
}

int NADDynInfoValRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }

    // required uint32 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NADDynInfoValRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NADDynInfoValRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NADDynInfoValRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NADDynInfoValRsp::MergeFrom(const NADDynInfoValRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NADDynInfoValRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NADDynInfoValRsp::CopyFrom(const NADDynInfoValRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NADDynInfoValRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NADDynInfoValRsp::Swap(NADDynInfoValRsp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NADDynInfoValRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NADDynInfoValRsp_descriptor_;
  metadata.reflection = NADDynInfoValRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace dyncfg

// @@protoc_insertion_point(global_scope)
