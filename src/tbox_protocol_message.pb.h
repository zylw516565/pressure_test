// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tbox_protocol_message.proto

#ifndef PROTOBUF_tbox_5fprotocol_5fmessage_2eproto__INCLUDED
#define PROTOBUF_tbox_5fprotocol_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tbox {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

class UpgradeInfo;
class LoginReq;
class LoginRsp;
class HeartbeatReq;
class HeartbeatRsp;
class SendRSAReq;
class SendRC4Rsp;
class SetParameterRsp;
class SetParameterReq;
class GetParameterRsp;
class GetParameterReq;
class ECM_Info;
class ABSVDC_Info;
class METER_Info;
class BCM_Info;
class ACU_Info;
class AT_Info;
class STRG_Info;
class EPS_Info;
class USM_Info;
class TPMS_Info;
class WIRE_Info;
class ECO_Info;
class ALARM_Info;
class ITM_Info;
class IKEY_Info;
class COMMON_Info;
class HVAC_Info;
class SBOX_info;
class DVR_Info;
class Basic_Info;
class Vehicle_Info;
class Vehicle_InfoRsp;
class Location_Info;
class Location_InfoRsp;
class RemoteControlResultRsp;
class RemoteControlReq;
class FlowCountRsp;
class FlowCountLimitReq;
class OtaUpgradeReq;
class OtaUpgradeRsp;
class CancelOtaUpgradeRsp;
class OtaUpgradeProgressReq;
class CertCom;
class TCUCertApply_Req;
class TCUCertApply_Rsp;
class CertIssue_Req;
class CertIssue_Rsp;
class RSALoginReq;
class SendRSARsp;
class SendRC4Req;
class SendRC4Resp;
class WakeUpDVRRsp;
class WakeUpDVRReq;
class RmtDiagRsp;
class RmtDiagReq;
class Fault_List_info;
class FourGExtendCmdRsp;
class FourGExtendCmdReq;
class TCUExtendCmdReq;
class TCUExtendCmdRsp;
class Net4GSwitchStatusReq;
class Net4GSwitchStatusRsp;
class netGpsSwitchStatusReq;
class netGpsSwitchStatusRsp;

enum RspCode {
  FAILED = 0,
  SUCCESS = 1
};
bool RspCode_IsValid(int value);
const RspCode RspCode_MIN = FAILED;
const RspCode RspCode_MAX = SUCCESS;
const int RspCode_ARRAYSIZE = RspCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* RspCode_descriptor();
inline const ::std::string& RspCode_Name(RspCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    RspCode_descriptor(), value);
}
inline bool RspCode_Parse(
    const ::std::string& name, RspCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RspCode>(
    RspCode_descriptor(), name, value);
}
enum UpgradeProgressCodeType {
  DOWNLOADING_UPGRADE_PACK = 0,
  DOWNLOAD_UPGRADE_PACK_RESULT = 1,
  BACKUPING_MCU_APP = 2,
  BACKUP_MCU_APP_RESULT = 3,
  START_UPGRADE = 4,
  UPGRADE_RESULT = 5,
  WAITING_UPDATE_CONDITION_SLEEP = 6
};
bool UpgradeProgressCodeType_IsValid(int value);
const UpgradeProgressCodeType UpgradeProgressCodeType_MIN = DOWNLOADING_UPGRADE_PACK;
const UpgradeProgressCodeType UpgradeProgressCodeType_MAX = WAITING_UPDATE_CONDITION_SLEEP;
const int UpgradeProgressCodeType_ARRAYSIZE = UpgradeProgressCodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UpgradeProgressCodeType_descriptor();
inline const ::std::string& UpgradeProgressCodeType_Name(UpgradeProgressCodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UpgradeProgressCodeType_descriptor(), value);
}
inline bool UpgradeProgressCodeType_Parse(
    const ::std::string& name, UpgradeProgressCodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UpgradeProgressCodeType>(
    UpgradeProgressCodeType_descriptor(), name, value);
}
enum RmtDiagRspCode {
  RMT_FAILED = 0,
  RMT_SUCCESS = 1,
  RMT_DIAGNOSING = 2,
  RMT_DIAGNOSED = 3
};
bool RmtDiagRspCode_IsValid(int value);
const RmtDiagRspCode RmtDiagRspCode_MIN = RMT_FAILED;
const RmtDiagRspCode RmtDiagRspCode_MAX = RMT_DIAGNOSED;
const int RmtDiagRspCode_ARRAYSIZE = RmtDiagRspCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* RmtDiagRspCode_descriptor();
inline const ::std::string& RmtDiagRspCode_Name(RmtDiagRspCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    RmtDiagRspCode_descriptor(), value);
}
inline bool RmtDiagRspCode_Parse(
    const ::std::string& name, RmtDiagRspCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RmtDiagRspCode>(
    RmtDiagRspCode_descriptor(), name, value);
}
// ===================================================================

class UpgradeInfo : public ::google::protobuf::Message {
 public:
  UpgradeInfo();
  virtual ~UpgradeInfo();

  UpgradeInfo(const UpgradeInfo& from);

  inline UpgradeInfo& operator=(const UpgradeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpgradeInfo& default_instance();

  void Swap(UpgradeInfo* other);

  // implements Message ----------------------------------------------

  UpgradeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpgradeInfo& from);
  void MergeFrom(const UpgradeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string filetype = 1;
  inline bool has_filetype() const;
  inline void clear_filetype();
  static const int kFiletypeFieldNumber = 1;
  inline const ::std::string& filetype() const;
  inline void set_filetype(const ::std::string& value);
  inline void set_filetype(const char* value);
  inline void set_filetype(const char* value, size_t size);
  inline ::std::string* mutable_filetype();
  inline ::std::string* release_filetype();
  inline void set_allocated_filetype(::std::string* filetype);

  // required string filepath = 2;
  inline bool has_filepath() const;
  inline void clear_filepath();
  static const int kFilepathFieldNumber = 2;
  inline const ::std::string& filepath() const;
  inline void set_filepath(const ::std::string& value);
  inline void set_filepath(const char* value);
  inline void set_filepath(const char* value, size_t size);
  inline ::std::string* mutable_filepath();
  inline ::std::string* release_filepath();
  inline void set_allocated_filepath(::std::string* filepath);

  // required string version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // required uint32 filesize = 4;
  inline bool has_filesize() const;
  inline void clear_filesize();
  static const int kFilesizeFieldNumber = 4;
  inline ::google::protobuf::uint32 filesize() const;
  inline void set_filesize(::google::protobuf::uint32 value);

  // required bytes md5 = 5;
  inline bool has_md5() const;
  inline void clear_md5();
  static const int kMd5FieldNumber = 5;
  inline const ::std::string& md5() const;
  inline void set_md5(const ::std::string& value);
  inline void set_md5(const char* value);
  inline void set_md5(const void* value, size_t size);
  inline ::std::string* mutable_md5();
  inline ::std::string* release_md5();
  inline void set_allocated_md5(::std::string* md5);

  // optional string rc4 = 6;
  inline bool has_rc4() const;
  inline void clear_rc4();
  static const int kRc4FieldNumber = 6;
  inline const ::std::string& rc4() const;
  inline void set_rc4(const ::std::string& value);
  inline void set_rc4(const char* value);
  inline void set_rc4(const char* value, size_t size);
  inline ::std::string* mutable_rc4();
  inline ::std::string* release_rc4();
  inline void set_allocated_rc4(::std::string* rc4);

  // optional bytes sign_md5 = 7;
  inline bool has_sign_md5() const;
  inline void clear_sign_md5();
  static const int kSignMd5FieldNumber = 7;
  inline const ::std::string& sign_md5() const;
  inline void set_sign_md5(const ::std::string& value);
  inline void set_sign_md5(const char* value);
  inline void set_sign_md5(const void* value, size_t size);
  inline ::std::string* mutable_sign_md5();
  inline ::std::string* release_sign_md5();
  inline void set_allocated_sign_md5(::std::string* sign_md5);

  // optional bytes sha2 = 8;
  inline bool has_sha2() const;
  inline void clear_sha2();
  static const int kSha2FieldNumber = 8;
  inline const ::std::string& sha2() const;
  inline void set_sha2(const ::std::string& value);
  inline void set_sha2(const char* value);
  inline void set_sha2(const void* value, size_t size);
  inline ::std::string* mutable_sha2();
  inline ::std::string* release_sha2();
  inline void set_allocated_sha2(::std::string* sha2);

  // optional string aes128 = 9;
  inline bool has_aes128() const;
  inline void clear_aes128();
  static const int kAes128FieldNumber = 9;
  inline const ::std::string& aes128() const;
  inline void set_aes128(const ::std::string& value);
  inline void set_aes128(const char* value);
  inline void set_aes128(const char* value, size_t size);
  inline ::std::string* mutable_aes128();
  inline ::std::string* release_aes128();
  inline void set_allocated_aes128(::std::string* aes128);

  // optional bytes sign_sha2 = 10;
  inline bool has_sign_sha2() const;
  inline void clear_sign_sha2();
  static const int kSignSha2FieldNumber = 10;
  inline const ::std::string& sign_sha2() const;
  inline void set_sign_sha2(const ::std::string& value);
  inline void set_sign_sha2(const char* value);
  inline void set_sign_sha2(const void* value, size_t size);
  inline ::std::string* mutable_sign_sha2();
  inline ::std::string* release_sign_sha2();
  inline void set_allocated_sign_sha2(::std::string* sign_sha2);

  // optional uint32 prefilesize = 11;
  inline bool has_prefilesize() const;
  inline void clear_prefilesize();
  static const int kPrefilesizeFieldNumber = 11;
  inline ::google::protobuf::uint32 prefilesize() const;
  inline void set_prefilesize(::google::protobuf::uint32 value);

  // optional uint32 encrypt_type = 12;
  inline bool has_encrypt_type() const;
  inline void clear_encrypt_type();
  static const int kEncryptTypeFieldNumber = 12;
  inline ::google::protobuf::uint32 encrypt_type() const;
  inline void set_encrypt_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.UpgradeInfo)
 private:
  inline void set_has_filetype();
  inline void clear_has_filetype();
  inline void set_has_filepath();
  inline void clear_has_filepath();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_filesize();
  inline void clear_has_filesize();
  inline void set_has_md5();
  inline void clear_has_md5();
  inline void set_has_rc4();
  inline void clear_has_rc4();
  inline void set_has_sign_md5();
  inline void clear_has_sign_md5();
  inline void set_has_sha2();
  inline void clear_has_sha2();
  inline void set_has_aes128();
  inline void clear_has_aes128();
  inline void set_has_sign_sha2();
  inline void clear_has_sign_sha2();
  inline void set_has_prefilesize();
  inline void clear_has_prefilesize();
  inline void set_has_encrypt_type();
  inline void clear_has_encrypt_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* filetype_;
  ::std::string* filepath_;
  ::std::string* version_;
  ::std::string* md5_;
  ::std::string* rc4_;
  ::std::string* sign_md5_;
  ::google::protobuf::uint32 filesize_;
  ::google::protobuf::uint32 prefilesize_;
  ::std::string* sha2_;
  ::std::string* aes128_;
  ::std::string* sign_sha2_;
  ::google::protobuf::uint32 encrypt_type_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static UpgradeInfo* default_instance_;
};
// -------------------------------------------------------------------

class LoginReq : public ::google::protobuf::Message {
 public:
  LoginReq();
  virtual ~LoginReq();

  LoginReq(const LoginReq& from);

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginReq& default_instance();

  void Swap(LoginReq* other);

  // implements Message ----------------------------------------------

  LoginReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginReq& from);
  void MergeFrom(const LoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string tcu_device_sn = 1;
  inline bool has_tcu_device_sn() const;
  inline void clear_tcu_device_sn();
  static const int kTcuDeviceSnFieldNumber = 1;
  inline const ::std::string& tcu_device_sn() const;
  inline void set_tcu_device_sn(const ::std::string& value);
  inline void set_tcu_device_sn(const char* value);
  inline void set_tcu_device_sn(const char* value, size_t size);
  inline ::std::string* mutable_tcu_device_sn();
  inline ::std::string* release_tcu_device_sn();
  inline void set_allocated_tcu_device_sn(::std::string* tcu_device_sn);

  // required string da_device_sn = 2;
  inline bool has_da_device_sn() const;
  inline void clear_da_device_sn();
  static const int kDaDeviceSnFieldNumber = 2;
  inline const ::std::string& da_device_sn() const;
  inline void set_da_device_sn(const ::std::string& value);
  inline void set_da_device_sn(const char* value);
  inline void set_da_device_sn(const char* value, size_t size);
  inline ::std::string* mutable_da_device_sn();
  inline ::std::string* release_da_device_sn();
  inline void set_allocated_da_device_sn(::std::string* da_device_sn);

  // required string vin = 3;
  inline bool has_vin() const;
  inline void clear_vin();
  static const int kVinFieldNumber = 3;
  inline const ::std::string& vin() const;
  inline void set_vin(const ::std::string& value);
  inline void set_vin(const char* value);
  inline void set_vin(const char* value, size_t size);
  inline ::std::string* mutable_vin();
  inline ::std::string* release_vin();
  inline void set_allocated_vin(::std::string* vin);

  // required string iccid = 4;
  inline bool has_iccid() const;
  inline void clear_iccid();
  static const int kIccidFieldNumber = 4;
  inline const ::std::string& iccid() const;
  inline void set_iccid(const ::std::string& value);
  inline void set_iccid(const char* value);
  inline void set_iccid(const char* value, size_t size);
  inline ::std::string* mutable_iccid();
  inline ::std::string* release_iccid();
  inline void set_allocated_iccid(::std::string* iccid);

  // required string imsi = 5;
  inline bool has_imsi() const;
  inline void clear_imsi();
  static const int kImsiFieldNumber = 5;
  inline const ::std::string& imsi() const;
  inline void set_imsi(const ::std::string& value);
  inline void set_imsi(const char* value);
  inline void set_imsi(const char* value, size_t size);
  inline ::std::string* mutable_imsi();
  inline ::std::string* release_imsi();
  inline void set_allocated_imsi(::std::string* imsi);

  // required string imei = 6;
  inline bool has_imei() const;
  inline void clear_imei();
  static const int kImeiFieldNumber = 6;
  inline const ::std::string& imei() const;
  inline void set_imei(const ::std::string& value);
  inline void set_imei(const char* value);
  inline void set_imei(const char* value, size_t size);
  inline ::std::string* mutable_imei();
  inline ::std::string* release_imei();
  inline void set_allocated_imei(::std::string* imei);

  // required string software_version = 7;
  inline bool has_software_version() const;
  inline void clear_software_version();
  static const int kSoftwareVersionFieldNumber = 7;
  inline const ::std::string& software_version() const;
  inline void set_software_version(const ::std::string& value);
  inline void set_software_version(const char* value);
  inline void set_software_version(const char* value, size_t size);
  inline ::std::string* mutable_software_version();
  inline ::std::string* release_software_version();
  inline void set_allocated_software_version(::std::string* software_version);

  // required string hardware_version = 8;
  inline bool has_hardware_version() const;
  inline void clear_hardware_version();
  static const int kHardwareVersionFieldNumber = 8;
  inline const ::std::string& hardware_version() const;
  inline void set_hardware_version(const ::std::string& value);
  inline void set_hardware_version(const char* value);
  inline void set_hardware_version(const char* value, size_t size);
  inline ::std::string* mutable_hardware_version();
  inline ::std::string* release_hardware_version();
  inline void set_allocated_hardware_version(::std::string* hardware_version);

  // required uint32 time_stamp = 9;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 9;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // optional string g4_version = 10;
  inline bool has_g4_version() const;
  inline void clear_g4_version();
  static const int kG4VersionFieldNumber = 10;
  inline const ::std::string& g4_version() const;
  inline void set_g4_version(const ::std::string& value);
  inline void set_g4_version(const char* value);
  inline void set_g4_version(const char* value, size_t size);
  inline ::std::string* mutable_g4_version();
  inline ::std::string* release_g4_version();
  inline void set_allocated_g4_version(::std::string* g4_version);

  // optional string vehicle_type = 11;
  inline bool has_vehicle_type() const;
  inline void clear_vehicle_type();
  static const int kVehicleTypeFieldNumber = 11;
  inline const ::std::string& vehicle_type() const;
  inline void set_vehicle_type(const ::std::string& value);
  inline void set_vehicle_type(const char* value);
  inline void set_vehicle_type(const char* value, size_t size);
  inline ::std::string* mutable_vehicle_type();
  inline ::std::string* release_vehicle_type();
  inline void set_allocated_vehicle_type(::std::string* vehicle_type);

  // optional bool upgrading = 12;
  inline bool has_upgrading() const;
  inline void clear_upgrading();
  static const int kUpgradingFieldNumber = 12;
  inline bool upgrading() const;
  inline void set_upgrading(bool value);

  // optional bool bcm_reg_status = 13;
  inline bool has_bcm_reg_status() const;
  inline void clear_bcm_reg_status();
  static const int kBcmRegStatusFieldNumber = 13;
  inline bool bcm_reg_status() const;
  inline void set_bcm_reg_status(bool value);

  // optional uint32 ota_algrithom = 14;
  inline bool has_ota_algrithom() const;
  inline void clear_ota_algrithom();
  static const int kOtaAlgrithomFieldNumber = 14;
  inline ::google::protobuf::uint32 ota_algrithom() const;
  inline void set_ota_algrithom(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.LoginReq)
 private:
  inline void set_has_tcu_device_sn();
  inline void clear_has_tcu_device_sn();
  inline void set_has_da_device_sn();
  inline void clear_has_da_device_sn();
  inline void set_has_vin();
  inline void clear_has_vin();
  inline void set_has_iccid();
  inline void clear_has_iccid();
  inline void set_has_imsi();
  inline void clear_has_imsi();
  inline void set_has_imei();
  inline void clear_has_imei();
  inline void set_has_software_version();
  inline void clear_has_software_version();
  inline void set_has_hardware_version();
  inline void clear_has_hardware_version();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_g4_version();
  inline void clear_has_g4_version();
  inline void set_has_vehicle_type();
  inline void clear_has_vehicle_type();
  inline void set_has_upgrading();
  inline void clear_has_upgrading();
  inline void set_has_bcm_reg_status();
  inline void clear_has_bcm_reg_status();
  inline void set_has_ota_algrithom();
  inline void clear_has_ota_algrithom();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* tcu_device_sn_;
  ::std::string* da_device_sn_;
  ::std::string* vin_;
  ::std::string* iccid_;
  ::std::string* imsi_;
  ::std::string* imei_;
  ::std::string* software_version_;
  ::std::string* hardware_version_;
  ::std::string* g4_version_;
  ::std::string* vehicle_type_;
  ::google::protobuf::uint32 time_stamp_;
  bool upgrading_;
  bool bcm_reg_status_;
  ::google::protobuf::uint32 ota_algrithom_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static LoginReq* default_instance_;
};
// -------------------------------------------------------------------

class LoginRsp : public ::google::protobuf::Message {
 public:
  LoginRsp();
  virtual ~LoginRsp();

  LoginRsp(const LoginRsp& from);

  inline LoginRsp& operator=(const LoginRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRsp& default_instance();

  void Swap(LoginRsp* other);

  // implements Message ----------------------------------------------

  LoginRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRsp& from);
  void MergeFrom(const LoginRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);

  // required uint32 time_stamp = 2;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 2;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // repeated .tbox.protocol.UpgradeInfo upgradeinfo = 3;
  inline int upgradeinfo_size() const;
  inline void clear_upgradeinfo();
  static const int kUpgradeinfoFieldNumber = 3;
  inline const ::tbox::protocol::UpgradeInfo& upgradeinfo(int index) const;
  inline ::tbox::protocol::UpgradeInfo* mutable_upgradeinfo(int index);
  inline ::tbox::protocol::UpgradeInfo* add_upgradeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::tbox::protocol::UpgradeInfo >&
      upgradeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::tbox::protocol::UpgradeInfo >*
      mutable_upgradeinfo();

  // @@protoc_insertion_point(class_scope:tbox.protocol.LoginRsp)
 private:
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 time_stamp_;
  ::google::protobuf::RepeatedPtrField< ::tbox::protocol::UpgradeInfo > upgradeinfo_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static LoginRsp* default_instance_;
};
// -------------------------------------------------------------------

class HeartbeatReq : public ::google::protobuf::Message {
 public:
  HeartbeatReq();
  virtual ~HeartbeatReq();

  HeartbeatReq(const HeartbeatReq& from);

  inline HeartbeatReq& operator=(const HeartbeatReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartbeatReq& default_instance();

  void Swap(HeartbeatReq* other);

  // implements Message ----------------------------------------------

  HeartbeatReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartbeatReq& from);
  void MergeFrom(const HeartbeatReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time_stamp = 1;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 1;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.HeartbeatReq)
 private:
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 time_stamp_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static HeartbeatReq* default_instance_;
};
// -------------------------------------------------------------------

class HeartbeatRsp : public ::google::protobuf::Message {
 public:
  HeartbeatRsp();
  virtual ~HeartbeatRsp();

  HeartbeatRsp(const HeartbeatRsp& from);

  inline HeartbeatRsp& operator=(const HeartbeatRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartbeatRsp& default_instance();

  void Swap(HeartbeatRsp* other);

  // implements Message ----------------------------------------------

  HeartbeatRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartbeatRsp& from);
  void MergeFrom(const HeartbeatRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);

  // required uint32 time_stamp = 2;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 2;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.HeartbeatRsp)
 private:
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 time_stamp_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static HeartbeatRsp* default_instance_;
};
// -------------------------------------------------------------------

class SendRSAReq : public ::google::protobuf::Message {
 public:
  SendRSAReq();
  virtual ~SendRSAReq();

  SendRSAReq(const SendRSAReq& from);

  inline SendRSAReq& operator=(const SendRSAReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendRSAReq& default_instance();

  void Swap(SendRSAReq* other);

  // implements Message ----------------------------------------------

  SendRSAReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendRSAReq& from);
  void MergeFrom(const SendRSAReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 N_len = 1;
  inline bool has_n_len() const;
  inline void clear_n_len();
  static const int kNLenFieldNumber = 1;
  inline ::google::protobuf::uint32 n_len() const;
  inline void set_n_len(::google::protobuf::uint32 value);

  // required string N_string = 2;
  inline bool has_n_string() const;
  inline void clear_n_string();
  static const int kNStringFieldNumber = 2;
  inline const ::std::string& n_string() const;
  inline void set_n_string(const ::std::string& value);
  inline void set_n_string(const char* value);
  inline void set_n_string(const char* value, size_t size);
  inline ::std::string* mutable_n_string();
  inline ::std::string* release_n_string();
  inline void set_allocated_n_string(::std::string* n_string);

  // required uint32 E1_len = 3;
  inline bool has_e1_len() const;
  inline void clear_e1_len();
  static const int kE1LenFieldNumber = 3;
  inline ::google::protobuf::uint32 e1_len() const;
  inline void set_e1_len(::google::protobuf::uint32 value);

  // required string E1_string = 4;
  inline bool has_e1_string() const;
  inline void clear_e1_string();
  static const int kE1StringFieldNumber = 4;
  inline const ::std::string& e1_string() const;
  inline void set_e1_string(const ::std::string& value);
  inline void set_e1_string(const char* value);
  inline void set_e1_string(const char* value, size_t size);
  inline ::std::string* mutable_e1_string();
  inline ::std::string* release_e1_string();
  inline void set_allocated_e1_string(::std::string* e1_string);

  // required uint32 time_stamp = 5;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 5;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.SendRSAReq)
 private:
  inline void set_has_n_len();
  inline void clear_has_n_len();
  inline void set_has_n_string();
  inline void clear_has_n_string();
  inline void set_has_e1_len();
  inline void clear_has_e1_len();
  inline void set_has_e1_string();
  inline void clear_has_e1_string();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* n_string_;
  ::google::protobuf::uint32 n_len_;
  ::google::protobuf::uint32 e1_len_;
  ::std::string* e1_string_;
  ::google::protobuf::uint32 time_stamp_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static SendRSAReq* default_instance_;
};
// -------------------------------------------------------------------

class SendRC4Rsp : public ::google::protobuf::Message {
 public:
  SendRC4Rsp();
  virtual ~SendRC4Rsp();

  SendRC4Rsp(const SendRC4Rsp& from);

  inline SendRC4Rsp& operator=(const SendRC4Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendRC4Rsp& default_instance();

  void Swap(SendRC4Rsp* other);

  // implements Message ----------------------------------------------

  SendRC4Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendRC4Rsp& from);
  void MergeFrom(const SendRC4Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);

  // required uint32 serial_number = 2;
  inline bool has_serial_number() const;
  inline void clear_serial_number();
  static const int kSerialNumberFieldNumber = 2;
  inline ::google::protobuf::uint32 serial_number() const;
  inline void set_serial_number(::google::protobuf::uint32 value);

  // required uint32 time_stamp = 3;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 3;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.SendRC4Rsp)
 private:
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_serial_number();
  inline void clear_has_serial_number();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 serial_number_;
  ::google::protobuf::uint32 time_stamp_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static SendRC4Rsp* default_instance_;
};
// -------------------------------------------------------------------

class SetParameterRsp : public ::google::protobuf::Message {
 public:
  SetParameterRsp();
  virtual ~SetParameterRsp();

  SetParameterRsp(const SetParameterRsp& from);

  inline SetParameterRsp& operator=(const SetParameterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetParameterRsp& default_instance();

  void Swap(SetParameterRsp* other);

  // implements Message ----------------------------------------------

  SetParameterRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetParameterRsp& from);
  void MergeFrom(const SetParameterRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);

  // required uint32 time_stamp = 2;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 2;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.SetParameterRsp)
 private:
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 time_stamp_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static SetParameterRsp* default_instance_;
};
// -------------------------------------------------------------------

class SetParameterReq : public ::google::protobuf::Message {
 public:
  SetParameterReq();
  virtual ~SetParameterReq();

  SetParameterReq(const SetParameterReq& from);

  inline SetParameterReq& operator=(const SetParameterReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetParameterReq& default_instance();

  void Swap(SetParameterReq* other);

  // implements Message ----------------------------------------------

  SetParameterReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetParameterReq& from);
  void MergeFrom(const SetParameterReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 local_storage_cycle = 1;
  inline bool has_local_storage_cycle() const;
  inline void clear_local_storage_cycle();
  static const int kLocalStorageCycleFieldNumber = 1;
  inline ::google::protobuf::uint32 local_storage_cycle() const;
  inline void set_local_storage_cycle(::google::protobuf::uint32 value);

  // required uint32 upload_data_cycle_normal = 2;
  inline bool has_upload_data_cycle_normal() const;
  inline void clear_upload_data_cycle_normal();
  static const int kUploadDataCycleNormalFieldNumber = 2;
  inline ::google::protobuf::uint32 upload_data_cycle_normal() const;
  inline void set_upload_data_cycle_normal(::google::protobuf::uint32 value);

  // required uint32 upload_GPS_cycle_normal = 3;
  inline bool has_upload_gps_cycle_normal() const;
  inline void clear_upload_gps_cycle_normal();
  static const int kUploadGPSCycleNormalFieldNumber = 3;
  inline ::google::protobuf::uint32 upload_gps_cycle_normal() const;
  inline void set_upload_gps_cycle_normal(::google::protobuf::uint32 value);

  // required uint32 upload_data_cycle_alarm = 4;
  inline bool has_upload_data_cycle_alarm() const;
  inline void clear_upload_data_cycle_alarm();
  static const int kUploadDataCycleAlarmFieldNumber = 4;
  inline ::google::protobuf::uint32 upload_data_cycle_alarm() const;
  inline void set_upload_data_cycle_alarm(::google::protobuf::uint32 value);

  // required uint32 upload_GPS_cycle_alarm = 5;
  inline bool has_upload_gps_cycle_alarm() const;
  inline void clear_upload_gps_cycle_alarm();
  static const int kUploadGPSCycleAlarmFieldNumber = 5;
  inline ::google::protobuf::uint32 upload_gps_cycle_alarm() const;
  inline void set_upload_gps_cycle_alarm(::google::protobuf::uint32 value);

  // optional uint32 heartbeat_cycle = 6;
  inline bool has_heartbeat_cycle() const;
  inline void clear_heartbeat_cycle();
  static const int kHeartbeatCycleFieldNumber = 6;
  inline ::google::protobuf::uint32 heartbeat_cycle() const;
  inline void set_heartbeat_cycle(::google::protobuf::uint32 value);

  // optional uint32 server_response_timeout = 7;
  inline bool has_server_response_timeout() const;
  inline void clear_server_response_timeout();
  static const int kServerResponseTimeoutFieldNumber = 7;
  inline ::google::protobuf::uint32 server_response_timeout() const;
  inline void set_server_response_timeout(::google::protobuf::uint32 value);

  // optional uint32 box_response_timeout = 8;
  inline bool has_box_response_timeout() const;
  inline void clear_box_response_timeout();
  static const int kBoxResponseTimeoutFieldNumber = 8;
  inline ::google::protobuf::uint32 box_response_timeout() const;
  inline void set_box_response_timeout(::google::protobuf::uint32 value);

  // optional bool FlowControlSwitch = 9;
  inline bool has_flowcontrolswitch() const;
  inline void clear_flowcontrolswitch();
  static const int kFlowControlSwitchFieldNumber = 9;
  inline bool flowcontrolswitch() const;
  inline void set_flowcontrolswitch(bool value);

  // optional uint32 GPSconversion = 10;
  inline bool has_gpsconversion() const;
  inline void clear_gpsconversion();
  static const int kGPSconversionFieldNumber = 10;
  inline ::google::protobuf::uint32 gpsconversion() const;
  inline void set_gpsconversion(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.SetParameterReq)
 private:
  inline void set_has_local_storage_cycle();
  inline void clear_has_local_storage_cycle();
  inline void set_has_upload_data_cycle_normal();
  inline void clear_has_upload_data_cycle_normal();
  inline void set_has_upload_gps_cycle_normal();
  inline void clear_has_upload_gps_cycle_normal();
  inline void set_has_upload_data_cycle_alarm();
  inline void clear_has_upload_data_cycle_alarm();
  inline void set_has_upload_gps_cycle_alarm();
  inline void clear_has_upload_gps_cycle_alarm();
  inline void set_has_heartbeat_cycle();
  inline void clear_has_heartbeat_cycle();
  inline void set_has_server_response_timeout();
  inline void clear_has_server_response_timeout();
  inline void set_has_box_response_timeout();
  inline void clear_has_box_response_timeout();
  inline void set_has_flowcontrolswitch();
  inline void clear_has_flowcontrolswitch();
  inline void set_has_gpsconversion();
  inline void clear_has_gpsconversion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 local_storage_cycle_;
  ::google::protobuf::uint32 upload_data_cycle_normal_;
  ::google::protobuf::uint32 upload_gps_cycle_normal_;
  ::google::protobuf::uint32 upload_data_cycle_alarm_;
  ::google::protobuf::uint32 upload_gps_cycle_alarm_;
  ::google::protobuf::uint32 heartbeat_cycle_;
  ::google::protobuf::uint32 server_response_timeout_;
  ::google::protobuf::uint32 box_response_timeout_;
  bool flowcontrolswitch_;
  ::google::protobuf::uint32 gpsconversion_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static SetParameterReq* default_instance_;
};
// -------------------------------------------------------------------

class GetParameterRsp : public ::google::protobuf::Message {
 public:
  GetParameterRsp();
  virtual ~GetParameterRsp();

  GetParameterRsp(const GetParameterRsp& from);

  inline GetParameterRsp& operator=(const GetParameterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetParameterRsp& default_instance();

  void Swap(GetParameterRsp* other);

  // implements Message ----------------------------------------------

  GetParameterRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetParameterRsp& from);
  void MergeFrom(const GetParameterRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);

  // required uint32 local_storage_cycle = 2;
  inline bool has_local_storage_cycle() const;
  inline void clear_local_storage_cycle();
  static const int kLocalStorageCycleFieldNumber = 2;
  inline ::google::protobuf::uint32 local_storage_cycle() const;
  inline void set_local_storage_cycle(::google::protobuf::uint32 value);

  // required uint32 upload_data_cycle_normal = 3;
  inline bool has_upload_data_cycle_normal() const;
  inline void clear_upload_data_cycle_normal();
  static const int kUploadDataCycleNormalFieldNumber = 3;
  inline ::google::protobuf::uint32 upload_data_cycle_normal() const;
  inline void set_upload_data_cycle_normal(::google::protobuf::uint32 value);

  // required uint32 upload_GPS_cycle_normal = 4;
  inline bool has_upload_gps_cycle_normal() const;
  inline void clear_upload_gps_cycle_normal();
  static const int kUploadGPSCycleNormalFieldNumber = 4;
  inline ::google::protobuf::uint32 upload_gps_cycle_normal() const;
  inline void set_upload_gps_cycle_normal(::google::protobuf::uint32 value);

  // required uint32 upload_data_cycle_alarm = 5;
  inline bool has_upload_data_cycle_alarm() const;
  inline void clear_upload_data_cycle_alarm();
  static const int kUploadDataCycleAlarmFieldNumber = 5;
  inline ::google::protobuf::uint32 upload_data_cycle_alarm() const;
  inline void set_upload_data_cycle_alarm(::google::protobuf::uint32 value);

  // required uint32 upload_GPS_cycle_alarm = 6;
  inline bool has_upload_gps_cycle_alarm() const;
  inline void clear_upload_gps_cycle_alarm();
  static const int kUploadGPSCycleAlarmFieldNumber = 6;
  inline ::google::protobuf::uint32 upload_gps_cycle_alarm() const;
  inline void set_upload_gps_cycle_alarm(::google::protobuf::uint32 value);

  // required uint32 heartbeat_cycle = 7;
  inline bool has_heartbeat_cycle() const;
  inline void clear_heartbeat_cycle();
  static const int kHeartbeatCycleFieldNumber = 7;
  inline ::google::protobuf::uint32 heartbeat_cycle() const;
  inline void set_heartbeat_cycle(::google::protobuf::uint32 value);

  // required uint32 server_response_timeout = 8;
  inline bool has_server_response_timeout() const;
  inline void clear_server_response_timeout();
  static const int kServerResponseTimeoutFieldNumber = 8;
  inline ::google::protobuf::uint32 server_response_timeout() const;
  inline void set_server_response_timeout(::google::protobuf::uint32 value);

  // required uint32 box_response_timeout = 9;
  inline bool has_box_response_timeout() const;
  inline void clear_box_response_timeout();
  static const int kBoxResponseTimeoutFieldNumber = 9;
  inline ::google::protobuf::uint32 box_response_timeout() const;
  inline void set_box_response_timeout(::google::protobuf::uint32 value);

  // required string firmware_version = 10;
  inline bool has_firmware_version() const;
  inline void clear_firmware_version();
  static const int kFirmwareVersionFieldNumber = 10;
  inline const ::std::string& firmware_version() const;
  inline void set_firmware_version(const ::std::string& value);
  inline void set_firmware_version(const char* value);
  inline void set_firmware_version(const char* value, size_t size);
  inline ::std::string* mutable_firmware_version();
  inline ::std::string* release_firmware_version();
  inline void set_allocated_firmware_version(::std::string* firmware_version);

  // required string hardware_version = 11;
  inline bool has_hardware_version() const;
  inline void clear_hardware_version();
  static const int kHardwareVersionFieldNumber = 11;
  inline const ::std::string& hardware_version() const;
  inline void set_hardware_version(const ::std::string& value);
  inline void set_hardware_version(const char* value);
  inline void set_hardware_version(const char* value, size_t size);
  inline ::std::string* mutable_hardware_version();
  inline ::std::string* release_hardware_version();
  inline void set_allocated_hardware_version(::std::string* hardware_version);

  // required uint32 time_stamp = 12;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 12;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.GetParameterRsp)
 private:
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_local_storage_cycle();
  inline void clear_has_local_storage_cycle();
  inline void set_has_upload_data_cycle_normal();
  inline void clear_has_upload_data_cycle_normal();
  inline void set_has_upload_gps_cycle_normal();
  inline void clear_has_upload_gps_cycle_normal();
  inline void set_has_upload_data_cycle_alarm();
  inline void clear_has_upload_data_cycle_alarm();
  inline void set_has_upload_gps_cycle_alarm();
  inline void clear_has_upload_gps_cycle_alarm();
  inline void set_has_heartbeat_cycle();
  inline void clear_has_heartbeat_cycle();
  inline void set_has_server_response_timeout();
  inline void clear_has_server_response_timeout();
  inline void set_has_box_response_timeout();
  inline void clear_has_box_response_timeout();
  inline void set_has_firmware_version();
  inline void clear_has_firmware_version();
  inline void set_has_hardware_version();
  inline void clear_has_hardware_version();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 local_storage_cycle_;
  ::google::protobuf::uint32 upload_data_cycle_normal_;
  ::google::protobuf::uint32 upload_gps_cycle_normal_;
  ::google::protobuf::uint32 upload_data_cycle_alarm_;
  ::google::protobuf::uint32 upload_gps_cycle_alarm_;
  ::google::protobuf::uint32 heartbeat_cycle_;
  ::google::protobuf::uint32 server_response_timeout_;
  ::std::string* firmware_version_;
  ::google::protobuf::uint32 box_response_timeout_;
  ::google::protobuf::uint32 time_stamp_;
  ::std::string* hardware_version_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static GetParameterRsp* default_instance_;
};
// -------------------------------------------------------------------

class GetParameterReq : public ::google::protobuf::Message {
 public:
  GetParameterReq();
  virtual ~GetParameterReq();

  GetParameterReq(const GetParameterReq& from);

  inline GetParameterReq& operator=(const GetParameterReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetParameterReq& default_instance();

  void Swap(GetParameterReq* other);

  // implements Message ----------------------------------------------

  GetParameterReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetParameterReq& from);
  void MergeFrom(const GetParameterReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time_stamp = 1;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 1;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.GetParameterReq)
 private:
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 time_stamp_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static GetParameterReq* default_instance_;
};
// -------------------------------------------------------------------

class ECM_Info : public ::google::protobuf::Message {
 public:
  ECM_Info();
  virtual ~ECM_Info();

  ECM_Info(const ECM_Info& from);

  inline ECM_Info& operator=(const ECM_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ECM_Info& default_instance();

  void Swap(ECM_Info* other);

  // implements Message ----------------------------------------------

  ECM_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ECM_Info& from);
  void MergeFrom(const ECM_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 EngineRPM = 1;
  inline bool has_enginerpm() const;
  inline void clear_enginerpm();
  static const int kEngineRPMFieldNumber = 1;
  inline ::google::protobuf::uint32 enginerpm() const;
  inline void set_enginerpm(::google::protobuf::uint32 value);

  // optional uint32 RawSensor = 2;
  inline bool has_rawsensor() const;
  inline void clear_rawsensor();
  static const int kRawSensorFieldNumber = 2;
  inline ::google::protobuf::uint32 rawsensor() const;
  inline void set_rawsensor(::google::protobuf::uint32 value);

  // optional uint32 ClutchSwitch = 3;
  inline bool has_clutchswitch() const;
  inline void clear_clutchswitch();
  static const int kClutchSwitchFieldNumber = 3;
  inline ::google::protobuf::uint32 clutchswitch() const;
  inline void set_clutchswitch(::google::protobuf::uint32 value);

  // optional uint32 EngineStatus = 4;
  inline bool has_enginestatus() const;
  inline void clear_enginestatus();
  static const int kEngineStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 enginestatus() const;
  inline void set_enginestatus(::google::protobuf::uint32 value);

  // optional uint32 EngineCoolantTemp = 5;
  inline bool has_enginecoolanttemp() const;
  inline void clear_enginecoolanttemp();
  static const int kEngineCoolantTempFieldNumber = 5;
  inline ::google::protobuf::uint32 enginecoolanttemp() const;
  inline void set_enginecoolanttemp(::google::protobuf::uint32 value);

  // optional uint32 FuelConsumption = 6;
  inline bool has_fuelconsumption() const;
  inline void clear_fuelconsumption();
  static const int kFuelConsumptionFieldNumber = 6;
  inline ::google::protobuf::uint32 fuelconsumption() const;
  inline void set_fuelconsumption(::google::protobuf::uint32 value);

  // optional bool DiagMuxOn = 7;
  inline bool has_diagmuxon() const;
  inline void clear_diagmuxon();
  static const int kDiagMuxOnFieldNumber = 7;
  inline bool diagmuxon() const;
  inline void set_diagmuxon(bool value);

  // optional bool EconomyModeLamp = 8;
  inline bool has_economymodelamp() const;
  inline void clear_economymodelamp();
  static const int kEconomyModeLampFieldNumber = 8;
  inline bool economymodelamp() const;
  inline void set_economymodelamp(bool value);

  // optional uint32 CO2_Content = 9;
  inline bool has_co2_content() const;
  inline void clear_co2_content();
  static const int kCO2ContentFieldNumber = 9;
  inline ::google::protobuf::uint32 co2_content() const;
  inline void set_co2_content(::google::protobuf::uint32 value);

  // optional uint32 CO_Content = 10;
  inline bool has_co_content() const;
  inline void clear_co_content();
  static const int kCOContentFieldNumber = 10;
  inline ::google::protobuf::uint32 co_content() const;
  inline void set_co_content(::google::protobuf::uint32 value);

  // optional uint32 HC_Content = 11;
  inline bool has_hc_content() const;
  inline void clear_hc_content();
  static const int kHCContentFieldNumber = 11;
  inline ::google::protobuf::uint32 hc_content() const;
  inline void set_hc_content(::google::protobuf::uint32 value);

  // optional uint32 O2_Content = 12;
  inline bool has_o2_content() const;
  inline void clear_o2_content();
  static const int kO2ContentFieldNumber = 12;
  inline ::google::protobuf::uint32 o2_content() const;
  inline void set_o2_content(::google::protobuf::uint32 value);

  // optional uint32 ACHighPressureSensor = 13;
  inline bool has_achighpressuresensor() const;
  inline void clear_achighpressuresensor();
  static const int kACHighPressureSensorFieldNumber = 13;
  inline ::google::protobuf::uint32 achighpressuresensor() const;
  inline void set_achighpressuresensor(::google::protobuf::uint32 value);

  // optional uint32 CruiseControlStatus = 14;
  inline bool has_cruisecontrolstatus() const;
  inline void clear_cruisecontrolstatus();
  static const int kCruiseControlStatusFieldNumber = 14;
  inline ::google::protobuf::uint32 cruisecontrolstatus() const;
  inline void set_cruisecontrolstatus(::google::protobuf::uint32 value);

  // optional uint32 EngineThrottlePosition = 15;
  inline bool has_enginethrottleposition() const;
  inline void clear_enginethrottleposition();
  static const int kEngineThrottlePositionFieldNumber = 15;
  inline ::google::protobuf::uint32 enginethrottleposition() const;
  inline void set_enginethrottleposition(::google::protobuf::uint32 value);

  // optional uint32 MeanEffectiveTorque = 16;
  inline bool has_meaneffectivetorque() const;
  inline void clear_meaneffectivetorque();
  static const int kMeanEffectiveTorqueFieldNumber = 16;
  inline ::google::protobuf::uint32 meaneffectivetorque() const;
  inline void set_meaneffectivetorque(::google::protobuf::uint32 value);

  // optional uint32 Fuel_Consumption_Fine = 17;
  inline bool has_fuel_consumption_fine() const;
  inline void clear_fuel_consumption_fine();
  static const int kFuelConsumptionFineFieldNumber = 17;
  inline ::google::protobuf::uint32 fuel_consumption_fine() const;
  inline void set_fuel_consumption_fine(::google::protobuf::uint32 value);

  // optional uint32 SOF_V1 = 18;
  inline bool has_sof_v1() const;
  inline void clear_sof_v1();
  static const int kSOFV1FieldNumber = 18;
  inline ::google::protobuf::uint32 sof_v1() const;
  inline void set_sof_v1(::google::protobuf::uint32 value);

  // optional uint32 SOF_V1_State = 19;
  inline bool has_sof_v1_state() const;
  inline void clear_sof_v1_state();
  static const int kSOFV1StateFieldNumber = 19;
  inline ::google::protobuf::uint32 sof_v1_state() const;
  inline void set_sof_v1_state(::google::protobuf::uint32 value);

  // optional uint32 Vbmin = 20;
  inline bool has_vbmin() const;
  inline void clear_vbmin();
  static const int kVbminFieldNumber = 20;
  inline ::google::protobuf::uint32 vbmin() const;
  inline void set_vbmin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.ECM_Info)
 private:
  inline void set_has_enginerpm();
  inline void clear_has_enginerpm();
  inline void set_has_rawsensor();
  inline void clear_has_rawsensor();
  inline void set_has_clutchswitch();
  inline void clear_has_clutchswitch();
  inline void set_has_enginestatus();
  inline void clear_has_enginestatus();
  inline void set_has_enginecoolanttemp();
  inline void clear_has_enginecoolanttemp();
  inline void set_has_fuelconsumption();
  inline void clear_has_fuelconsumption();
  inline void set_has_diagmuxon();
  inline void clear_has_diagmuxon();
  inline void set_has_economymodelamp();
  inline void clear_has_economymodelamp();
  inline void set_has_co2_content();
  inline void clear_has_co2_content();
  inline void set_has_co_content();
  inline void clear_has_co_content();
  inline void set_has_hc_content();
  inline void clear_has_hc_content();
  inline void set_has_o2_content();
  inline void clear_has_o2_content();
  inline void set_has_achighpressuresensor();
  inline void clear_has_achighpressuresensor();
  inline void set_has_cruisecontrolstatus();
  inline void clear_has_cruisecontrolstatus();
  inline void set_has_enginethrottleposition();
  inline void clear_has_enginethrottleposition();
  inline void set_has_meaneffectivetorque();
  inline void clear_has_meaneffectivetorque();
  inline void set_has_fuel_consumption_fine();
  inline void clear_has_fuel_consumption_fine();
  inline void set_has_sof_v1();
  inline void clear_has_sof_v1();
  inline void set_has_sof_v1_state();
  inline void clear_has_sof_v1_state();
  inline void set_has_vbmin();
  inline void clear_has_vbmin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 enginerpm_;
  ::google::protobuf::uint32 rawsensor_;
  ::google::protobuf::uint32 clutchswitch_;
  ::google::protobuf::uint32 enginestatus_;
  ::google::protobuf::uint32 enginecoolanttemp_;
  ::google::protobuf::uint32 fuelconsumption_;
  bool diagmuxon_;
  bool economymodelamp_;
  ::google::protobuf::uint32 co2_content_;
  ::google::protobuf::uint32 co_content_;
  ::google::protobuf::uint32 hc_content_;
  ::google::protobuf::uint32 o2_content_;
  ::google::protobuf::uint32 achighpressuresensor_;
  ::google::protobuf::uint32 cruisecontrolstatus_;
  ::google::protobuf::uint32 enginethrottleposition_;
  ::google::protobuf::uint32 meaneffectivetorque_;
  ::google::protobuf::uint32 fuel_consumption_fine_;
  ::google::protobuf::uint32 sof_v1_;
  ::google::protobuf::uint32 sof_v1_state_;
  ::google::protobuf::uint32 vbmin_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static ECM_Info* default_instance_;
};
// -------------------------------------------------------------------

class ABSVDC_Info : public ::google::protobuf::Message {
 public:
  ABSVDC_Info();
  virtual ~ABSVDC_Info();

  ABSVDC_Info(const ABSVDC_Info& from);

  inline ABSVDC_Info& operator=(const ABSVDC_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ABSVDC_Info& default_instance();

  void Swap(ABSVDC_Info* other);

  // implements Message ----------------------------------------------

  ABSVDC_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ABSVDC_Info& from);
  void MergeFrom(const ABSVDC_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool ASRinRegulation = 1;
  inline bool has_asrinregulation() const;
  inline void clear_asrinregulation();
  static const int kASRinRegulationFieldNumber = 1;
  inline bool asrinregulation() const;
  inline void set_asrinregulation(bool value);

  // optional uint32 LongitudinalAccelerationProc02 = 2;
  inline bool has_longitudinalaccelerationproc02() const;
  inline void clear_longitudinalaccelerationproc02();
  static const int kLongitudinalAccelerationProc02FieldNumber = 2;
  inline ::google::protobuf::uint32 longitudinalaccelerationproc02() const;
  inline void set_longitudinalaccelerationproc02(::google::protobuf::uint32 value);

  // optional uint32 Transversalacceleration02 = 3;
  inline bool has_transversalacceleration02() const;
  inline void clear_transversalacceleration02();
  static const int kTransversalacceleration02FieldNumber = 3;
  inline ::google::protobuf::uint32 transversalacceleration02() const;
  inline void set_transversalacceleration02(::google::protobuf::uint32 value);

  // optional uint32 YawRate02 = 4;
  inline bool has_yawrate02() const;
  inline void clear_yawrate02();
  static const int kYawRate02FieldNumber = 4;
  inline ::google::protobuf::uint32 yawrate02() const;
  inline void set_yawrate02(::google::protobuf::uint32 value);

  // optional uint32 IDM_StopLampRequest = 5;
  inline bool has_idm_stoplamprequest() const;
  inline void clear_idm_stoplamprequest();
  static const int kIDMStopLampRequestFieldNumber = 5;
  inline ::google::protobuf::uint32 idm_stoplamprequest() const;
  inline void set_idm_stoplamprequest(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.ABSVDC_Info)
 private:
  inline void set_has_asrinregulation();
  inline void clear_has_asrinregulation();
  inline void set_has_longitudinalaccelerationproc02();
  inline void clear_has_longitudinalaccelerationproc02();
  inline void set_has_transversalacceleration02();
  inline void clear_has_transversalacceleration02();
  inline void set_has_yawrate02();
  inline void clear_has_yawrate02();
  inline void set_has_idm_stoplamprequest();
  inline void clear_has_idm_stoplamprequest();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool asrinregulation_;
  ::google::protobuf::uint32 longitudinalaccelerationproc02_;
  ::google::protobuf::uint32 transversalacceleration02_;
  ::google::protobuf::uint32 yawrate02_;
  ::google::protobuf::uint32 idm_stoplamprequest_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static ABSVDC_Info* default_instance_;
};
// -------------------------------------------------------------------

class METER_Info : public ::google::protobuf::Message {
 public:
  METER_Info();
  virtual ~METER_Info();

  METER_Info(const METER_Info& from);

  inline METER_Info& operator=(const METER_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const METER_Info& default_instance();

  void Swap(METER_Info* other);

  // implements Message ----------------------------------------------

  METER_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const METER_Info& from);
  void MergeFrom(const METER_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 VehicleSpeed_CLUSTER = 1;
  inline bool has_vehiclespeed_cluster() const;
  inline void clear_vehiclespeed_cluster();
  static const int kVehicleSpeedCLUSTERFieldNumber = 1;
  inline ::google::protobuf::uint32 vehiclespeed_cluster() const;
  inline void set_vehiclespeed_cluster(::google::protobuf::uint32 value);

  // optional uint32 Average_Fuel_Economy = 2;
  inline bool has_average_fuel_economy() const;
  inline void clear_average_fuel_economy();
  static const int kAverageFuelEconomyFieldNumber = 2;
  inline ::google::protobuf::uint32 average_fuel_economy() const;
  inline void set_average_fuel_economy(::google::protobuf::uint32 value);

  // optional uint32 Distance_to_empty = 3;
  inline bool has_distance_to_empty() const;
  inline void clear_distance_to_empty();
  static const int kDistanceToEmptyFieldNumber = 3;
  inline ::google::protobuf::uint32 distance_to_empty() const;
  inline void set_distance_to_empty(::google::protobuf::uint32 value);

  // optional uint32 Distance_Totalizer = 4;
  inline bool has_distance_totalizer() const;
  inline void clear_distance_totalizer();
  static const int kDistanceTotalizerFieldNumber = 4;
  inline ::google::protobuf::uint32 distance_totalizer() const;
  inline void set_distance_totalizer(::google::protobuf::uint32 value);

  // optional uint32 Fuel_Remain = 5;
  inline bool has_fuel_remain() const;
  inline void clear_fuel_remain();
  static const int kFuelRemainFieldNumber = 5;
  inline ::google::protobuf::uint32 fuel_remain() const;
  inline void set_fuel_remain(::google::protobuf::uint32 value);

  // optional uint32 Fuel_Warning_lamp = 6;
  inline bool has_fuel_warning_lamp() const;
  inline void clear_fuel_warning_lamp();
  static const int kFuelWarningLampFieldNumber = 6;
  inline ::google::protobuf::uint32 fuel_warning_lamp() const;
  inline void set_fuel_warning_lamp(::google::protobuf::uint32 value);

  // optional uint32 Average_Fuel_Economy_Single = 7;
  inline bool has_average_fuel_economy_single() const;
  inline void clear_average_fuel_economy_single();
  static const int kAverageFuelEconomySingleFieldNumber = 7;
  inline ::google::protobuf::uint32 average_fuel_economy_single() const;
  inline void set_average_fuel_economy_single(::google::protobuf::uint32 value);

  // optional uint32 EPB_Status = 8;
  inline bool has_epb_status() const;
  inline void clear_epb_status();
  static const int kEPBStatusFieldNumber = 8;
  inline ::google::protobuf::uint32 epb_status() const;
  inline void set_epb_status(::google::protobuf::uint32 value);

  // optional uint32 APB_StatusFlag = 9;
  inline bool has_apb_statusflag() const;
  inline void clear_apb_statusflag();
  static const int kAPBStatusFlagFieldNumber = 9;
  inline ::google::protobuf::uint32 apb_statusflag() const;
  inline void set_apb_statusflag(::google::protobuf::uint32 value);

  // optional uint32 ParkingBrakeMalfunctionDisplay = 10;
  inline bool has_parkingbrakemalfunctiondisplay() const;
  inline void clear_parkingbrakemalfunctiondisplay();
  static const int kParkingBrakeMalfunctionDisplayFieldNumber = 10;
  inline ::google::protobuf::uint32 parkingbrakemalfunctiondisplay() const;
  inline void set_parkingbrakemalfunctiondisplay(::google::protobuf::uint32 value);

  // optional uint32 ParkingBrakeBindingStatusDisplay = 11;
  inline bool has_parkingbrakebindingstatusdisplay() const;
  inline void clear_parkingbrakebindingstatusdisplay();
  static const int kParkingBrakeBindingStatusDisplayFieldNumber = 11;
  inline ::google::protobuf::uint32 parkingbrakebindingstatusdisplay() const;
  inline void set_parkingbrakebindingstatusdisplay(::google::protobuf::uint32 value);

  // optional uint32 Fuellow = 12;
  inline bool has_fuellow() const;
  inline void clear_fuellow();
  static const int kFuellowFieldNumber = 12;
  inline ::google::protobuf::uint32 fuellow() const;
  inline void set_fuellow(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.METER_Info)
 private:
  inline void set_has_vehiclespeed_cluster();
  inline void clear_has_vehiclespeed_cluster();
  inline void set_has_average_fuel_economy();
  inline void clear_has_average_fuel_economy();
  inline void set_has_distance_to_empty();
  inline void clear_has_distance_to_empty();
  inline void set_has_distance_totalizer();
  inline void clear_has_distance_totalizer();
  inline void set_has_fuel_remain();
  inline void clear_has_fuel_remain();
  inline void set_has_fuel_warning_lamp();
  inline void clear_has_fuel_warning_lamp();
  inline void set_has_average_fuel_economy_single();
  inline void clear_has_average_fuel_economy_single();
  inline void set_has_epb_status();
  inline void clear_has_epb_status();
  inline void set_has_apb_statusflag();
  inline void clear_has_apb_statusflag();
  inline void set_has_parkingbrakemalfunctiondisplay();
  inline void clear_has_parkingbrakemalfunctiondisplay();
  inline void set_has_parkingbrakebindingstatusdisplay();
  inline void clear_has_parkingbrakebindingstatusdisplay();
  inline void set_has_fuellow();
  inline void clear_has_fuellow();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 vehiclespeed_cluster_;
  ::google::protobuf::uint32 average_fuel_economy_;
  ::google::protobuf::uint32 distance_to_empty_;
  ::google::protobuf::uint32 distance_totalizer_;
  ::google::protobuf::uint32 fuel_remain_;
  ::google::protobuf::uint32 fuel_warning_lamp_;
  ::google::protobuf::uint32 average_fuel_economy_single_;
  ::google::protobuf::uint32 epb_status_;
  ::google::protobuf::uint32 apb_statusflag_;
  ::google::protobuf::uint32 parkingbrakemalfunctiondisplay_;
  ::google::protobuf::uint32 parkingbrakebindingstatusdisplay_;
  ::google::protobuf::uint32 fuellow_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static METER_Info* default_instance_;
};
// -------------------------------------------------------------------

class BCM_Info : public ::google::protobuf::Message {
 public:
  BCM_Info();
  virtual ~BCM_Info();

  BCM_Info(const BCM_Info& from);

  inline BCM_Info& operator=(const BCM_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BCM_Info& default_instance();

  void Swap(BCM_Info* other);

  // implements Message ----------------------------------------------

  BCM_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BCM_Info& from);
  void MergeFrom(const BCM_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool TrunkSwitchStatus = 1;
  inline bool has_trunkswitchstatus() const;
  inline void clear_trunkswitchstatus();
  static const int kTrunkSwitchStatusFieldNumber = 1;
  inline bool trunkswitchstatus() const;
  inline void set_trunkswitchstatus(bool value);

  // optional uint32 BCM_WakeUpSleepCmd = 2;
  inline bool has_bcm_wakeupsleepcmd() const;
  inline void clear_bcm_wakeupsleepcmd();
  static const int kBCMWakeUpSleepCmdFieldNumber = 2;
  inline ::google::protobuf::uint32 bcm_wakeupsleepcmd() const;
  inline void set_bcm_wakeupsleepcmd(::google::protobuf::uint32 value);

  // optional bool front_left_door_status = 3;
  inline bool has_front_left_door_status() const;
  inline void clear_front_left_door_status();
  static const int kFrontLeftDoorStatusFieldNumber = 3;
  inline bool front_left_door_status() const;
  inline void set_front_left_door_status(bool value);

  // optional bool front_right_door_status = 4;
  inline bool has_front_right_door_status() const;
  inline void clear_front_right_door_status();
  static const int kFrontRightDoorStatusFieldNumber = 4;
  inline bool front_right_door_status() const;
  inline void set_front_right_door_status(bool value);

  // optional bool rear_left_door_status = 5;
  inline bool has_rear_left_door_status() const;
  inline void clear_rear_left_door_status();
  static const int kRearLeftDoorStatusFieldNumber = 5;
  inline bool rear_left_door_status() const;
  inline void set_rear_left_door_status(bool value);

  // optional bool rear_right_door_status = 6;
  inline bool has_rear_right_door_status() const;
  inline void clear_rear_right_door_status();
  static const int kRearRightDoorStatusFieldNumber = 6;
  inline bool rear_right_door_status() const;
  inline void set_rear_right_door_status(bool value);

  // optional bool back_door_status = 7;
  inline bool has_back_door_status() const;
  inline void clear_back_door_status();
  static const int kBackDoorStatusFieldNumber = 7;
  inline bool back_door_status() const;
  inline void set_back_door_status(bool value);

  // optional bool door_lock_status = 8;
  inline bool has_door_lock_status() const;
  inline void clear_door_lock_status();
  static const int kDoorLockStatusFieldNumber = 8;
  inline bool door_lock_status() const;
  inline void set_door_lock_status(bool value);

  // optional bool back_door_locked_status = 9;
  inline bool has_back_door_locked_status() const;
  inline void clear_back_door_locked_status();
  static const int kBackDoorLockedStatusFieldNumber = 9;
  inline bool back_door_locked_status() const;
  inline void set_back_door_locked_status(bool value);

  // optional bool LowBeamRequest = 10;
  inline bool has_lowbeamrequest() const;
  inline void clear_lowbeamrequest();
  static const int kLowBeamRequestFieldNumber = 10;
  inline bool lowbeamrequest() const;
  inline void set_lowbeamrequest(bool value);

  // optional uint32 FlashingIndicatorStatus = 11;
  inline bool has_flashingindicatorstatus() const;
  inline void clear_flashingindicatorstatus();
  static const int kFlashingIndicatorStatusFieldNumber = 11;
  inline ::google::protobuf::uint32 flashingindicatorstatus() const;
  inline void set_flashingindicatorstatus(::google::protobuf::uint32 value);

  // optional bool HighBeamRequest = 12;
  inline bool has_highbeamrequest() const;
  inline void clear_highbeamrequest();
  static const int kHighBeamRequestFieldNumber = 12;
  inline bool highbeamrequest() const;
  inline void set_highbeamrequest(bool value);

  // optional bool PositionLightsRequest = 13;
  inline bool has_positionlightsrequest() const;
  inline void clear_positionlightsrequest();
  static const int kPositionLightsRequestFieldNumber = 13;
  inline bool positionlightsrequest() const;
  inline void set_positionlightsrequest(bool value);

  // optional bool FrontFogLightsRequest = 14;
  inline bool has_frontfoglightsrequest() const;
  inline void clear_frontfoglightsrequest();
  static const int kFrontFogLightsRequestFieldNumber = 14;
  inline bool frontfoglightsrequest() const;
  inline void set_frontfoglightsrequest(bool value);

  // optional bool RearFogLightStatus = 15;
  inline bool has_rearfoglightstatus() const;
  inline void clear_rearfoglightstatus();
  static const int kRearFogLightStatusFieldNumber = 15;
  inline bool rearfoglightstatus() const;
  inline void set_rearfoglightstatus(bool value);

  // optional bool DayTimeRunningLightRequest = 16;
  inline bool has_daytimerunninglightrequest() const;
  inline void clear_daytimerunninglightrequest();
  static const int kDayTimeRunningLightRequestFieldNumber = 16;
  inline bool daytimerunninglightrequest() const;
  inline void set_daytimerunninglightrequest(bool value);

  // optional uint32 front_right_window_status = 17;
  inline bool has_front_right_window_status() const;
  inline void clear_front_right_window_status();
  static const int kFrontRightWindowStatusFieldNumber = 17;
  inline ::google::protobuf::uint32 front_right_window_status() const;
  inline void set_front_right_window_status(::google::protobuf::uint32 value);

  // optional uint32 front_left_window_status = 18;
  inline bool has_front_left_window_status() const;
  inline void clear_front_left_window_status();
  static const int kFrontLeftWindowStatusFieldNumber = 18;
  inline ::google::protobuf::uint32 front_left_window_status() const;
  inline void set_front_left_window_status(::google::protobuf::uint32 value);

  // optional uint32 rear_right_window_status = 19;
  inline bool has_rear_right_window_status() const;
  inline void clear_rear_right_window_status();
  static const int kRearRightWindowStatusFieldNumber = 19;
  inline ::google::protobuf::uint32 rear_right_window_status() const;
  inline void set_rear_right_window_status(::google::protobuf::uint32 value);

  // optional uint32 rear_left_window_status = 20;
  inline bool has_rear_left_window_status() const;
  inline void clear_rear_left_window_status();
  static const int kRearLeftWindowStatusFieldNumber = 20;
  inline ::google::protobuf::uint32 rear_left_window_status() const;
  inline void set_rear_left_window_status(::google::protobuf::uint32 value);

  // optional bool remote_enging_run_flag = 21;
  inline bool has_remote_enging_run_flag() const;
  inline void clear_remote_enging_run_flag();
  static const int kRemoteEngingRunFlagFieldNumber = 21;
  inline bool remote_enging_run_flag() const;
  inline void set_remote_enging_run_flag(bool value);

  // optional uint32 sunroof_window_status = 22;
  inline bool has_sunroof_window_status() const;
  inline void clear_sunroof_window_status();
  static const int kSunroofWindowStatusFieldNumber = 22;
  inline ::google::protobuf::uint32 sunroof_window_status() const;
  inline void set_sunroof_window_status(::google::protobuf::uint32 value);

  // optional uint32 sunroof_shade_status = 23;
  inline bool has_sunroof_shade_status() const;
  inline void clear_sunroof_shade_status();
  static const int kSunroofShadeStatusFieldNumber = 23;
  inline ::google::protobuf::uint32 sunroof_shade_status() const;
  inline void set_sunroof_shade_status(::google::protobuf::uint32 value);

  // optional uint32 RES_FailureFeedback = 24;
  inline bool has_res_failurefeedback() const;
  inline void clear_res_failurefeedback();
  static const int kRESFailureFeedbackFieldNumber = 24;
  inline ::google::protobuf::uint32 res_failurefeedback() const;
  inline void set_res_failurefeedback(::google::protobuf::uint32 value);

  // optional bool isFindcarBreaked = 25;
  inline bool has_isfindcarbreaked() const;
  inline void clear_isfindcarbreaked();
  static const int kIsFindcarBreakedFieldNumber = 25;
  inline bool isfindcarbreaked() const;
  inline void set_isfindcarbreaked(bool value);

  // optional uint32 RES_Status = 26;
  inline bool has_res_status() const;
  inline void clear_res_status();
  static const int kRESStatusFieldNumber = 26;
  inline ::google::protobuf::uint32 res_status() const;
  inline void set_res_status(::google::protobuf::uint32 value);

  // optional uint32 Last_obstacle_notification = 27;
  inline bool has_last_obstacle_notification() const;
  inline void clear_last_obstacle_notification();
  static const int kLastObstacleNotificationFieldNumber = 27;
  inline ::google::protobuf::uint32 last_obstacle_notification() const;
  inline void set_last_obstacle_notification(::google::protobuf::uint32 value);

  // optional uint32 SR_Motor_State = 28;
  inline bool has_sr_motor_state() const;
  inline void clear_sr_motor_state();
  static const int kSRMotorStateFieldNumber = 28;
  inline ::google::protobuf::uint32 sr_motor_state() const;
  inline void set_sr_motor_state(::google::protobuf::uint32 value);

  // optional uint32 Shade_Motor_State = 29;
  inline bool has_shade_motor_state() const;
  inline void clear_shade_motor_state();
  static const int kShadeMotorStateFieldNumber = 29;
  inline ::google::protobuf::uint32 shade_motor_state() const;
  inline void set_shade_motor_state(::google::protobuf::uint32 value);

  // optional uint32 Shade_Area = 30;
  inline bool has_shade_area() const;
  inline void clear_shade_area();
  static const int kShadeAreaFieldNumber = 30;
  inline ::google::protobuf::uint32 shade_area() const;
  inline void set_shade_area(::google::protobuf::uint32 value);

  // optional uint32 BCM_SR_Degrade_Mode = 31;
  inline bool has_bcm_sr_degrade_mode() const;
  inline void clear_bcm_sr_degrade_mode();
  static const int kBCMSRDegradeModeFieldNumber = 31;
  inline ::google::protobuf::uint32 bcm_sr_degrade_mode() const;
  inline void set_bcm_sr_degrade_mode(::google::protobuf::uint32 value);

  // optional uint32 BCM_Shade_Degrade_Mode = 32;
  inline bool has_bcm_shade_degrade_mode() const;
  inline void clear_bcm_shade_degrade_mode();
  static const int kBCMShadeDegradeModeFieldNumber = 32;
  inline ::google::protobuf::uint32 bcm_shade_degrade_mode() const;
  inline void set_bcm_shade_degrade_mode(::google::protobuf::uint32 value);

  // optional uint32 RESPreSoak_SmartphoneError = 33;
  inline bool has_respresoak_smartphoneerror() const;
  inline void clear_respresoak_smartphoneerror();
  static const int kRESPreSoakSmartphoneErrorFieldNumber = 33;
  inline ::google::protobuf::uint32 respresoak_smartphoneerror() const;
  inline void set_respresoak_smartphoneerror(::google::protobuf::uint32 value);

  // optional uint32 LeftTimeDuringThisRESCycle = 34;
  inline bool has_lefttimeduringthisrescycle() const;
  inline void clear_lefttimeduringthisrescycle();
  static const int kLeftTimeDuringThisRESCycleFieldNumber = 34;
  inline ::google::protobuf::uint32 lefttimeduringthisrescycle() const;
  inline void set_lefttimeduringthisrescycle(::google::protobuf::uint32 value);

  // optional uint32 RearWiperStatus = 35;
  inline bool has_rearwiperstatus() const;
  inline void clear_rearwiperstatus();
  static const int kRearWiperStatusFieldNumber = 35;
  inline ::google::protobuf::uint32 rearwiperstatus() const;
  inline void set_rearwiperstatus(::google::protobuf::uint32 value);

  // optional uint32 DriveModeRequest = 36;
  inline bool has_drivemoderequest() const;
  inline void clear_drivemoderequest();
  static const int kDriveModeRequestFieldNumber = 36;
  inline ::google::protobuf::uint32 drivemoderequest() const;
  inline void set_drivemoderequest(::google::protobuf::uint32 value);

  // optional uint32 ChildLockStateDisplay = 37;
  inline bool has_childlockstatedisplay() const;
  inline void clear_childlockstatedisplay();
  static const int kChildLockStateDisplayFieldNumber = 37;
  inline ::google::protobuf::uint32 childlockstatedisplay() const;
  inline void set_childlockstatedisplay(::google::protobuf::uint32 value);

  // optional uint32 ClutchSwitchMaximumTravel = 38;
  inline bool has_clutchswitchmaximumtravel() const;
  inline void clear_clutchswitchmaximumtravel();
  static const int kClutchSwitchMaximumTravelFieldNumber = 38;
  inline ::google::protobuf::uint32 clutchswitchmaximumtravel() const;
  inline void set_clutchswitchmaximumtravel(::google::protobuf::uint32 value);

  // optional uint32 ClutchSwitchMinimumTravel = 39;
  inline bool has_clutchswitchminimumtravel() const;
  inline void clear_clutchswitchminimumtravel();
  static const int kClutchSwitchMinimumTravelFieldNumber = 39;
  inline ::google::protobuf::uint32 clutchswitchminimumtravel() const;
  inline void set_clutchswitchminimumtravel(::google::protobuf::uint32 value);

  // optional uint32 RLS_Rain = 40;
  inline bool has_rls_rain() const;
  inline void clear_rls_rain();
  static const int kRLSRainFieldNumber = 40;
  inline ::google::protobuf::uint32 rls_rain() const;
  inline void set_rls_rain(::google::protobuf::uint32 value);

  // optional uint32 RearDefrostEngaged = 46;
  inline bool has_reardefrostengaged() const;
  inline void clear_reardefrostengaged();
  static const int kRearDefrostEngagedFieldNumber = 46;
  inline ::google::protobuf::uint32 reardefrostengaged() const;
  inline void set_reardefrostengaged(::google::protobuf::uint32 value);

  // optional uint32 PassengerDoorLockedStatus = 47;
  inline bool has_passengerdoorlockedstatus() const;
  inline void clear_passengerdoorlockedstatus();
  static const int kPassengerDoorLockedStatusFieldNumber = 47;
  inline ::google::protobuf::uint32 passengerdoorlockedstatus() const;
  inline void set_passengerdoorlockedstatus(::google::protobuf::uint32 value);

  // optional uint32 RearLeftDoorLockedStatus = 48;
  inline bool has_rearleftdoorlockedstatus() const;
  inline void clear_rearleftdoorlockedstatus();
  static const int kRearLeftDoorLockedStatusFieldNumber = 48;
  inline ::google::protobuf::uint32 rearleftdoorlockedstatus() const;
  inline void set_rearleftdoorlockedstatus(::google::protobuf::uint32 value);

  // optional uint32 RearRightDoorLockedStatus = 49;
  inline bool has_rearrightdoorlockedstatus() const;
  inline void clear_rearrightdoorlockedstatus();
  static const int kRearRightDoorLockedStatusFieldNumber = 49;
  inline ::google::protobuf::uint32 rearrightdoorlockedstatus() const;
  inline void set_rearrightdoorlockedstatus(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.BCM_Info)
 private:
  inline void set_has_trunkswitchstatus();
  inline void clear_has_trunkswitchstatus();
  inline void set_has_bcm_wakeupsleepcmd();
  inline void clear_has_bcm_wakeupsleepcmd();
  inline void set_has_front_left_door_status();
  inline void clear_has_front_left_door_status();
  inline void set_has_front_right_door_status();
  inline void clear_has_front_right_door_status();
  inline void set_has_rear_left_door_status();
  inline void clear_has_rear_left_door_status();
  inline void set_has_rear_right_door_status();
  inline void clear_has_rear_right_door_status();
  inline void set_has_back_door_status();
  inline void clear_has_back_door_status();
  inline void set_has_door_lock_status();
  inline void clear_has_door_lock_status();
  inline void set_has_back_door_locked_status();
  inline void clear_has_back_door_locked_status();
  inline void set_has_lowbeamrequest();
  inline void clear_has_lowbeamrequest();
  inline void set_has_flashingindicatorstatus();
  inline void clear_has_flashingindicatorstatus();
  inline void set_has_highbeamrequest();
  inline void clear_has_highbeamrequest();
  inline void set_has_positionlightsrequest();
  inline void clear_has_positionlightsrequest();
  inline void set_has_frontfoglightsrequest();
  inline void clear_has_frontfoglightsrequest();
  inline void set_has_rearfoglightstatus();
  inline void clear_has_rearfoglightstatus();
  inline void set_has_daytimerunninglightrequest();
  inline void clear_has_daytimerunninglightrequest();
  inline void set_has_front_right_window_status();
  inline void clear_has_front_right_window_status();
  inline void set_has_front_left_window_status();
  inline void clear_has_front_left_window_status();
  inline void set_has_rear_right_window_status();
  inline void clear_has_rear_right_window_status();
  inline void set_has_rear_left_window_status();
  inline void clear_has_rear_left_window_status();
  inline void set_has_remote_enging_run_flag();
  inline void clear_has_remote_enging_run_flag();
  inline void set_has_sunroof_window_status();
  inline void clear_has_sunroof_window_status();
  inline void set_has_sunroof_shade_status();
  inline void clear_has_sunroof_shade_status();
  inline void set_has_res_failurefeedback();
  inline void clear_has_res_failurefeedback();
  inline void set_has_isfindcarbreaked();
  inline void clear_has_isfindcarbreaked();
  inline void set_has_res_status();
  inline void clear_has_res_status();
  inline void set_has_last_obstacle_notification();
  inline void clear_has_last_obstacle_notification();
  inline void set_has_sr_motor_state();
  inline void clear_has_sr_motor_state();
  inline void set_has_shade_motor_state();
  inline void clear_has_shade_motor_state();
  inline void set_has_shade_area();
  inline void clear_has_shade_area();
  inline void set_has_bcm_sr_degrade_mode();
  inline void clear_has_bcm_sr_degrade_mode();
  inline void set_has_bcm_shade_degrade_mode();
  inline void clear_has_bcm_shade_degrade_mode();
  inline void set_has_respresoak_smartphoneerror();
  inline void clear_has_respresoak_smartphoneerror();
  inline void set_has_lefttimeduringthisrescycle();
  inline void clear_has_lefttimeduringthisrescycle();
  inline void set_has_rearwiperstatus();
  inline void clear_has_rearwiperstatus();
  inline void set_has_drivemoderequest();
  inline void clear_has_drivemoderequest();
  inline void set_has_childlockstatedisplay();
  inline void clear_has_childlockstatedisplay();
  inline void set_has_clutchswitchmaximumtravel();
  inline void clear_has_clutchswitchmaximumtravel();
  inline void set_has_clutchswitchminimumtravel();
  inline void clear_has_clutchswitchminimumtravel();
  inline void set_has_rls_rain();
  inline void clear_has_rls_rain();
  inline void set_has_reardefrostengaged();
  inline void clear_has_reardefrostengaged();
  inline void set_has_passengerdoorlockedstatus();
  inline void clear_has_passengerdoorlockedstatus();
  inline void set_has_rearleftdoorlockedstatus();
  inline void clear_has_rearleftdoorlockedstatus();
  inline void set_has_rearrightdoorlockedstatus();
  inline void clear_has_rearrightdoorlockedstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::uint32 bcm_wakeupsleepcmd_;
  bool trunkswitchstatus_;
  bool front_left_door_status_;
  bool front_right_door_status_;
  bool rear_left_door_status_;
  bool rear_right_door_status_;
  bool back_door_status_;
  bool door_lock_status_;
  bool back_door_locked_status_;
  ::google::protobuf::uint32 flashingindicatorstatus_;
  bool lowbeamrequest_;
  bool highbeamrequest_;
  bool positionlightsrequest_;
  bool frontfoglightsrequest_;
  ::google::protobuf::uint32 front_right_window_status_;
  ::google::protobuf::uint32 front_left_window_status_;
  ::google::protobuf::uint32 rear_right_window_status_;
  bool rearfoglightstatus_;
  bool daytimerunninglightrequest_;
  bool remote_enging_run_flag_;
  bool isfindcarbreaked_;
  ::google::protobuf::uint32 rear_left_window_status_;
  ::google::protobuf::uint32 sunroof_window_status_;
  ::google::protobuf::uint32 sunroof_shade_status_;
  ::google::protobuf::uint32 res_failurefeedback_;
  ::google::protobuf::uint32 res_status_;
  ::google::protobuf::uint32 last_obstacle_notification_;
  ::google::protobuf::uint32 sr_motor_state_;
  ::google::protobuf::uint32 shade_motor_state_;
  ::google::protobuf::uint32 shade_area_;
  ::google::protobuf::uint32 bcm_sr_degrade_mode_;
  ::google::protobuf::uint32 bcm_shade_degrade_mode_;
  ::google::protobuf::uint32 respresoak_smartphoneerror_;
  ::google::protobuf::uint32 lefttimeduringthisrescycle_;
  ::google::protobuf::uint32 rearwiperstatus_;
  ::google::protobuf::uint32 drivemoderequest_;
  ::google::protobuf::uint32 childlockstatedisplay_;
  ::google::protobuf::uint32 clutchswitchmaximumtravel_;
  ::google::protobuf::uint32 clutchswitchminimumtravel_;
  ::google::protobuf::uint32 rls_rain_;
  ::google::protobuf::uint32 reardefrostengaged_;
  ::google::protobuf::uint32 passengerdoorlockedstatus_;
  ::google::protobuf::uint32 rearleftdoorlockedstatus_;
  ::google::protobuf::uint32 rearrightdoorlockedstatus_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static BCM_Info* default_instance_;
};
// -------------------------------------------------------------------

class ACU_Info : public ::google::protobuf::Message {
 public:
  ACU_Info();
  virtual ~ACU_Info();

  ACU_Info(const ACU_Info& from);

  inline ACU_Info& operator=(const ACU_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACU_Info& default_instance();

  void Swap(ACU_Info* other);

  // implements Message ----------------------------------------------

  ACU_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACU_Info& from);
  void MergeFrom(const ACU_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Airbag_Crash_Order = 1;
  inline bool has_airbag_crash_order() const;
  inline void clear_airbag_crash_order();
  static const int kAirbagCrashOrderFieldNumber = 1;
  inline ::google::protobuf::uint32 airbag_crash_order() const;
  inline void set_airbag_crash_order(::google::protobuf::uint32 value);

  // optional uint32 DriverSafetyBeltBuckleState = 2;
  inline bool has_driversafetybeltbucklestate() const;
  inline void clear_driversafetybeltbucklestate();
  static const int kDriverSafetyBeltBuckleStateFieldNumber = 2;
  inline ::google::protobuf::uint32 driversafetybeltbucklestate() const;
  inline void set_driversafetybeltbucklestate(::google::protobuf::uint32 value);

  // optional uint32 PassengerSafetyBeltBuckleState = 3;
  inline bool has_passengersafetybeltbucklestate() const;
  inline void clear_passengersafetybeltbucklestate();
  static const int kPassengerSafetyBeltBuckleStateFieldNumber = 3;
  inline ::google::protobuf::uint32 passengersafetybeltbucklestate() const;
  inline void set_passengersafetybeltbucklestate(::google::protobuf::uint32 value);

  // optional uint32 SecondRowCenterSafetyBeltState = 4;
  inline bool has_secondrowcentersafetybeltstate() const;
  inline void clear_secondrowcentersafetybeltstate();
  static const int kSecondRowCenterSafetyBeltStateFieldNumber = 4;
  inline ::google::protobuf::uint32 secondrowcentersafetybeltstate() const;
  inline void set_secondrowcentersafetybeltstate(::google::protobuf::uint32 value);

  // optional uint32 SecondRowLeftSafetyBeltState = 5;
  inline bool has_secondrowleftsafetybeltstate() const;
  inline void clear_secondrowleftsafetybeltstate();
  static const int kSecondRowLeftSafetyBeltStateFieldNumber = 5;
  inline ::google::protobuf::uint32 secondrowleftsafetybeltstate() const;
  inline void set_secondrowleftsafetybeltstate(::google::protobuf::uint32 value);

  // optional uint32 SecondRowRightSafetyBeltState = 6;
  inline bool has_secondrowrightsafetybeltstate() const;
  inline void clear_secondrowrightsafetybeltstate();
  static const int kSecondRowRightSafetyBeltStateFieldNumber = 6;
  inline ::google::protobuf::uint32 secondrowrightsafetybeltstate() const;
  inline void set_secondrowrightsafetybeltstate(::google::protobuf::uint32 value);

  // optional uint32 PassengerPresenceState = 7;
  inline bool has_passengerpresencestate() const;
  inline void clear_passengerpresencestate();
  static const int kPassengerPresenceStateFieldNumber = 7;
  inline ::google::protobuf::uint32 passengerpresencestate() const;
  inline void set_passengerpresencestate(::google::protobuf::uint32 value);

  // optional uint32 SecondRowCenterPresenceState = 8;
  inline bool has_secondrowcenterpresencestate() const;
  inline void clear_secondrowcenterpresencestate();
  static const int kSecondRowCenterPresenceStateFieldNumber = 8;
  inline ::google::protobuf::uint32 secondrowcenterpresencestate() const;
  inline void set_secondrowcenterpresencestate(::google::protobuf::uint32 value);

  // optional uint32 SecondRowLeftPresenceState = 9;
  inline bool has_secondrowleftpresencestate() const;
  inline void clear_secondrowleftpresencestate();
  static const int kSecondRowLeftPresenceStateFieldNumber = 9;
  inline ::google::protobuf::uint32 secondrowleftpresencestate() const;
  inline void set_secondrowleftpresencestate(::google::protobuf::uint32 value);

  // optional uint32 SecondRowRightPresenceState = 10;
  inline bool has_secondrowrightpresencestate() const;
  inline void clear_secondrowrightpresencestate();
  static const int kSecondRowRightPresenceStateFieldNumber = 10;
  inline ::google::protobuf::uint32 secondrowrightpresencestate() const;
  inline void set_secondrowrightpresencestate(::google::protobuf::uint32 value);

  // optional uint32 FrontPassengerSafetyBeltReminder = 11;
  inline bool has_frontpassengersafetybeltreminder() const;
  inline void clear_frontpassengersafetybeltreminder();
  static const int kFrontPassengerSafetyBeltReminderFieldNumber = 11;
  inline ::google::protobuf::uint32 frontpassengersafetybeltreminder() const;
  inline void set_frontpassengersafetybeltreminder(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.ACU_Info)
 private:
  inline void set_has_airbag_crash_order();
  inline void clear_has_airbag_crash_order();
  inline void set_has_driversafetybeltbucklestate();
  inline void clear_has_driversafetybeltbucklestate();
  inline void set_has_passengersafetybeltbucklestate();
  inline void clear_has_passengersafetybeltbucklestate();
  inline void set_has_secondrowcentersafetybeltstate();
  inline void clear_has_secondrowcentersafetybeltstate();
  inline void set_has_secondrowleftsafetybeltstate();
  inline void clear_has_secondrowleftsafetybeltstate();
  inline void set_has_secondrowrightsafetybeltstate();
  inline void clear_has_secondrowrightsafetybeltstate();
  inline void set_has_passengerpresencestate();
  inline void clear_has_passengerpresencestate();
  inline void set_has_secondrowcenterpresencestate();
  inline void clear_has_secondrowcenterpresencestate();
  inline void set_has_secondrowleftpresencestate();
  inline void clear_has_secondrowleftpresencestate();
  inline void set_has_secondrowrightpresencestate();
  inline void clear_has_secondrowrightpresencestate();
  inline void set_has_frontpassengersafetybeltreminder();
  inline void clear_has_frontpassengersafetybeltreminder();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 airbag_crash_order_;
  ::google::protobuf::uint32 driversafetybeltbucklestate_;
  ::google::protobuf::uint32 passengersafetybeltbucklestate_;
  ::google::protobuf::uint32 secondrowcentersafetybeltstate_;
  ::google::protobuf::uint32 secondrowleftsafetybeltstate_;
  ::google::protobuf::uint32 secondrowrightsafetybeltstate_;
  ::google::protobuf::uint32 passengerpresencestate_;
  ::google::protobuf::uint32 secondrowcenterpresencestate_;
  ::google::protobuf::uint32 secondrowleftpresencestate_;
  ::google::protobuf::uint32 secondrowrightpresencestate_;
  ::google::protobuf::uint32 frontpassengersafetybeltreminder_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static ACU_Info* default_instance_;
};
// -------------------------------------------------------------------

class AT_Info : public ::google::protobuf::Message {
 public:
  AT_Info();
  virtual ~AT_Info();

  AT_Info(const AT_Info& from);

  inline AT_Info& operator=(const AT_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AT_Info& default_instance();

  void Swap(AT_Info* other);

  // implements Message ----------------------------------------------

  AT_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AT_Info& from);
  void MergeFrom(const AT_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FastTorqueRequest = 1;
  inline bool has_fasttorquerequest() const;
  inline void clear_fasttorquerequest();
  static const int kFastTorqueRequestFieldNumber = 1;
  inline ::google::protobuf::uint32 fasttorquerequest() const;
  inline void set_fasttorquerequest(::google::protobuf::uint32 value);

  // optional uint32 ATCVT_RangeIndication = 2;
  inline bool has_atcvt_rangeindication() const;
  inline void clear_atcvt_rangeindication();
  static const int kATCVTRangeIndicationFieldNumber = 2;
  inline ::google::protobuf::uint32 atcvt_rangeindication() const;
  inline void set_atcvt_rangeindication(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.AT_Info)
 private:
  inline void set_has_fasttorquerequest();
  inline void clear_has_fasttorquerequest();
  inline void set_has_atcvt_rangeindication();
  inline void clear_has_atcvt_rangeindication();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 fasttorquerequest_;
  ::google::protobuf::uint32 atcvt_rangeindication_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static AT_Info* default_instance_;
};
// -------------------------------------------------------------------

class STRG_Info : public ::google::protobuf::Message {
 public:
  STRG_Info();
  virtual ~STRG_Info();

  STRG_Info(const STRG_Info& from);

  inline STRG_Info& operator=(const STRG_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STRG_Info& default_instance();

  void Swap(STRG_Info* other);

  // implements Message ----------------------------------------------

  STRG_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STRG_Info& from);
  void MergeFrom(const STRG_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Steering_Angle = 1;
  inline bool has_steering_angle() const;
  inline void clear_steering_angle();
  static const int kSteeringAngleFieldNumber = 1;
  inline ::google::protobuf::uint32 steering_angle() const;
  inline void set_steering_angle(::google::protobuf::uint32 value);

  // optional uint32 Steering_Angle_Velocity = 2;
  inline bool has_steering_angle_velocity() const;
  inline void clear_steering_angle_velocity();
  static const int kSteeringAngleVelocityFieldNumber = 2;
  inline ::google::protobuf::uint32 steering_angle_velocity() const;
  inline void set_steering_angle_velocity(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.STRG_Info)
 private:
  inline void set_has_steering_angle();
  inline void clear_has_steering_angle();
  inline void set_has_steering_angle_velocity();
  inline void clear_has_steering_angle_velocity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 steering_angle_;
  ::google::protobuf::uint32 steering_angle_velocity_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static STRG_Info* default_instance_;
};
// -------------------------------------------------------------------

class EPS_Info : public ::google::protobuf::Message {
 public:
  EPS_Info();
  virtual ~EPS_Info();

  EPS_Info(const EPS_Info& from);

  inline EPS_Info& operator=(const EPS_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EPS_Info& default_instance();

  void Swap(EPS_Info* other);

  // implements Message ----------------------------------------------

  EPS_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EPS_Info& from);
  void MergeFrom(const EPS_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool EPSteeringFailure = 1;
  inline bool has_epsteeringfailure() const;
  inline void clear_epsteeringfailure();
  static const int kEPSteeringFailureFieldNumber = 1;
  inline bool epsteeringfailure() const;
  inline void set_epsteeringfailure(bool value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.EPS_Info)
 private:
  inline void set_has_epsteeringfailure();
  inline void clear_has_epsteeringfailure();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool epsteeringfailure_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static EPS_Info* default_instance_;
};
// -------------------------------------------------------------------

class USM_Info : public ::google::protobuf::Message {
 public:
  USM_Info();
  virtual ~USM_Info();

  USM_Info(const USM_Info& from);

  inline USM_Info& operator=(const USM_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const USM_Info& default_instance();

  void Swap(USM_Info* other);

  // implements Message ----------------------------------------------

  USM_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const USM_Info& from);
  void MergeFrom(const USM_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool HoodSW = 1;
  inline bool has_hoodsw() const;
  inline void clear_hoodsw();
  static const int kHoodSWFieldNumber = 1;
  inline bool hoodsw() const;
  inline void set_hoodsw(bool value);

  // optional bool ACCompClutchStatus = 2;
  inline bool has_accompclutchstatus() const;
  inline void clear_accompclutchstatus();
  static const int kACCompClutchStatusFieldNumber = 2;
  inline bool accompclutchstatus() const;
  inline void set_accompclutchstatus(bool value);

  // optional uint32 FrontWiperStatus = 3;
  inline bool has_frontwiperstatus() const;
  inline void clear_frontwiperstatus();
  static const int kFrontWiperStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 frontwiperstatus() const;
  inline void set_frontwiperstatus(::google::protobuf::uint32 value);

  // optional uint32 EngineFanSpeedStatus_PWM = 4;
  inline bool has_enginefanspeedstatus_pwm() const;
  inline void clear_enginefanspeedstatus_pwm();
  static const int kEngineFanSpeedStatusPWMFieldNumber = 4;
  inline ::google::protobuf::uint32 enginefanspeedstatus_pwm() const;
  inline void set_enginefanspeedstatus_pwm(::google::protobuf::uint32 value);

  // optional bool PositionLightsStatus = 5;
  inline bool has_positionlightsstatus() const;
  inline void clear_positionlightsstatus();
  static const int kPositionLightsStatusFieldNumber = 5;
  inline bool positionlightsstatus() const;
  inline void set_positionlightsstatus(bool value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.USM_Info)
 private:
  inline void set_has_hoodsw();
  inline void clear_has_hoodsw();
  inline void set_has_accompclutchstatus();
  inline void clear_has_accompclutchstatus();
  inline void set_has_frontwiperstatus();
  inline void clear_has_frontwiperstatus();
  inline void set_has_enginefanspeedstatus_pwm();
  inline void clear_has_enginefanspeedstatus_pwm();
  inline void set_has_positionlightsstatus();
  inline void clear_has_positionlightsstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool hoodsw_;
  bool accompclutchstatus_;
  bool positionlightsstatus_;
  ::google::protobuf::uint32 frontwiperstatus_;
  ::google::protobuf::uint32 enginefanspeedstatus_pwm_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static USM_Info* default_instance_;
};
// -------------------------------------------------------------------

class TPMS_Info : public ::google::protobuf::Message {
 public:
  TPMS_Info();
  virtual ~TPMS_Info();

  TPMS_Info(const TPMS_Info& from);

  inline TPMS_Info& operator=(const TPMS_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPMS_Info& default_instance();

  void Swap(TPMS_Info* other);

  // implements Message ----------------------------------------------

  TPMS_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPMS_Info& from);
  void MergeFrom(const TPMS_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Low_Tire_pressure_FR = 1;
  inline bool has_low_tire_pressure_fr() const;
  inline void clear_low_tire_pressure_fr();
  static const int kLowTirePressureFRFieldNumber = 1;
  inline bool low_tire_pressure_fr() const;
  inline void set_low_tire_pressure_fr(bool value);

  // optional bool Low_Tire_pressure_FL = 2;
  inline bool has_low_tire_pressure_fl() const;
  inline void clear_low_tire_pressure_fl();
  static const int kLowTirePressureFLFieldNumber = 2;
  inline bool low_tire_pressure_fl() const;
  inline void set_low_tire_pressure_fl(bool value);

  // optional bool Low_Tire_pressure_RR = 3;
  inline bool has_low_tire_pressure_rr() const;
  inline void clear_low_tire_pressure_rr();
  static const int kLowTirePressureRRFieldNumber = 3;
  inline bool low_tire_pressure_rr() const;
  inline void set_low_tire_pressure_rr(bool value);

  // optional bool Low_Tire_pressure_RL = 4;
  inline bool has_low_tire_pressure_rl() const;
  inline void clear_low_tire_pressure_rl();
  static const int kLowTirePressureRLFieldNumber = 4;
  inline bool low_tire_pressure_rl() const;
  inline void set_low_tire_pressure_rl(bool value);

  // optional uint32 tire_pressure_FR = 5;
  inline bool has_tire_pressure_fr() const;
  inline void clear_tire_pressure_fr();
  static const int kTirePressureFRFieldNumber = 5;
  inline ::google::protobuf::uint32 tire_pressure_fr() const;
  inline void set_tire_pressure_fr(::google::protobuf::uint32 value);

  // optional uint32 tire_pressure_FL = 6;
  inline bool has_tire_pressure_fl() const;
  inline void clear_tire_pressure_fl();
  static const int kTirePressureFLFieldNumber = 6;
  inline ::google::protobuf::uint32 tire_pressure_fl() const;
  inline void set_tire_pressure_fl(::google::protobuf::uint32 value);

  // optional uint32 tire_pressure_RR = 7;
  inline bool has_tire_pressure_rr() const;
  inline void clear_tire_pressure_rr();
  static const int kTirePressureRRFieldNumber = 7;
  inline ::google::protobuf::uint32 tire_pressure_rr() const;
  inline void set_tire_pressure_rr(::google::protobuf::uint32 value);

  // optional uint32 tire_pressure_RL = 8;
  inline bool has_tire_pressure_rl() const;
  inline void clear_tire_pressure_rl();
  static const int kTirePressureRLFieldNumber = 8;
  inline ::google::protobuf::uint32 tire_pressure_rl() const;
  inline void set_tire_pressure_rl(::google::protobuf::uint32 value);

  // optional uint32 Tire_pressure_FR_Low = 9;
  inline bool has_tire_pressure_fr_low() const;
  inline void clear_tire_pressure_fr_low();
  static const int kTirePressureFRLowFieldNumber = 9;
  inline ::google::protobuf::uint32 tire_pressure_fr_low() const;
  inline void set_tire_pressure_fr_low(::google::protobuf::uint32 value);

  // optional uint32 Tire_pressure_FL_Low = 10;
  inline bool has_tire_pressure_fl_low() const;
  inline void clear_tire_pressure_fl_low();
  static const int kTirePressureFLLowFieldNumber = 10;
  inline ::google::protobuf::uint32 tire_pressure_fl_low() const;
  inline void set_tire_pressure_fl_low(::google::protobuf::uint32 value);

  // optional uint32 Tire_pressure_RR_Low = 11;
  inline bool has_tire_pressure_rr_low() const;
  inline void clear_tire_pressure_rr_low();
  static const int kTirePressureRRLowFieldNumber = 11;
  inline ::google::protobuf::uint32 tire_pressure_rr_low() const;
  inline void set_tire_pressure_rr_low(::google::protobuf::uint32 value);

  // optional uint32 Tire_pressure_RL_Low = 12;
  inline bool has_tire_pressure_rl_low() const;
  inline void clear_tire_pressure_rl_low();
  static const int kTirePressureRLLowFieldNumber = 12;
  inline ::google::protobuf::uint32 tire_pressure_rl_low() const;
  inline void set_tire_pressure_rl_low(::google::protobuf::uint32 value);

  // optional uint32 Tpms_Flag = 13;
  inline bool has_tpms_flag() const;
  inline void clear_tpms_flag();
  static const int kTpmsFlagFieldNumber = 13;
  inline ::google::protobuf::uint32 tpms_flag() const;
  inline void set_tpms_flag(::google::protobuf::uint32 value);

  // optional uint32 TpmsWarningLampRequest = 14;
  inline bool has_tpmswarninglamprequest() const;
  inline void clear_tpmswarninglamprequest();
  static const int kTpmsWarningLampRequestFieldNumber = 14;
  inline ::google::protobuf::uint32 tpmswarninglamprequest() const;
  inline void set_tpmswarninglamprequest(::google::protobuf::uint32 value);

  // optional uint32 SystemFailure_TPMS = 15;
  inline bool has_systemfailure_tpms() const;
  inline void clear_systemfailure_tpms();
  static const int kSystemFailureTPMSFieldNumber = 15;
  inline ::google::protobuf::uint32 systemfailure_tpms() const;
  inline void set_systemfailure_tpms(::google::protobuf::uint32 value);

  // optional uint32 Transmitter_status_FR = 16;
  inline bool has_transmitter_status_fr() const;
  inline void clear_transmitter_status_fr();
  static const int kTransmitterStatusFRFieldNumber = 16;
  inline ::google::protobuf::uint32 transmitter_status_fr() const;
  inline void set_transmitter_status_fr(::google::protobuf::uint32 value);

  // optional uint32 Transmitter_status_FL = 17;
  inline bool has_transmitter_status_fl() const;
  inline void clear_transmitter_status_fl();
  static const int kTransmitterStatusFLFieldNumber = 17;
  inline ::google::protobuf::uint32 transmitter_status_fl() const;
  inline void set_transmitter_status_fl(::google::protobuf::uint32 value);

  // optional uint32 Transmitter_status_RR = 18;
  inline bool has_transmitter_status_rr() const;
  inline void clear_transmitter_status_rr();
  static const int kTransmitterStatusRRFieldNumber = 18;
  inline ::google::protobuf::uint32 transmitter_status_rr() const;
  inline void set_transmitter_status_rr(::google::protobuf::uint32 value);

  // optional uint32 Transmitter_status_RL = 19;
  inline bool has_transmitter_status_rl() const;
  inline void clear_transmitter_status_rl();
  static const int kTransmitterStatusRLFieldNumber = 19;
  inline ::google::protobuf::uint32 transmitter_status_rl() const;
  inline void set_transmitter_status_rl(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.TPMS_Info)
 private:
  inline void set_has_low_tire_pressure_fr();
  inline void clear_has_low_tire_pressure_fr();
  inline void set_has_low_tire_pressure_fl();
  inline void clear_has_low_tire_pressure_fl();
  inline void set_has_low_tire_pressure_rr();
  inline void clear_has_low_tire_pressure_rr();
  inline void set_has_low_tire_pressure_rl();
  inline void clear_has_low_tire_pressure_rl();
  inline void set_has_tire_pressure_fr();
  inline void clear_has_tire_pressure_fr();
  inline void set_has_tire_pressure_fl();
  inline void clear_has_tire_pressure_fl();
  inline void set_has_tire_pressure_rr();
  inline void clear_has_tire_pressure_rr();
  inline void set_has_tire_pressure_rl();
  inline void clear_has_tire_pressure_rl();
  inline void set_has_tire_pressure_fr_low();
  inline void clear_has_tire_pressure_fr_low();
  inline void set_has_tire_pressure_fl_low();
  inline void clear_has_tire_pressure_fl_low();
  inline void set_has_tire_pressure_rr_low();
  inline void clear_has_tire_pressure_rr_low();
  inline void set_has_tire_pressure_rl_low();
  inline void clear_has_tire_pressure_rl_low();
  inline void set_has_tpms_flag();
  inline void clear_has_tpms_flag();
  inline void set_has_tpmswarninglamprequest();
  inline void clear_has_tpmswarninglamprequest();
  inline void set_has_systemfailure_tpms();
  inline void clear_has_systemfailure_tpms();
  inline void set_has_transmitter_status_fr();
  inline void clear_has_transmitter_status_fr();
  inline void set_has_transmitter_status_fl();
  inline void clear_has_transmitter_status_fl();
  inline void set_has_transmitter_status_rr();
  inline void clear_has_transmitter_status_rr();
  inline void set_has_transmitter_status_rl();
  inline void clear_has_transmitter_status_rl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool low_tire_pressure_fr_;
  bool low_tire_pressure_fl_;
  bool low_tire_pressure_rr_;
  bool low_tire_pressure_rl_;
  ::google::protobuf::uint32 tire_pressure_fr_;
  ::google::protobuf::uint32 tire_pressure_fl_;
  ::google::protobuf::uint32 tire_pressure_rr_;
  ::google::protobuf::uint32 tire_pressure_rl_;
  ::google::protobuf::uint32 tire_pressure_fr_low_;
  ::google::protobuf::uint32 tire_pressure_fl_low_;
  ::google::protobuf::uint32 tire_pressure_rr_low_;
  ::google::protobuf::uint32 tire_pressure_rl_low_;
  ::google::protobuf::uint32 tpms_flag_;
  ::google::protobuf::uint32 tpmswarninglamprequest_;
  ::google::protobuf::uint32 systemfailure_tpms_;
  ::google::protobuf::uint32 transmitter_status_fr_;
  ::google::protobuf::uint32 transmitter_status_fl_;
  ::google::protobuf::uint32 transmitter_status_rr_;
  ::google::protobuf::uint32 transmitter_status_rl_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static TPMS_Info* default_instance_;
};
// -------------------------------------------------------------------

class WIRE_Info : public ::google::protobuf::Message {
 public:
  WIRE_Info();
  virtual ~WIRE_Info();

  WIRE_Info(const WIRE_Info& from);

  inline WIRE_Info& operator=(const WIRE_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WIRE_Info& default_instance();

  void Swap(WIRE_Info* other);

  // implements Message ----------------------------------------------

  WIRE_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WIRE_Info& from);
  void MergeFrom(const WIRE_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Reverse_Gear = 1;
  inline bool has_reverse_gear() const;
  inline void clear_reverse_gear();
  static const int kReverseGearFieldNumber = 1;
  inline bool reverse_gear() const;
  inline void set_reverse_gear(bool value);

  // optional bool Neutral_Gear = 2;
  inline bool has_neutral_gear() const;
  inline void clear_neutral_gear();
  static const int kNeutralGearFieldNumber = 2;
  inline bool neutral_gear() const;
  inline void set_neutral_gear(bool value);

  // optional bool driver_seat_belt_status = 3;
  inline bool has_driver_seat_belt_status() const;
  inline void clear_driver_seat_belt_status();
  static const int kDriverSeatBeltStatusFieldNumber = 3;
  inline bool driver_seat_belt_status() const;
  inline void set_driver_seat_belt_status(bool value);

  // optional bool passenger_seat_belt_status = 4;
  inline bool has_passenger_seat_belt_status() const;
  inline void clear_passenger_seat_belt_status();
  static const int kPassengerSeatBeltStatusFieldNumber = 4;
  inline bool passenger_seat_belt_status() const;
  inline void set_passenger_seat_belt_status(bool value);

  // optional bool HandBrakeSwitch = 5;
  inline bool has_handbrakeswitch() const;
  inline void clear_handbrakeswitch();
  static const int kHandBrakeSwitchFieldNumber = 5;
  inline bool handbrakeswitch() const;
  inline void set_handbrakeswitch(bool value);

  // optional bool ACC_status = 6;
  inline bool has_acc_status() const;
  inline void clear_acc_status();
  static const int kACCStatusFieldNumber = 6;
  inline bool acc_status() const;
  inline void set_acc_status(bool value);

  // optional bool IGN_status = 7;
  inline bool has_ign_status() const;
  inline void clear_ign_status();
  static const int kIGNStatusFieldNumber = 7;
  inline bool ign_status() const;
  inline void set_ign_status(bool value);

  // optional bool Security_Indicator = 8;
  inline bool has_security_indicator() const;
  inline void clear_security_indicator();
  static const int kSecurityIndicatorFieldNumber = 8;
  inline bool security_indicator() const;
  inline void set_security_indicator(bool value);

  // optional uint32 battery_status = 9;
  inline bool has_battery_status() const;
  inline void clear_battery_status();
  static const int kBatteryStatusFieldNumber = 9;
  inline ::google::protobuf::uint32 battery_status() const;
  inline void set_battery_status(::google::protobuf::uint32 value);

  // optional bool DA_Heart_Beat = 10;
  inline bool has_da_heart_beat() const;
  inline void clear_da_heart_beat();
  static const int kDAHeartBeatFieldNumber = 10;
  inline bool da_heart_beat() const;
  inline void set_da_heart_beat(bool value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.WIRE_Info)
 private:
  inline void set_has_reverse_gear();
  inline void clear_has_reverse_gear();
  inline void set_has_neutral_gear();
  inline void clear_has_neutral_gear();
  inline void set_has_driver_seat_belt_status();
  inline void clear_has_driver_seat_belt_status();
  inline void set_has_passenger_seat_belt_status();
  inline void clear_has_passenger_seat_belt_status();
  inline void set_has_handbrakeswitch();
  inline void clear_has_handbrakeswitch();
  inline void set_has_acc_status();
  inline void clear_has_acc_status();
  inline void set_has_ign_status();
  inline void clear_has_ign_status();
  inline void set_has_security_indicator();
  inline void clear_has_security_indicator();
  inline void set_has_battery_status();
  inline void clear_has_battery_status();
  inline void set_has_da_heart_beat();
  inline void clear_has_da_heart_beat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool reverse_gear_;
  bool neutral_gear_;
  bool driver_seat_belt_status_;
  bool passenger_seat_belt_status_;
  bool handbrakeswitch_;
  bool acc_status_;
  bool ign_status_;
  bool security_indicator_;
  ::google::protobuf::uint32 battery_status_;
  bool da_heart_beat_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static WIRE_Info* default_instance_;
};
// -------------------------------------------------------------------

class ECO_Info : public ::google::protobuf::Message {
 public:
  ECO_Info();
  virtual ~ECO_Info();

  ECO_Info(const ECO_Info& from);

  inline ECO_Info& operator=(const ECO_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ECO_Info& default_instance();

  void Swap(ECO_Info* other);

  // implements Message ----------------------------------------------

  ECO_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ECO_Info& from);
  void MergeFrom(const ECO_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rapid_acceleration_count = 1;
  inline bool has_rapid_acceleration_count() const;
  inline void clear_rapid_acceleration_count();
  static const int kRapidAccelerationCountFieldNumber = 1;
  inline ::google::protobuf::uint32 rapid_acceleration_count() const;
  inline void set_rapid_acceleration_count(::google::protobuf::uint32 value);

  // optional uint32 rapid_deceleration_count = 2;
  inline bool has_rapid_deceleration_count() const;
  inline void clear_rapid_deceleration_count();
  static const int kRapidDecelerationCountFieldNumber = 2;
  inline ::google::protobuf::uint32 rapid_deceleration_count() const;
  inline void set_rapid_deceleration_count(::google::protobuf::uint32 value);

  // optional uint32 sharp_turn_count = 3;
  inline bool has_sharp_turn_count() const;
  inline void clear_sharp_turn_count();
  static const int kSharpTurnCountFieldNumber = 3;
  inline ::google::protobuf::uint32 sharp_turn_count() const;
  inline void set_sharp_turn_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.ECO_Info)
 private:
  inline void set_has_rapid_acceleration_count();
  inline void clear_has_rapid_acceleration_count();
  inline void set_has_rapid_deceleration_count();
  inline void clear_has_rapid_deceleration_count();
  inline void set_has_sharp_turn_count();
  inline void clear_has_sharp_turn_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rapid_acceleration_count_;
  ::google::protobuf::uint32 rapid_deceleration_count_;
  ::google::protobuf::uint32 sharp_turn_count_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static ECO_Info* default_instance_;
};
// -------------------------------------------------------------------

class ALARM_Info : public ::google::protobuf::Message {
 public:
  ALARM_Info();
  virtual ~ALARM_Info();

  ALARM_Info(const ALARM_Info& from);

  inline ALARM_Info& operator=(const ALARM_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ALARM_Info& default_instance();

  void Swap(ALARM_Info* other);

  // implements Message ----------------------------------------------

  ALARM_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ALARM_Info& from);
  void MergeFrom(const ALARM_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 alarm_type = 1;
  inline bool has_alarm_type() const;
  inline void clear_alarm_type();
  static const int kAlarmTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 alarm_type() const;
  inline void set_alarm_type(::google::protobuf::uint32 value);

  // optional bytes alarm_typeEx = 2;
  inline bool has_alarm_typeex() const;
  inline void clear_alarm_typeex();
  static const int kAlarmTypeExFieldNumber = 2;
  inline const ::std::string& alarm_typeex() const;
  inline void set_alarm_typeex(const ::std::string& value);
  inline void set_alarm_typeex(const char* value);
  inline void set_alarm_typeex(const void* value, size_t size);
  inline ::std::string* mutable_alarm_typeex();
  inline ::std::string* release_alarm_typeex();
  inline void set_allocated_alarm_typeex(::std::string* alarm_typeex);

  // optional uint32 Transmitter_Fail = 3;
  inline bool has_transmitter_fail() const;
  inline void clear_transmitter_fail();
  static const int kTransmitterFailFieldNumber = 3;
  inline ::google::protobuf::uint32 transmitter_fail() const;
  inline void set_transmitter_fail(::google::protobuf::uint32 value);

  // optional uint32 LowTirePressure = 4;
  inline bool has_lowtirepressure() const;
  inline void clear_lowtirepressure();
  static const int kLowTirePressureFieldNumber = 4;
  inline ::google::protobuf::uint32 lowtirepressure() const;
  inline void set_lowtirepressure(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.ALARM_Info)
 private:
  inline void set_has_alarm_type();
  inline void clear_has_alarm_type();
  inline void set_has_alarm_typeex();
  inline void clear_has_alarm_typeex();
  inline void set_has_transmitter_fail();
  inline void clear_has_transmitter_fail();
  inline void set_has_lowtirepressure();
  inline void clear_has_lowtirepressure();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* alarm_typeex_;
  ::google::protobuf::uint32 alarm_type_;
  ::google::protobuf::uint32 transmitter_fail_;
  ::google::protobuf::uint32 lowtirepressure_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static ALARM_Info* default_instance_;
};
// -------------------------------------------------------------------

class ITM_Info : public ::google::protobuf::Message {
 public:
  ITM_Info();
  virtual ~ITM_Info();

  ITM_Info(const ITM_Info& from);

  inline ITM_Info& operator=(const ITM_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ITM_Info& default_instance();

  void Swap(ITM_Info* other);

  // implements Message ----------------------------------------------

  ITM_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ITM_Info& from);
  void MergeFrom(const ITM_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 havc_mode = 1;
  inline bool has_havc_mode() const;
  inline void clear_havc_mode();
  static const int kHavcModeFieldNumber = 1;
  inline ::google::protobuf::uint32 havc_mode() const;
  inline void set_havc_mode(::google::protobuf::uint32 value);

  // optional uint32 havc_circulation = 2;
  inline bool has_havc_circulation() const;
  inline void clear_havc_circulation();
  static const int kHavcCirculationFieldNumber = 2;
  inline ::google::protobuf::uint32 havc_circulation() const;
  inline void set_havc_circulation(::google::protobuf::uint32 value);

  // optional uint32 havc_temperature = 3;
  inline bool has_havc_temperature() const;
  inline void clear_havc_temperature();
  static const int kHavcTemperatureFieldNumber = 3;
  inline ::google::protobuf::uint32 havc_temperature() const;
  inline void set_havc_temperature(::google::protobuf::uint32 value);

  // optional uint32 havc_air_volume = 4;
  inline bool has_havc_air_volume() const;
  inline void clear_havc_air_volume();
  static const int kHavcAirVolumeFieldNumber = 4;
  inline ::google::protobuf::uint32 havc_air_volume() const;
  inline void set_havc_air_volume(::google::protobuf::uint32 value);

  // optional uint32 AVMPhotoUploadResult = 5;
  inline bool has_avmphotouploadresult() const;
  inline void clear_avmphotouploadresult();
  static const int kAVMPhotoUploadResultFieldNumber = 5;
  inline ::google::protobuf::uint32 avmphotouploadresult() const;
  inline void set_avmphotouploadresult(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.ITM_Info)
 private:
  inline void set_has_havc_mode();
  inline void clear_has_havc_mode();
  inline void set_has_havc_circulation();
  inline void clear_has_havc_circulation();
  inline void set_has_havc_temperature();
  inline void clear_has_havc_temperature();
  inline void set_has_havc_air_volume();
  inline void clear_has_havc_air_volume();
  inline void set_has_avmphotouploadresult();
  inline void clear_has_avmphotouploadresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 havc_mode_;
  ::google::protobuf::uint32 havc_circulation_;
  ::google::protobuf::uint32 havc_temperature_;
  ::google::protobuf::uint32 havc_air_volume_;
  ::google::protobuf::uint32 avmphotouploadresult_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static ITM_Info* default_instance_;
};
// -------------------------------------------------------------------

class IKEY_Info : public ::google::protobuf::Message {
 public:
  IKEY_Info();
  virtual ~IKEY_Info();

  IKEY_Info(const IKEY_Info& from);

  inline IKEY_Info& operator=(const IKEY_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IKEY_Info& default_instance();

  void Swap(IKEY_Info* other);

  // implements Message ----------------------------------------------

  IKEY_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IKEY_Info& from);
  void MergeFrom(const IKEY_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Fuel_Cut_Request = 1;
  inline bool has_fuel_cut_request() const;
  inline void clear_fuel_cut_request();
  static const int kFuelCutRequestFieldNumber = 1;
  inline bool fuel_cut_request() const;
  inline void set_fuel_cut_request(bool value);

  // optional uint32 remote_enging_run_flag = 2;
  inline bool has_remote_enging_run_flag() const;
  inline void clear_remote_enging_run_flag();
  static const int kRemoteEngingRunFlagFieldNumber = 2;
  inline ::google::protobuf::uint32 remote_enging_run_flag() const;
  inline void set_remote_enging_run_flag(::google::protobuf::uint32 value);

  // optional uint32 RES_FailureFeedback = 3;
  inline bool has_res_failurefeedback() const;
  inline void clear_res_failurefeedback();
  static const int kRESFailureFeedbackFieldNumber = 3;
  inline ::google::protobuf::uint32 res_failurefeedback() const;
  inline void set_res_failurefeedback(::google::protobuf::uint32 value);

  // optional uint32 PEPS_EngineforbidSt = 4;
  inline bool has_peps_engineforbidst() const;
  inline void clear_peps_engineforbidst();
  static const int kPEPSEngineforbidStFieldNumber = 4;
  inline ::google::protobuf::uint32 peps_engineforbidst() const;
  inline void set_peps_engineforbidst(::google::protobuf::uint32 value);

  // optional uint32 StartAuthSts = 5;
  inline bool has_startauthsts() const;
  inline void clear_startauthsts();
  static const int kStartAuthStsFieldNumber = 5;
  inline ::google::protobuf::uint32 startauthsts() const;
  inline void set_startauthsts(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.IKEY_Info)
 private:
  inline void set_has_fuel_cut_request();
  inline void clear_has_fuel_cut_request();
  inline void set_has_remote_enging_run_flag();
  inline void clear_has_remote_enging_run_flag();
  inline void set_has_res_failurefeedback();
  inline void clear_has_res_failurefeedback();
  inline void set_has_peps_engineforbidst();
  inline void clear_has_peps_engineforbidst();
  inline void set_has_startauthsts();
  inline void clear_has_startauthsts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool fuel_cut_request_;
  ::google::protobuf::uint32 remote_enging_run_flag_;
  ::google::protobuf::uint32 res_failurefeedback_;
  ::google::protobuf::uint32 peps_engineforbidst_;
  ::google::protobuf::uint32 startauthsts_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static IKEY_Info* default_instance_;
};
// -------------------------------------------------------------------

class COMMON_Info : public ::google::protobuf::Message {
 public:
  COMMON_Info();
  virtual ~COMMON_Info();

  COMMON_Info(const COMMON_Info& from);

  inline COMMON_Info& operator=(const COMMON_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const COMMON_Info& default_instance();

  void Swap(COMMON_Info* other);

  // implements Message ----------------------------------------------

  COMMON_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const COMMON_Info& from);
  void MergeFrom(const COMMON_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 DVRWorkStatus = 1;
  inline bool has_dvrworkstatus() const;
  inline void clear_dvrworkstatus();
  static const int kDVRWorkStatusFieldNumber = 1;
  inline ::google::protobuf::uint32 dvrworkstatus() const;
  inline void set_dvrworkstatus(::google::protobuf::uint32 value);

  // optional uint32 SHVM_DRVSeatVent = 2;
  inline bool has_shvm_drvseatvent() const;
  inline void clear_shvm_drvseatvent();
  static const int kSHVMDRVSeatVentFieldNumber = 2;
  inline ::google::protobuf::uint32 shvm_drvseatvent() const;
  inline void set_shvm_drvseatvent(::google::protobuf::uint32 value);

  // optional uint32 SHVM_PasSeatVent = 3;
  inline bool has_shvm_passeatvent() const;
  inline void clear_shvm_passeatvent();
  static const int kSHVMPasSeatVentFieldNumber = 3;
  inline ::google::protobuf::uint32 shvm_passeatvent() const;
  inline void set_shvm_passeatvent(::google::protobuf::uint32 value);

  // optional uint32 External_Temp = 4;
  inline bool has_external_temp() const;
  inline void clear_external_temp();
  static const int kExternalTempFieldNumber = 4;
  inline ::google::protobuf::uint32 external_temp() const;
  inline void set_external_temp(::google::protobuf::uint32 value);

  // optional uint32 sunroof_window_status = 5;
  inline bool has_sunroof_window_status() const;
  inline void clear_sunroof_window_status();
  static const int kSunroofWindowStatusFieldNumber = 5;
  inline ::google::protobuf::uint32 sunroof_window_status() const;
  inline void set_sunroof_window_status(::google::protobuf::uint32 value);

  // optional uint32 DVR_RemoteCommandResult = 6;
  inline bool has_dvr_remotecommandresult() const;
  inline void clear_dvr_remotecommandresult();
  static const int kDVRRemoteCommandResultFieldNumber = 6;
  inline ::google::protobuf::uint32 dvr_remotecommandresult() const;
  inline void set_dvr_remotecommandresult(::google::protobuf::uint32 value);

  // optional uint32 UserSOC = 7;
  inline bool has_usersoc() const;
  inline void clear_usersoc();
  static const int kUserSOCFieldNumber = 7;
  inline ::google::protobuf::uint32 usersoc() const;
  inline void set_usersoc(::google::protobuf::uint32 value);

  // optional uint32 DCDC_Fault_Type_BLMS = 8;
  inline bool has_dcdc_fault_type_blms() const;
  inline void clear_dcdc_fault_type_blms();
  static const int kDCDCFaultTypeBLMSFieldNumber = 8;
  inline ::google::protobuf::uint32 dcdc_fault_type_blms() const;
  inline void set_dcdc_fault_type_blms(::google::protobuf::uint32 value);

  // optional uint32 DCDCcurrentOutput_BLMS = 9;
  inline bool has_dcdccurrentoutput_blms() const;
  inline void clear_dcdccurrentoutput_blms();
  static const int kDCDCcurrentOutputBLMSFieldNumber = 9;
  inline ::google::protobuf::uint32 dcdccurrentoutput_blms() const;
  inline void set_dcdccurrentoutput_blms(::google::protobuf::uint32 value);

  // optional uint32 HVBatteryEnergyLevel = 10;
  inline bool has_hvbatteryenergylevel() const;
  inline void clear_hvbatteryenergylevel();
  static const int kHVBatteryEnergyLevelFieldNumber = 10;
  inline ::google::protobuf::uint32 hvbatteryenergylevel() const;
  inline void set_hvbatteryenergylevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.COMMON_Info)
 private:
  inline void set_has_dvrworkstatus();
  inline void clear_has_dvrworkstatus();
  inline void set_has_shvm_drvseatvent();
  inline void clear_has_shvm_drvseatvent();
  inline void set_has_shvm_passeatvent();
  inline void clear_has_shvm_passeatvent();
  inline void set_has_external_temp();
  inline void clear_has_external_temp();
  inline void set_has_sunroof_window_status();
  inline void clear_has_sunroof_window_status();
  inline void set_has_dvr_remotecommandresult();
  inline void clear_has_dvr_remotecommandresult();
  inline void set_has_usersoc();
  inline void clear_has_usersoc();
  inline void set_has_dcdc_fault_type_blms();
  inline void clear_has_dcdc_fault_type_blms();
  inline void set_has_dcdccurrentoutput_blms();
  inline void clear_has_dcdccurrentoutput_blms();
  inline void set_has_hvbatteryenergylevel();
  inline void clear_has_hvbatteryenergylevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 dvrworkstatus_;
  ::google::protobuf::uint32 shvm_drvseatvent_;
  ::google::protobuf::uint32 shvm_passeatvent_;
  ::google::protobuf::uint32 external_temp_;
  ::google::protobuf::uint32 sunroof_window_status_;
  ::google::protobuf::uint32 dvr_remotecommandresult_;
  ::google::protobuf::uint32 usersoc_;
  ::google::protobuf::uint32 dcdc_fault_type_blms_;
  ::google::protobuf::uint32 dcdccurrentoutput_blms_;
  ::google::protobuf::uint32 hvbatteryenergylevel_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static COMMON_Info* default_instance_;
};
// -------------------------------------------------------------------

class HVAC_Info : public ::google::protobuf::Message {
 public:
  HVAC_Info();
  virtual ~HVAC_Info();

  HVAC_Info(const HVAC_Info& from);

  inline HVAC_Info& operator=(const HVAC_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HVAC_Info& default_instance();

  void Swap(HVAC_Info* other);

  // implements Message ----------------------------------------------

  HVAC_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HVAC_Info& from);
  void MergeFrom(const HVAC_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Air_condition_status_driver_temp = 1;
  inline bool has_air_condition_status_driver_temp() const;
  inline void clear_air_condition_status_driver_temp();
  static const int kAirConditionStatusDriverTempFieldNumber = 1;
  inline ::google::protobuf::uint32 air_condition_status_driver_temp() const;
  inline void set_air_condition_status_driver_temp(::google::protobuf::uint32 value);

  // optional uint32 Air_condition_status_passenger_temp = 2;
  inline bool has_air_condition_status_passenger_temp() const;
  inline void clear_air_condition_status_passenger_temp();
  static const int kAirConditionStatusPassengerTempFieldNumber = 2;
  inline ::google::protobuf::uint32 air_condition_status_passenger_temp() const;
  inline void set_air_condition_status_passenger_temp(::google::protobuf::uint32 value);

  // optional uint32 Air_condition_status_Fan_volume = 3;
  inline bool has_air_condition_status_fan_volume() const;
  inline void clear_air_condition_status_fan_volume();
  static const int kAirConditionStatusFanVolumeFieldNumber = 3;
  inline ::google::protobuf::uint32 air_condition_status_fan_volume() const;
  inline void set_air_condition_status_fan_volume(::google::protobuf::uint32 value);

  // optional uint32 Air_condition_status_AC_IND = 4;
  inline bool has_air_condition_status_ac_ind() const;
  inline void clear_air_condition_status_ac_ind();
  static const int kAirConditionStatusACINDFieldNumber = 4;
  inline ::google::protobuf::uint32 air_condition_status_ac_ind() const;
  inline void set_air_condition_status_ac_ind(::google::protobuf::uint32 value);

  // optional uint32 Air_condition_status_circulate_IND = 5;
  inline bool has_air_condition_status_circulate_ind() const;
  inline void clear_air_condition_status_circulate_ind();
  static const int kAirConditionStatusCirculateINDFieldNumber = 5;
  inline ::google::protobuf::uint32 air_condition_status_circulate_ind() const;
  inline void set_air_condition_status_circulate_ind(::google::protobuf::uint32 value);

  // optional uint32 Air_condition_status_ON_OFF_IND = 6;
  inline bool has_air_condition_status_on_off_ind() const;
  inline void clear_air_condition_status_on_off_ind();
  static const int kAirConditionStatusONOFFINDFieldNumber = 6;
  inline ::google::protobuf::uint32 air_condition_status_on_off_ind() const;
  inline void set_air_condition_status_on_off_ind(::google::protobuf::uint32 value);

  // optional uint32 Air_condition_status_AUTO_IND = 7;
  inline bool has_air_condition_status_auto_ind() const;
  inline void clear_air_condition_status_auto_ind();
  static const int kAirConditionStatusAUTOINDFieldNumber = 7;
  inline ::google::protobuf::uint32 air_condition_status_auto_ind() const;
  inline void set_air_condition_status_auto_ind(::google::protobuf::uint32 value);

  // optional uint32 Air_condition_status_DUAL_IND = 8;
  inline bool has_air_condition_status_dual_ind() const;
  inline void clear_air_condition_status_dual_ind();
  static const int kAirConditionStatusDUALINDFieldNumber = 8;
  inline ::google::protobuf::uint32 air_condition_status_dual_ind() const;
  inline void set_air_condition_status_dual_ind(::google::protobuf::uint32 value);

  // optional uint32 Air_condition_status_SYNC_IND = 9;
  inline bool has_air_condition_status_sync_ind() const;
  inline void clear_air_condition_status_sync_ind();
  static const int kAirConditionStatusSYNCINDFieldNumber = 9;
  inline ::google::protobuf::uint32 air_condition_status_sync_ind() const;
  inline void set_air_condition_status_sync_ind(::google::protobuf::uint32 value);

  // optional uint32 Air_condition_status_Front_Defrost_IND = 10;
  inline bool has_air_condition_status_front_defrost_ind() const;
  inline void clear_air_condition_status_front_defrost_ind();
  static const int kAirConditionStatusFrontDefrostINDFieldNumber = 10;
  inline ::google::protobuf::uint32 air_condition_status_front_defrost_ind() const;
  inline void set_air_condition_status_front_defrost_ind(::google::protobuf::uint32 value);

  // optional uint32 Air_condition_status_Rear_Defrost_IND = 11;
  inline bool has_air_condition_status_rear_defrost_ind() const;
  inline void clear_air_condition_status_rear_defrost_ind();
  static const int kAirConditionStatusRearDefrostINDFieldNumber = 11;
  inline ::google::protobuf::uint32 air_condition_status_rear_defrost_ind() const;
  inline void set_air_condition_status_rear_defrost_ind(::google::protobuf::uint32 value);

  // optional uint32 Air_condition_status_Mode = 12;
  inline bool has_air_condition_status_mode() const;
  inline void clear_air_condition_status_mode();
  static const int kAirConditionStatusModeFieldNumber = 12;
  inline ::google::protobuf::uint32 air_condition_status_mode() const;
  inline void set_air_condition_status_mode(::google::protobuf::uint32 value);

  // optional uint32 Steering_Heat_status_SW = 13;
  inline bool has_steering_heat_status_sw() const;
  inline void clear_steering_heat_status_sw();
  static const int kSteeringHeatStatusSWFieldNumber = 13;
  inline ::google::protobuf::uint32 steering_heat_status_sw() const;
  inline void set_steering_heat_status_sw(::google::protobuf::uint32 value);

  // optional uint32 Seat_Heat_status_driver = 14;
  inline bool has_seat_heat_status_driver() const;
  inline void clear_seat_heat_status_driver();
  static const int kSeatHeatStatusDriverFieldNumber = 14;
  inline ::google::protobuf::uint32 seat_heat_status_driver() const;
  inline void set_seat_heat_status_driver(::google::protobuf::uint32 value);

  // optional uint32 Seat_Heat_status_passenager = 15;
  inline bool has_seat_heat_status_passenager() const;
  inline void clear_seat_heat_status_passenager();
  static const int kSeatHeatStatusPassenagerFieldNumber = 15;
  inline ::google::protobuf::uint32 seat_heat_status_passenager() const;
  inline void set_seat_heat_status_passenager(::google::protobuf::uint32 value);

  // optional uint32 BlowerFanMotorStatus_AC = 16;
  inline bool has_blowerfanmotorstatus_ac() const;
  inline void clear_blowerfanmotorstatus_ac();
  static const int kBlowerFanMotorStatusACFieldNumber = 16;
  inline ::google::protobuf::uint32 blowerfanmotorstatus_ac() const;
  inline void set_blowerfanmotorstatus_ac(::google::protobuf::uint32 value);

  // optional uint32 AC_StopAutoForbidden = 17;
  inline bool has_ac_stopautoforbidden() const;
  inline void clear_ac_stopautoforbidden();
  static const int kACStopAutoForbiddenFieldNumber = 17;
  inline ::google::protobuf::uint32 ac_stopautoforbidden() const;
  inline void set_ac_stopautoforbidden(::google::protobuf::uint32 value);

  // optional uint32 AirCondEcoActivationState = 18;
  inline bool has_aircondecoactivationstate() const;
  inline void clear_aircondecoactivationstate();
  static const int kAirCondEcoActivationStateFieldNumber = 18;
  inline ::google::protobuf::uint32 aircondecoactivationstate() const;
  inline void set_aircondecoactivationstate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.HVAC_Info)
 private:
  inline void set_has_air_condition_status_driver_temp();
  inline void clear_has_air_condition_status_driver_temp();
  inline void set_has_air_condition_status_passenger_temp();
  inline void clear_has_air_condition_status_passenger_temp();
  inline void set_has_air_condition_status_fan_volume();
  inline void clear_has_air_condition_status_fan_volume();
  inline void set_has_air_condition_status_ac_ind();
  inline void clear_has_air_condition_status_ac_ind();
  inline void set_has_air_condition_status_circulate_ind();
  inline void clear_has_air_condition_status_circulate_ind();
  inline void set_has_air_condition_status_on_off_ind();
  inline void clear_has_air_condition_status_on_off_ind();
  inline void set_has_air_condition_status_auto_ind();
  inline void clear_has_air_condition_status_auto_ind();
  inline void set_has_air_condition_status_dual_ind();
  inline void clear_has_air_condition_status_dual_ind();
  inline void set_has_air_condition_status_sync_ind();
  inline void clear_has_air_condition_status_sync_ind();
  inline void set_has_air_condition_status_front_defrost_ind();
  inline void clear_has_air_condition_status_front_defrost_ind();
  inline void set_has_air_condition_status_rear_defrost_ind();
  inline void clear_has_air_condition_status_rear_defrost_ind();
  inline void set_has_air_condition_status_mode();
  inline void clear_has_air_condition_status_mode();
  inline void set_has_steering_heat_status_sw();
  inline void clear_has_steering_heat_status_sw();
  inline void set_has_seat_heat_status_driver();
  inline void clear_has_seat_heat_status_driver();
  inline void set_has_seat_heat_status_passenager();
  inline void clear_has_seat_heat_status_passenager();
  inline void set_has_blowerfanmotorstatus_ac();
  inline void clear_has_blowerfanmotorstatus_ac();
  inline void set_has_ac_stopautoforbidden();
  inline void clear_has_ac_stopautoforbidden();
  inline void set_has_aircondecoactivationstate();
  inline void clear_has_aircondecoactivationstate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 air_condition_status_driver_temp_;
  ::google::protobuf::uint32 air_condition_status_passenger_temp_;
  ::google::protobuf::uint32 air_condition_status_fan_volume_;
  ::google::protobuf::uint32 air_condition_status_ac_ind_;
  ::google::protobuf::uint32 air_condition_status_circulate_ind_;
  ::google::protobuf::uint32 air_condition_status_on_off_ind_;
  ::google::protobuf::uint32 air_condition_status_auto_ind_;
  ::google::protobuf::uint32 air_condition_status_dual_ind_;
  ::google::protobuf::uint32 air_condition_status_sync_ind_;
  ::google::protobuf::uint32 air_condition_status_front_defrost_ind_;
  ::google::protobuf::uint32 air_condition_status_rear_defrost_ind_;
  ::google::protobuf::uint32 air_condition_status_mode_;
  ::google::protobuf::uint32 steering_heat_status_sw_;
  ::google::protobuf::uint32 seat_heat_status_driver_;
  ::google::protobuf::uint32 seat_heat_status_passenager_;
  ::google::protobuf::uint32 blowerfanmotorstatus_ac_;
  ::google::protobuf::uint32 ac_stopautoforbidden_;
  ::google::protobuf::uint32 aircondecoactivationstate_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static HVAC_Info* default_instance_;
};
// -------------------------------------------------------------------

class SBOX_info : public ::google::protobuf::Message {
 public:
  SBOX_info();
  virtual ~SBOX_info();

  SBOX_info(const SBOX_info& from);

  inline SBOX_info& operator=(const SBOX_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SBOX_info& default_instance();

  void Swap(SBOX_info* other);

  // implements Message ----------------------------------------------

  SBOX_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SBOX_info& from);
  void MergeFrom(const SBOX_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool PM25OnOffState = 1;
  inline bool has_pm25onoffstate() const;
  inline void clear_pm25onoffstate();
  static const int kPM25OnOffStateFieldNumber = 1;
  inline bool pm25onoffstate() const;
  inline void set_pm25onoffstate(bool value);

  // optional bool PM25FaultState = 2;
  inline bool has_pm25faultstate() const;
  inline void clear_pm25faultstate();
  static const int kPM25FaultStateFieldNumber = 2;
  inline bool pm25faultstate() const;
  inline void set_pm25faultstate(bool value);

  // optional uint32 PM25State = 3;
  inline bool has_pm25state() const;
  inline void clear_pm25state();
  static const int kPM25StateFieldNumber = 3;
  inline ::google::protobuf::uint32 pm25state() const;
  inline void set_pm25state(::google::protobuf::uint32 value);

  // optional uint32 PM25Value = 4;
  inline bool has_pm25value() const;
  inline void clear_pm25value();
  static const int kPM25ValueFieldNumber = 4;
  inline ::google::protobuf::uint32 pm25value() const;
  inline void set_pm25value(::google::protobuf::uint32 value);

  // optional uint32 Seat_Position_Feedback = 5;
  inline bool has_seat_position_feedback() const;
  inline void clear_seat_position_feedback();
  static const int kSeatPositionFeedbackFieldNumber = 5;
  inline ::google::protobuf::uint32 seat_position_feedback() const;
  inline void set_seat_position_feedback(::google::protobuf::uint32 value);

  // optional uint32 Seat_Heater_Feedback_Main = 6;
  inline bool has_seat_heater_feedback_main() const;
  inline void clear_seat_heater_feedback_main();
  static const int kSeatHeaterFeedbackMainFieldNumber = 6;
  inline ::google::protobuf::uint32 seat_heater_feedback_main() const;
  inline void set_seat_heater_feedback_main(::google::protobuf::uint32 value);

  // optional uint32 Seat_Heater_Feedback_FR = 7;
  inline bool has_seat_heater_feedback_fr() const;
  inline void clear_seat_heater_feedback_fr();
  static const int kSeatHeaterFeedbackFRFieldNumber = 7;
  inline ::google::protobuf::uint32 seat_heater_feedback_fr() const;
  inline void set_seat_heater_feedback_fr(::google::protobuf::uint32 value);

  // optional uint32 HAVC_mode_feedback = 8;
  inline bool has_havc_mode_feedback() const;
  inline void clear_havc_mode_feedback();
  static const int kHAVCModeFeedbackFieldNumber = 8;
  inline ::google::protobuf::uint32 havc_mode_feedback() const;
  inline void set_havc_mode_feedback(::google::protobuf::uint32 value);

  // optional uint32 HAVC_circulation_feedback = 9;
  inline bool has_havc_circulation_feedback() const;
  inline void clear_havc_circulation_feedback();
  static const int kHAVCCirculationFeedbackFieldNumber = 9;
  inline ::google::protobuf::uint32 havc_circulation_feedback() const;
  inline void set_havc_circulation_feedback(::google::protobuf::uint32 value);

  // optional uint32 HAVC_temperature_feedback = 10;
  inline bool has_havc_temperature_feedback() const;
  inline void clear_havc_temperature_feedback();
  static const int kHAVCTemperatureFeedbackFieldNumber = 10;
  inline ::google::protobuf::uint32 havc_temperature_feedback() const;
  inline void set_havc_temperature_feedback(::google::protobuf::uint32 value);

  // optional uint32 HAVC_air_volume_feedback = 11;
  inline bool has_havc_air_volume_feedback() const;
  inline void clear_havc_air_volume_feedback();
  static const int kHAVCAirVolumeFeedbackFieldNumber = 11;
  inline ::google::protobuf::uint32 havc_air_volume_feedback() const;
  inline void set_havc_air_volume_feedback(::google::protobuf::uint32 value);

  // optional uint32 AUTO = 12;
  inline bool has_auto_() const;
  inline void clear_auto_();
  static const int kAUTOFieldNumber = 12;
  inline ::google::protobuf::uint32 auto_() const;
  inline void set_auto_(::google::protobuf::uint32 value);

  // optional bool HVAC_Type = 13;
  inline bool has_hvac_type() const;
  inline void clear_hvac_type();
  static const int kHVACTypeFieldNumber = 13;
  inline bool hvac_type() const;
  inline void set_hvac_type(bool value);

  // optional uint32 DirectOutsideTemp = 14;
  inline bool has_directoutsidetemp() const;
  inline void clear_directoutsidetemp();
  static const int kDirectOutsideTempFieldNumber = 14;
  inline ::google::protobuf::uint32 directoutsidetemp() const;
  inline void set_directoutsidetemp(::google::protobuf::uint32 value);

  // optional uint32 DefrostState = 15;
  inline bool has_defroststate() const;
  inline void clear_defroststate();
  static const int kDefrostStateFieldNumber = 15;
  inline ::google::protobuf::uint32 defroststate() const;
  inline void set_defroststate(::google::protobuf::uint32 value);

  // optional uint32 Cooling_Warming_Feedback = 16;
  inline bool has_cooling_warming_feedback() const;
  inline void clear_cooling_warming_feedback();
  static const int kCoolingWarmingFeedbackFieldNumber = 16;
  inline ::google::protobuf::uint32 cooling_warming_feedback() const;
  inline void set_cooling_warming_feedback(::google::protobuf::uint32 value);

  // optional uint32 S_BOX_ControlData_AC_ON_OFF = 17;
  inline bool has_s_box_controldata_ac_on_off() const;
  inline void clear_s_box_controldata_ac_on_off();
  static const int kSBOXControlDataACONOFFFieldNumber = 17;
  inline ::google::protobuf::uint32 s_box_controldata_ac_on_off() const;
  inline void set_s_box_controldata_ac_on_off(::google::protobuf::uint32 value);

  // optional uint32 UVC_IN_feedback = 18;
  inline bool has_uvc_in_feedback() const;
  inline void clear_uvc_in_feedback();
  static const int kUVCINFeedbackFieldNumber = 18;
  inline ::google::protobuf::uint32 uvc_in_feedback() const;
  inline void set_uvc_in_feedback(::google::protobuf::uint32 value);

  // optional bool UVS_state_feedback = 19;
  inline bool has_uvs_state_feedback() const;
  inline void clear_uvs_state_feedback();
  static const int kUVSStateFeedbackFieldNumber = 19;
  inline bool uvs_state_feedback() const;
  inline void set_uvs_state_feedback(bool value);

  // optional bool EUCU_state_feedback = 20;
  inline bool has_eucu_state_feedback() const;
  inline void clear_eucu_state_feedback();
  static const int kEUCUStateFeedbackFieldNumber = 20;
  inline bool eucu_state_feedback() const;
  inline void set_eucu_state_feedback(bool value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.SBOX_info)
 private:
  inline void set_has_pm25onoffstate();
  inline void clear_has_pm25onoffstate();
  inline void set_has_pm25faultstate();
  inline void clear_has_pm25faultstate();
  inline void set_has_pm25state();
  inline void clear_has_pm25state();
  inline void set_has_pm25value();
  inline void clear_has_pm25value();
  inline void set_has_seat_position_feedback();
  inline void clear_has_seat_position_feedback();
  inline void set_has_seat_heater_feedback_main();
  inline void clear_has_seat_heater_feedback_main();
  inline void set_has_seat_heater_feedback_fr();
  inline void clear_has_seat_heater_feedback_fr();
  inline void set_has_havc_mode_feedback();
  inline void clear_has_havc_mode_feedback();
  inline void set_has_havc_circulation_feedback();
  inline void clear_has_havc_circulation_feedback();
  inline void set_has_havc_temperature_feedback();
  inline void clear_has_havc_temperature_feedback();
  inline void set_has_havc_air_volume_feedback();
  inline void clear_has_havc_air_volume_feedback();
  inline void set_has_auto_();
  inline void clear_has_auto_();
  inline void set_has_hvac_type();
  inline void clear_has_hvac_type();
  inline void set_has_directoutsidetemp();
  inline void clear_has_directoutsidetemp();
  inline void set_has_defroststate();
  inline void clear_has_defroststate();
  inline void set_has_cooling_warming_feedback();
  inline void clear_has_cooling_warming_feedback();
  inline void set_has_s_box_controldata_ac_on_off();
  inline void clear_has_s_box_controldata_ac_on_off();
  inline void set_has_uvc_in_feedback();
  inline void clear_has_uvc_in_feedback();
  inline void set_has_uvs_state_feedback();
  inline void clear_has_uvs_state_feedback();
  inline void set_has_eucu_state_feedback();
  inline void clear_has_eucu_state_feedback();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pm25state_;
  ::google::protobuf::uint32 pm25value_;
  ::google::protobuf::uint32 seat_position_feedback_;
  ::google::protobuf::uint32 seat_heater_feedback_main_;
  ::google::protobuf::uint32 seat_heater_feedback_fr_;
  ::google::protobuf::uint32 havc_mode_feedback_;
  bool pm25onoffstate_;
  bool pm25faultstate_;
  bool hvac_type_;
  bool uvs_state_feedback_;
  ::google::protobuf::uint32 havc_circulation_feedback_;
  ::google::protobuf::uint32 havc_temperature_feedback_;
  ::google::protobuf::uint32 havc_air_volume_feedback_;
  ::google::protobuf::uint32 auto__;
  ::google::protobuf::uint32 directoutsidetemp_;
  ::google::protobuf::uint32 defroststate_;
  ::google::protobuf::uint32 cooling_warming_feedback_;
  ::google::protobuf::uint32 s_box_controldata_ac_on_off_;
  ::google::protobuf::uint32 uvc_in_feedback_;
  bool eucu_state_feedback_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static SBOX_info* default_instance_;
};
// -------------------------------------------------------------------

class DVR_Info : public ::google::protobuf::Message {
 public:
  DVR_Info();
  virtual ~DVR_Info();

  DVR_Info(const DVR_Info& from);

  inline DVR_Info& operator=(const DVR_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DVR_Info& default_instance();

  void Swap(DVR_Info* other);

  // implements Message ----------------------------------------------

  DVR_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DVR_Info& from);
  void MergeFrom(const DVR_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 DVR_Collision_Happen = 1;
  inline bool has_dvr_collision_happen() const;
  inline void clear_dvr_collision_happen();
  static const int kDVRCollisionHappenFieldNumber = 1;
  inline ::google::protobuf::uint32 dvr_collision_happen() const;
  inline void set_dvr_collision_happen(::google::protobuf::uint32 value);

  // optional uint32 DVR_CollisionPhoto_Transmit = 2;
  inline bool has_dvr_collisionphoto_transmit() const;
  inline void clear_dvr_collisionphoto_transmit();
  static const int kDVRCollisionPhotoTransmitFieldNumber = 2;
  inline ::google::protobuf::uint32 dvr_collisionphoto_transmit() const;
  inline void set_dvr_collisionphoto_transmit(::google::protobuf::uint32 value);

  // optional uint32 DVR_CollisionVideo_Transmit = 3;
  inline bool has_dvr_collisionvideo_transmit() const;
  inline void clear_dvr_collisionvideo_transmit();
  static const int kDVRCollisionVideoTransmitFieldNumber = 3;
  inline ::google::protobuf::uint32 dvr_collisionvideo_transmit() const;
  inline void set_dvr_collisionvideo_transmit(::google::protobuf::uint32 value);

  // optional uint32 DVR_Response = 4;
  inline bool has_dvr_response() const;
  inline void clear_dvr_response();
  static const int kDVRResponseFieldNumber = 4;
  inline ::google::protobuf::uint32 dvr_response() const;
  inline void set_dvr_response(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.DVR_Info)
 private:
  inline void set_has_dvr_collision_happen();
  inline void clear_has_dvr_collision_happen();
  inline void set_has_dvr_collisionphoto_transmit();
  inline void clear_has_dvr_collisionphoto_transmit();
  inline void set_has_dvr_collisionvideo_transmit();
  inline void clear_has_dvr_collisionvideo_transmit();
  inline void set_has_dvr_response();
  inline void clear_has_dvr_response();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 dvr_collision_happen_;
  ::google::protobuf::uint32 dvr_collisionphoto_transmit_;
  ::google::protobuf::uint32 dvr_collisionvideo_transmit_;
  ::google::protobuf::uint32 dvr_response_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static DVR_Info* default_instance_;
};
// -------------------------------------------------------------------

class Basic_Info : public ::google::protobuf::Message {
 public:
  Basic_Info();
  virtual ~Basic_Info();

  Basic_Info(const Basic_Info& from);

  inline Basic_Info& operator=(const Basic_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Basic_Info& default_instance();

  void Swap(Basic_Info* other);

  // implements Message ----------------------------------------------

  Basic_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Basic_Info& from);
  void MergeFrom(const Basic_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tbox.protocol.ECM_Info ecm_info = 1;
  inline bool has_ecm_info() const;
  inline void clear_ecm_info();
  static const int kEcmInfoFieldNumber = 1;
  inline const ::tbox::protocol::ECM_Info& ecm_info() const;
  inline ::tbox::protocol::ECM_Info* mutable_ecm_info();
  inline ::tbox::protocol::ECM_Info* release_ecm_info();
  inline void set_allocated_ecm_info(::tbox::protocol::ECM_Info* ecm_info);

  // optional .tbox.protocol.ABSVDC_Info absvdc_info = 2;
  inline bool has_absvdc_info() const;
  inline void clear_absvdc_info();
  static const int kAbsvdcInfoFieldNumber = 2;
  inline const ::tbox::protocol::ABSVDC_Info& absvdc_info() const;
  inline ::tbox::protocol::ABSVDC_Info* mutable_absvdc_info();
  inline ::tbox::protocol::ABSVDC_Info* release_absvdc_info();
  inline void set_allocated_absvdc_info(::tbox::protocol::ABSVDC_Info* absvdc_info);

  // optional .tbox.protocol.METER_Info meter_info = 3;
  inline bool has_meter_info() const;
  inline void clear_meter_info();
  static const int kMeterInfoFieldNumber = 3;
  inline const ::tbox::protocol::METER_Info& meter_info() const;
  inline ::tbox::protocol::METER_Info* mutable_meter_info();
  inline ::tbox::protocol::METER_Info* release_meter_info();
  inline void set_allocated_meter_info(::tbox::protocol::METER_Info* meter_info);

  // optional .tbox.protocol.BCM_Info bcm_info = 4;
  inline bool has_bcm_info() const;
  inline void clear_bcm_info();
  static const int kBcmInfoFieldNumber = 4;
  inline const ::tbox::protocol::BCM_Info& bcm_info() const;
  inline ::tbox::protocol::BCM_Info* mutable_bcm_info();
  inline ::tbox::protocol::BCM_Info* release_bcm_info();
  inline void set_allocated_bcm_info(::tbox::protocol::BCM_Info* bcm_info);

  // optional .tbox.protocol.ACU_Info acu_info = 5;
  inline bool has_acu_info() const;
  inline void clear_acu_info();
  static const int kAcuInfoFieldNumber = 5;
  inline const ::tbox::protocol::ACU_Info& acu_info() const;
  inline ::tbox::protocol::ACU_Info* mutable_acu_info();
  inline ::tbox::protocol::ACU_Info* release_acu_info();
  inline void set_allocated_acu_info(::tbox::protocol::ACU_Info* acu_info);

  // optional .tbox.protocol.AT_Info at_info = 6;
  inline bool has_at_info() const;
  inline void clear_at_info();
  static const int kAtInfoFieldNumber = 6;
  inline const ::tbox::protocol::AT_Info& at_info() const;
  inline ::tbox::protocol::AT_Info* mutable_at_info();
  inline ::tbox::protocol::AT_Info* release_at_info();
  inline void set_allocated_at_info(::tbox::protocol::AT_Info* at_info);

  // optional .tbox.protocol.STRG_Info strg_info = 7;
  inline bool has_strg_info() const;
  inline void clear_strg_info();
  static const int kStrgInfoFieldNumber = 7;
  inline const ::tbox::protocol::STRG_Info& strg_info() const;
  inline ::tbox::protocol::STRG_Info* mutable_strg_info();
  inline ::tbox::protocol::STRG_Info* release_strg_info();
  inline void set_allocated_strg_info(::tbox::protocol::STRG_Info* strg_info);

  // optional .tbox.protocol.EPS_Info eps_info = 8;
  inline bool has_eps_info() const;
  inline void clear_eps_info();
  static const int kEpsInfoFieldNumber = 8;
  inline const ::tbox::protocol::EPS_Info& eps_info() const;
  inline ::tbox::protocol::EPS_Info* mutable_eps_info();
  inline ::tbox::protocol::EPS_Info* release_eps_info();
  inline void set_allocated_eps_info(::tbox::protocol::EPS_Info* eps_info);

  // optional .tbox.protocol.USM_Info usm_info = 9;
  inline bool has_usm_info() const;
  inline void clear_usm_info();
  static const int kUsmInfoFieldNumber = 9;
  inline const ::tbox::protocol::USM_Info& usm_info() const;
  inline ::tbox::protocol::USM_Info* mutable_usm_info();
  inline ::tbox::protocol::USM_Info* release_usm_info();
  inline void set_allocated_usm_info(::tbox::protocol::USM_Info* usm_info);

  // optional .tbox.protocol.TPMS_Info tpms_info = 10;
  inline bool has_tpms_info() const;
  inline void clear_tpms_info();
  static const int kTpmsInfoFieldNumber = 10;
  inline const ::tbox::protocol::TPMS_Info& tpms_info() const;
  inline ::tbox::protocol::TPMS_Info* mutable_tpms_info();
  inline ::tbox::protocol::TPMS_Info* release_tpms_info();
  inline void set_allocated_tpms_info(::tbox::protocol::TPMS_Info* tpms_info);

  // optional .tbox.protocol.WIRE_Info wire_info = 11;
  inline bool has_wire_info() const;
  inline void clear_wire_info();
  static const int kWireInfoFieldNumber = 11;
  inline const ::tbox::protocol::WIRE_Info& wire_info() const;
  inline ::tbox::protocol::WIRE_Info* mutable_wire_info();
  inline ::tbox::protocol::WIRE_Info* release_wire_info();
  inline void set_allocated_wire_info(::tbox::protocol::WIRE_Info* wire_info);

  // optional .tbox.protocol.ECO_Info eco_info = 12;
  inline bool has_eco_info() const;
  inline void clear_eco_info();
  static const int kEcoInfoFieldNumber = 12;
  inline const ::tbox::protocol::ECO_Info& eco_info() const;
  inline ::tbox::protocol::ECO_Info* mutable_eco_info();
  inline ::tbox::protocol::ECO_Info* release_eco_info();
  inline void set_allocated_eco_info(::tbox::protocol::ECO_Info* eco_info);

  // optional .tbox.protocol.ALARM_Info alarm_info = 13;
  inline bool has_alarm_info() const;
  inline void clear_alarm_info();
  static const int kAlarmInfoFieldNumber = 13;
  inline const ::tbox::protocol::ALARM_Info& alarm_info() const;
  inline ::tbox::protocol::ALARM_Info* mutable_alarm_info();
  inline ::tbox::protocol::ALARM_Info* release_alarm_info();
  inline void set_allocated_alarm_info(::tbox::protocol::ALARM_Info* alarm_info);

  // optional .tbox.protocol.ITM_Info itm_info = 14;
  inline bool has_itm_info() const;
  inline void clear_itm_info();
  static const int kItmInfoFieldNumber = 14;
  inline const ::tbox::protocol::ITM_Info& itm_info() const;
  inline ::tbox::protocol::ITM_Info* mutable_itm_info();
  inline ::tbox::protocol::ITM_Info* release_itm_info();
  inline void set_allocated_itm_info(::tbox::protocol::ITM_Info* itm_info);

  // optional .tbox.protocol.IKEY_Info ikey_info = 15;
  inline bool has_ikey_info() const;
  inline void clear_ikey_info();
  static const int kIkeyInfoFieldNumber = 15;
  inline const ::tbox::protocol::IKEY_Info& ikey_info() const;
  inline ::tbox::protocol::IKEY_Info* mutable_ikey_info();
  inline ::tbox::protocol::IKEY_Info* release_ikey_info();
  inline void set_allocated_ikey_info(::tbox::protocol::IKEY_Info* ikey_info);

  // optional .tbox.protocol.COMMON_Info common_info = 16;
  inline bool has_common_info() const;
  inline void clear_common_info();
  static const int kCommonInfoFieldNumber = 16;
  inline const ::tbox::protocol::COMMON_Info& common_info() const;
  inline ::tbox::protocol::COMMON_Info* mutable_common_info();
  inline ::tbox::protocol::COMMON_Info* release_common_info();
  inline void set_allocated_common_info(::tbox::protocol::COMMON_Info* common_info);

  // optional .tbox.protocol.SBOX_info sbox_info = 17;
  inline bool has_sbox_info() const;
  inline void clear_sbox_info();
  static const int kSboxInfoFieldNumber = 17;
  inline const ::tbox::protocol::SBOX_info& sbox_info() const;
  inline ::tbox::protocol::SBOX_info* mutable_sbox_info();
  inline ::tbox::protocol::SBOX_info* release_sbox_info();
  inline void set_allocated_sbox_info(::tbox::protocol::SBOX_info* sbox_info);

  // optional .tbox.protocol.HVAC_Info hvac_info = 18;
  inline bool has_hvac_info() const;
  inline void clear_hvac_info();
  static const int kHvacInfoFieldNumber = 18;
  inline const ::tbox::protocol::HVAC_Info& hvac_info() const;
  inline ::tbox::protocol::HVAC_Info* mutable_hvac_info();
  inline ::tbox::protocol::HVAC_Info* release_hvac_info();
  inline void set_allocated_hvac_info(::tbox::protocol::HVAC_Info* hvac_info);

  // optional .tbox.protocol.DVR_Info dvr_info = 19;
  inline bool has_dvr_info() const;
  inline void clear_dvr_info();
  static const int kDvrInfoFieldNumber = 19;
  inline const ::tbox::protocol::DVR_Info& dvr_info() const;
  inline ::tbox::protocol::DVR_Info* mutable_dvr_info();
  inline ::tbox::protocol::DVR_Info* release_dvr_info();
  inline void set_allocated_dvr_info(::tbox::protocol::DVR_Info* dvr_info);

  // @@protoc_insertion_point(class_scope:tbox.protocol.Basic_Info)
 private:
  inline void set_has_ecm_info();
  inline void clear_has_ecm_info();
  inline void set_has_absvdc_info();
  inline void clear_has_absvdc_info();
  inline void set_has_meter_info();
  inline void clear_has_meter_info();
  inline void set_has_bcm_info();
  inline void clear_has_bcm_info();
  inline void set_has_acu_info();
  inline void clear_has_acu_info();
  inline void set_has_at_info();
  inline void clear_has_at_info();
  inline void set_has_strg_info();
  inline void clear_has_strg_info();
  inline void set_has_eps_info();
  inline void clear_has_eps_info();
  inline void set_has_usm_info();
  inline void clear_has_usm_info();
  inline void set_has_tpms_info();
  inline void clear_has_tpms_info();
  inline void set_has_wire_info();
  inline void clear_has_wire_info();
  inline void set_has_eco_info();
  inline void clear_has_eco_info();
  inline void set_has_alarm_info();
  inline void clear_has_alarm_info();
  inline void set_has_itm_info();
  inline void clear_has_itm_info();
  inline void set_has_ikey_info();
  inline void clear_has_ikey_info();
  inline void set_has_common_info();
  inline void clear_has_common_info();
  inline void set_has_sbox_info();
  inline void clear_has_sbox_info();
  inline void set_has_hvac_info();
  inline void clear_has_hvac_info();
  inline void set_has_dvr_info();
  inline void clear_has_dvr_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::tbox::protocol::ECM_Info* ecm_info_;
  ::tbox::protocol::ABSVDC_Info* absvdc_info_;
  ::tbox::protocol::METER_Info* meter_info_;
  ::tbox::protocol::BCM_Info* bcm_info_;
  ::tbox::protocol::ACU_Info* acu_info_;
  ::tbox::protocol::AT_Info* at_info_;
  ::tbox::protocol::STRG_Info* strg_info_;
  ::tbox::protocol::EPS_Info* eps_info_;
  ::tbox::protocol::USM_Info* usm_info_;
  ::tbox::protocol::TPMS_Info* tpms_info_;
  ::tbox::protocol::WIRE_Info* wire_info_;
  ::tbox::protocol::ECO_Info* eco_info_;
  ::tbox::protocol::ALARM_Info* alarm_info_;
  ::tbox::protocol::ITM_Info* itm_info_;
  ::tbox::protocol::IKEY_Info* ikey_info_;
  ::tbox::protocol::COMMON_Info* common_info_;
  ::tbox::protocol::SBOX_info* sbox_info_;
  ::tbox::protocol::HVAC_Info* hvac_info_;
  ::tbox::protocol::DVR_Info* dvr_info_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static Basic_Info* default_instance_;
};
// -------------------------------------------------------------------

class Vehicle_Info : public ::google::protobuf::Message {
 public:
  Vehicle_Info();
  virtual ~Vehicle_Info();

  Vehicle_Info(const Vehicle_Info& from);

  inline Vehicle_Info& operator=(const Vehicle_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vehicle_Info& default_instance();

  void Swap(Vehicle_Info* other);

  // implements Message ----------------------------------------------

  Vehicle_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vehicle_Info& from);
  void MergeFrom(const Vehicle_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Info_type = 1;
  inline bool has_info_type() const;
  inline void clear_info_type();
  static const int kInfoTypeFieldNumber = 1;
  inline bool info_type() const;
  inline void set_info_type(bool value);

  // required uint32 collect_time = 2;
  inline bool has_collect_time() const;
  inline void clear_collect_time();
  static const int kCollectTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 collect_time() const;
  inline void set_collect_time(::google::protobuf::uint32 value);

  // required .tbox.protocol.Basic_Info basic_info = 3;
  inline bool has_basic_info() const;
  inline void clear_basic_info();
  static const int kBasicInfoFieldNumber = 3;
  inline const ::tbox::protocol::Basic_Info& basic_info() const;
  inline ::tbox::protocol::Basic_Info* mutable_basic_info();
  inline ::tbox::protocol::Basic_Info* release_basic_info();
  inline void set_allocated_basic_info(::tbox::protocol::Basic_Info* basic_info);

  // required uint32 time_stamp = 4;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 4;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // optional uint32 IgnOnTag = 5;
  inline bool has_ignontag() const;
  inline void clear_ignontag();
  static const int kIgnOnTagFieldNumber = 5;
  inline ::google::protobuf::uint32 ignontag() const;
  inline void set_ignontag(::google::protobuf::uint32 value);

  // optional uint32 EF82 = 6;
  inline bool has_ef82() const;
  inline void clear_ef82();
  static const int kEF82FieldNumber = 6;
  inline ::google::protobuf::uint32 ef82() const;
  inline void set_ef82(::google::protobuf::uint32 value);

  // optional string Version = 7;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 7;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:tbox.protocol.Vehicle_Info)
 private:
  inline void set_has_info_type();
  inline void clear_has_info_type();
  inline void set_has_collect_time();
  inline void clear_has_collect_time();
  inline void set_has_basic_info();
  inline void clear_has_basic_info();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_ignontag();
  inline void clear_has_ignontag();
  inline void set_has_ef82();
  inline void clear_has_ef82();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool info_type_;
  ::google::protobuf::uint32 collect_time_;
  ::tbox::protocol::Basic_Info* basic_info_;
  ::google::protobuf::uint32 time_stamp_;
  ::google::protobuf::uint32 ignontag_;
  ::std::string* version_;
  ::google::protobuf::uint32 ef82_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static Vehicle_Info* default_instance_;
};
// -------------------------------------------------------------------

class Vehicle_InfoRsp : public ::google::protobuf::Message {
 public:
  Vehicle_InfoRsp();
  virtual ~Vehicle_InfoRsp();

  Vehicle_InfoRsp(const Vehicle_InfoRsp& from);

  inline Vehicle_InfoRsp& operator=(const Vehicle_InfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vehicle_InfoRsp& default_instance();

  void Swap(Vehicle_InfoRsp* other);

  // implements Message ----------------------------------------------

  Vehicle_InfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vehicle_InfoRsp& from);
  void MergeFrom(const Vehicle_InfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);

  // required uint32 time_stamp = 2;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 2;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.Vehicle_InfoRsp)
 private:
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 time_stamp_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static Vehicle_InfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class Location_Info : public ::google::protobuf::Message {
 public:
  Location_Info();
  virtual ~Location_Info();

  Location_Info(const Location_Info& from);

  inline Location_Info& operator=(const Location_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Location_Info& default_instance();

  void Swap(Location_Info* other);

  // implements Message ----------------------------------------------

  Location_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Location_Info& from);
  void MergeFrom(const Location_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Info_type = 1;
  inline bool has_info_type() const;
  inline void clear_info_type();
  static const int kInfoTypeFieldNumber = 1;
  inline bool info_type() const;
  inline void set_info_type(bool value);

  // required uint32 collect_time = 2;
  inline bool has_collect_time() const;
  inline void clear_collect_time();
  static const int kCollectTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 collect_time() const;
  inline void set_collect_time(::google::protobuf::uint32 value);

  // required uint32 location_status = 3;
  inline bool has_location_status() const;
  inline void clear_location_status();
  static const int kLocationStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 location_status() const;
  inline void set_location_status(::google::protobuf::uint32 value);

  // required uint32 longitude = 4;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  inline ::google::protobuf::uint32 longitude() const;
  inline void set_longitude(::google::protobuf::uint32 value);

  // required uint32 latitude = 5;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 5;
  inline ::google::protobuf::uint32 latitude() const;
  inline void set_latitude(::google::protobuf::uint32 value);

  // required uint32 speed = 6;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 6;
  inline ::google::protobuf::uint32 speed() const;
  inline void set_speed(::google::protobuf::uint32 value);

  // required uint32 direction = 7;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 7;
  inline ::google::protobuf::uint32 direction() const;
  inline void set_direction(::google::protobuf::uint32 value);

  // required uint32 time_stamp = 8;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 8;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // optional uint32 isGPSconversion = 9;
  inline bool has_isgpsconversion() const;
  inline void clear_isgpsconversion();
  static const int kIsGPSconversionFieldNumber = 9;
  inline ::google::protobuf::uint32 isgpsconversion() const;
  inline void set_isgpsconversion(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.Location_Info)
 private:
  inline void set_has_info_type();
  inline void clear_has_info_type();
  inline void set_has_collect_time();
  inline void clear_has_collect_time();
  inline void set_has_location_status();
  inline void clear_has_location_status();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_isgpsconversion();
  inline void clear_has_isgpsconversion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool info_type_;
  ::google::protobuf::uint32 collect_time_;
  ::google::protobuf::uint32 location_status_;
  ::google::protobuf::uint32 longitude_;
  ::google::protobuf::uint32 latitude_;
  ::google::protobuf::uint32 speed_;
  ::google::protobuf::uint32 direction_;
  ::google::protobuf::uint32 time_stamp_;
  ::google::protobuf::uint32 isgpsconversion_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static Location_Info* default_instance_;
};
// -------------------------------------------------------------------

class Location_InfoRsp : public ::google::protobuf::Message {
 public:
  Location_InfoRsp();
  virtual ~Location_InfoRsp();

  Location_InfoRsp(const Location_InfoRsp& from);

  inline Location_InfoRsp& operator=(const Location_InfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Location_InfoRsp& default_instance();

  void Swap(Location_InfoRsp* other);

  // implements Message ----------------------------------------------

  Location_InfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Location_InfoRsp& from);
  void MergeFrom(const Location_InfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);

  // required uint32 time_stamp = 2;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 2;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.Location_InfoRsp)
 private:
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 time_stamp_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static Location_InfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class RemoteControlResultRsp : public ::google::protobuf::Message {
 public:
  RemoteControlResultRsp();
  virtual ~RemoteControlResultRsp();

  RemoteControlResultRsp(const RemoteControlResultRsp& from);

  inline RemoteControlResultRsp& operator=(const RemoteControlResultRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoteControlResultRsp& default_instance();

  void Swap(RemoteControlResultRsp* other);

  // implements Message ----------------------------------------------

  RemoteControlResultRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoteControlResultRsp& from);
  void MergeFrom(const RemoteControlResultRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 control_type = 1;
  inline bool has_control_type() const;
  inline void clear_control_type();
  static const int kControlTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 control_type() const;
  inline void set_control_type(::google::protobuf::uint32 value);

  // required uint32 control_value = 2;
  inline bool has_control_value() const;
  inline void clear_control_value();
  static const int kControlValueFieldNumber = 2;
  inline ::google::protobuf::uint32 control_value() const;
  inline void set_control_value(::google::protobuf::uint32 value);

  // required uint32 serial_number = 3;
  inline bool has_serial_number() const;
  inline void clear_serial_number();
  static const int kSerialNumberFieldNumber = 3;
  inline ::google::protobuf::uint32 serial_number() const;
  inline void set_serial_number(::google::protobuf::uint32 value);

  // required uint32 control_result = 4;
  inline bool has_control_result() const;
  inline void clear_control_result();
  static const int kControlResultFieldNumber = 4;
  inline ::google::protobuf::uint32 control_result() const;
  inline void set_control_result(::google::protobuf::uint32 value);

  // required uint32 time_stamp = 5;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 5;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.RemoteControlResultRsp)
 private:
  inline void set_has_control_type();
  inline void clear_has_control_type();
  inline void set_has_control_value();
  inline void clear_has_control_value();
  inline void set_has_serial_number();
  inline void clear_has_serial_number();
  inline void set_has_control_result();
  inline void clear_has_control_result();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 control_type_;
  ::google::protobuf::uint32 control_value_;
  ::google::protobuf::uint32 serial_number_;
  ::google::protobuf::uint32 control_result_;
  ::google::protobuf::uint32 time_stamp_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static RemoteControlResultRsp* default_instance_;
};
// -------------------------------------------------------------------

class RemoteControlReq : public ::google::protobuf::Message {
 public:
  RemoteControlReq();
  virtual ~RemoteControlReq();

  RemoteControlReq(const RemoteControlReq& from);

  inline RemoteControlReq& operator=(const RemoteControlReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoteControlReq& default_instance();

  void Swap(RemoteControlReq* other);

  // implements Message ----------------------------------------------

  RemoteControlReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoteControlReq& from);
  void MergeFrom(const RemoteControlReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 control_type = 1;
  inline bool has_control_type() const;
  inline void clear_control_type();
  static const int kControlTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 control_type() const;
  inline void set_control_type(::google::protobuf::uint32 value);

  // required uint32 control_value = 2;
  inline bool has_control_value() const;
  inline void clear_control_value();
  static const int kControlValueFieldNumber = 2;
  inline ::google::protobuf::uint32 control_value() const;
  inline void set_control_value(::google::protobuf::uint32 value);

  // required uint32 serial_number = 3;
  inline bool has_serial_number() const;
  inline void clear_serial_number();
  static const int kSerialNumberFieldNumber = 3;
  inline ::google::protobuf::uint32 serial_number() const;
  inline void set_serial_number(::google::protobuf::uint32 value);

  // required uint32 time_stamp = 4;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 4;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // optional string signal_data = 5;
  inline bool has_signal_data() const;
  inline void clear_signal_data();
  static const int kSignalDataFieldNumber = 5;
  inline const ::std::string& signal_data() const;
  inline void set_signal_data(const ::std::string& value);
  inline void set_signal_data(const char* value);
  inline void set_signal_data(const char* value, size_t size);
  inline ::std::string* mutable_signal_data();
  inline ::std::string* release_signal_data();
  inline void set_allocated_signal_data(::std::string* signal_data);

  // @@protoc_insertion_point(class_scope:tbox.protocol.RemoteControlReq)
 private:
  inline void set_has_control_type();
  inline void clear_has_control_type();
  inline void set_has_control_value();
  inline void clear_has_control_value();
  inline void set_has_serial_number();
  inline void clear_has_serial_number();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_signal_data();
  inline void clear_has_signal_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 control_type_;
  ::google::protobuf::uint32 control_value_;
  ::google::protobuf::uint32 serial_number_;
  ::google::protobuf::uint32 time_stamp_;
  ::std::string* signal_data_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static RemoteControlReq* default_instance_;
};
// -------------------------------------------------------------------

class FlowCountRsp : public ::google::protobuf::Message {
 public:
  FlowCountRsp();
  virtual ~FlowCountRsp();

  FlowCountRsp(const FlowCountRsp& from);

  inline FlowCountRsp& operator=(const FlowCountRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlowCountRsp& default_instance();

  void Swap(FlowCountRsp* other);

  // implements Message ----------------------------------------------

  FlowCountRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlowCountRsp& from);
  void MergeFrom(const FlowCountRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 dataAllowance = 1;
  inline bool has_dataallowance() const;
  inline void clear_dataallowance();
  static const int kDataAllowanceFieldNumber = 1;
  inline ::google::protobuf::uint32 dataallowance() const;
  inline void set_dataallowance(::google::protobuf::uint32 value);

  // required uint32 dataUsage = 2;
  inline bool has_datausage() const;
  inline void clear_datausage();
  static const int kDataUsageFieldNumber = 2;
  inline ::google::protobuf::uint32 datausage() const;
  inline void set_datausage(::google::protobuf::uint32 value);

  // required uint32 dataAvailable = 3;
  inline bool has_dataavailable() const;
  inline void clear_dataavailable();
  static const int kDataAvailableFieldNumber = 3;
  inline ::google::protobuf::uint32 dataavailable() const;
  inline void set_dataavailable(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.FlowCountRsp)
 private:
  inline void set_has_dataallowance();
  inline void clear_has_dataallowance();
  inline void set_has_datausage();
  inline void clear_has_datausage();
  inline void set_has_dataavailable();
  inline void clear_has_dataavailable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 dataallowance_;
  ::google::protobuf::uint32 datausage_;
  ::google::protobuf::uint32 dataavailable_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static FlowCountRsp* default_instance_;
};
// -------------------------------------------------------------------

class FlowCountLimitReq : public ::google::protobuf::Message {
 public:
  FlowCountLimitReq();
  virtual ~FlowCountLimitReq();

  FlowCountLimitReq(const FlowCountLimitReq& from);

  inline FlowCountLimitReq& operator=(const FlowCountLimitReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlowCountLimitReq& default_instance();

  void Swap(FlowCountLimitReq* other);

  // implements Message ----------------------------------------------

  FlowCountLimitReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlowCountLimitReq& from);
  void MergeFrom(const FlowCountLimitReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 limitVal = 1;
  inline bool has_limitval() const;
  inline void clear_limitval();
  static const int kLimitValFieldNumber = 1;
  inline ::google::protobuf::uint32 limitval() const;
  inline void set_limitval(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.FlowCountLimitReq)
 private:
  inline void set_has_limitval();
  inline void clear_has_limitval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 limitval_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static FlowCountLimitReq* default_instance_;
};
// -------------------------------------------------------------------

class OtaUpgradeReq : public ::google::protobuf::Message {
 public:
  OtaUpgradeReq();
  virtual ~OtaUpgradeReq();

  OtaUpgradeReq(const OtaUpgradeReq& from);

  inline OtaUpgradeReq& operator=(const OtaUpgradeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OtaUpgradeReq& default_instance();

  void Swap(OtaUpgradeReq* other);

  // implements Message ----------------------------------------------

  OtaUpgradeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OtaUpgradeReq& from);
  void MergeFrom(const OtaUpgradeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tbox.protocol.UpgradeInfo upgradeinfo = 1;
  inline int upgradeinfo_size() const;
  inline void clear_upgradeinfo();
  static const int kUpgradeinfoFieldNumber = 1;
  inline const ::tbox::protocol::UpgradeInfo& upgradeinfo(int index) const;
  inline ::tbox::protocol::UpgradeInfo* mutable_upgradeinfo(int index);
  inline ::tbox::protocol::UpgradeInfo* add_upgradeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::tbox::protocol::UpgradeInfo >&
      upgradeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::tbox::protocol::UpgradeInfo >*
      mutable_upgradeinfo();

  // required uint32 serial_number = 2;
  inline bool has_serial_number() const;
  inline void clear_serial_number();
  static const int kSerialNumberFieldNumber = 2;
  inline ::google::protobuf::uint32 serial_number() const;
  inline void set_serial_number(::google::protobuf::uint32 value);

  // required uint32 time_stamp = 3;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 3;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.OtaUpgradeReq)
 private:
  inline void set_has_serial_number();
  inline void clear_has_serial_number();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tbox::protocol::UpgradeInfo > upgradeinfo_;
  ::google::protobuf::uint32 serial_number_;
  ::google::protobuf::uint32 time_stamp_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static OtaUpgradeReq* default_instance_;
};
// -------------------------------------------------------------------

class OtaUpgradeRsp : public ::google::protobuf::Message {
 public:
  OtaUpgradeRsp();
  virtual ~OtaUpgradeRsp();

  OtaUpgradeRsp(const OtaUpgradeRsp& from);

  inline OtaUpgradeRsp& operator=(const OtaUpgradeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OtaUpgradeRsp& default_instance();

  void Swap(OtaUpgradeRsp* other);

  // implements Message ----------------------------------------------

  OtaUpgradeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OtaUpgradeRsp& from);
  void MergeFrom(const OtaUpgradeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);

  // required uint32 time_stamp = 2;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 2;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // required uint32 serial_number = 3;
  inline bool has_serial_number() const;
  inline void clear_serial_number();
  static const int kSerialNumberFieldNumber = 3;
  inline ::google::protobuf::uint32 serial_number() const;
  inline void set_serial_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.OtaUpgradeRsp)
 private:
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_serial_number();
  inline void clear_has_serial_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 time_stamp_;
  ::google::protobuf::uint32 serial_number_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static OtaUpgradeRsp* default_instance_;
};
// -------------------------------------------------------------------

class CancelOtaUpgradeRsp : public ::google::protobuf::Message {
 public:
  CancelOtaUpgradeRsp();
  virtual ~CancelOtaUpgradeRsp();

  CancelOtaUpgradeRsp(const CancelOtaUpgradeRsp& from);

  inline CancelOtaUpgradeRsp& operator=(const CancelOtaUpgradeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CancelOtaUpgradeRsp& default_instance();

  void Swap(CancelOtaUpgradeRsp* other);

  // implements Message ----------------------------------------------

  CancelOtaUpgradeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CancelOtaUpgradeRsp& from);
  void MergeFrom(const CancelOtaUpgradeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.CancelOtaUpgradeRsp)
 private:
  inline void set_has_errcode();
  inline void clear_has_errcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static CancelOtaUpgradeRsp* default_instance_;
};
// -------------------------------------------------------------------

class OtaUpgradeProgressReq : public ::google::protobuf::Message {
 public:
  OtaUpgradeProgressReq();
  virtual ~OtaUpgradeProgressReq();

  OtaUpgradeProgressReq(const OtaUpgradeProgressReq& from);

  inline OtaUpgradeProgressReq& operator=(const OtaUpgradeProgressReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OtaUpgradeProgressReq& default_instance();

  void Swap(OtaUpgradeProgressReq* other);

  // implements Message ----------------------------------------------

  OtaUpgradeProgressReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OtaUpgradeProgressReq& from);
  void MergeFrom(const OtaUpgradeProgressReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .tbox.protocol.UpgradeProgressCodeType UpgradeProgressCode = 1;
  inline bool has_upgradeprogresscode() const;
  inline void clear_upgradeprogresscode();
  static const int kUpgradeProgressCodeFieldNumber = 1;
  inline ::tbox::protocol::UpgradeProgressCodeType upgradeprogresscode() const;
  inline void set_upgradeprogresscode(::tbox::protocol::UpgradeProgressCodeType value);

  // optional uint32 errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.OtaUpgradeProgressReq)
 private:
  inline void set_has_upgradeprogresscode();
  inline void clear_has_upgradeprogresscode();
  inline void set_has_errcode();
  inline void clear_has_errcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int upgradeprogresscode_;
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static OtaUpgradeProgressReq* default_instance_;
};
// -------------------------------------------------------------------

class CertCom : public ::google::protobuf::Message {
 public:
  CertCom();
  virtual ~CertCom();

  CertCom(const CertCom& from);

  inline CertCom& operator=(const CertCom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CertCom& default_instance();

  void Swap(CertCom* other);

  // implements Message ----------------------------------------------

  CertCom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CertCom& from);
  void MergeFrom(const CertCom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serial_number = 1;
  inline bool has_serial_number() const;
  inline void clear_serial_number();
  static const int kSerialNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 serial_number() const;
  inline void set_serial_number(::google::protobuf::uint32 value);

  // required uint32 cur_cert_id = 2;
  inline bool has_cur_cert_id() const;
  inline void clear_cur_cert_id();
  static const int kCurCertIdFieldNumber = 2;
  inline ::google::protobuf::uint32 cur_cert_id() const;
  inline void set_cur_cert_id(::google::protobuf::uint32 value);

  // required uint32 data_status = 3;
  inline bool has_data_status() const;
  inline void clear_data_status();
  static const int kDataStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 data_status() const;
  inline void set_data_status(::google::protobuf::uint32 value);

  // required uint32 cmd_id = 4;
  inline bool has_cmd_id() const;
  inline void clear_cmd_id();
  static const int kCmdIdFieldNumber = 4;
  inline ::google::protobuf::uint32 cmd_id() const;
  inline void set_cmd_id(::google::protobuf::uint32 value);

  // required string dcm_no = 5;
  inline bool has_dcm_no() const;
  inline void clear_dcm_no();
  static const int kDcmNoFieldNumber = 5;
  inline const ::std::string& dcm_no() const;
  inline void set_dcm_no(const ::std::string& value);
  inline void set_dcm_no(const char* value);
  inline void set_dcm_no(const char* value, size_t size);
  inline ::std::string* mutable_dcm_no();
  inline ::std::string* release_dcm_no();
  inline void set_allocated_dcm_no(::std::string* dcm_no);

  // optional uint32 errcode = 6;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 6;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);

  // required bytes data_info = 7;
  inline bool has_data_info() const;
  inline void clear_data_info();
  static const int kDataInfoFieldNumber = 7;
  inline const ::std::string& data_info() const;
  inline void set_data_info(const ::std::string& value);
  inline void set_data_info(const char* value);
  inline void set_data_info(const void* value, size_t size);
  inline ::std::string* mutable_data_info();
  inline ::std::string* release_data_info();
  inline void set_allocated_data_info(::std::string* data_info);

  // optional bytes sign_data = 8;
  inline bool has_sign_data() const;
  inline void clear_sign_data();
  static const int kSignDataFieldNumber = 8;
  inline const ::std::string& sign_data() const;
  inline void set_sign_data(const ::std::string& value);
  inline void set_sign_data(const char* value);
  inline void set_sign_data(const void* value, size_t size);
  inline ::std::string* mutable_sign_data();
  inline ::std::string* release_sign_data();
  inline void set_allocated_sign_data(::std::string* sign_data);

  // @@protoc_insertion_point(class_scope:tbox.protocol.CertCom)
 private:
  inline void set_has_serial_number();
  inline void clear_has_serial_number();
  inline void set_has_cur_cert_id();
  inline void clear_has_cur_cert_id();
  inline void set_has_data_status();
  inline void clear_has_data_status();
  inline void set_has_cmd_id();
  inline void clear_has_cmd_id();
  inline void set_has_dcm_no();
  inline void clear_has_dcm_no();
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_data_info();
  inline void clear_has_data_info();
  inline void set_has_sign_data();
  inline void clear_has_sign_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 serial_number_;
  ::google::protobuf::uint32 cur_cert_id_;
  ::google::protobuf::uint32 data_status_;
  ::google::protobuf::uint32 cmd_id_;
  ::std::string* dcm_no_;
  ::std::string* data_info_;
  ::std::string* sign_data_;
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static CertCom* default_instance_;
};
// -------------------------------------------------------------------

class TCUCertApply_Req : public ::google::protobuf::Message {
 public:
  TCUCertApply_Req();
  virtual ~TCUCertApply_Req();

  TCUCertApply_Req(const TCUCertApply_Req& from);

  inline TCUCertApply_Req& operator=(const TCUCertApply_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCUCertApply_Req& default_instance();

  void Swap(TCUCertApply_Req* other);

  // implements Message ----------------------------------------------

  TCUCertApply_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCUCertApply_Req& from);
  void MergeFrom(const TCUCertApply_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time_stamp = 1;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 1;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // required string vin = 2;
  inline bool has_vin() const;
  inline void clear_vin();
  static const int kVinFieldNumber = 2;
  inline const ::std::string& vin() const;
  inline void set_vin(const ::std::string& value);
  inline void set_vin(const char* value);
  inline void set_vin(const char* value, size_t size);
  inline ::std::string* mutable_vin();
  inline ::std::string* release_vin();
  inline void set_allocated_vin(::std::string* vin);

  // required uint32 cert_status = 3;
  inline bool has_cert_status() const;
  inline void clear_cert_status();
  static const int kCertStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 cert_status() const;
  inline void set_cert_status(::google::protobuf::uint32 value);

  // required uint32 duration = 4;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 4;
  inline ::google::protobuf::uint32 duration() const;
  inline void set_duration(::google::protobuf::uint32 value);

  // required bytes p10_csr = 5;
  inline bool has_p10_csr() const;
  inline void clear_p10_csr();
  static const int kP10CsrFieldNumber = 5;
  inline const ::std::string& p10_csr() const;
  inline void set_p10_csr(const ::std::string& value);
  inline void set_p10_csr(const char* value);
  inline void set_p10_csr(const void* value, size_t size);
  inline ::std::string* mutable_p10_csr();
  inline ::std::string* release_p10_csr();
  inline void set_allocated_p10_csr(::std::string* p10_csr);

  // optional bytes cst_sign_data = 6;
  inline bool has_cst_sign_data() const;
  inline void clear_cst_sign_data();
  static const int kCstSignDataFieldNumber = 6;
  inline const ::std::string& cst_sign_data() const;
  inline void set_cst_sign_data(const ::std::string& value);
  inline void set_cst_sign_data(const char* value);
  inline void set_cst_sign_data(const void* value, size_t size);
  inline ::std::string* mutable_cst_sign_data();
  inline ::std::string* release_cst_sign_data();
  inline void set_allocated_cst_sign_data(::std::string* cst_sign_data);

  // optional string cert_format = 7;
  inline bool has_cert_format() const;
  inline void clear_cert_format();
  static const int kCertFormatFieldNumber = 7;
  inline const ::std::string& cert_format() const;
  inline void set_cert_format(const ::std::string& value);
  inline void set_cert_format(const char* value);
  inline void set_cert_format(const char* value, size_t size);
  inline ::std::string* mutable_cert_format();
  inline ::std::string* release_cert_format();
  inline void set_allocated_cert_format(::std::string* cert_format);

  // optional uint32 sign_type = 8;
  inline bool has_sign_type() const;
  inline void clear_sign_type();
  static const int kSignTypeFieldNumber = 8;
  inline ::google::protobuf::uint32 sign_type() const;
  inline void set_sign_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.TCUCertApply_Req)
 private:
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_vin();
  inline void clear_has_vin();
  inline void set_has_cert_status();
  inline void clear_has_cert_status();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_p10_csr();
  inline void clear_has_p10_csr();
  inline void set_has_cst_sign_data();
  inline void clear_has_cst_sign_data();
  inline void set_has_cert_format();
  inline void clear_has_cert_format();
  inline void set_has_sign_type();
  inline void clear_has_sign_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* vin_;
  ::google::protobuf::uint32 time_stamp_;
  ::google::protobuf::uint32 cert_status_;
  ::std::string* p10_csr_;
  ::std::string* cst_sign_data_;
  ::google::protobuf::uint32 duration_;
  ::google::protobuf::uint32 sign_type_;
  ::std::string* cert_format_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static TCUCertApply_Req* default_instance_;
};
// -------------------------------------------------------------------

class TCUCertApply_Rsp : public ::google::protobuf::Message {
 public:
  TCUCertApply_Rsp();
  virtual ~TCUCertApply_Rsp();

  TCUCertApply_Rsp(const TCUCertApply_Rsp& from);

  inline TCUCertApply_Rsp& operator=(const TCUCertApply_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCUCertApply_Rsp& default_instance();

  void Swap(TCUCertApply_Rsp* other);

  // implements Message ----------------------------------------------

  TCUCertApply_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCUCertApply_Rsp& from);
  void MergeFrom(const TCUCertApply_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time_stamp = 1;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 1;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // optional uint32 recv_status = 2;
  inline bool has_recv_status() const;
  inline void clear_recv_status();
  static const int kRecvStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 recv_status() const;
  inline void set_recv_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.TCUCertApply_Rsp)
 private:
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_recv_status();
  inline void clear_has_recv_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 time_stamp_;
  ::google::protobuf::uint32 recv_status_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static TCUCertApply_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class CertIssue_Req : public ::google::protobuf::Message {
 public:
  CertIssue_Req();
  virtual ~CertIssue_Req();

  CertIssue_Req(const CertIssue_Req& from);

  inline CertIssue_Req& operator=(const CertIssue_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CertIssue_Req& default_instance();

  void Swap(CertIssue_Req* other);

  // implements Message ----------------------------------------------

  CertIssue_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CertIssue_Req& from);
  void MergeFrom(const CertIssue_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time_stamp = 1;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 1;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // required uint32 cert_apply_status = 2;
  inline bool has_cert_apply_status() const;
  inline void clear_cert_apply_status();
  static const int kCertApplyStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 cert_apply_status() const;
  inline void set_cert_apply_status(::google::protobuf::uint32 value);

  // optional uint32 apply_cert_id = 3;
  inline bool has_apply_cert_id() const;
  inline void clear_apply_cert_id();
  static const int kApplyCertIdFieldNumber = 3;
  inline ::google::protobuf::uint32 apply_cert_id() const;
  inline void set_apply_cert_id(::google::protobuf::uint32 value);

  // optional bytes cert_data = 4;
  inline bool has_cert_data() const;
  inline void clear_cert_data();
  static const int kCertDataFieldNumber = 4;
  inline const ::std::string& cert_data() const;
  inline void set_cert_data(const ::std::string& value);
  inline void set_cert_data(const char* value);
  inline void set_cert_data(const void* value, size_t size);
  inline ::std::string* mutable_cert_data();
  inline ::std::string* release_cert_data();
  inline void set_allocated_cert_data(::std::string* cert_data);

  // @@protoc_insertion_point(class_scope:tbox.protocol.CertIssue_Req)
 private:
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_cert_apply_status();
  inline void clear_has_cert_apply_status();
  inline void set_has_apply_cert_id();
  inline void clear_has_apply_cert_id();
  inline void set_has_cert_data();
  inline void clear_has_cert_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 time_stamp_;
  ::google::protobuf::uint32 cert_apply_status_;
  ::std::string* cert_data_;
  ::google::protobuf::uint32 apply_cert_id_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static CertIssue_Req* default_instance_;
};
// -------------------------------------------------------------------

class CertIssue_Rsp : public ::google::protobuf::Message {
 public:
  CertIssue_Rsp();
  virtual ~CertIssue_Rsp();

  CertIssue_Rsp(const CertIssue_Rsp& from);

  inline CertIssue_Rsp& operator=(const CertIssue_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CertIssue_Rsp& default_instance();

  void Swap(CertIssue_Rsp* other);

  // implements Message ----------------------------------------------

  CertIssue_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CertIssue_Rsp& from);
  void MergeFrom(const CertIssue_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time_stamp = 1;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 1;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // required uint32 cert_recv_status = 2;
  inline bool has_cert_recv_status() const;
  inline void clear_cert_recv_status();
  static const int kCertRecvStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 cert_recv_status() const;
  inline void set_cert_recv_status(::google::protobuf::uint32 value);

  // optional uint32 apply_cert_id = 3;
  inline bool has_apply_cert_id() const;
  inline void clear_apply_cert_id();
  static const int kApplyCertIdFieldNumber = 3;
  inline ::google::protobuf::uint32 apply_cert_id() const;
  inline void set_apply_cert_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.CertIssue_Rsp)
 private:
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_cert_recv_status();
  inline void clear_has_cert_recv_status();
  inline void set_has_apply_cert_id();
  inline void clear_has_apply_cert_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 time_stamp_;
  ::google::protobuf::uint32 cert_recv_status_;
  ::google::protobuf::uint32 apply_cert_id_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static CertIssue_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class RSALoginReq : public ::google::protobuf::Message {
 public:
  RSALoginReq();
  virtual ~RSALoginReq();

  RSALoginReq(const RSALoginReq& from);

  inline RSALoginReq& operator=(const RSALoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RSALoginReq& default_instance();

  void Swap(RSALoginReq* other);

  // implements Message ----------------------------------------------

  RSALoginReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RSALoginReq& from);
  void MergeFrom(const RSALoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string tcu_device_sn = 1;
  inline bool has_tcu_device_sn() const;
  inline void clear_tcu_device_sn();
  static const int kTcuDeviceSnFieldNumber = 1;
  inline const ::std::string& tcu_device_sn() const;
  inline void set_tcu_device_sn(const ::std::string& value);
  inline void set_tcu_device_sn(const char* value);
  inline void set_tcu_device_sn(const char* value, size_t size);
  inline ::std::string* mutable_tcu_device_sn();
  inline ::std::string* release_tcu_device_sn();
  inline void set_allocated_tcu_device_sn(::std::string* tcu_device_sn);

  // required string imsi = 2;
  inline bool has_imsi() const;
  inline void clear_imsi();
  static const int kImsiFieldNumber = 2;
  inline const ::std::string& imsi() const;
  inline void set_imsi(const ::std::string& value);
  inline void set_imsi(const char* value);
  inline void set_imsi(const char* value, size_t size);
  inline ::std::string* mutable_imsi();
  inline ::std::string* release_imsi();
  inline void set_allocated_imsi(::std::string* imsi);

  // required string imei = 3;
  inline bool has_imei() const;
  inline void clear_imei();
  static const int kImeiFieldNumber = 3;
  inline const ::std::string& imei() const;
  inline void set_imei(const ::std::string& value);
  inline void set_imei(const char* value);
  inline void set_imei(const char* value, size_t size);
  inline ::std::string* mutable_imei();
  inline ::std::string* release_imei();
  inline void set_allocated_imei(::std::string* imei);

  // required string software_version = 4;
  inline bool has_software_version() const;
  inline void clear_software_version();
  static const int kSoftwareVersionFieldNumber = 4;
  inline const ::std::string& software_version() const;
  inline void set_software_version(const ::std::string& value);
  inline void set_software_version(const char* value);
  inline void set_software_version(const char* value, size_t size);
  inline ::std::string* mutable_software_version();
  inline ::std::string* release_software_version();
  inline void set_allocated_software_version(::std::string* software_version);

  // required string hardware_version = 5;
  inline bool has_hardware_version() const;
  inline void clear_hardware_version();
  static const int kHardwareVersionFieldNumber = 5;
  inline const ::std::string& hardware_version() const;
  inline void set_hardware_version(const ::std::string& value);
  inline void set_hardware_version(const char* value);
  inline void set_hardware_version(const char* value, size_t size);
  inline ::std::string* mutable_hardware_version();
  inline ::std::string* release_hardware_version();
  inline void set_allocated_hardware_version(::std::string* hardware_version);

  // required uint32 time_stamp = 6;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 6;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // optional string g4_version = 7;
  inline bool has_g4_version() const;
  inline void clear_g4_version();
  static const int kG4VersionFieldNumber = 7;
  inline const ::std::string& g4_version() const;
  inline void set_g4_version(const ::std::string& value);
  inline void set_g4_version(const char* value);
  inline void set_g4_version(const char* value, size_t size);
  inline ::std::string* mutable_g4_version();
  inline ::std::string* release_g4_version();
  inline void set_allocated_g4_version(::std::string* g4_version);

  // optional string vehicle_type = 8;
  inline bool has_vehicle_type() const;
  inline void clear_vehicle_type();
  static const int kVehicleTypeFieldNumber = 8;
  inline const ::std::string& vehicle_type() const;
  inline void set_vehicle_type(const ::std::string& value);
  inline void set_vehicle_type(const char* value);
  inline void set_vehicle_type(const char* value, size_t size);
  inline ::std::string* mutable_vehicle_type();
  inline ::std::string* release_vehicle_type();
  inline void set_allocated_vehicle_type(::std::string* vehicle_type);

  // @@protoc_insertion_point(class_scope:tbox.protocol.RSALoginReq)
 private:
  inline void set_has_tcu_device_sn();
  inline void clear_has_tcu_device_sn();
  inline void set_has_imsi();
  inline void clear_has_imsi();
  inline void set_has_imei();
  inline void clear_has_imei();
  inline void set_has_software_version();
  inline void clear_has_software_version();
  inline void set_has_hardware_version();
  inline void clear_has_hardware_version();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_g4_version();
  inline void clear_has_g4_version();
  inline void set_has_vehicle_type();
  inline void clear_has_vehicle_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* tcu_device_sn_;
  ::std::string* imsi_;
  ::std::string* imei_;
  ::std::string* software_version_;
  ::std::string* hardware_version_;
  ::std::string* g4_version_;
  ::std::string* vehicle_type_;
  ::google::protobuf::uint32 time_stamp_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static RSALoginReq* default_instance_;
};
// -------------------------------------------------------------------

class SendRSARsp : public ::google::protobuf::Message {
 public:
  SendRSARsp();
  virtual ~SendRSARsp();

  SendRSARsp(const SendRSARsp& from);

  inline SendRSARsp& operator=(const SendRSARsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendRSARsp& default_instance();

  void Swap(SendRSARsp* other);

  // implements Message ----------------------------------------------

  SendRSARsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendRSARsp& from);
  void MergeFrom(const SendRSARsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);

  // optional uint32 N_len = 2;
  inline bool has_n_len() const;
  inline void clear_n_len();
  static const int kNLenFieldNumber = 2;
  inline ::google::protobuf::uint32 n_len() const;
  inline void set_n_len(::google::protobuf::uint32 value);

  // optional bytes N_string = 3;
  inline bool has_n_string() const;
  inline void clear_n_string();
  static const int kNStringFieldNumber = 3;
  inline const ::std::string& n_string() const;
  inline void set_n_string(const ::std::string& value);
  inline void set_n_string(const char* value);
  inline void set_n_string(const void* value, size_t size);
  inline ::std::string* mutable_n_string();
  inline ::std::string* release_n_string();
  inline void set_allocated_n_string(::std::string* n_string);

  // optional uint32 E1_len = 4;
  inline bool has_e1_len() const;
  inline void clear_e1_len();
  static const int kE1LenFieldNumber = 4;
  inline ::google::protobuf::uint32 e1_len() const;
  inline void set_e1_len(::google::protobuf::uint32 value);

  // optional bytes E1_string = 5;
  inline bool has_e1_string() const;
  inline void clear_e1_string();
  static const int kE1StringFieldNumber = 5;
  inline const ::std::string& e1_string() const;
  inline void set_e1_string(const ::std::string& value);
  inline void set_e1_string(const char* value);
  inline void set_e1_string(const void* value, size_t size);
  inline ::std::string* mutable_e1_string();
  inline ::std::string* release_e1_string();
  inline void set_allocated_e1_string(::std::string* e1_string);

  // @@protoc_insertion_point(class_scope:tbox.protocol.SendRSARsp)
 private:
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_n_len();
  inline void clear_has_n_len();
  inline void set_has_n_string();
  inline void clear_has_n_string();
  inline void set_has_e1_len();
  inline void clear_has_e1_len();
  inline void set_has_e1_string();
  inline void clear_has_e1_string();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 n_len_;
  ::std::string* n_string_;
  ::std::string* e1_string_;
  ::google::protobuf::uint32 e1_len_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static SendRSARsp* default_instance_;
};
// -------------------------------------------------------------------

class SendRC4Req : public ::google::protobuf::Message {
 public:
  SendRC4Req();
  virtual ~SendRC4Req();

  SendRC4Req(const SendRC4Req& from);

  inline SendRC4Req& operator=(const SendRC4Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendRC4Req& default_instance();

  void Swap(SendRC4Req* other);

  // implements Message ----------------------------------------------

  SendRC4Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendRC4Req& from);
  void MergeFrom(const SendRC4Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string da_device_sn = 1;
  inline bool has_da_device_sn() const;
  inline void clear_da_device_sn();
  static const int kDaDeviceSnFieldNumber = 1;
  inline const ::std::string& da_device_sn() const;
  inline void set_da_device_sn(const ::std::string& value);
  inline void set_da_device_sn(const char* value);
  inline void set_da_device_sn(const char* value, size_t size);
  inline ::std::string* mutable_da_device_sn();
  inline ::std::string* release_da_device_sn();
  inline void set_allocated_da_device_sn(::std::string* da_device_sn);

  // required string vin = 2;
  inline bool has_vin() const;
  inline void clear_vin();
  static const int kVinFieldNumber = 2;
  inline const ::std::string& vin() const;
  inline void set_vin(const ::std::string& value);
  inline void set_vin(const char* value);
  inline void set_vin(const char* value, size_t size);
  inline ::std::string* mutable_vin();
  inline ::std::string* release_vin();
  inline void set_allocated_vin(::std::string* vin);

  // required string iccid = 3;
  inline bool has_iccid() const;
  inline void clear_iccid();
  static const int kIccidFieldNumber = 3;
  inline const ::std::string& iccid() const;
  inline void set_iccid(const ::std::string& value);
  inline void set_iccid(const char* value);
  inline void set_iccid(const char* value, size_t size);
  inline ::std::string* mutable_iccid();
  inline ::std::string* release_iccid();
  inline void set_allocated_iccid(::std::string* iccid);

  // required uint32 serial_number = 4;
  inline bool has_serial_number() const;
  inline void clear_serial_number();
  static const int kSerialNumberFieldNumber = 4;
  inline ::google::protobuf::uint32 serial_number() const;
  inline void set_serial_number(::google::protobuf::uint32 value);

  // required uint32 key_len = 5;
  inline bool has_key_len() const;
  inline void clear_key_len();
  static const int kKeyLenFieldNumber = 5;
  inline ::google::protobuf::uint32 key_len() const;
  inline void set_key_len(::google::protobuf::uint32 value);

  // required bytes key = 6;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 6;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional bool upgrading = 7;
  inline bool has_upgrading() const;
  inline void clear_upgrading();
  static const int kUpgradingFieldNumber = 7;
  inline bool upgrading() const;
  inline void set_upgrading(bool value);

  // optional bool bcm_reg_status = 8;
  inline bool has_bcm_reg_status() const;
  inline void clear_bcm_reg_status();
  static const int kBcmRegStatusFieldNumber = 8;
  inline bool bcm_reg_status() const;
  inline void set_bcm_reg_status(bool value);

  // optional uint32 gps_contrlstatus = 9;
  inline bool has_gps_contrlstatus() const;
  inline void clear_gps_contrlstatus();
  static const int kGpsContrlstatusFieldNumber = 9;
  inline ::google::protobuf::uint32 gps_contrlstatus() const;
  inline void set_gps_contrlstatus(::google::protobuf::uint32 value);

  // optional uint32 vel_contrlstatus = 10;
  inline bool has_vel_contrlstatus() const;
  inline void clear_vel_contrlstatus();
  static const int kVelContrlstatusFieldNumber = 10;
  inline ::google::protobuf::uint32 vel_contrlstatus() const;
  inline void set_vel_contrlstatus(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.SendRC4Req)
 private:
  inline void set_has_da_device_sn();
  inline void clear_has_da_device_sn();
  inline void set_has_vin();
  inline void clear_has_vin();
  inline void set_has_iccid();
  inline void clear_has_iccid();
  inline void set_has_serial_number();
  inline void clear_has_serial_number();
  inline void set_has_key_len();
  inline void clear_has_key_len();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_upgrading();
  inline void clear_has_upgrading();
  inline void set_has_bcm_reg_status();
  inline void clear_has_bcm_reg_status();
  inline void set_has_gps_contrlstatus();
  inline void clear_has_gps_contrlstatus();
  inline void set_has_vel_contrlstatus();
  inline void clear_has_vel_contrlstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* da_device_sn_;
  ::std::string* vin_;
  ::std::string* iccid_;
  ::google::protobuf::uint32 serial_number_;
  ::google::protobuf::uint32 key_len_;
  ::std::string* key_;
  bool upgrading_;
  bool bcm_reg_status_;
  ::google::protobuf::uint32 gps_contrlstatus_;
  ::google::protobuf::uint32 vel_contrlstatus_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static SendRC4Req* default_instance_;
};
// -------------------------------------------------------------------

class SendRC4Resp : public ::google::protobuf::Message {
 public:
  SendRC4Resp();
  virtual ~SendRC4Resp();

  SendRC4Resp(const SendRC4Resp& from);

  inline SendRC4Resp& operator=(const SendRC4Resp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendRC4Resp& default_instance();

  void Swap(SendRC4Resp* other);

  // implements Message ----------------------------------------------

  SendRC4Resp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendRC4Resp& from);
  void MergeFrom(const SendRC4Resp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 errcode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);

  // required uint32 serial_number = 2;
  inline bool has_serial_number() const;
  inline void clear_serial_number();
  static const int kSerialNumberFieldNumber = 2;
  inline ::google::protobuf::uint32 serial_number() const;
  inline void set_serial_number(::google::protobuf::uint32 value);

  // required uint32 time_stamp = 3;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 3;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // repeated .tbox.protocol.UpgradeInfo upgradeinfo = 4;
  inline int upgradeinfo_size() const;
  inline void clear_upgradeinfo();
  static const int kUpgradeinfoFieldNumber = 4;
  inline const ::tbox::protocol::UpgradeInfo& upgradeinfo(int index) const;
  inline ::tbox::protocol::UpgradeInfo* mutable_upgradeinfo(int index);
  inline ::tbox::protocol::UpgradeInfo* add_upgradeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::tbox::protocol::UpgradeInfo >&
      upgradeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::tbox::protocol::UpgradeInfo >*
      mutable_upgradeinfo();

  // @@protoc_insertion_point(class_scope:tbox.protocol.SendRC4Resp)
 private:
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_serial_number();
  inline void clear_has_serial_number();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 serial_number_;
  ::google::protobuf::RepeatedPtrField< ::tbox::protocol::UpgradeInfo > upgradeinfo_;
  ::google::protobuf::uint32 time_stamp_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static SendRC4Resp* default_instance_;
};
// -------------------------------------------------------------------

class WakeUpDVRRsp : public ::google::protobuf::Message {
 public:
  WakeUpDVRRsp();
  virtual ~WakeUpDVRRsp();

  WakeUpDVRRsp(const WakeUpDVRRsp& from);

  inline WakeUpDVRRsp& operator=(const WakeUpDVRRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WakeUpDVRRsp& default_instance();

  void Swap(WakeUpDVRRsp* other);

  // implements Message ----------------------------------------------

  WakeUpDVRRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WakeUpDVRRsp& from);
  void MergeFrom(const WakeUpDVRRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serial_number = 1;
  inline bool has_serial_number() const;
  inline void clear_serial_number();
  static const int kSerialNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 serial_number() const;
  inline void set_serial_number(::google::protobuf::uint32 value);

  // required uint32 control_result = 2;
  inline bool has_control_result() const;
  inline void clear_control_result();
  static const int kControlResultFieldNumber = 2;
  inline ::google::protobuf::uint32 control_result() const;
  inline void set_control_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.WakeUpDVRRsp)
 private:
  inline void set_has_serial_number();
  inline void clear_has_serial_number();
  inline void set_has_control_result();
  inline void clear_has_control_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 serial_number_;
  ::google::protobuf::uint32 control_result_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static WakeUpDVRRsp* default_instance_;
};
// -------------------------------------------------------------------

class WakeUpDVRReq : public ::google::protobuf::Message {
 public:
  WakeUpDVRReq();
  virtual ~WakeUpDVRReq();

  WakeUpDVRReq(const WakeUpDVRReq& from);

  inline WakeUpDVRReq& operator=(const WakeUpDVRReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WakeUpDVRReq& default_instance();

  void Swap(WakeUpDVRReq* other);

  // implements Message ----------------------------------------------

  WakeUpDVRReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WakeUpDVRReq& from);
  void MergeFrom(const WakeUpDVRReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serial_number = 1;
  inline bool has_serial_number() const;
  inline void clear_serial_number();
  static const int kSerialNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 serial_number() const;
  inline void set_serial_number(::google::protobuf::uint32 value);

  // required uint32 time_stamp = 2;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 2;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.WakeUpDVRReq)
 private:
  inline void set_has_serial_number();
  inline void clear_has_serial_number();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 serial_number_;
  ::google::protobuf::uint32 time_stamp_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static WakeUpDVRReq* default_instance_;
};
// -------------------------------------------------------------------

class RmtDiagRsp : public ::google::protobuf::Message {
 public:
  RmtDiagRsp();
  virtual ~RmtDiagRsp();

  RmtDiagRsp(const RmtDiagRsp& from);

  inline RmtDiagRsp& operator=(const RmtDiagRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RmtDiagRsp& default_instance();

  void Swap(RmtDiagRsp* other);

  // implements Message ----------------------------------------------

  RmtDiagRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RmtDiagRsp& from);
  void MergeFrom(const RmtDiagRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .tbox.protocol.RmtDiagRspCode result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::tbox::protocol::RmtDiagRspCode result() const;
  inline void set_result(::tbox::protocol::RmtDiagRspCode value);

  // required uint32 serial_number = 2;
  inline bool has_serial_number() const;
  inline void clear_serial_number();
  static const int kSerialNumberFieldNumber = 2;
  inline ::google::protobuf::uint32 serial_number() const;
  inline void set_serial_number(::google::protobuf::uint32 value);

  // required uint32 time_stamp = 3;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 3;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // optional bytes Diag_AVM = 4;
  inline bool has_diag_avm() const;
  inline void clear_diag_avm();
  static const int kDiagAVMFieldNumber = 4;
  inline const ::std::string& diag_avm() const;
  inline void set_diag_avm(const ::std::string& value);
  inline void set_diag_avm(const char* value);
  inline void set_diag_avm(const void* value, size_t size);
  inline ::std::string* mutable_diag_avm();
  inline ::std::string* release_diag_avm();
  inline void set_allocated_diag_avm(::std::string* diag_avm);

  // optional bytes Diag_SONAR = 5;
  inline bool has_diag_sonar() const;
  inline void clear_diag_sonar();
  static const int kDiagSONARFieldNumber = 5;
  inline const ::std::string& diag_sonar() const;
  inline void set_diag_sonar(const ::std::string& value);
  inline void set_diag_sonar(const char* value);
  inline void set_diag_sonar(const void* value, size_t size);
  inline ::std::string* mutable_diag_sonar();
  inline ::std::string* release_diag_sonar();
  inline void set_allocated_diag_sonar(::std::string* diag_sonar);

  // optional bytes Diag_BSW = 6;
  inline bool has_diag_bsw() const;
  inline void clear_diag_bsw();
  static const int kDiagBSWFieldNumber = 6;
  inline const ::std::string& diag_bsw() const;
  inline void set_diag_bsw(const ::std::string& value);
  inline void set_diag_bsw(const char* value);
  inline void set_diag_bsw(const void* value, size_t size);
  inline ::std::string* mutable_diag_bsw();
  inline ::std::string* release_diag_bsw();
  inline void set_allocated_diag_bsw(::std::string* diag_bsw);

  // optional bytes Diag_ECM = 7;
  inline bool has_diag_ecm() const;
  inline void clear_diag_ecm();
  static const int kDiagECMFieldNumber = 7;
  inline const ::std::string& diag_ecm() const;
  inline void set_diag_ecm(const ::std::string& value);
  inline void set_diag_ecm(const char* value);
  inline void set_diag_ecm(const void* value, size_t size);
  inline ::std::string* mutable_diag_ecm();
  inline ::std::string* release_diag_ecm();
  inline void set_allocated_diag_ecm(::std::string* diag_ecm);

  // optional bytes Diag_TCM = 8;
  inline bool has_diag_tcm() const;
  inline void clear_diag_tcm();
  static const int kDiagTCMFieldNumber = 8;
  inline const ::std::string& diag_tcm() const;
  inline void set_diag_tcm(const ::std::string& value);
  inline void set_diag_tcm(const char* value);
  inline void set_diag_tcm(const void* value, size_t size);
  inline ::std::string* mutable_diag_tcm();
  inline ::std::string* release_diag_tcm();
  inline void set_allocated_diag_tcm(::std::string* diag_tcm);

  // optional bytes Diag_USM = 9;
  inline bool has_diag_usm() const;
  inline void clear_diag_usm();
  static const int kDiagUSMFieldNumber = 9;
  inline const ::std::string& diag_usm() const;
  inline void set_diag_usm(const ::std::string& value);
  inline void set_diag_usm(const char* value);
  inline void set_diag_usm(const void* value, size_t size);
  inline ::std::string* mutable_diag_usm();
  inline ::std::string* release_diag_usm();
  inline void set_allocated_diag_usm(::std::string* diag_usm);

  // optional bytes Diag_BCM = 10;
  inline bool has_diag_bcm() const;
  inline void clear_diag_bcm();
  static const int kDiagBCMFieldNumber = 10;
  inline const ::std::string& diag_bcm() const;
  inline void set_diag_bcm(const ::std::string& value);
  inline void set_diag_bcm(const char* value);
  inline void set_diag_bcm(const void* value, size_t size);
  inline ::std::string* mutable_diag_bcm();
  inline ::std::string* release_diag_bcm();
  inline void set_allocated_diag_bcm(::std::string* diag_bcm);

  // optional bytes Diag_FEB_CAMERA = 11;
  inline bool has_diag_feb_camera() const;
  inline void clear_diag_feb_camera();
  static const int kDiagFEBCAMERAFieldNumber = 11;
  inline const ::std::string& diag_feb_camera() const;
  inline void set_diag_feb_camera(const ::std::string& value);
  inline void set_diag_feb_camera(const char* value);
  inline void set_diag_feb_camera(const void* value, size_t size);
  inline ::std::string* mutable_diag_feb_camera();
  inline ::std::string* release_diag_feb_camera();
  inline void set_allocated_diag_feb_camera(::std::string* diag_feb_camera);

  // optional bytes Diag_FEB_RADAR = 12;
  inline bool has_diag_feb_radar() const;
  inline void clear_diag_feb_radar();
  static const int kDiagFEBRADARFieldNumber = 12;
  inline const ::std::string& diag_feb_radar() const;
  inline void set_diag_feb_radar(const ::std::string& value);
  inline void set_diag_feb_radar(const char* value);
  inline void set_diag_feb_radar(const void* value, size_t size);
  inline ::std::string* mutable_diag_feb_radar();
  inline ::std::string* release_diag_feb_radar();
  inline void set_allocated_diag_feb_radar(::std::string* diag_feb_radar);

  // optional bytes Diag_DVR = 13;
  inline bool has_diag_dvr() const;
  inline void clear_diag_dvr();
  static const int kDiagDVRFieldNumber = 13;
  inline const ::std::string& diag_dvr() const;
  inline void set_diag_dvr(const ::std::string& value);
  inline void set_diag_dvr(const char* value);
  inline void set_diag_dvr(const void* value, size_t size);
  inline ::std::string* mutable_diag_dvr();
  inline ::std::string* release_diag_dvr();
  inline void set_allocated_diag_dvr(::std::string* diag_dvr);

  // optional bytes Diag_VDC = 14;
  inline bool has_diag_vdc() const;
  inline void clear_diag_vdc();
  static const int kDiagVDCFieldNumber = 14;
  inline const ::std::string& diag_vdc() const;
  inline void set_diag_vdc(const ::std::string& value);
  inline void set_diag_vdc(const char* value);
  inline void set_diag_vdc(const void* value, size_t size);
  inline ::std::string* mutable_diag_vdc();
  inline ::std::string* release_diag_vdc();
  inline void set_allocated_diag_vdc(::std::string* diag_vdc);

  // optional bytes Diag_EPS = 15;
  inline bool has_diag_eps() const;
  inline void clear_diag_eps();
  static const int kDiagEPSFieldNumber = 15;
  inline const ::std::string& diag_eps() const;
  inline void set_diag_eps(const ::std::string& value);
  inline void set_diag_eps(const char* value);
  inline void set_diag_eps(const void* value, size_t size);
  inline ::std::string* mutable_diag_eps();
  inline ::std::string* release_diag_eps();
  inline void set_allocated_diag_eps(::std::string* diag_eps);

  // optional bytes Diag_GW = 16;
  inline bool has_diag_gw() const;
  inline void clear_diag_gw();
  static const int kDiagGWFieldNumber = 16;
  inline const ::std::string& diag_gw() const;
  inline void set_diag_gw(const ::std::string& value);
  inline void set_diag_gw(const char* value);
  inline void set_diag_gw(const void* value, size_t size);
  inline ::std::string* mutable_diag_gw();
  inline ::std::string* release_diag_gw();
  inline void set_allocated_diag_gw(::std::string* diag_gw);

  // optional bytes Diag_TPMS = 17;
  inline bool has_diag_tpms() const;
  inline void clear_diag_tpms();
  static const int kDiagTPMSFieldNumber = 17;
  inline const ::std::string& diag_tpms() const;
  inline void set_diag_tpms(const ::std::string& value);
  inline void set_diag_tpms(const char* value);
  inline void set_diag_tpms(const void* value, size_t size);
  inline ::std::string* mutable_diag_tpms();
  inline ::std::string* release_diag_tpms();
  inline void set_allocated_diag_tpms(::std::string* diag_tpms);

  // optional bytes Diag_METER = 18;
  inline bool has_diag_meter() const;
  inline void clear_diag_meter();
  static const int kDiagMETERFieldNumber = 18;
  inline const ::std::string& diag_meter() const;
  inline void set_diag_meter(const ::std::string& value);
  inline void set_diag_meter(const char* value);
  inline void set_diag_meter(const void* value, size_t size);
  inline ::std::string* mutable_diag_meter();
  inline ::std::string* release_diag_meter();
  inline void set_allocated_diag_meter(::std::string* diag_meter);

  // optional bytes Diag_TCU = 19;
  inline bool has_diag_tcu() const;
  inline void clear_diag_tcu();
  static const int kDiagTCUFieldNumber = 19;
  inline const ::std::string& diag_tcu() const;
  inline void set_diag_tcu(const ::std::string& value);
  inline void set_diag_tcu(const char* value);
  inline void set_diag_tcu(const void* value, size_t size);
  inline ::std::string* mutable_diag_tcu();
  inline ::std::string* release_diag_tcu();
  inline void set_allocated_diag_tcu(::std::string* diag_tcu);

  // optional bytes Diag_ACU = 20;
  inline bool has_diag_acu() const;
  inline void clear_diag_acu();
  static const int kDiagACUFieldNumber = 20;
  inline const ::std::string& diag_acu() const;
  inline void set_diag_acu(const ::std::string& value);
  inline void set_diag_acu(const char* value);
  inline void set_diag_acu(const void* value, size_t size);
  inline ::std::string* mutable_diag_acu();
  inline ::std::string* release_diag_acu();
  inline void set_allocated_diag_acu(::std::string* diag_acu);

  // optional bytes Diag_DA = 21;
  inline bool has_diag_da() const;
  inline void clear_diag_da();
  static const int kDiagDAFieldNumber = 21;
  inline const ::std::string& diag_da() const;
  inline void set_diag_da(const ::std::string& value);
  inline void set_diag_da(const char* value);
  inline void set_diag_da(const void* value, size_t size);
  inline ::std::string* mutable_diag_da();
  inline ::std::string* release_diag_da();
  inline void set_allocated_diag_da(::std::string* diag_da);

  // @@protoc_insertion_point(class_scope:tbox.protocol.RmtDiagRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_serial_number();
  inline void clear_has_serial_number();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_diag_avm();
  inline void clear_has_diag_avm();
  inline void set_has_diag_sonar();
  inline void clear_has_diag_sonar();
  inline void set_has_diag_bsw();
  inline void clear_has_diag_bsw();
  inline void set_has_diag_ecm();
  inline void clear_has_diag_ecm();
  inline void set_has_diag_tcm();
  inline void clear_has_diag_tcm();
  inline void set_has_diag_usm();
  inline void clear_has_diag_usm();
  inline void set_has_diag_bcm();
  inline void clear_has_diag_bcm();
  inline void set_has_diag_feb_camera();
  inline void clear_has_diag_feb_camera();
  inline void set_has_diag_feb_radar();
  inline void clear_has_diag_feb_radar();
  inline void set_has_diag_dvr();
  inline void clear_has_diag_dvr();
  inline void set_has_diag_vdc();
  inline void clear_has_diag_vdc();
  inline void set_has_diag_eps();
  inline void clear_has_diag_eps();
  inline void set_has_diag_gw();
  inline void clear_has_diag_gw();
  inline void set_has_diag_tpms();
  inline void clear_has_diag_tpms();
  inline void set_has_diag_meter();
  inline void clear_has_diag_meter();
  inline void set_has_diag_tcu();
  inline void clear_has_diag_tcu();
  inline void set_has_diag_acu();
  inline void clear_has_diag_acu();
  inline void set_has_diag_da();
  inline void clear_has_diag_da();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int result_;
  ::google::protobuf::uint32 serial_number_;
  ::std::string* diag_avm_;
  ::std::string* diag_sonar_;
  ::std::string* diag_bsw_;
  ::std::string* diag_ecm_;
  ::std::string* diag_tcm_;
  ::std::string* diag_usm_;
  ::std::string* diag_bcm_;
  ::std::string* diag_feb_camera_;
  ::std::string* diag_feb_radar_;
  ::std::string* diag_dvr_;
  ::std::string* diag_vdc_;
  ::std::string* diag_eps_;
  ::std::string* diag_gw_;
  ::std::string* diag_tpms_;
  ::std::string* diag_meter_;
  ::std::string* diag_tcu_;
  ::std::string* diag_acu_;
  ::std::string* diag_da_;
  ::google::protobuf::uint32 time_stamp_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static RmtDiagRsp* default_instance_;
};
// -------------------------------------------------------------------

class RmtDiagReq : public ::google::protobuf::Message {
 public:
  RmtDiagReq();
  virtual ~RmtDiagReq();

  RmtDiagReq(const RmtDiagReq& from);

  inline RmtDiagReq& operator=(const RmtDiagReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RmtDiagReq& default_instance();

  void Swap(RmtDiagReq* other);

  // implements Message ----------------------------------------------

  RmtDiagReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RmtDiagReq& from);
  void MergeFrom(const RmtDiagReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serial_number = 1;
  inline bool has_serial_number() const;
  inline void clear_serial_number();
  static const int kSerialNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 serial_number() const;
  inline void set_serial_number(::google::protobuf::uint32 value);

  // required uint32 time_stamp = 2;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 2;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.RmtDiagReq)
 private:
  inline void set_has_serial_number();
  inline void clear_has_serial_number();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 serial_number_;
  ::google::protobuf::uint32 time_stamp_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static RmtDiagReq* default_instance_;
};
// -------------------------------------------------------------------

class Fault_List_info : public ::google::protobuf::Message {
 public:
  Fault_List_info();
  virtual ~Fault_List_info();

  Fault_List_info(const Fault_List_info& from);

  inline Fault_List_info& operator=(const Fault_List_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fault_List_info& default_instance();

  void Swap(Fault_List_info* other);

  // implements Message ----------------------------------------------

  Fault_List_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fault_List_info& from);
  void MergeFrom(const Fault_List_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Fault_List_one = 1;
  inline bool has_fault_list_one() const;
  inline void clear_fault_list_one();
  static const int kFaultListOneFieldNumber = 1;
  inline ::google::protobuf::uint32 fault_list_one() const;
  inline void set_fault_list_one(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.Fault_List_info)
 private:
  inline void set_has_fault_list_one();
  inline void clear_has_fault_list_one();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 fault_list_one_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static Fault_List_info* default_instance_;
};
// -------------------------------------------------------------------

class FourGExtendCmdRsp : public ::google::protobuf::Message {
 public:
  FourGExtendCmdRsp();
  virtual ~FourGExtendCmdRsp();

  FourGExtendCmdRsp(const FourGExtendCmdRsp& from);

  inline FourGExtendCmdRsp& operator=(const FourGExtendCmdRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FourGExtendCmdRsp& default_instance();

  void Swap(FourGExtendCmdRsp* other);

  // implements Message ----------------------------------------------

  FourGExtendCmdRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FourGExtendCmdRsp& from);
  void MergeFrom(const FourGExtendCmdRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serial_number = 1;
  inline bool has_serial_number() const;
  inline void clear_serial_number();
  static const int kSerialNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 serial_number() const;
  inline void set_serial_number(::google::protobuf::uint32 value);

  // required uint32 time_stamp = 2;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 2;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // required uint32 commander_id = 3;
  inline bool has_commander_id() const;
  inline void clear_commander_id();
  static const int kCommanderIdFieldNumber = 3;
  inline ::google::protobuf::uint32 commander_id() const;
  inline void set_commander_id(::google::protobuf::uint32 value);

  // required bytes result_info = 4;
  inline bool has_result_info() const;
  inline void clear_result_info();
  static const int kResultInfoFieldNumber = 4;
  inline const ::std::string& result_info() const;
  inline void set_result_info(const ::std::string& value);
  inline void set_result_info(const char* value);
  inline void set_result_info(const void* value, size_t size);
  inline ::std::string* mutable_result_info();
  inline ::std::string* release_result_info();
  inline void set_allocated_result_info(::std::string* result_info);

  // @@protoc_insertion_point(class_scope:tbox.protocol.FourGExtendCmdRsp)
 private:
  inline void set_has_serial_number();
  inline void clear_has_serial_number();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_commander_id();
  inline void clear_has_commander_id();
  inline void set_has_result_info();
  inline void clear_has_result_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 serial_number_;
  ::google::protobuf::uint32 time_stamp_;
  ::std::string* result_info_;
  ::google::protobuf::uint32 commander_id_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static FourGExtendCmdRsp* default_instance_;
};
// -------------------------------------------------------------------

class FourGExtendCmdReq : public ::google::protobuf::Message {
 public:
  FourGExtendCmdReq();
  virtual ~FourGExtendCmdReq();

  FourGExtendCmdReq(const FourGExtendCmdReq& from);

  inline FourGExtendCmdReq& operator=(const FourGExtendCmdReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FourGExtendCmdReq& default_instance();

  void Swap(FourGExtendCmdReq* other);

  // implements Message ----------------------------------------------

  FourGExtendCmdReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FourGExtendCmdReq& from);
  void MergeFrom(const FourGExtendCmdReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serial_number = 1;
  inline bool has_serial_number() const;
  inline void clear_serial_number();
  static const int kSerialNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 serial_number() const;
  inline void set_serial_number(::google::protobuf::uint32 value);

  // required uint32 time_stamp = 2;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 2;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // required uint32 commander_id = 3;
  inline bool has_commander_id() const;
  inline void clear_commander_id();
  static const int kCommanderIdFieldNumber = 3;
  inline ::google::protobuf::uint32 commander_id() const;
  inline void set_commander_id(::google::protobuf::uint32 value);

  // required bytes result_info = 4;
  inline bool has_result_info() const;
  inline void clear_result_info();
  static const int kResultInfoFieldNumber = 4;
  inline const ::std::string& result_info() const;
  inline void set_result_info(const ::std::string& value);
  inline void set_result_info(const char* value);
  inline void set_result_info(const void* value, size_t size);
  inline ::std::string* mutable_result_info();
  inline ::std::string* release_result_info();
  inline void set_allocated_result_info(::std::string* result_info);

  // optional string jaegercontext = 5;
  inline bool has_jaegercontext() const;
  inline void clear_jaegercontext();
  static const int kJaegercontextFieldNumber = 5;
  inline const ::std::string& jaegercontext() const;
  inline void set_jaegercontext(const ::std::string& value);
  inline void set_jaegercontext(const char* value);
  inline void set_jaegercontext(const char* value, size_t size);
  inline ::std::string* mutable_jaegercontext();
  inline ::std::string* release_jaegercontext();
  inline void set_allocated_jaegercontext(::std::string* jaegercontext);

  // @@protoc_insertion_point(class_scope:tbox.protocol.FourGExtendCmdReq)
 private:
  inline void set_has_serial_number();
  inline void clear_has_serial_number();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_commander_id();
  inline void clear_has_commander_id();
  inline void set_has_result_info();
  inline void clear_has_result_info();
  inline void set_has_jaegercontext();
  inline void clear_has_jaegercontext();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 serial_number_;
  ::google::protobuf::uint32 time_stamp_;
  ::std::string* result_info_;
  ::std::string* jaegercontext_;
  ::google::protobuf::uint32 commander_id_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static FourGExtendCmdReq* default_instance_;
};
// -------------------------------------------------------------------

class TCUExtendCmdReq : public ::google::protobuf::Message {
 public:
  TCUExtendCmdReq();
  virtual ~TCUExtendCmdReq();

  TCUExtendCmdReq(const TCUExtendCmdReq& from);

  inline TCUExtendCmdReq& operator=(const TCUExtendCmdReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCUExtendCmdReq& default_instance();

  void Swap(TCUExtendCmdReq* other);

  // implements Message ----------------------------------------------

  TCUExtendCmdReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCUExtendCmdReq& from);
  void MergeFrom(const TCUExtendCmdReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serial_number = 1;
  inline bool has_serial_number() const;
  inline void clear_serial_number();
  static const int kSerialNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 serial_number() const;
  inline void set_serial_number(::google::protobuf::uint32 value);

  // required uint32 time_stamp = 2;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 2;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // required uint32 commander_id = 3;
  inline bool has_commander_id() const;
  inline void clear_commander_id();
  static const int kCommanderIdFieldNumber = 3;
  inline ::google::protobuf::uint32 commander_id() const;
  inline void set_commander_id(::google::protobuf::uint32 value);

  // required bytes result_info = 4;
  inline bool has_result_info() const;
  inline void clear_result_info();
  static const int kResultInfoFieldNumber = 4;
  inline const ::std::string& result_info() const;
  inline void set_result_info(const ::std::string& value);
  inline void set_result_info(const char* value);
  inline void set_result_info(const void* value, size_t size);
  inline ::std::string* mutable_result_info();
  inline ::std::string* release_result_info();
  inline void set_allocated_result_info(::std::string* result_info);

  // @@protoc_insertion_point(class_scope:tbox.protocol.TCUExtendCmdReq)
 private:
  inline void set_has_serial_number();
  inline void clear_has_serial_number();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_commander_id();
  inline void clear_has_commander_id();
  inline void set_has_result_info();
  inline void clear_has_result_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 serial_number_;
  ::google::protobuf::uint32 time_stamp_;
  ::std::string* result_info_;
  ::google::protobuf::uint32 commander_id_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static TCUExtendCmdReq* default_instance_;
};
// -------------------------------------------------------------------

class TCUExtendCmdRsp : public ::google::protobuf::Message {
 public:
  TCUExtendCmdRsp();
  virtual ~TCUExtendCmdRsp();

  TCUExtendCmdRsp(const TCUExtendCmdRsp& from);

  inline TCUExtendCmdRsp& operator=(const TCUExtendCmdRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCUExtendCmdRsp& default_instance();

  void Swap(TCUExtendCmdRsp* other);

  // implements Message ----------------------------------------------

  TCUExtendCmdRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCUExtendCmdRsp& from);
  void MergeFrom(const TCUExtendCmdRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serial_number = 1;
  inline bool has_serial_number() const;
  inline void clear_serial_number();
  static const int kSerialNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 serial_number() const;
  inline void set_serial_number(::google::protobuf::uint32 value);

  // required uint32 time_stamp = 2;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 2;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // required uint32 commander_id = 3;
  inline bool has_commander_id() const;
  inline void clear_commander_id();
  static const int kCommanderIdFieldNumber = 3;
  inline ::google::protobuf::uint32 commander_id() const;
  inline void set_commander_id(::google::protobuf::uint32 value);

  // required bytes result_info = 4;
  inline bool has_result_info() const;
  inline void clear_result_info();
  static const int kResultInfoFieldNumber = 4;
  inline const ::std::string& result_info() const;
  inline void set_result_info(const ::std::string& value);
  inline void set_result_info(const char* value);
  inline void set_result_info(const void* value, size_t size);
  inline ::std::string* mutable_result_info();
  inline ::std::string* release_result_info();
  inline void set_allocated_result_info(::std::string* result_info);

  // @@protoc_insertion_point(class_scope:tbox.protocol.TCUExtendCmdRsp)
 private:
  inline void set_has_serial_number();
  inline void clear_has_serial_number();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_commander_id();
  inline void clear_has_commander_id();
  inline void set_has_result_info();
  inline void clear_has_result_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 serial_number_;
  ::google::protobuf::uint32 time_stamp_;
  ::std::string* result_info_;
  ::google::protobuf::uint32 commander_id_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static TCUExtendCmdRsp* default_instance_;
};
// -------------------------------------------------------------------

class Net4GSwitchStatusReq : public ::google::protobuf::Message {
 public:
  Net4GSwitchStatusReq();
  virtual ~Net4GSwitchStatusReq();

  Net4GSwitchStatusReq(const Net4GSwitchStatusReq& from);

  inline Net4GSwitchStatusReq& operator=(const Net4GSwitchStatusReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Net4GSwitchStatusReq& default_instance();

  void Swap(Net4GSwitchStatusReq* other);

  // implements Message ----------------------------------------------

  Net4GSwitchStatusReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Net4GSwitchStatusReq& from);
  void MergeFrom(const Net4GSwitchStatusReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 net_4g_status = 1;
  inline bool has_net_4g_status() const;
  inline void clear_net_4g_status();
  static const int kNet4GStatusFieldNumber = 1;
  inline ::google::protobuf::uint32 net_4g_status() const;
  inline void set_net_4g_status(::google::protobuf::uint32 value);

  // optional string tcu_device_sn = 2;
  inline bool has_tcu_device_sn() const;
  inline void clear_tcu_device_sn();
  static const int kTcuDeviceSnFieldNumber = 2;
  inline const ::std::string& tcu_device_sn() const;
  inline void set_tcu_device_sn(const ::std::string& value);
  inline void set_tcu_device_sn(const char* value);
  inline void set_tcu_device_sn(const char* value, size_t size);
  inline ::std::string* mutable_tcu_device_sn();
  inline ::std::string* release_tcu_device_sn();
  inline void set_allocated_tcu_device_sn(::std::string* tcu_device_sn);

  // optional uint32 time_stamp = 3;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 3;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.Net4GSwitchStatusReq)
 private:
  inline void set_has_net_4g_status();
  inline void clear_has_net_4g_status();
  inline void set_has_tcu_device_sn();
  inline void clear_has_tcu_device_sn();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* tcu_device_sn_;
  ::google::protobuf::uint32 net_4g_status_;
  ::google::protobuf::uint32 time_stamp_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static Net4GSwitchStatusReq* default_instance_;
};
// -------------------------------------------------------------------

class Net4GSwitchStatusRsp : public ::google::protobuf::Message {
 public:
  Net4GSwitchStatusRsp();
  virtual ~Net4GSwitchStatusRsp();

  Net4GSwitchStatusRsp(const Net4GSwitchStatusRsp& from);

  inline Net4GSwitchStatusRsp& operator=(const Net4GSwitchStatusRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Net4GSwitchStatusRsp& default_instance();

  void Swap(Net4GSwitchStatusRsp* other);

  // implements Message ----------------------------------------------

  Net4GSwitchStatusRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Net4GSwitchStatusRsp& from);
  void MergeFrom(const Net4GSwitchStatusRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 net_4g_status = 1;
  inline bool has_net_4g_status() const;
  inline void clear_net_4g_status();
  static const int kNet4GStatusFieldNumber = 1;
  inline ::google::protobuf::uint32 net_4g_status() const;
  inline void set_net_4g_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.Net4GSwitchStatusRsp)
 private:
  inline void set_has_net_4g_status();
  inline void clear_has_net_4g_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 net_4g_status_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static Net4GSwitchStatusRsp* default_instance_;
};
// -------------------------------------------------------------------

class netGpsSwitchStatusReq : public ::google::protobuf::Message {
 public:
  netGpsSwitchStatusReq();
  virtual ~netGpsSwitchStatusReq();

  netGpsSwitchStatusReq(const netGpsSwitchStatusReq& from);

  inline netGpsSwitchStatusReq& operator=(const netGpsSwitchStatusReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const netGpsSwitchStatusReq& default_instance();

  void Swap(netGpsSwitchStatusReq* other);

  // implements Message ----------------------------------------------

  netGpsSwitchStatusReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const netGpsSwitchStatusReq& from);
  void MergeFrom(const netGpsSwitchStatusReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 gps_status = 1;
  inline bool has_gps_status() const;
  inline void clear_gps_status();
  static const int kGpsStatusFieldNumber = 1;
  inline ::google::protobuf::uint32 gps_status() const;
  inline void set_gps_status(::google::protobuf::uint32 value);

  // optional string tcu_device_sn = 2;
  inline bool has_tcu_device_sn() const;
  inline void clear_tcu_device_sn();
  static const int kTcuDeviceSnFieldNumber = 2;
  inline const ::std::string& tcu_device_sn() const;
  inline void set_tcu_device_sn(const ::std::string& value);
  inline void set_tcu_device_sn(const char* value);
  inline void set_tcu_device_sn(const char* value, size_t size);
  inline ::std::string* mutable_tcu_device_sn();
  inline ::std::string* release_tcu_device_sn();
  inline void set_allocated_tcu_device_sn(::std::string* tcu_device_sn);

  // optional uint32 time_stamp = 3;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 3;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.netGpsSwitchStatusReq)
 private:
  inline void set_has_gps_status();
  inline void clear_has_gps_status();
  inline void set_has_tcu_device_sn();
  inline void clear_has_tcu_device_sn();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* tcu_device_sn_;
  ::google::protobuf::uint32 gps_status_;
  ::google::protobuf::uint32 time_stamp_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static netGpsSwitchStatusReq* default_instance_;
};
// -------------------------------------------------------------------

class netGpsSwitchStatusRsp : public ::google::protobuf::Message {
 public:
  netGpsSwitchStatusRsp();
  virtual ~netGpsSwitchStatusRsp();

  netGpsSwitchStatusRsp(const netGpsSwitchStatusRsp& from);

  inline netGpsSwitchStatusRsp& operator=(const netGpsSwitchStatusRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const netGpsSwitchStatusRsp& default_instance();

  void Swap(netGpsSwitchStatusRsp* other);

  // implements Message ----------------------------------------------

  netGpsSwitchStatusRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const netGpsSwitchStatusRsp& from);
  void MergeFrom(const netGpsSwitchStatusRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 gps_status = 1;
  inline bool has_gps_status() const;
  inline void clear_gps_status();
  static const int kGpsStatusFieldNumber = 1;
  inline ::google::protobuf::uint32 gps_status() const;
  inline void set_gps_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tbox.protocol.netGpsSwitchStatusRsp)
 private:
  inline void set_has_gps_status();
  inline void clear_has_gps_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gps_status_;
  friend void  protobuf_AddDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_AssignDesc_tbox_5fprotocol_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_tbox_5fprotocol_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static netGpsSwitchStatusRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// UpgradeInfo

// required string filetype = 1;
inline bool UpgradeInfo::has_filetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpgradeInfo::set_has_filetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpgradeInfo::clear_has_filetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpgradeInfo::clear_filetype() {
  if (filetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filetype_->clear();
  }
  clear_has_filetype();
}
inline const ::std::string& UpgradeInfo::filetype() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.UpgradeInfo.filetype)
  return *filetype_;
}
inline void UpgradeInfo::set_filetype(const ::std::string& value) {
  set_has_filetype();
  if (filetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filetype_ = new ::std::string;
  }
  filetype_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.UpgradeInfo.filetype)
}
inline void UpgradeInfo::set_filetype(const char* value) {
  set_has_filetype();
  if (filetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filetype_ = new ::std::string;
  }
  filetype_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.UpgradeInfo.filetype)
}
inline void UpgradeInfo::set_filetype(const char* value, size_t size) {
  set_has_filetype();
  if (filetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filetype_ = new ::std::string;
  }
  filetype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.UpgradeInfo.filetype)
}
inline ::std::string* UpgradeInfo::mutable_filetype() {
  set_has_filetype();
  if (filetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filetype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.UpgradeInfo.filetype)
  return filetype_;
}
inline ::std::string* UpgradeInfo::release_filetype() {
  clear_has_filetype();
  if (filetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filetype_;
    filetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpgradeInfo::set_allocated_filetype(::std::string* filetype) {
  if (filetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filetype_;
  }
  if (filetype) {
    set_has_filetype();
    filetype_ = filetype;
  } else {
    clear_has_filetype();
    filetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.UpgradeInfo.filetype)
}

// required string filepath = 2;
inline bool UpgradeInfo::has_filepath() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpgradeInfo::set_has_filepath() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpgradeInfo::clear_has_filepath() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpgradeInfo::clear_filepath() {
  if (filepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filepath_->clear();
  }
  clear_has_filepath();
}
inline const ::std::string& UpgradeInfo::filepath() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.UpgradeInfo.filepath)
  return *filepath_;
}
inline void UpgradeInfo::set_filepath(const ::std::string& value) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.UpgradeInfo.filepath)
}
inline void UpgradeInfo::set_filepath(const char* value) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.UpgradeInfo.filepath)
}
inline void UpgradeInfo::set_filepath(const char* value, size_t size) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.UpgradeInfo.filepath)
}
inline ::std::string* UpgradeInfo::mutable_filepath() {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filepath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.UpgradeInfo.filepath)
  return filepath_;
}
inline ::std::string* UpgradeInfo::release_filepath() {
  clear_has_filepath();
  if (filepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filepath_;
    filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpgradeInfo::set_allocated_filepath(::std::string* filepath) {
  if (filepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filepath_;
  }
  if (filepath) {
    set_has_filepath();
    filepath_ = filepath;
  } else {
    clear_has_filepath();
    filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.UpgradeInfo.filepath)
}

// required string version = 3;
inline bool UpgradeInfo::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpgradeInfo::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpgradeInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpgradeInfo::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& UpgradeInfo::version() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.UpgradeInfo.version)
  return *version_;
}
inline void UpgradeInfo::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.UpgradeInfo.version)
}
inline void UpgradeInfo::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.UpgradeInfo.version)
}
inline void UpgradeInfo::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.UpgradeInfo.version)
}
inline ::std::string* UpgradeInfo::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.UpgradeInfo.version)
  return version_;
}
inline ::std::string* UpgradeInfo::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpgradeInfo::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.UpgradeInfo.version)
}

// required uint32 filesize = 4;
inline bool UpgradeInfo::has_filesize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpgradeInfo::set_has_filesize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpgradeInfo::clear_has_filesize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpgradeInfo::clear_filesize() {
  filesize_ = 0u;
  clear_has_filesize();
}
inline ::google::protobuf::uint32 UpgradeInfo::filesize() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.UpgradeInfo.filesize)
  return filesize_;
}
inline void UpgradeInfo::set_filesize(::google::protobuf::uint32 value) {
  set_has_filesize();
  filesize_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.UpgradeInfo.filesize)
}

// required bytes md5 = 5;
inline bool UpgradeInfo::has_md5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpgradeInfo::set_has_md5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpgradeInfo::clear_has_md5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpgradeInfo::clear_md5() {
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_->clear();
  }
  clear_has_md5();
}
inline const ::std::string& UpgradeInfo::md5() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.UpgradeInfo.md5)
  return *md5_;
}
inline void UpgradeInfo::set_md5(const ::std::string& value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.UpgradeInfo.md5)
}
inline void UpgradeInfo::set_md5(const char* value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.UpgradeInfo.md5)
}
inline void UpgradeInfo::set_md5(const void* value, size_t size) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.UpgradeInfo.md5)
}
inline ::std::string* UpgradeInfo::mutable_md5() {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.UpgradeInfo.md5)
  return md5_;
}
inline ::std::string* UpgradeInfo::release_md5() {
  clear_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = md5_;
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpgradeInfo::set_allocated_md5(::std::string* md5) {
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete md5_;
  }
  if (md5) {
    set_has_md5();
    md5_ = md5;
  } else {
    clear_has_md5();
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.UpgradeInfo.md5)
}

// optional string rc4 = 6;
inline bool UpgradeInfo::has_rc4() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UpgradeInfo::set_has_rc4() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UpgradeInfo::clear_has_rc4() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UpgradeInfo::clear_rc4() {
  if (rc4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rc4_->clear();
  }
  clear_has_rc4();
}
inline const ::std::string& UpgradeInfo::rc4() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.UpgradeInfo.rc4)
  return *rc4_;
}
inline void UpgradeInfo::set_rc4(const ::std::string& value) {
  set_has_rc4();
  if (rc4_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rc4_ = new ::std::string;
  }
  rc4_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.UpgradeInfo.rc4)
}
inline void UpgradeInfo::set_rc4(const char* value) {
  set_has_rc4();
  if (rc4_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rc4_ = new ::std::string;
  }
  rc4_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.UpgradeInfo.rc4)
}
inline void UpgradeInfo::set_rc4(const char* value, size_t size) {
  set_has_rc4();
  if (rc4_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rc4_ = new ::std::string;
  }
  rc4_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.UpgradeInfo.rc4)
}
inline ::std::string* UpgradeInfo::mutable_rc4() {
  set_has_rc4();
  if (rc4_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rc4_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.UpgradeInfo.rc4)
  return rc4_;
}
inline ::std::string* UpgradeInfo::release_rc4() {
  clear_has_rc4();
  if (rc4_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rc4_;
    rc4_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpgradeInfo::set_allocated_rc4(::std::string* rc4) {
  if (rc4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rc4_;
  }
  if (rc4) {
    set_has_rc4();
    rc4_ = rc4;
  } else {
    clear_has_rc4();
    rc4_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.UpgradeInfo.rc4)
}

// optional bytes sign_md5 = 7;
inline bool UpgradeInfo::has_sign_md5() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UpgradeInfo::set_has_sign_md5() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UpgradeInfo::clear_has_sign_md5() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UpgradeInfo::clear_sign_md5() {
  if (sign_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_md5_->clear();
  }
  clear_has_sign_md5();
}
inline const ::std::string& UpgradeInfo::sign_md5() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.UpgradeInfo.sign_md5)
  return *sign_md5_;
}
inline void UpgradeInfo::set_sign_md5(const ::std::string& value) {
  set_has_sign_md5();
  if (sign_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_md5_ = new ::std::string;
  }
  sign_md5_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.UpgradeInfo.sign_md5)
}
inline void UpgradeInfo::set_sign_md5(const char* value) {
  set_has_sign_md5();
  if (sign_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_md5_ = new ::std::string;
  }
  sign_md5_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.UpgradeInfo.sign_md5)
}
inline void UpgradeInfo::set_sign_md5(const void* value, size_t size) {
  set_has_sign_md5();
  if (sign_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_md5_ = new ::std::string;
  }
  sign_md5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.UpgradeInfo.sign_md5)
}
inline ::std::string* UpgradeInfo::mutable_sign_md5() {
  set_has_sign_md5();
  if (sign_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_md5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.UpgradeInfo.sign_md5)
  return sign_md5_;
}
inline ::std::string* UpgradeInfo::release_sign_md5() {
  clear_has_sign_md5();
  if (sign_md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_md5_;
    sign_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpgradeInfo::set_allocated_sign_md5(::std::string* sign_md5) {
  if (sign_md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_md5_;
  }
  if (sign_md5) {
    set_has_sign_md5();
    sign_md5_ = sign_md5;
  } else {
    clear_has_sign_md5();
    sign_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.UpgradeInfo.sign_md5)
}

// optional bytes sha2 = 8;
inline bool UpgradeInfo::has_sha2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UpgradeInfo::set_has_sha2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UpgradeInfo::clear_has_sha2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UpgradeInfo::clear_sha2() {
  if (sha2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sha2_->clear();
  }
  clear_has_sha2();
}
inline const ::std::string& UpgradeInfo::sha2() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.UpgradeInfo.sha2)
  return *sha2_;
}
inline void UpgradeInfo::set_sha2(const ::std::string& value) {
  set_has_sha2();
  if (sha2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sha2_ = new ::std::string;
  }
  sha2_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.UpgradeInfo.sha2)
}
inline void UpgradeInfo::set_sha2(const char* value) {
  set_has_sha2();
  if (sha2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sha2_ = new ::std::string;
  }
  sha2_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.UpgradeInfo.sha2)
}
inline void UpgradeInfo::set_sha2(const void* value, size_t size) {
  set_has_sha2();
  if (sha2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sha2_ = new ::std::string;
  }
  sha2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.UpgradeInfo.sha2)
}
inline ::std::string* UpgradeInfo::mutable_sha2() {
  set_has_sha2();
  if (sha2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sha2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.UpgradeInfo.sha2)
  return sha2_;
}
inline ::std::string* UpgradeInfo::release_sha2() {
  clear_has_sha2();
  if (sha2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sha2_;
    sha2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpgradeInfo::set_allocated_sha2(::std::string* sha2) {
  if (sha2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sha2_;
  }
  if (sha2) {
    set_has_sha2();
    sha2_ = sha2;
  } else {
    clear_has_sha2();
    sha2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.UpgradeInfo.sha2)
}

// optional string aes128 = 9;
inline bool UpgradeInfo::has_aes128() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UpgradeInfo::set_has_aes128() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UpgradeInfo::clear_has_aes128() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UpgradeInfo::clear_aes128() {
  if (aes128_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    aes128_->clear();
  }
  clear_has_aes128();
}
inline const ::std::string& UpgradeInfo::aes128() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.UpgradeInfo.aes128)
  return *aes128_;
}
inline void UpgradeInfo::set_aes128(const ::std::string& value) {
  set_has_aes128();
  if (aes128_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    aes128_ = new ::std::string;
  }
  aes128_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.UpgradeInfo.aes128)
}
inline void UpgradeInfo::set_aes128(const char* value) {
  set_has_aes128();
  if (aes128_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    aes128_ = new ::std::string;
  }
  aes128_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.UpgradeInfo.aes128)
}
inline void UpgradeInfo::set_aes128(const char* value, size_t size) {
  set_has_aes128();
  if (aes128_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    aes128_ = new ::std::string;
  }
  aes128_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.UpgradeInfo.aes128)
}
inline ::std::string* UpgradeInfo::mutable_aes128() {
  set_has_aes128();
  if (aes128_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    aes128_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.UpgradeInfo.aes128)
  return aes128_;
}
inline ::std::string* UpgradeInfo::release_aes128() {
  clear_has_aes128();
  if (aes128_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = aes128_;
    aes128_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpgradeInfo::set_allocated_aes128(::std::string* aes128) {
  if (aes128_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete aes128_;
  }
  if (aes128) {
    set_has_aes128();
    aes128_ = aes128;
  } else {
    clear_has_aes128();
    aes128_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.UpgradeInfo.aes128)
}

// optional bytes sign_sha2 = 10;
inline bool UpgradeInfo::has_sign_sha2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UpgradeInfo::set_has_sign_sha2() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UpgradeInfo::clear_has_sign_sha2() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UpgradeInfo::clear_sign_sha2() {
  if (sign_sha2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_sha2_->clear();
  }
  clear_has_sign_sha2();
}
inline const ::std::string& UpgradeInfo::sign_sha2() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.UpgradeInfo.sign_sha2)
  return *sign_sha2_;
}
inline void UpgradeInfo::set_sign_sha2(const ::std::string& value) {
  set_has_sign_sha2();
  if (sign_sha2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_sha2_ = new ::std::string;
  }
  sign_sha2_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.UpgradeInfo.sign_sha2)
}
inline void UpgradeInfo::set_sign_sha2(const char* value) {
  set_has_sign_sha2();
  if (sign_sha2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_sha2_ = new ::std::string;
  }
  sign_sha2_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.UpgradeInfo.sign_sha2)
}
inline void UpgradeInfo::set_sign_sha2(const void* value, size_t size) {
  set_has_sign_sha2();
  if (sign_sha2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_sha2_ = new ::std::string;
  }
  sign_sha2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.UpgradeInfo.sign_sha2)
}
inline ::std::string* UpgradeInfo::mutable_sign_sha2() {
  set_has_sign_sha2();
  if (sign_sha2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_sha2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.UpgradeInfo.sign_sha2)
  return sign_sha2_;
}
inline ::std::string* UpgradeInfo::release_sign_sha2() {
  clear_has_sign_sha2();
  if (sign_sha2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_sha2_;
    sign_sha2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpgradeInfo::set_allocated_sign_sha2(::std::string* sign_sha2) {
  if (sign_sha2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_sha2_;
  }
  if (sign_sha2) {
    set_has_sign_sha2();
    sign_sha2_ = sign_sha2;
  } else {
    clear_has_sign_sha2();
    sign_sha2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.UpgradeInfo.sign_sha2)
}

// optional uint32 prefilesize = 11;
inline bool UpgradeInfo::has_prefilesize() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UpgradeInfo::set_has_prefilesize() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UpgradeInfo::clear_has_prefilesize() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UpgradeInfo::clear_prefilesize() {
  prefilesize_ = 0u;
  clear_has_prefilesize();
}
inline ::google::protobuf::uint32 UpgradeInfo::prefilesize() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.UpgradeInfo.prefilesize)
  return prefilesize_;
}
inline void UpgradeInfo::set_prefilesize(::google::protobuf::uint32 value) {
  set_has_prefilesize();
  prefilesize_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.UpgradeInfo.prefilesize)
}

// optional uint32 encrypt_type = 12;
inline bool UpgradeInfo::has_encrypt_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UpgradeInfo::set_has_encrypt_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UpgradeInfo::clear_has_encrypt_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UpgradeInfo::clear_encrypt_type() {
  encrypt_type_ = 0u;
  clear_has_encrypt_type();
}
inline ::google::protobuf::uint32 UpgradeInfo::encrypt_type() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.UpgradeInfo.encrypt_type)
  return encrypt_type_;
}
inline void UpgradeInfo::set_encrypt_type(::google::protobuf::uint32 value) {
  set_has_encrypt_type();
  encrypt_type_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.UpgradeInfo.encrypt_type)
}

// -------------------------------------------------------------------

// LoginReq

// required string tcu_device_sn = 1;
inline bool LoginReq::has_tcu_device_sn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginReq::set_has_tcu_device_sn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginReq::clear_has_tcu_device_sn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginReq::clear_tcu_device_sn() {
  if (tcu_device_sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tcu_device_sn_->clear();
  }
  clear_has_tcu_device_sn();
}
inline const ::std::string& LoginReq::tcu_device_sn() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.LoginReq.tcu_device_sn)
  return *tcu_device_sn_;
}
inline void LoginReq::set_tcu_device_sn(const ::std::string& value) {
  set_has_tcu_device_sn();
  if (tcu_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tcu_device_sn_ = new ::std::string;
  }
  tcu_device_sn_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.LoginReq.tcu_device_sn)
}
inline void LoginReq::set_tcu_device_sn(const char* value) {
  set_has_tcu_device_sn();
  if (tcu_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tcu_device_sn_ = new ::std::string;
  }
  tcu_device_sn_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.LoginReq.tcu_device_sn)
}
inline void LoginReq::set_tcu_device_sn(const char* value, size_t size) {
  set_has_tcu_device_sn();
  if (tcu_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tcu_device_sn_ = new ::std::string;
  }
  tcu_device_sn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.LoginReq.tcu_device_sn)
}
inline ::std::string* LoginReq::mutable_tcu_device_sn() {
  set_has_tcu_device_sn();
  if (tcu_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tcu_device_sn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.LoginReq.tcu_device_sn)
  return tcu_device_sn_;
}
inline ::std::string* LoginReq::release_tcu_device_sn() {
  clear_has_tcu_device_sn();
  if (tcu_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tcu_device_sn_;
    tcu_device_sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginReq::set_allocated_tcu_device_sn(::std::string* tcu_device_sn) {
  if (tcu_device_sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tcu_device_sn_;
  }
  if (tcu_device_sn) {
    set_has_tcu_device_sn();
    tcu_device_sn_ = tcu_device_sn;
  } else {
    clear_has_tcu_device_sn();
    tcu_device_sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.LoginReq.tcu_device_sn)
}

// required string da_device_sn = 2;
inline bool LoginReq::has_da_device_sn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginReq::set_has_da_device_sn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginReq::clear_has_da_device_sn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginReq::clear_da_device_sn() {
  if (da_device_sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    da_device_sn_->clear();
  }
  clear_has_da_device_sn();
}
inline const ::std::string& LoginReq::da_device_sn() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.LoginReq.da_device_sn)
  return *da_device_sn_;
}
inline void LoginReq::set_da_device_sn(const ::std::string& value) {
  set_has_da_device_sn();
  if (da_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    da_device_sn_ = new ::std::string;
  }
  da_device_sn_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.LoginReq.da_device_sn)
}
inline void LoginReq::set_da_device_sn(const char* value) {
  set_has_da_device_sn();
  if (da_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    da_device_sn_ = new ::std::string;
  }
  da_device_sn_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.LoginReq.da_device_sn)
}
inline void LoginReq::set_da_device_sn(const char* value, size_t size) {
  set_has_da_device_sn();
  if (da_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    da_device_sn_ = new ::std::string;
  }
  da_device_sn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.LoginReq.da_device_sn)
}
inline ::std::string* LoginReq::mutable_da_device_sn() {
  set_has_da_device_sn();
  if (da_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    da_device_sn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.LoginReq.da_device_sn)
  return da_device_sn_;
}
inline ::std::string* LoginReq::release_da_device_sn() {
  clear_has_da_device_sn();
  if (da_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = da_device_sn_;
    da_device_sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginReq::set_allocated_da_device_sn(::std::string* da_device_sn) {
  if (da_device_sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete da_device_sn_;
  }
  if (da_device_sn) {
    set_has_da_device_sn();
    da_device_sn_ = da_device_sn;
  } else {
    clear_has_da_device_sn();
    da_device_sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.LoginReq.da_device_sn)
}

// required string vin = 3;
inline bool LoginReq::has_vin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginReq::set_has_vin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginReq::clear_has_vin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginReq::clear_vin() {
  if (vin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vin_->clear();
  }
  clear_has_vin();
}
inline const ::std::string& LoginReq::vin() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.LoginReq.vin)
  return *vin_;
}
inline void LoginReq::set_vin(const ::std::string& value) {
  set_has_vin();
  if (vin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vin_ = new ::std::string;
  }
  vin_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.LoginReq.vin)
}
inline void LoginReq::set_vin(const char* value) {
  set_has_vin();
  if (vin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vin_ = new ::std::string;
  }
  vin_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.LoginReq.vin)
}
inline void LoginReq::set_vin(const char* value, size_t size) {
  set_has_vin();
  if (vin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vin_ = new ::std::string;
  }
  vin_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.LoginReq.vin)
}
inline ::std::string* LoginReq::mutable_vin() {
  set_has_vin();
  if (vin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vin_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.LoginReq.vin)
  return vin_;
}
inline ::std::string* LoginReq::release_vin() {
  clear_has_vin();
  if (vin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vin_;
    vin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginReq::set_allocated_vin(::std::string* vin) {
  if (vin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vin_;
  }
  if (vin) {
    set_has_vin();
    vin_ = vin;
  } else {
    clear_has_vin();
    vin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.LoginReq.vin)
}

// required string iccid = 4;
inline bool LoginReq::has_iccid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginReq::set_has_iccid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginReq::clear_has_iccid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginReq::clear_iccid() {
  if (iccid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iccid_->clear();
  }
  clear_has_iccid();
}
inline const ::std::string& LoginReq::iccid() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.LoginReq.iccid)
  return *iccid_;
}
inline void LoginReq::set_iccid(const ::std::string& value) {
  set_has_iccid();
  if (iccid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iccid_ = new ::std::string;
  }
  iccid_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.LoginReq.iccid)
}
inline void LoginReq::set_iccid(const char* value) {
  set_has_iccid();
  if (iccid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iccid_ = new ::std::string;
  }
  iccid_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.LoginReq.iccid)
}
inline void LoginReq::set_iccid(const char* value, size_t size) {
  set_has_iccid();
  if (iccid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iccid_ = new ::std::string;
  }
  iccid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.LoginReq.iccid)
}
inline ::std::string* LoginReq::mutable_iccid() {
  set_has_iccid();
  if (iccid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iccid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.LoginReq.iccid)
  return iccid_;
}
inline ::std::string* LoginReq::release_iccid() {
  clear_has_iccid();
  if (iccid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = iccid_;
    iccid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginReq::set_allocated_iccid(::std::string* iccid) {
  if (iccid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iccid_;
  }
  if (iccid) {
    set_has_iccid();
    iccid_ = iccid;
  } else {
    clear_has_iccid();
    iccid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.LoginReq.iccid)
}

// required string imsi = 5;
inline bool LoginReq::has_imsi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoginReq::set_has_imsi() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoginReq::clear_has_imsi() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoginReq::clear_imsi() {
  if (imsi_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imsi_->clear();
  }
  clear_has_imsi();
}
inline const ::std::string& LoginReq::imsi() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.LoginReq.imsi)
  return *imsi_;
}
inline void LoginReq::set_imsi(const ::std::string& value) {
  set_has_imsi();
  if (imsi_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imsi_ = new ::std::string;
  }
  imsi_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.LoginReq.imsi)
}
inline void LoginReq::set_imsi(const char* value) {
  set_has_imsi();
  if (imsi_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imsi_ = new ::std::string;
  }
  imsi_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.LoginReq.imsi)
}
inline void LoginReq::set_imsi(const char* value, size_t size) {
  set_has_imsi();
  if (imsi_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imsi_ = new ::std::string;
  }
  imsi_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.LoginReq.imsi)
}
inline ::std::string* LoginReq::mutable_imsi() {
  set_has_imsi();
  if (imsi_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imsi_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.LoginReq.imsi)
  return imsi_;
}
inline ::std::string* LoginReq::release_imsi() {
  clear_has_imsi();
  if (imsi_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = imsi_;
    imsi_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginReq::set_allocated_imsi(::std::string* imsi) {
  if (imsi_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imsi_;
  }
  if (imsi) {
    set_has_imsi();
    imsi_ = imsi;
  } else {
    clear_has_imsi();
    imsi_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.LoginReq.imsi)
}

// required string imei = 6;
inline bool LoginReq::has_imei() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LoginReq::set_has_imei() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LoginReq::clear_has_imei() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LoginReq::clear_imei() {
  if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imei_->clear();
  }
  clear_has_imei();
}
inline const ::std::string& LoginReq::imei() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.LoginReq.imei)
  return *imei_;
}
inline void LoginReq::set_imei(const ::std::string& value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.LoginReq.imei)
}
inline void LoginReq::set_imei(const char* value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.LoginReq.imei)
}
inline void LoginReq::set_imei(const char* value, size_t size) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imei_ = new ::std::string;
  }
  imei_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.LoginReq.imei)
}
inline ::std::string* LoginReq::mutable_imei() {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imei_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.LoginReq.imei)
  return imei_;
}
inline ::std::string* LoginReq::release_imei() {
  clear_has_imei();
  if (imei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = imei_;
    imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginReq::set_allocated_imei(::std::string* imei) {
  if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imei_;
  }
  if (imei) {
    set_has_imei();
    imei_ = imei;
  } else {
    clear_has_imei();
    imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.LoginReq.imei)
}

// required string software_version = 7;
inline bool LoginReq::has_software_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LoginReq::set_has_software_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LoginReq::clear_has_software_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LoginReq::clear_software_version() {
  if (software_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    software_version_->clear();
  }
  clear_has_software_version();
}
inline const ::std::string& LoginReq::software_version() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.LoginReq.software_version)
  return *software_version_;
}
inline void LoginReq::set_software_version(const ::std::string& value) {
  set_has_software_version();
  if (software_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    software_version_ = new ::std::string;
  }
  software_version_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.LoginReq.software_version)
}
inline void LoginReq::set_software_version(const char* value) {
  set_has_software_version();
  if (software_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    software_version_ = new ::std::string;
  }
  software_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.LoginReq.software_version)
}
inline void LoginReq::set_software_version(const char* value, size_t size) {
  set_has_software_version();
  if (software_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    software_version_ = new ::std::string;
  }
  software_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.LoginReq.software_version)
}
inline ::std::string* LoginReq::mutable_software_version() {
  set_has_software_version();
  if (software_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    software_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.LoginReq.software_version)
  return software_version_;
}
inline ::std::string* LoginReq::release_software_version() {
  clear_has_software_version();
  if (software_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = software_version_;
    software_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginReq::set_allocated_software_version(::std::string* software_version) {
  if (software_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete software_version_;
  }
  if (software_version) {
    set_has_software_version();
    software_version_ = software_version;
  } else {
    clear_has_software_version();
    software_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.LoginReq.software_version)
}

// required string hardware_version = 8;
inline bool LoginReq::has_hardware_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LoginReq::set_has_hardware_version() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LoginReq::clear_has_hardware_version() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LoginReq::clear_hardware_version() {
  if (hardware_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hardware_version_->clear();
  }
  clear_has_hardware_version();
}
inline const ::std::string& LoginReq::hardware_version() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.LoginReq.hardware_version)
  return *hardware_version_;
}
inline void LoginReq::set_hardware_version(const ::std::string& value) {
  set_has_hardware_version();
  if (hardware_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hardware_version_ = new ::std::string;
  }
  hardware_version_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.LoginReq.hardware_version)
}
inline void LoginReq::set_hardware_version(const char* value) {
  set_has_hardware_version();
  if (hardware_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hardware_version_ = new ::std::string;
  }
  hardware_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.LoginReq.hardware_version)
}
inline void LoginReq::set_hardware_version(const char* value, size_t size) {
  set_has_hardware_version();
  if (hardware_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hardware_version_ = new ::std::string;
  }
  hardware_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.LoginReq.hardware_version)
}
inline ::std::string* LoginReq::mutable_hardware_version() {
  set_has_hardware_version();
  if (hardware_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hardware_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.LoginReq.hardware_version)
  return hardware_version_;
}
inline ::std::string* LoginReq::release_hardware_version() {
  clear_has_hardware_version();
  if (hardware_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hardware_version_;
    hardware_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginReq::set_allocated_hardware_version(::std::string* hardware_version) {
  if (hardware_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hardware_version_;
  }
  if (hardware_version) {
    set_has_hardware_version();
    hardware_version_ = hardware_version;
  } else {
    clear_has_hardware_version();
    hardware_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.LoginReq.hardware_version)
}

// required uint32 time_stamp = 9;
inline bool LoginReq::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LoginReq::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LoginReq::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LoginReq::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 LoginReq::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.LoginReq.time_stamp)
  return time_stamp_;
}
inline void LoginReq::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.LoginReq.time_stamp)
}

// optional string g4_version = 10;
inline bool LoginReq::has_g4_version() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LoginReq::set_has_g4_version() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LoginReq::clear_has_g4_version() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LoginReq::clear_g4_version() {
  if (g4_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    g4_version_->clear();
  }
  clear_has_g4_version();
}
inline const ::std::string& LoginReq::g4_version() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.LoginReq.g4_version)
  return *g4_version_;
}
inline void LoginReq::set_g4_version(const ::std::string& value) {
  set_has_g4_version();
  if (g4_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    g4_version_ = new ::std::string;
  }
  g4_version_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.LoginReq.g4_version)
}
inline void LoginReq::set_g4_version(const char* value) {
  set_has_g4_version();
  if (g4_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    g4_version_ = new ::std::string;
  }
  g4_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.LoginReq.g4_version)
}
inline void LoginReq::set_g4_version(const char* value, size_t size) {
  set_has_g4_version();
  if (g4_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    g4_version_ = new ::std::string;
  }
  g4_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.LoginReq.g4_version)
}
inline ::std::string* LoginReq::mutable_g4_version() {
  set_has_g4_version();
  if (g4_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    g4_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.LoginReq.g4_version)
  return g4_version_;
}
inline ::std::string* LoginReq::release_g4_version() {
  clear_has_g4_version();
  if (g4_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = g4_version_;
    g4_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginReq::set_allocated_g4_version(::std::string* g4_version) {
  if (g4_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete g4_version_;
  }
  if (g4_version) {
    set_has_g4_version();
    g4_version_ = g4_version;
  } else {
    clear_has_g4_version();
    g4_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.LoginReq.g4_version)
}

// optional string vehicle_type = 11;
inline bool LoginReq::has_vehicle_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LoginReq::set_has_vehicle_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LoginReq::clear_has_vehicle_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LoginReq::clear_vehicle_type() {
  if (vehicle_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vehicle_type_->clear();
  }
  clear_has_vehicle_type();
}
inline const ::std::string& LoginReq::vehicle_type() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.LoginReq.vehicle_type)
  return *vehicle_type_;
}
inline void LoginReq::set_vehicle_type(const ::std::string& value) {
  set_has_vehicle_type();
  if (vehicle_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vehicle_type_ = new ::std::string;
  }
  vehicle_type_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.LoginReq.vehicle_type)
}
inline void LoginReq::set_vehicle_type(const char* value) {
  set_has_vehicle_type();
  if (vehicle_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vehicle_type_ = new ::std::string;
  }
  vehicle_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.LoginReq.vehicle_type)
}
inline void LoginReq::set_vehicle_type(const char* value, size_t size) {
  set_has_vehicle_type();
  if (vehicle_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vehicle_type_ = new ::std::string;
  }
  vehicle_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.LoginReq.vehicle_type)
}
inline ::std::string* LoginReq::mutable_vehicle_type() {
  set_has_vehicle_type();
  if (vehicle_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vehicle_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.LoginReq.vehicle_type)
  return vehicle_type_;
}
inline ::std::string* LoginReq::release_vehicle_type() {
  clear_has_vehicle_type();
  if (vehicle_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vehicle_type_;
    vehicle_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginReq::set_allocated_vehicle_type(::std::string* vehicle_type) {
  if (vehicle_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vehicle_type_;
  }
  if (vehicle_type) {
    set_has_vehicle_type();
    vehicle_type_ = vehicle_type;
  } else {
    clear_has_vehicle_type();
    vehicle_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.LoginReq.vehicle_type)
}

// optional bool upgrading = 12;
inline bool LoginReq::has_upgrading() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LoginReq::set_has_upgrading() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LoginReq::clear_has_upgrading() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LoginReq::clear_upgrading() {
  upgrading_ = false;
  clear_has_upgrading();
}
inline bool LoginReq::upgrading() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.LoginReq.upgrading)
  return upgrading_;
}
inline void LoginReq::set_upgrading(bool value) {
  set_has_upgrading();
  upgrading_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.LoginReq.upgrading)
}

// optional bool bcm_reg_status = 13;
inline bool LoginReq::has_bcm_reg_status() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LoginReq::set_has_bcm_reg_status() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LoginReq::clear_has_bcm_reg_status() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LoginReq::clear_bcm_reg_status() {
  bcm_reg_status_ = false;
  clear_has_bcm_reg_status();
}
inline bool LoginReq::bcm_reg_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.LoginReq.bcm_reg_status)
  return bcm_reg_status_;
}
inline void LoginReq::set_bcm_reg_status(bool value) {
  set_has_bcm_reg_status();
  bcm_reg_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.LoginReq.bcm_reg_status)
}

// optional uint32 ota_algrithom = 14;
inline bool LoginReq::has_ota_algrithom() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LoginReq::set_has_ota_algrithom() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LoginReq::clear_has_ota_algrithom() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LoginReq::clear_ota_algrithom() {
  ota_algrithom_ = 0u;
  clear_has_ota_algrithom();
}
inline ::google::protobuf::uint32 LoginReq::ota_algrithom() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.LoginReq.ota_algrithom)
  return ota_algrithom_;
}
inline void LoginReq::set_ota_algrithom(::google::protobuf::uint32 value) {
  set_has_ota_algrithom();
  ota_algrithom_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.LoginReq.ota_algrithom)
}

// -------------------------------------------------------------------

// LoginRsp

// required uint32 errcode = 1;
inline bool LoginRsp::has_errcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRsp::set_has_errcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRsp::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRsp::clear_errcode() {
  errcode_ = 0u;
  clear_has_errcode();
}
inline ::google::protobuf::uint32 LoginRsp::errcode() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.LoginRsp.errcode)
  return errcode_;
}
inline void LoginRsp::set_errcode(::google::protobuf::uint32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.LoginRsp.errcode)
}

// required uint32 time_stamp = 2;
inline bool LoginRsp::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRsp::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRsp::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRsp::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 LoginRsp::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.LoginRsp.time_stamp)
  return time_stamp_;
}
inline void LoginRsp::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.LoginRsp.time_stamp)
}

// repeated .tbox.protocol.UpgradeInfo upgradeinfo = 3;
inline int LoginRsp::upgradeinfo_size() const {
  return upgradeinfo_.size();
}
inline void LoginRsp::clear_upgradeinfo() {
  upgradeinfo_.Clear();
}
inline const ::tbox::protocol::UpgradeInfo& LoginRsp::upgradeinfo(int index) const {
  // @@protoc_insertion_point(field_get:tbox.protocol.LoginRsp.upgradeinfo)
  return upgradeinfo_.Get(index);
}
inline ::tbox::protocol::UpgradeInfo* LoginRsp::mutable_upgradeinfo(int index) {
  // @@protoc_insertion_point(field_mutable:tbox.protocol.LoginRsp.upgradeinfo)
  return upgradeinfo_.Mutable(index);
}
inline ::tbox::protocol::UpgradeInfo* LoginRsp::add_upgradeinfo() {
  // @@protoc_insertion_point(field_add:tbox.protocol.LoginRsp.upgradeinfo)
  return upgradeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tbox::protocol::UpgradeInfo >&
LoginRsp::upgradeinfo() const {
  // @@protoc_insertion_point(field_list:tbox.protocol.LoginRsp.upgradeinfo)
  return upgradeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::tbox::protocol::UpgradeInfo >*
LoginRsp::mutable_upgradeinfo() {
  // @@protoc_insertion_point(field_mutable_list:tbox.protocol.LoginRsp.upgradeinfo)
  return &upgradeinfo_;
}

// -------------------------------------------------------------------

// HeartbeatReq

// required uint32 time_stamp = 1;
inline bool HeartbeatReq::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartbeatReq::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartbeatReq::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartbeatReq::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 HeartbeatReq::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.HeartbeatReq.time_stamp)
  return time_stamp_;
}
inline void HeartbeatReq::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.HeartbeatReq.time_stamp)
}

// -------------------------------------------------------------------

// HeartbeatRsp

// required uint32 errcode = 1;
inline bool HeartbeatRsp::has_errcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartbeatRsp::set_has_errcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartbeatRsp::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartbeatRsp::clear_errcode() {
  errcode_ = 0u;
  clear_has_errcode();
}
inline ::google::protobuf::uint32 HeartbeatRsp::errcode() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.HeartbeatRsp.errcode)
  return errcode_;
}
inline void HeartbeatRsp::set_errcode(::google::protobuf::uint32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.HeartbeatRsp.errcode)
}

// required uint32 time_stamp = 2;
inline bool HeartbeatRsp::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeartbeatRsp::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeartbeatRsp::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeartbeatRsp::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 HeartbeatRsp::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.HeartbeatRsp.time_stamp)
  return time_stamp_;
}
inline void HeartbeatRsp::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.HeartbeatRsp.time_stamp)
}

// -------------------------------------------------------------------

// SendRSAReq

// required uint32 N_len = 1;
inline bool SendRSAReq::has_n_len() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendRSAReq::set_has_n_len() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendRSAReq::clear_has_n_len() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendRSAReq::clear_n_len() {
  n_len_ = 0u;
  clear_has_n_len();
}
inline ::google::protobuf::uint32 SendRSAReq::n_len() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRSAReq.N_len)
  return n_len_;
}
inline void SendRSAReq::set_n_len(::google::protobuf::uint32 value) {
  set_has_n_len();
  n_len_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRSAReq.N_len)
}

// required string N_string = 2;
inline bool SendRSAReq::has_n_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendRSAReq::set_has_n_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendRSAReq::clear_has_n_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendRSAReq::clear_n_string() {
  if (n_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    n_string_->clear();
  }
  clear_has_n_string();
}
inline const ::std::string& SendRSAReq::n_string() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRSAReq.N_string)
  return *n_string_;
}
inline void SendRSAReq::set_n_string(const ::std::string& value) {
  set_has_n_string();
  if (n_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    n_string_ = new ::std::string;
  }
  n_string_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRSAReq.N_string)
}
inline void SendRSAReq::set_n_string(const char* value) {
  set_has_n_string();
  if (n_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    n_string_ = new ::std::string;
  }
  n_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.SendRSAReq.N_string)
}
inline void SendRSAReq::set_n_string(const char* value, size_t size) {
  set_has_n_string();
  if (n_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    n_string_ = new ::std::string;
  }
  n_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.SendRSAReq.N_string)
}
inline ::std::string* SendRSAReq::mutable_n_string() {
  set_has_n_string();
  if (n_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    n_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.SendRSAReq.N_string)
  return n_string_;
}
inline ::std::string* SendRSAReq::release_n_string() {
  clear_has_n_string();
  if (n_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = n_string_;
    n_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendRSAReq::set_allocated_n_string(::std::string* n_string) {
  if (n_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete n_string_;
  }
  if (n_string) {
    set_has_n_string();
    n_string_ = n_string;
  } else {
    clear_has_n_string();
    n_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.SendRSAReq.N_string)
}

// required uint32 E1_len = 3;
inline bool SendRSAReq::has_e1_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendRSAReq::set_has_e1_len() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendRSAReq::clear_has_e1_len() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendRSAReq::clear_e1_len() {
  e1_len_ = 0u;
  clear_has_e1_len();
}
inline ::google::protobuf::uint32 SendRSAReq::e1_len() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRSAReq.E1_len)
  return e1_len_;
}
inline void SendRSAReq::set_e1_len(::google::protobuf::uint32 value) {
  set_has_e1_len();
  e1_len_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRSAReq.E1_len)
}

// required string E1_string = 4;
inline bool SendRSAReq::has_e1_string() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SendRSAReq::set_has_e1_string() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SendRSAReq::clear_has_e1_string() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SendRSAReq::clear_e1_string() {
  if (e1_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    e1_string_->clear();
  }
  clear_has_e1_string();
}
inline const ::std::string& SendRSAReq::e1_string() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRSAReq.E1_string)
  return *e1_string_;
}
inline void SendRSAReq::set_e1_string(const ::std::string& value) {
  set_has_e1_string();
  if (e1_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    e1_string_ = new ::std::string;
  }
  e1_string_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRSAReq.E1_string)
}
inline void SendRSAReq::set_e1_string(const char* value) {
  set_has_e1_string();
  if (e1_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    e1_string_ = new ::std::string;
  }
  e1_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.SendRSAReq.E1_string)
}
inline void SendRSAReq::set_e1_string(const char* value, size_t size) {
  set_has_e1_string();
  if (e1_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    e1_string_ = new ::std::string;
  }
  e1_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.SendRSAReq.E1_string)
}
inline ::std::string* SendRSAReq::mutable_e1_string() {
  set_has_e1_string();
  if (e1_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    e1_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.SendRSAReq.E1_string)
  return e1_string_;
}
inline ::std::string* SendRSAReq::release_e1_string() {
  clear_has_e1_string();
  if (e1_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = e1_string_;
    e1_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendRSAReq::set_allocated_e1_string(::std::string* e1_string) {
  if (e1_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete e1_string_;
  }
  if (e1_string) {
    set_has_e1_string();
    e1_string_ = e1_string;
  } else {
    clear_has_e1_string();
    e1_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.SendRSAReq.E1_string)
}

// required uint32 time_stamp = 5;
inline bool SendRSAReq::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SendRSAReq::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SendRSAReq::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SendRSAReq::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 SendRSAReq::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRSAReq.time_stamp)
  return time_stamp_;
}
inline void SendRSAReq::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRSAReq.time_stamp)
}

// -------------------------------------------------------------------

// SendRC4Rsp

// required uint32 errcode = 1;
inline bool SendRC4Rsp::has_errcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendRC4Rsp::set_has_errcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendRC4Rsp::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendRC4Rsp::clear_errcode() {
  errcode_ = 0u;
  clear_has_errcode();
}
inline ::google::protobuf::uint32 SendRC4Rsp::errcode() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRC4Rsp.errcode)
  return errcode_;
}
inline void SendRC4Rsp::set_errcode(::google::protobuf::uint32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRC4Rsp.errcode)
}

// required uint32 serial_number = 2;
inline bool SendRC4Rsp::has_serial_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendRC4Rsp::set_has_serial_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendRC4Rsp::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendRC4Rsp::clear_serial_number() {
  serial_number_ = 0u;
  clear_has_serial_number();
}
inline ::google::protobuf::uint32 SendRC4Rsp::serial_number() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRC4Rsp.serial_number)
  return serial_number_;
}
inline void SendRC4Rsp::set_serial_number(::google::protobuf::uint32 value) {
  set_has_serial_number();
  serial_number_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRC4Rsp.serial_number)
}

// required uint32 time_stamp = 3;
inline bool SendRC4Rsp::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendRC4Rsp::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendRC4Rsp::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendRC4Rsp::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 SendRC4Rsp::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRC4Rsp.time_stamp)
  return time_stamp_;
}
inline void SendRC4Rsp::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRC4Rsp.time_stamp)
}

// -------------------------------------------------------------------

// SetParameterRsp

// required uint32 errcode = 1;
inline bool SetParameterRsp::has_errcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetParameterRsp::set_has_errcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetParameterRsp::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetParameterRsp::clear_errcode() {
  errcode_ = 0u;
  clear_has_errcode();
}
inline ::google::protobuf::uint32 SetParameterRsp::errcode() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SetParameterRsp.errcode)
  return errcode_;
}
inline void SetParameterRsp::set_errcode(::google::protobuf::uint32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SetParameterRsp.errcode)
}

// required uint32 time_stamp = 2;
inline bool SetParameterRsp::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetParameterRsp::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetParameterRsp::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetParameterRsp::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 SetParameterRsp::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SetParameterRsp.time_stamp)
  return time_stamp_;
}
inline void SetParameterRsp::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SetParameterRsp.time_stamp)
}

// -------------------------------------------------------------------

// SetParameterReq

// required uint32 local_storage_cycle = 1;
inline bool SetParameterReq::has_local_storage_cycle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetParameterReq::set_has_local_storage_cycle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetParameterReq::clear_has_local_storage_cycle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetParameterReq::clear_local_storage_cycle() {
  local_storage_cycle_ = 0u;
  clear_has_local_storage_cycle();
}
inline ::google::protobuf::uint32 SetParameterReq::local_storage_cycle() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SetParameterReq.local_storage_cycle)
  return local_storage_cycle_;
}
inline void SetParameterReq::set_local_storage_cycle(::google::protobuf::uint32 value) {
  set_has_local_storage_cycle();
  local_storage_cycle_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SetParameterReq.local_storage_cycle)
}

// required uint32 upload_data_cycle_normal = 2;
inline bool SetParameterReq::has_upload_data_cycle_normal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetParameterReq::set_has_upload_data_cycle_normal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetParameterReq::clear_has_upload_data_cycle_normal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetParameterReq::clear_upload_data_cycle_normal() {
  upload_data_cycle_normal_ = 0u;
  clear_has_upload_data_cycle_normal();
}
inline ::google::protobuf::uint32 SetParameterReq::upload_data_cycle_normal() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SetParameterReq.upload_data_cycle_normal)
  return upload_data_cycle_normal_;
}
inline void SetParameterReq::set_upload_data_cycle_normal(::google::protobuf::uint32 value) {
  set_has_upload_data_cycle_normal();
  upload_data_cycle_normal_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SetParameterReq.upload_data_cycle_normal)
}

// required uint32 upload_GPS_cycle_normal = 3;
inline bool SetParameterReq::has_upload_gps_cycle_normal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SetParameterReq::set_has_upload_gps_cycle_normal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SetParameterReq::clear_has_upload_gps_cycle_normal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SetParameterReq::clear_upload_gps_cycle_normal() {
  upload_gps_cycle_normal_ = 0u;
  clear_has_upload_gps_cycle_normal();
}
inline ::google::protobuf::uint32 SetParameterReq::upload_gps_cycle_normal() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SetParameterReq.upload_GPS_cycle_normal)
  return upload_gps_cycle_normal_;
}
inline void SetParameterReq::set_upload_gps_cycle_normal(::google::protobuf::uint32 value) {
  set_has_upload_gps_cycle_normal();
  upload_gps_cycle_normal_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SetParameterReq.upload_GPS_cycle_normal)
}

// required uint32 upload_data_cycle_alarm = 4;
inline bool SetParameterReq::has_upload_data_cycle_alarm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SetParameterReq::set_has_upload_data_cycle_alarm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SetParameterReq::clear_has_upload_data_cycle_alarm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SetParameterReq::clear_upload_data_cycle_alarm() {
  upload_data_cycle_alarm_ = 0u;
  clear_has_upload_data_cycle_alarm();
}
inline ::google::protobuf::uint32 SetParameterReq::upload_data_cycle_alarm() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SetParameterReq.upload_data_cycle_alarm)
  return upload_data_cycle_alarm_;
}
inline void SetParameterReq::set_upload_data_cycle_alarm(::google::protobuf::uint32 value) {
  set_has_upload_data_cycle_alarm();
  upload_data_cycle_alarm_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SetParameterReq.upload_data_cycle_alarm)
}

// required uint32 upload_GPS_cycle_alarm = 5;
inline bool SetParameterReq::has_upload_gps_cycle_alarm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SetParameterReq::set_has_upload_gps_cycle_alarm() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SetParameterReq::clear_has_upload_gps_cycle_alarm() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SetParameterReq::clear_upload_gps_cycle_alarm() {
  upload_gps_cycle_alarm_ = 0u;
  clear_has_upload_gps_cycle_alarm();
}
inline ::google::protobuf::uint32 SetParameterReq::upload_gps_cycle_alarm() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SetParameterReq.upload_GPS_cycle_alarm)
  return upload_gps_cycle_alarm_;
}
inline void SetParameterReq::set_upload_gps_cycle_alarm(::google::protobuf::uint32 value) {
  set_has_upload_gps_cycle_alarm();
  upload_gps_cycle_alarm_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SetParameterReq.upload_GPS_cycle_alarm)
}

// optional uint32 heartbeat_cycle = 6;
inline bool SetParameterReq::has_heartbeat_cycle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SetParameterReq::set_has_heartbeat_cycle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SetParameterReq::clear_has_heartbeat_cycle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SetParameterReq::clear_heartbeat_cycle() {
  heartbeat_cycle_ = 0u;
  clear_has_heartbeat_cycle();
}
inline ::google::protobuf::uint32 SetParameterReq::heartbeat_cycle() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SetParameterReq.heartbeat_cycle)
  return heartbeat_cycle_;
}
inline void SetParameterReq::set_heartbeat_cycle(::google::protobuf::uint32 value) {
  set_has_heartbeat_cycle();
  heartbeat_cycle_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SetParameterReq.heartbeat_cycle)
}

// optional uint32 server_response_timeout = 7;
inline bool SetParameterReq::has_server_response_timeout() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SetParameterReq::set_has_server_response_timeout() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SetParameterReq::clear_has_server_response_timeout() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SetParameterReq::clear_server_response_timeout() {
  server_response_timeout_ = 0u;
  clear_has_server_response_timeout();
}
inline ::google::protobuf::uint32 SetParameterReq::server_response_timeout() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SetParameterReq.server_response_timeout)
  return server_response_timeout_;
}
inline void SetParameterReq::set_server_response_timeout(::google::protobuf::uint32 value) {
  set_has_server_response_timeout();
  server_response_timeout_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SetParameterReq.server_response_timeout)
}

// optional uint32 box_response_timeout = 8;
inline bool SetParameterReq::has_box_response_timeout() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SetParameterReq::set_has_box_response_timeout() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SetParameterReq::clear_has_box_response_timeout() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SetParameterReq::clear_box_response_timeout() {
  box_response_timeout_ = 0u;
  clear_has_box_response_timeout();
}
inline ::google::protobuf::uint32 SetParameterReq::box_response_timeout() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SetParameterReq.box_response_timeout)
  return box_response_timeout_;
}
inline void SetParameterReq::set_box_response_timeout(::google::protobuf::uint32 value) {
  set_has_box_response_timeout();
  box_response_timeout_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SetParameterReq.box_response_timeout)
}

// optional bool FlowControlSwitch = 9;
inline bool SetParameterReq::has_flowcontrolswitch() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SetParameterReq::set_has_flowcontrolswitch() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SetParameterReq::clear_has_flowcontrolswitch() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SetParameterReq::clear_flowcontrolswitch() {
  flowcontrolswitch_ = false;
  clear_has_flowcontrolswitch();
}
inline bool SetParameterReq::flowcontrolswitch() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SetParameterReq.FlowControlSwitch)
  return flowcontrolswitch_;
}
inline void SetParameterReq::set_flowcontrolswitch(bool value) {
  set_has_flowcontrolswitch();
  flowcontrolswitch_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SetParameterReq.FlowControlSwitch)
}

// optional uint32 GPSconversion = 10;
inline bool SetParameterReq::has_gpsconversion() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SetParameterReq::set_has_gpsconversion() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SetParameterReq::clear_has_gpsconversion() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SetParameterReq::clear_gpsconversion() {
  gpsconversion_ = 0u;
  clear_has_gpsconversion();
}
inline ::google::protobuf::uint32 SetParameterReq::gpsconversion() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SetParameterReq.GPSconversion)
  return gpsconversion_;
}
inline void SetParameterReq::set_gpsconversion(::google::protobuf::uint32 value) {
  set_has_gpsconversion();
  gpsconversion_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SetParameterReq.GPSconversion)
}

// -------------------------------------------------------------------

// GetParameterRsp

// required uint32 errcode = 1;
inline bool GetParameterRsp::has_errcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetParameterRsp::set_has_errcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetParameterRsp::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetParameterRsp::clear_errcode() {
  errcode_ = 0u;
  clear_has_errcode();
}
inline ::google::protobuf::uint32 GetParameterRsp::errcode() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.GetParameterRsp.errcode)
  return errcode_;
}
inline void GetParameterRsp::set_errcode(::google::protobuf::uint32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.GetParameterRsp.errcode)
}

// required uint32 local_storage_cycle = 2;
inline bool GetParameterRsp::has_local_storage_cycle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetParameterRsp::set_has_local_storage_cycle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetParameterRsp::clear_has_local_storage_cycle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetParameterRsp::clear_local_storage_cycle() {
  local_storage_cycle_ = 0u;
  clear_has_local_storage_cycle();
}
inline ::google::protobuf::uint32 GetParameterRsp::local_storage_cycle() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.GetParameterRsp.local_storage_cycle)
  return local_storage_cycle_;
}
inline void GetParameterRsp::set_local_storage_cycle(::google::protobuf::uint32 value) {
  set_has_local_storage_cycle();
  local_storage_cycle_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.GetParameterRsp.local_storage_cycle)
}

// required uint32 upload_data_cycle_normal = 3;
inline bool GetParameterRsp::has_upload_data_cycle_normal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetParameterRsp::set_has_upload_data_cycle_normal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetParameterRsp::clear_has_upload_data_cycle_normal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetParameterRsp::clear_upload_data_cycle_normal() {
  upload_data_cycle_normal_ = 0u;
  clear_has_upload_data_cycle_normal();
}
inline ::google::protobuf::uint32 GetParameterRsp::upload_data_cycle_normal() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.GetParameterRsp.upload_data_cycle_normal)
  return upload_data_cycle_normal_;
}
inline void GetParameterRsp::set_upload_data_cycle_normal(::google::protobuf::uint32 value) {
  set_has_upload_data_cycle_normal();
  upload_data_cycle_normal_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.GetParameterRsp.upload_data_cycle_normal)
}

// required uint32 upload_GPS_cycle_normal = 4;
inline bool GetParameterRsp::has_upload_gps_cycle_normal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetParameterRsp::set_has_upload_gps_cycle_normal() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetParameterRsp::clear_has_upload_gps_cycle_normal() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetParameterRsp::clear_upload_gps_cycle_normal() {
  upload_gps_cycle_normal_ = 0u;
  clear_has_upload_gps_cycle_normal();
}
inline ::google::protobuf::uint32 GetParameterRsp::upload_gps_cycle_normal() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.GetParameterRsp.upload_GPS_cycle_normal)
  return upload_gps_cycle_normal_;
}
inline void GetParameterRsp::set_upload_gps_cycle_normal(::google::protobuf::uint32 value) {
  set_has_upload_gps_cycle_normal();
  upload_gps_cycle_normal_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.GetParameterRsp.upload_GPS_cycle_normal)
}

// required uint32 upload_data_cycle_alarm = 5;
inline bool GetParameterRsp::has_upload_data_cycle_alarm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetParameterRsp::set_has_upload_data_cycle_alarm() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetParameterRsp::clear_has_upload_data_cycle_alarm() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetParameterRsp::clear_upload_data_cycle_alarm() {
  upload_data_cycle_alarm_ = 0u;
  clear_has_upload_data_cycle_alarm();
}
inline ::google::protobuf::uint32 GetParameterRsp::upload_data_cycle_alarm() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.GetParameterRsp.upload_data_cycle_alarm)
  return upload_data_cycle_alarm_;
}
inline void GetParameterRsp::set_upload_data_cycle_alarm(::google::protobuf::uint32 value) {
  set_has_upload_data_cycle_alarm();
  upload_data_cycle_alarm_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.GetParameterRsp.upload_data_cycle_alarm)
}

// required uint32 upload_GPS_cycle_alarm = 6;
inline bool GetParameterRsp::has_upload_gps_cycle_alarm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetParameterRsp::set_has_upload_gps_cycle_alarm() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetParameterRsp::clear_has_upload_gps_cycle_alarm() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetParameterRsp::clear_upload_gps_cycle_alarm() {
  upload_gps_cycle_alarm_ = 0u;
  clear_has_upload_gps_cycle_alarm();
}
inline ::google::protobuf::uint32 GetParameterRsp::upload_gps_cycle_alarm() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.GetParameterRsp.upload_GPS_cycle_alarm)
  return upload_gps_cycle_alarm_;
}
inline void GetParameterRsp::set_upload_gps_cycle_alarm(::google::protobuf::uint32 value) {
  set_has_upload_gps_cycle_alarm();
  upload_gps_cycle_alarm_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.GetParameterRsp.upload_GPS_cycle_alarm)
}

// required uint32 heartbeat_cycle = 7;
inline bool GetParameterRsp::has_heartbeat_cycle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetParameterRsp::set_has_heartbeat_cycle() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetParameterRsp::clear_has_heartbeat_cycle() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetParameterRsp::clear_heartbeat_cycle() {
  heartbeat_cycle_ = 0u;
  clear_has_heartbeat_cycle();
}
inline ::google::protobuf::uint32 GetParameterRsp::heartbeat_cycle() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.GetParameterRsp.heartbeat_cycle)
  return heartbeat_cycle_;
}
inline void GetParameterRsp::set_heartbeat_cycle(::google::protobuf::uint32 value) {
  set_has_heartbeat_cycle();
  heartbeat_cycle_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.GetParameterRsp.heartbeat_cycle)
}

// required uint32 server_response_timeout = 8;
inline bool GetParameterRsp::has_server_response_timeout() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GetParameterRsp::set_has_server_response_timeout() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GetParameterRsp::clear_has_server_response_timeout() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GetParameterRsp::clear_server_response_timeout() {
  server_response_timeout_ = 0u;
  clear_has_server_response_timeout();
}
inline ::google::protobuf::uint32 GetParameterRsp::server_response_timeout() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.GetParameterRsp.server_response_timeout)
  return server_response_timeout_;
}
inline void GetParameterRsp::set_server_response_timeout(::google::protobuf::uint32 value) {
  set_has_server_response_timeout();
  server_response_timeout_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.GetParameterRsp.server_response_timeout)
}

// required uint32 box_response_timeout = 9;
inline bool GetParameterRsp::has_box_response_timeout() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GetParameterRsp::set_has_box_response_timeout() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GetParameterRsp::clear_has_box_response_timeout() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GetParameterRsp::clear_box_response_timeout() {
  box_response_timeout_ = 0u;
  clear_has_box_response_timeout();
}
inline ::google::protobuf::uint32 GetParameterRsp::box_response_timeout() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.GetParameterRsp.box_response_timeout)
  return box_response_timeout_;
}
inline void GetParameterRsp::set_box_response_timeout(::google::protobuf::uint32 value) {
  set_has_box_response_timeout();
  box_response_timeout_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.GetParameterRsp.box_response_timeout)
}

// required string firmware_version = 10;
inline bool GetParameterRsp::has_firmware_version() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GetParameterRsp::set_has_firmware_version() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GetParameterRsp::clear_has_firmware_version() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GetParameterRsp::clear_firmware_version() {
  if (firmware_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firmware_version_->clear();
  }
  clear_has_firmware_version();
}
inline const ::std::string& GetParameterRsp::firmware_version() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.GetParameterRsp.firmware_version)
  return *firmware_version_;
}
inline void GetParameterRsp::set_firmware_version(const ::std::string& value) {
  set_has_firmware_version();
  if (firmware_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firmware_version_ = new ::std::string;
  }
  firmware_version_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.GetParameterRsp.firmware_version)
}
inline void GetParameterRsp::set_firmware_version(const char* value) {
  set_has_firmware_version();
  if (firmware_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firmware_version_ = new ::std::string;
  }
  firmware_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.GetParameterRsp.firmware_version)
}
inline void GetParameterRsp::set_firmware_version(const char* value, size_t size) {
  set_has_firmware_version();
  if (firmware_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firmware_version_ = new ::std::string;
  }
  firmware_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.GetParameterRsp.firmware_version)
}
inline ::std::string* GetParameterRsp::mutable_firmware_version() {
  set_has_firmware_version();
  if (firmware_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    firmware_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.GetParameterRsp.firmware_version)
  return firmware_version_;
}
inline ::std::string* GetParameterRsp::release_firmware_version() {
  clear_has_firmware_version();
  if (firmware_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = firmware_version_;
    firmware_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetParameterRsp::set_allocated_firmware_version(::std::string* firmware_version) {
  if (firmware_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete firmware_version_;
  }
  if (firmware_version) {
    set_has_firmware_version();
    firmware_version_ = firmware_version;
  } else {
    clear_has_firmware_version();
    firmware_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.GetParameterRsp.firmware_version)
}

// required string hardware_version = 11;
inline bool GetParameterRsp::has_hardware_version() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GetParameterRsp::set_has_hardware_version() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GetParameterRsp::clear_has_hardware_version() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GetParameterRsp::clear_hardware_version() {
  if (hardware_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hardware_version_->clear();
  }
  clear_has_hardware_version();
}
inline const ::std::string& GetParameterRsp::hardware_version() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.GetParameterRsp.hardware_version)
  return *hardware_version_;
}
inline void GetParameterRsp::set_hardware_version(const ::std::string& value) {
  set_has_hardware_version();
  if (hardware_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hardware_version_ = new ::std::string;
  }
  hardware_version_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.GetParameterRsp.hardware_version)
}
inline void GetParameterRsp::set_hardware_version(const char* value) {
  set_has_hardware_version();
  if (hardware_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hardware_version_ = new ::std::string;
  }
  hardware_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.GetParameterRsp.hardware_version)
}
inline void GetParameterRsp::set_hardware_version(const char* value, size_t size) {
  set_has_hardware_version();
  if (hardware_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hardware_version_ = new ::std::string;
  }
  hardware_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.GetParameterRsp.hardware_version)
}
inline ::std::string* GetParameterRsp::mutable_hardware_version() {
  set_has_hardware_version();
  if (hardware_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hardware_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.GetParameterRsp.hardware_version)
  return hardware_version_;
}
inline ::std::string* GetParameterRsp::release_hardware_version() {
  clear_has_hardware_version();
  if (hardware_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hardware_version_;
    hardware_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetParameterRsp::set_allocated_hardware_version(::std::string* hardware_version) {
  if (hardware_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hardware_version_;
  }
  if (hardware_version) {
    set_has_hardware_version();
    hardware_version_ = hardware_version;
  } else {
    clear_has_hardware_version();
    hardware_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.GetParameterRsp.hardware_version)
}

// required uint32 time_stamp = 12;
inline bool GetParameterRsp::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GetParameterRsp::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GetParameterRsp::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GetParameterRsp::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 GetParameterRsp::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.GetParameterRsp.time_stamp)
  return time_stamp_;
}
inline void GetParameterRsp::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.GetParameterRsp.time_stamp)
}

// -------------------------------------------------------------------

// GetParameterReq

// required uint32 time_stamp = 1;
inline bool GetParameterReq::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetParameterReq::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetParameterReq::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetParameterReq::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 GetParameterReq::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.GetParameterReq.time_stamp)
  return time_stamp_;
}
inline void GetParameterReq::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.GetParameterReq.time_stamp)
}

// -------------------------------------------------------------------

// ECM_Info

// optional uint32 EngineRPM = 1;
inline bool ECM_Info::has_enginerpm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ECM_Info::set_has_enginerpm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ECM_Info::clear_has_enginerpm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ECM_Info::clear_enginerpm() {
  enginerpm_ = 0u;
  clear_has_enginerpm();
}
inline ::google::protobuf::uint32 ECM_Info::enginerpm() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ECM_Info.EngineRPM)
  return enginerpm_;
}
inline void ECM_Info::set_enginerpm(::google::protobuf::uint32 value) {
  set_has_enginerpm();
  enginerpm_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ECM_Info.EngineRPM)
}

// optional uint32 RawSensor = 2;
inline bool ECM_Info::has_rawsensor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ECM_Info::set_has_rawsensor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ECM_Info::clear_has_rawsensor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ECM_Info::clear_rawsensor() {
  rawsensor_ = 0u;
  clear_has_rawsensor();
}
inline ::google::protobuf::uint32 ECM_Info::rawsensor() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ECM_Info.RawSensor)
  return rawsensor_;
}
inline void ECM_Info::set_rawsensor(::google::protobuf::uint32 value) {
  set_has_rawsensor();
  rawsensor_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ECM_Info.RawSensor)
}

// optional uint32 ClutchSwitch = 3;
inline bool ECM_Info::has_clutchswitch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ECM_Info::set_has_clutchswitch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ECM_Info::clear_has_clutchswitch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ECM_Info::clear_clutchswitch() {
  clutchswitch_ = 0u;
  clear_has_clutchswitch();
}
inline ::google::protobuf::uint32 ECM_Info::clutchswitch() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ECM_Info.ClutchSwitch)
  return clutchswitch_;
}
inline void ECM_Info::set_clutchswitch(::google::protobuf::uint32 value) {
  set_has_clutchswitch();
  clutchswitch_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ECM_Info.ClutchSwitch)
}

// optional uint32 EngineStatus = 4;
inline bool ECM_Info::has_enginestatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ECM_Info::set_has_enginestatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ECM_Info::clear_has_enginestatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ECM_Info::clear_enginestatus() {
  enginestatus_ = 0u;
  clear_has_enginestatus();
}
inline ::google::protobuf::uint32 ECM_Info::enginestatus() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ECM_Info.EngineStatus)
  return enginestatus_;
}
inline void ECM_Info::set_enginestatus(::google::protobuf::uint32 value) {
  set_has_enginestatus();
  enginestatus_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ECM_Info.EngineStatus)
}

// optional uint32 EngineCoolantTemp = 5;
inline bool ECM_Info::has_enginecoolanttemp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ECM_Info::set_has_enginecoolanttemp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ECM_Info::clear_has_enginecoolanttemp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ECM_Info::clear_enginecoolanttemp() {
  enginecoolanttemp_ = 0u;
  clear_has_enginecoolanttemp();
}
inline ::google::protobuf::uint32 ECM_Info::enginecoolanttemp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ECM_Info.EngineCoolantTemp)
  return enginecoolanttemp_;
}
inline void ECM_Info::set_enginecoolanttemp(::google::protobuf::uint32 value) {
  set_has_enginecoolanttemp();
  enginecoolanttemp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ECM_Info.EngineCoolantTemp)
}

// optional uint32 FuelConsumption = 6;
inline bool ECM_Info::has_fuelconsumption() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ECM_Info::set_has_fuelconsumption() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ECM_Info::clear_has_fuelconsumption() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ECM_Info::clear_fuelconsumption() {
  fuelconsumption_ = 0u;
  clear_has_fuelconsumption();
}
inline ::google::protobuf::uint32 ECM_Info::fuelconsumption() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ECM_Info.FuelConsumption)
  return fuelconsumption_;
}
inline void ECM_Info::set_fuelconsumption(::google::protobuf::uint32 value) {
  set_has_fuelconsumption();
  fuelconsumption_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ECM_Info.FuelConsumption)
}

// optional bool DiagMuxOn = 7;
inline bool ECM_Info::has_diagmuxon() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ECM_Info::set_has_diagmuxon() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ECM_Info::clear_has_diagmuxon() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ECM_Info::clear_diagmuxon() {
  diagmuxon_ = false;
  clear_has_diagmuxon();
}
inline bool ECM_Info::diagmuxon() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ECM_Info.DiagMuxOn)
  return diagmuxon_;
}
inline void ECM_Info::set_diagmuxon(bool value) {
  set_has_diagmuxon();
  diagmuxon_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ECM_Info.DiagMuxOn)
}

// optional bool EconomyModeLamp = 8;
inline bool ECM_Info::has_economymodelamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ECM_Info::set_has_economymodelamp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ECM_Info::clear_has_economymodelamp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ECM_Info::clear_economymodelamp() {
  economymodelamp_ = false;
  clear_has_economymodelamp();
}
inline bool ECM_Info::economymodelamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ECM_Info.EconomyModeLamp)
  return economymodelamp_;
}
inline void ECM_Info::set_economymodelamp(bool value) {
  set_has_economymodelamp();
  economymodelamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ECM_Info.EconomyModeLamp)
}

// optional uint32 CO2_Content = 9;
inline bool ECM_Info::has_co2_content() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ECM_Info::set_has_co2_content() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ECM_Info::clear_has_co2_content() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ECM_Info::clear_co2_content() {
  co2_content_ = 0u;
  clear_has_co2_content();
}
inline ::google::protobuf::uint32 ECM_Info::co2_content() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ECM_Info.CO2_Content)
  return co2_content_;
}
inline void ECM_Info::set_co2_content(::google::protobuf::uint32 value) {
  set_has_co2_content();
  co2_content_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ECM_Info.CO2_Content)
}

// optional uint32 CO_Content = 10;
inline bool ECM_Info::has_co_content() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ECM_Info::set_has_co_content() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ECM_Info::clear_has_co_content() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ECM_Info::clear_co_content() {
  co_content_ = 0u;
  clear_has_co_content();
}
inline ::google::protobuf::uint32 ECM_Info::co_content() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ECM_Info.CO_Content)
  return co_content_;
}
inline void ECM_Info::set_co_content(::google::protobuf::uint32 value) {
  set_has_co_content();
  co_content_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ECM_Info.CO_Content)
}

// optional uint32 HC_Content = 11;
inline bool ECM_Info::has_hc_content() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ECM_Info::set_has_hc_content() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ECM_Info::clear_has_hc_content() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ECM_Info::clear_hc_content() {
  hc_content_ = 0u;
  clear_has_hc_content();
}
inline ::google::protobuf::uint32 ECM_Info::hc_content() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ECM_Info.HC_Content)
  return hc_content_;
}
inline void ECM_Info::set_hc_content(::google::protobuf::uint32 value) {
  set_has_hc_content();
  hc_content_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ECM_Info.HC_Content)
}

// optional uint32 O2_Content = 12;
inline bool ECM_Info::has_o2_content() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ECM_Info::set_has_o2_content() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ECM_Info::clear_has_o2_content() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ECM_Info::clear_o2_content() {
  o2_content_ = 0u;
  clear_has_o2_content();
}
inline ::google::protobuf::uint32 ECM_Info::o2_content() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ECM_Info.O2_Content)
  return o2_content_;
}
inline void ECM_Info::set_o2_content(::google::protobuf::uint32 value) {
  set_has_o2_content();
  o2_content_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ECM_Info.O2_Content)
}

// optional uint32 ACHighPressureSensor = 13;
inline bool ECM_Info::has_achighpressuresensor() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ECM_Info::set_has_achighpressuresensor() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ECM_Info::clear_has_achighpressuresensor() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ECM_Info::clear_achighpressuresensor() {
  achighpressuresensor_ = 0u;
  clear_has_achighpressuresensor();
}
inline ::google::protobuf::uint32 ECM_Info::achighpressuresensor() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ECM_Info.ACHighPressureSensor)
  return achighpressuresensor_;
}
inline void ECM_Info::set_achighpressuresensor(::google::protobuf::uint32 value) {
  set_has_achighpressuresensor();
  achighpressuresensor_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ECM_Info.ACHighPressureSensor)
}

// optional uint32 CruiseControlStatus = 14;
inline bool ECM_Info::has_cruisecontrolstatus() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ECM_Info::set_has_cruisecontrolstatus() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ECM_Info::clear_has_cruisecontrolstatus() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ECM_Info::clear_cruisecontrolstatus() {
  cruisecontrolstatus_ = 0u;
  clear_has_cruisecontrolstatus();
}
inline ::google::protobuf::uint32 ECM_Info::cruisecontrolstatus() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ECM_Info.CruiseControlStatus)
  return cruisecontrolstatus_;
}
inline void ECM_Info::set_cruisecontrolstatus(::google::protobuf::uint32 value) {
  set_has_cruisecontrolstatus();
  cruisecontrolstatus_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ECM_Info.CruiseControlStatus)
}

// optional uint32 EngineThrottlePosition = 15;
inline bool ECM_Info::has_enginethrottleposition() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ECM_Info::set_has_enginethrottleposition() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ECM_Info::clear_has_enginethrottleposition() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ECM_Info::clear_enginethrottleposition() {
  enginethrottleposition_ = 0u;
  clear_has_enginethrottleposition();
}
inline ::google::protobuf::uint32 ECM_Info::enginethrottleposition() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ECM_Info.EngineThrottlePosition)
  return enginethrottleposition_;
}
inline void ECM_Info::set_enginethrottleposition(::google::protobuf::uint32 value) {
  set_has_enginethrottleposition();
  enginethrottleposition_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ECM_Info.EngineThrottlePosition)
}

// optional uint32 MeanEffectiveTorque = 16;
inline bool ECM_Info::has_meaneffectivetorque() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ECM_Info::set_has_meaneffectivetorque() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ECM_Info::clear_has_meaneffectivetorque() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ECM_Info::clear_meaneffectivetorque() {
  meaneffectivetorque_ = 0u;
  clear_has_meaneffectivetorque();
}
inline ::google::protobuf::uint32 ECM_Info::meaneffectivetorque() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ECM_Info.MeanEffectiveTorque)
  return meaneffectivetorque_;
}
inline void ECM_Info::set_meaneffectivetorque(::google::protobuf::uint32 value) {
  set_has_meaneffectivetorque();
  meaneffectivetorque_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ECM_Info.MeanEffectiveTorque)
}

// optional uint32 Fuel_Consumption_Fine = 17;
inline bool ECM_Info::has_fuel_consumption_fine() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ECM_Info::set_has_fuel_consumption_fine() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ECM_Info::clear_has_fuel_consumption_fine() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ECM_Info::clear_fuel_consumption_fine() {
  fuel_consumption_fine_ = 0u;
  clear_has_fuel_consumption_fine();
}
inline ::google::protobuf::uint32 ECM_Info::fuel_consumption_fine() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ECM_Info.Fuel_Consumption_Fine)
  return fuel_consumption_fine_;
}
inline void ECM_Info::set_fuel_consumption_fine(::google::protobuf::uint32 value) {
  set_has_fuel_consumption_fine();
  fuel_consumption_fine_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ECM_Info.Fuel_Consumption_Fine)
}

// optional uint32 SOF_V1 = 18;
inline bool ECM_Info::has_sof_v1() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ECM_Info::set_has_sof_v1() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ECM_Info::clear_has_sof_v1() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ECM_Info::clear_sof_v1() {
  sof_v1_ = 0u;
  clear_has_sof_v1();
}
inline ::google::protobuf::uint32 ECM_Info::sof_v1() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ECM_Info.SOF_V1)
  return sof_v1_;
}
inline void ECM_Info::set_sof_v1(::google::protobuf::uint32 value) {
  set_has_sof_v1();
  sof_v1_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ECM_Info.SOF_V1)
}

// optional uint32 SOF_V1_State = 19;
inline bool ECM_Info::has_sof_v1_state() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ECM_Info::set_has_sof_v1_state() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ECM_Info::clear_has_sof_v1_state() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ECM_Info::clear_sof_v1_state() {
  sof_v1_state_ = 0u;
  clear_has_sof_v1_state();
}
inline ::google::protobuf::uint32 ECM_Info::sof_v1_state() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ECM_Info.SOF_V1_State)
  return sof_v1_state_;
}
inline void ECM_Info::set_sof_v1_state(::google::protobuf::uint32 value) {
  set_has_sof_v1_state();
  sof_v1_state_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ECM_Info.SOF_V1_State)
}

// optional uint32 Vbmin = 20;
inline bool ECM_Info::has_vbmin() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ECM_Info::set_has_vbmin() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ECM_Info::clear_has_vbmin() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ECM_Info::clear_vbmin() {
  vbmin_ = 0u;
  clear_has_vbmin();
}
inline ::google::protobuf::uint32 ECM_Info::vbmin() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ECM_Info.Vbmin)
  return vbmin_;
}
inline void ECM_Info::set_vbmin(::google::protobuf::uint32 value) {
  set_has_vbmin();
  vbmin_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ECM_Info.Vbmin)
}

// -------------------------------------------------------------------

// ABSVDC_Info

// optional bool ASRinRegulation = 1;
inline bool ABSVDC_Info::has_asrinregulation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ABSVDC_Info::set_has_asrinregulation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ABSVDC_Info::clear_has_asrinregulation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ABSVDC_Info::clear_asrinregulation() {
  asrinregulation_ = false;
  clear_has_asrinregulation();
}
inline bool ABSVDC_Info::asrinregulation() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ABSVDC_Info.ASRinRegulation)
  return asrinregulation_;
}
inline void ABSVDC_Info::set_asrinregulation(bool value) {
  set_has_asrinregulation();
  asrinregulation_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ABSVDC_Info.ASRinRegulation)
}

// optional uint32 LongitudinalAccelerationProc02 = 2;
inline bool ABSVDC_Info::has_longitudinalaccelerationproc02() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ABSVDC_Info::set_has_longitudinalaccelerationproc02() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ABSVDC_Info::clear_has_longitudinalaccelerationproc02() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ABSVDC_Info::clear_longitudinalaccelerationproc02() {
  longitudinalaccelerationproc02_ = 0u;
  clear_has_longitudinalaccelerationproc02();
}
inline ::google::protobuf::uint32 ABSVDC_Info::longitudinalaccelerationproc02() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ABSVDC_Info.LongitudinalAccelerationProc02)
  return longitudinalaccelerationproc02_;
}
inline void ABSVDC_Info::set_longitudinalaccelerationproc02(::google::protobuf::uint32 value) {
  set_has_longitudinalaccelerationproc02();
  longitudinalaccelerationproc02_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ABSVDC_Info.LongitudinalAccelerationProc02)
}

// optional uint32 Transversalacceleration02 = 3;
inline bool ABSVDC_Info::has_transversalacceleration02() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ABSVDC_Info::set_has_transversalacceleration02() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ABSVDC_Info::clear_has_transversalacceleration02() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ABSVDC_Info::clear_transversalacceleration02() {
  transversalacceleration02_ = 0u;
  clear_has_transversalacceleration02();
}
inline ::google::protobuf::uint32 ABSVDC_Info::transversalacceleration02() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ABSVDC_Info.Transversalacceleration02)
  return transversalacceleration02_;
}
inline void ABSVDC_Info::set_transversalacceleration02(::google::protobuf::uint32 value) {
  set_has_transversalacceleration02();
  transversalacceleration02_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ABSVDC_Info.Transversalacceleration02)
}

// optional uint32 YawRate02 = 4;
inline bool ABSVDC_Info::has_yawrate02() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ABSVDC_Info::set_has_yawrate02() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ABSVDC_Info::clear_has_yawrate02() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ABSVDC_Info::clear_yawrate02() {
  yawrate02_ = 0u;
  clear_has_yawrate02();
}
inline ::google::protobuf::uint32 ABSVDC_Info::yawrate02() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ABSVDC_Info.YawRate02)
  return yawrate02_;
}
inline void ABSVDC_Info::set_yawrate02(::google::protobuf::uint32 value) {
  set_has_yawrate02();
  yawrate02_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ABSVDC_Info.YawRate02)
}

// optional uint32 IDM_StopLampRequest = 5;
inline bool ABSVDC_Info::has_idm_stoplamprequest() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ABSVDC_Info::set_has_idm_stoplamprequest() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ABSVDC_Info::clear_has_idm_stoplamprequest() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ABSVDC_Info::clear_idm_stoplamprequest() {
  idm_stoplamprequest_ = 0u;
  clear_has_idm_stoplamprequest();
}
inline ::google::protobuf::uint32 ABSVDC_Info::idm_stoplamprequest() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ABSVDC_Info.IDM_StopLampRequest)
  return idm_stoplamprequest_;
}
inline void ABSVDC_Info::set_idm_stoplamprequest(::google::protobuf::uint32 value) {
  set_has_idm_stoplamprequest();
  idm_stoplamprequest_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ABSVDC_Info.IDM_StopLampRequest)
}

// -------------------------------------------------------------------

// METER_Info

// optional uint32 VehicleSpeed_CLUSTER = 1;
inline bool METER_Info::has_vehiclespeed_cluster() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void METER_Info::set_has_vehiclespeed_cluster() {
  _has_bits_[0] |= 0x00000001u;
}
inline void METER_Info::clear_has_vehiclespeed_cluster() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void METER_Info::clear_vehiclespeed_cluster() {
  vehiclespeed_cluster_ = 0u;
  clear_has_vehiclespeed_cluster();
}
inline ::google::protobuf::uint32 METER_Info::vehiclespeed_cluster() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.METER_Info.VehicleSpeed_CLUSTER)
  return vehiclespeed_cluster_;
}
inline void METER_Info::set_vehiclespeed_cluster(::google::protobuf::uint32 value) {
  set_has_vehiclespeed_cluster();
  vehiclespeed_cluster_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.METER_Info.VehicleSpeed_CLUSTER)
}

// optional uint32 Average_Fuel_Economy = 2;
inline bool METER_Info::has_average_fuel_economy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void METER_Info::set_has_average_fuel_economy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void METER_Info::clear_has_average_fuel_economy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void METER_Info::clear_average_fuel_economy() {
  average_fuel_economy_ = 0u;
  clear_has_average_fuel_economy();
}
inline ::google::protobuf::uint32 METER_Info::average_fuel_economy() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.METER_Info.Average_Fuel_Economy)
  return average_fuel_economy_;
}
inline void METER_Info::set_average_fuel_economy(::google::protobuf::uint32 value) {
  set_has_average_fuel_economy();
  average_fuel_economy_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.METER_Info.Average_Fuel_Economy)
}

// optional uint32 Distance_to_empty = 3;
inline bool METER_Info::has_distance_to_empty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void METER_Info::set_has_distance_to_empty() {
  _has_bits_[0] |= 0x00000004u;
}
inline void METER_Info::clear_has_distance_to_empty() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void METER_Info::clear_distance_to_empty() {
  distance_to_empty_ = 0u;
  clear_has_distance_to_empty();
}
inline ::google::protobuf::uint32 METER_Info::distance_to_empty() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.METER_Info.Distance_to_empty)
  return distance_to_empty_;
}
inline void METER_Info::set_distance_to_empty(::google::protobuf::uint32 value) {
  set_has_distance_to_empty();
  distance_to_empty_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.METER_Info.Distance_to_empty)
}

// optional uint32 Distance_Totalizer = 4;
inline bool METER_Info::has_distance_totalizer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void METER_Info::set_has_distance_totalizer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void METER_Info::clear_has_distance_totalizer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void METER_Info::clear_distance_totalizer() {
  distance_totalizer_ = 0u;
  clear_has_distance_totalizer();
}
inline ::google::protobuf::uint32 METER_Info::distance_totalizer() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.METER_Info.Distance_Totalizer)
  return distance_totalizer_;
}
inline void METER_Info::set_distance_totalizer(::google::protobuf::uint32 value) {
  set_has_distance_totalizer();
  distance_totalizer_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.METER_Info.Distance_Totalizer)
}

// optional uint32 Fuel_Remain = 5;
inline bool METER_Info::has_fuel_remain() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void METER_Info::set_has_fuel_remain() {
  _has_bits_[0] |= 0x00000010u;
}
inline void METER_Info::clear_has_fuel_remain() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void METER_Info::clear_fuel_remain() {
  fuel_remain_ = 0u;
  clear_has_fuel_remain();
}
inline ::google::protobuf::uint32 METER_Info::fuel_remain() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.METER_Info.Fuel_Remain)
  return fuel_remain_;
}
inline void METER_Info::set_fuel_remain(::google::protobuf::uint32 value) {
  set_has_fuel_remain();
  fuel_remain_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.METER_Info.Fuel_Remain)
}

// optional uint32 Fuel_Warning_lamp = 6;
inline bool METER_Info::has_fuel_warning_lamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void METER_Info::set_has_fuel_warning_lamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void METER_Info::clear_has_fuel_warning_lamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void METER_Info::clear_fuel_warning_lamp() {
  fuel_warning_lamp_ = 0u;
  clear_has_fuel_warning_lamp();
}
inline ::google::protobuf::uint32 METER_Info::fuel_warning_lamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.METER_Info.Fuel_Warning_lamp)
  return fuel_warning_lamp_;
}
inline void METER_Info::set_fuel_warning_lamp(::google::protobuf::uint32 value) {
  set_has_fuel_warning_lamp();
  fuel_warning_lamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.METER_Info.Fuel_Warning_lamp)
}

// optional uint32 Average_Fuel_Economy_Single = 7;
inline bool METER_Info::has_average_fuel_economy_single() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void METER_Info::set_has_average_fuel_economy_single() {
  _has_bits_[0] |= 0x00000040u;
}
inline void METER_Info::clear_has_average_fuel_economy_single() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void METER_Info::clear_average_fuel_economy_single() {
  average_fuel_economy_single_ = 0u;
  clear_has_average_fuel_economy_single();
}
inline ::google::protobuf::uint32 METER_Info::average_fuel_economy_single() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.METER_Info.Average_Fuel_Economy_Single)
  return average_fuel_economy_single_;
}
inline void METER_Info::set_average_fuel_economy_single(::google::protobuf::uint32 value) {
  set_has_average_fuel_economy_single();
  average_fuel_economy_single_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.METER_Info.Average_Fuel_Economy_Single)
}

// optional uint32 EPB_Status = 8;
inline bool METER_Info::has_epb_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void METER_Info::set_has_epb_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void METER_Info::clear_has_epb_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void METER_Info::clear_epb_status() {
  epb_status_ = 0u;
  clear_has_epb_status();
}
inline ::google::protobuf::uint32 METER_Info::epb_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.METER_Info.EPB_Status)
  return epb_status_;
}
inline void METER_Info::set_epb_status(::google::protobuf::uint32 value) {
  set_has_epb_status();
  epb_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.METER_Info.EPB_Status)
}

// optional uint32 APB_StatusFlag = 9;
inline bool METER_Info::has_apb_statusflag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void METER_Info::set_has_apb_statusflag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void METER_Info::clear_has_apb_statusflag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void METER_Info::clear_apb_statusflag() {
  apb_statusflag_ = 0u;
  clear_has_apb_statusflag();
}
inline ::google::protobuf::uint32 METER_Info::apb_statusflag() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.METER_Info.APB_StatusFlag)
  return apb_statusflag_;
}
inline void METER_Info::set_apb_statusflag(::google::protobuf::uint32 value) {
  set_has_apb_statusflag();
  apb_statusflag_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.METER_Info.APB_StatusFlag)
}

// optional uint32 ParkingBrakeMalfunctionDisplay = 10;
inline bool METER_Info::has_parkingbrakemalfunctiondisplay() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void METER_Info::set_has_parkingbrakemalfunctiondisplay() {
  _has_bits_[0] |= 0x00000200u;
}
inline void METER_Info::clear_has_parkingbrakemalfunctiondisplay() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void METER_Info::clear_parkingbrakemalfunctiondisplay() {
  parkingbrakemalfunctiondisplay_ = 0u;
  clear_has_parkingbrakemalfunctiondisplay();
}
inline ::google::protobuf::uint32 METER_Info::parkingbrakemalfunctiondisplay() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.METER_Info.ParkingBrakeMalfunctionDisplay)
  return parkingbrakemalfunctiondisplay_;
}
inline void METER_Info::set_parkingbrakemalfunctiondisplay(::google::protobuf::uint32 value) {
  set_has_parkingbrakemalfunctiondisplay();
  parkingbrakemalfunctiondisplay_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.METER_Info.ParkingBrakeMalfunctionDisplay)
}

// optional uint32 ParkingBrakeBindingStatusDisplay = 11;
inline bool METER_Info::has_parkingbrakebindingstatusdisplay() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void METER_Info::set_has_parkingbrakebindingstatusdisplay() {
  _has_bits_[0] |= 0x00000400u;
}
inline void METER_Info::clear_has_parkingbrakebindingstatusdisplay() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void METER_Info::clear_parkingbrakebindingstatusdisplay() {
  parkingbrakebindingstatusdisplay_ = 0u;
  clear_has_parkingbrakebindingstatusdisplay();
}
inline ::google::protobuf::uint32 METER_Info::parkingbrakebindingstatusdisplay() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.METER_Info.ParkingBrakeBindingStatusDisplay)
  return parkingbrakebindingstatusdisplay_;
}
inline void METER_Info::set_parkingbrakebindingstatusdisplay(::google::protobuf::uint32 value) {
  set_has_parkingbrakebindingstatusdisplay();
  parkingbrakebindingstatusdisplay_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.METER_Info.ParkingBrakeBindingStatusDisplay)
}

// optional uint32 Fuellow = 12;
inline bool METER_Info::has_fuellow() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void METER_Info::set_has_fuellow() {
  _has_bits_[0] |= 0x00000800u;
}
inline void METER_Info::clear_has_fuellow() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void METER_Info::clear_fuellow() {
  fuellow_ = 0u;
  clear_has_fuellow();
}
inline ::google::protobuf::uint32 METER_Info::fuellow() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.METER_Info.Fuellow)
  return fuellow_;
}
inline void METER_Info::set_fuellow(::google::protobuf::uint32 value) {
  set_has_fuellow();
  fuellow_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.METER_Info.Fuellow)
}

// -------------------------------------------------------------------

// BCM_Info

// optional bool TrunkSwitchStatus = 1;
inline bool BCM_Info::has_trunkswitchstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BCM_Info::set_has_trunkswitchstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BCM_Info::clear_has_trunkswitchstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BCM_Info::clear_trunkswitchstatus() {
  trunkswitchstatus_ = false;
  clear_has_trunkswitchstatus();
}
inline bool BCM_Info::trunkswitchstatus() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.TrunkSwitchStatus)
  return trunkswitchstatus_;
}
inline void BCM_Info::set_trunkswitchstatus(bool value) {
  set_has_trunkswitchstatus();
  trunkswitchstatus_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.TrunkSwitchStatus)
}

// optional uint32 BCM_WakeUpSleepCmd = 2;
inline bool BCM_Info::has_bcm_wakeupsleepcmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BCM_Info::set_has_bcm_wakeupsleepcmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BCM_Info::clear_has_bcm_wakeupsleepcmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BCM_Info::clear_bcm_wakeupsleepcmd() {
  bcm_wakeupsleepcmd_ = 0u;
  clear_has_bcm_wakeupsleepcmd();
}
inline ::google::protobuf::uint32 BCM_Info::bcm_wakeupsleepcmd() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.BCM_WakeUpSleepCmd)
  return bcm_wakeupsleepcmd_;
}
inline void BCM_Info::set_bcm_wakeupsleepcmd(::google::protobuf::uint32 value) {
  set_has_bcm_wakeupsleepcmd();
  bcm_wakeupsleepcmd_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.BCM_WakeUpSleepCmd)
}

// optional bool front_left_door_status = 3;
inline bool BCM_Info::has_front_left_door_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BCM_Info::set_has_front_left_door_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BCM_Info::clear_has_front_left_door_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BCM_Info::clear_front_left_door_status() {
  front_left_door_status_ = false;
  clear_has_front_left_door_status();
}
inline bool BCM_Info::front_left_door_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.front_left_door_status)
  return front_left_door_status_;
}
inline void BCM_Info::set_front_left_door_status(bool value) {
  set_has_front_left_door_status();
  front_left_door_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.front_left_door_status)
}

// optional bool front_right_door_status = 4;
inline bool BCM_Info::has_front_right_door_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BCM_Info::set_has_front_right_door_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BCM_Info::clear_has_front_right_door_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BCM_Info::clear_front_right_door_status() {
  front_right_door_status_ = false;
  clear_has_front_right_door_status();
}
inline bool BCM_Info::front_right_door_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.front_right_door_status)
  return front_right_door_status_;
}
inline void BCM_Info::set_front_right_door_status(bool value) {
  set_has_front_right_door_status();
  front_right_door_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.front_right_door_status)
}

// optional bool rear_left_door_status = 5;
inline bool BCM_Info::has_rear_left_door_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BCM_Info::set_has_rear_left_door_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BCM_Info::clear_has_rear_left_door_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BCM_Info::clear_rear_left_door_status() {
  rear_left_door_status_ = false;
  clear_has_rear_left_door_status();
}
inline bool BCM_Info::rear_left_door_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.rear_left_door_status)
  return rear_left_door_status_;
}
inline void BCM_Info::set_rear_left_door_status(bool value) {
  set_has_rear_left_door_status();
  rear_left_door_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.rear_left_door_status)
}

// optional bool rear_right_door_status = 6;
inline bool BCM_Info::has_rear_right_door_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BCM_Info::set_has_rear_right_door_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BCM_Info::clear_has_rear_right_door_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BCM_Info::clear_rear_right_door_status() {
  rear_right_door_status_ = false;
  clear_has_rear_right_door_status();
}
inline bool BCM_Info::rear_right_door_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.rear_right_door_status)
  return rear_right_door_status_;
}
inline void BCM_Info::set_rear_right_door_status(bool value) {
  set_has_rear_right_door_status();
  rear_right_door_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.rear_right_door_status)
}

// optional bool back_door_status = 7;
inline bool BCM_Info::has_back_door_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BCM_Info::set_has_back_door_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BCM_Info::clear_has_back_door_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BCM_Info::clear_back_door_status() {
  back_door_status_ = false;
  clear_has_back_door_status();
}
inline bool BCM_Info::back_door_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.back_door_status)
  return back_door_status_;
}
inline void BCM_Info::set_back_door_status(bool value) {
  set_has_back_door_status();
  back_door_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.back_door_status)
}

// optional bool door_lock_status = 8;
inline bool BCM_Info::has_door_lock_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BCM_Info::set_has_door_lock_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BCM_Info::clear_has_door_lock_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BCM_Info::clear_door_lock_status() {
  door_lock_status_ = false;
  clear_has_door_lock_status();
}
inline bool BCM_Info::door_lock_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.door_lock_status)
  return door_lock_status_;
}
inline void BCM_Info::set_door_lock_status(bool value) {
  set_has_door_lock_status();
  door_lock_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.door_lock_status)
}

// optional bool back_door_locked_status = 9;
inline bool BCM_Info::has_back_door_locked_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BCM_Info::set_has_back_door_locked_status() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BCM_Info::clear_has_back_door_locked_status() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BCM_Info::clear_back_door_locked_status() {
  back_door_locked_status_ = false;
  clear_has_back_door_locked_status();
}
inline bool BCM_Info::back_door_locked_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.back_door_locked_status)
  return back_door_locked_status_;
}
inline void BCM_Info::set_back_door_locked_status(bool value) {
  set_has_back_door_locked_status();
  back_door_locked_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.back_door_locked_status)
}

// optional bool LowBeamRequest = 10;
inline bool BCM_Info::has_lowbeamrequest() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BCM_Info::set_has_lowbeamrequest() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BCM_Info::clear_has_lowbeamrequest() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BCM_Info::clear_lowbeamrequest() {
  lowbeamrequest_ = false;
  clear_has_lowbeamrequest();
}
inline bool BCM_Info::lowbeamrequest() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.LowBeamRequest)
  return lowbeamrequest_;
}
inline void BCM_Info::set_lowbeamrequest(bool value) {
  set_has_lowbeamrequest();
  lowbeamrequest_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.LowBeamRequest)
}

// optional uint32 FlashingIndicatorStatus = 11;
inline bool BCM_Info::has_flashingindicatorstatus() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BCM_Info::set_has_flashingindicatorstatus() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BCM_Info::clear_has_flashingindicatorstatus() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BCM_Info::clear_flashingindicatorstatus() {
  flashingindicatorstatus_ = 0u;
  clear_has_flashingindicatorstatus();
}
inline ::google::protobuf::uint32 BCM_Info::flashingindicatorstatus() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.FlashingIndicatorStatus)
  return flashingindicatorstatus_;
}
inline void BCM_Info::set_flashingindicatorstatus(::google::protobuf::uint32 value) {
  set_has_flashingindicatorstatus();
  flashingindicatorstatus_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.FlashingIndicatorStatus)
}

// optional bool HighBeamRequest = 12;
inline bool BCM_Info::has_highbeamrequest() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BCM_Info::set_has_highbeamrequest() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BCM_Info::clear_has_highbeamrequest() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BCM_Info::clear_highbeamrequest() {
  highbeamrequest_ = false;
  clear_has_highbeamrequest();
}
inline bool BCM_Info::highbeamrequest() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.HighBeamRequest)
  return highbeamrequest_;
}
inline void BCM_Info::set_highbeamrequest(bool value) {
  set_has_highbeamrequest();
  highbeamrequest_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.HighBeamRequest)
}

// optional bool PositionLightsRequest = 13;
inline bool BCM_Info::has_positionlightsrequest() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BCM_Info::set_has_positionlightsrequest() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BCM_Info::clear_has_positionlightsrequest() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BCM_Info::clear_positionlightsrequest() {
  positionlightsrequest_ = false;
  clear_has_positionlightsrequest();
}
inline bool BCM_Info::positionlightsrequest() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.PositionLightsRequest)
  return positionlightsrequest_;
}
inline void BCM_Info::set_positionlightsrequest(bool value) {
  set_has_positionlightsrequest();
  positionlightsrequest_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.PositionLightsRequest)
}

// optional bool FrontFogLightsRequest = 14;
inline bool BCM_Info::has_frontfoglightsrequest() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BCM_Info::set_has_frontfoglightsrequest() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BCM_Info::clear_has_frontfoglightsrequest() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BCM_Info::clear_frontfoglightsrequest() {
  frontfoglightsrequest_ = false;
  clear_has_frontfoglightsrequest();
}
inline bool BCM_Info::frontfoglightsrequest() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.FrontFogLightsRequest)
  return frontfoglightsrequest_;
}
inline void BCM_Info::set_frontfoglightsrequest(bool value) {
  set_has_frontfoglightsrequest();
  frontfoglightsrequest_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.FrontFogLightsRequest)
}

// optional bool RearFogLightStatus = 15;
inline bool BCM_Info::has_rearfoglightstatus() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BCM_Info::set_has_rearfoglightstatus() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BCM_Info::clear_has_rearfoglightstatus() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BCM_Info::clear_rearfoglightstatus() {
  rearfoglightstatus_ = false;
  clear_has_rearfoglightstatus();
}
inline bool BCM_Info::rearfoglightstatus() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.RearFogLightStatus)
  return rearfoglightstatus_;
}
inline void BCM_Info::set_rearfoglightstatus(bool value) {
  set_has_rearfoglightstatus();
  rearfoglightstatus_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.RearFogLightStatus)
}

// optional bool DayTimeRunningLightRequest = 16;
inline bool BCM_Info::has_daytimerunninglightrequest() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BCM_Info::set_has_daytimerunninglightrequest() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BCM_Info::clear_has_daytimerunninglightrequest() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BCM_Info::clear_daytimerunninglightrequest() {
  daytimerunninglightrequest_ = false;
  clear_has_daytimerunninglightrequest();
}
inline bool BCM_Info::daytimerunninglightrequest() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.DayTimeRunningLightRequest)
  return daytimerunninglightrequest_;
}
inline void BCM_Info::set_daytimerunninglightrequest(bool value) {
  set_has_daytimerunninglightrequest();
  daytimerunninglightrequest_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.DayTimeRunningLightRequest)
}

// optional uint32 front_right_window_status = 17;
inline bool BCM_Info::has_front_right_window_status() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BCM_Info::set_has_front_right_window_status() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BCM_Info::clear_has_front_right_window_status() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BCM_Info::clear_front_right_window_status() {
  front_right_window_status_ = 0u;
  clear_has_front_right_window_status();
}
inline ::google::protobuf::uint32 BCM_Info::front_right_window_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.front_right_window_status)
  return front_right_window_status_;
}
inline void BCM_Info::set_front_right_window_status(::google::protobuf::uint32 value) {
  set_has_front_right_window_status();
  front_right_window_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.front_right_window_status)
}

// optional uint32 front_left_window_status = 18;
inline bool BCM_Info::has_front_left_window_status() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BCM_Info::set_has_front_left_window_status() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BCM_Info::clear_has_front_left_window_status() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BCM_Info::clear_front_left_window_status() {
  front_left_window_status_ = 0u;
  clear_has_front_left_window_status();
}
inline ::google::protobuf::uint32 BCM_Info::front_left_window_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.front_left_window_status)
  return front_left_window_status_;
}
inline void BCM_Info::set_front_left_window_status(::google::protobuf::uint32 value) {
  set_has_front_left_window_status();
  front_left_window_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.front_left_window_status)
}

// optional uint32 rear_right_window_status = 19;
inline bool BCM_Info::has_rear_right_window_status() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BCM_Info::set_has_rear_right_window_status() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BCM_Info::clear_has_rear_right_window_status() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BCM_Info::clear_rear_right_window_status() {
  rear_right_window_status_ = 0u;
  clear_has_rear_right_window_status();
}
inline ::google::protobuf::uint32 BCM_Info::rear_right_window_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.rear_right_window_status)
  return rear_right_window_status_;
}
inline void BCM_Info::set_rear_right_window_status(::google::protobuf::uint32 value) {
  set_has_rear_right_window_status();
  rear_right_window_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.rear_right_window_status)
}

// optional uint32 rear_left_window_status = 20;
inline bool BCM_Info::has_rear_left_window_status() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BCM_Info::set_has_rear_left_window_status() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BCM_Info::clear_has_rear_left_window_status() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BCM_Info::clear_rear_left_window_status() {
  rear_left_window_status_ = 0u;
  clear_has_rear_left_window_status();
}
inline ::google::protobuf::uint32 BCM_Info::rear_left_window_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.rear_left_window_status)
  return rear_left_window_status_;
}
inline void BCM_Info::set_rear_left_window_status(::google::protobuf::uint32 value) {
  set_has_rear_left_window_status();
  rear_left_window_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.rear_left_window_status)
}

// optional bool remote_enging_run_flag = 21;
inline bool BCM_Info::has_remote_enging_run_flag() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BCM_Info::set_has_remote_enging_run_flag() {
  _has_bits_[0] |= 0x00100000u;
}
inline void BCM_Info::clear_has_remote_enging_run_flag() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void BCM_Info::clear_remote_enging_run_flag() {
  remote_enging_run_flag_ = false;
  clear_has_remote_enging_run_flag();
}
inline bool BCM_Info::remote_enging_run_flag() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.remote_enging_run_flag)
  return remote_enging_run_flag_;
}
inline void BCM_Info::set_remote_enging_run_flag(bool value) {
  set_has_remote_enging_run_flag();
  remote_enging_run_flag_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.remote_enging_run_flag)
}

// optional uint32 sunroof_window_status = 22;
inline bool BCM_Info::has_sunroof_window_status() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BCM_Info::set_has_sunroof_window_status() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BCM_Info::clear_has_sunroof_window_status() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BCM_Info::clear_sunroof_window_status() {
  sunroof_window_status_ = 0u;
  clear_has_sunroof_window_status();
}
inline ::google::protobuf::uint32 BCM_Info::sunroof_window_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.sunroof_window_status)
  return sunroof_window_status_;
}
inline void BCM_Info::set_sunroof_window_status(::google::protobuf::uint32 value) {
  set_has_sunroof_window_status();
  sunroof_window_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.sunroof_window_status)
}

// optional uint32 sunroof_shade_status = 23;
inline bool BCM_Info::has_sunroof_shade_status() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void BCM_Info::set_has_sunroof_shade_status() {
  _has_bits_[0] |= 0x00400000u;
}
inline void BCM_Info::clear_has_sunroof_shade_status() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void BCM_Info::clear_sunroof_shade_status() {
  sunroof_shade_status_ = 0u;
  clear_has_sunroof_shade_status();
}
inline ::google::protobuf::uint32 BCM_Info::sunroof_shade_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.sunroof_shade_status)
  return sunroof_shade_status_;
}
inline void BCM_Info::set_sunroof_shade_status(::google::protobuf::uint32 value) {
  set_has_sunroof_shade_status();
  sunroof_shade_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.sunroof_shade_status)
}

// optional uint32 RES_FailureFeedback = 24;
inline bool BCM_Info::has_res_failurefeedback() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void BCM_Info::set_has_res_failurefeedback() {
  _has_bits_[0] |= 0x00800000u;
}
inline void BCM_Info::clear_has_res_failurefeedback() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void BCM_Info::clear_res_failurefeedback() {
  res_failurefeedback_ = 0u;
  clear_has_res_failurefeedback();
}
inline ::google::protobuf::uint32 BCM_Info::res_failurefeedback() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.RES_FailureFeedback)
  return res_failurefeedback_;
}
inline void BCM_Info::set_res_failurefeedback(::google::protobuf::uint32 value) {
  set_has_res_failurefeedback();
  res_failurefeedback_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.RES_FailureFeedback)
}

// optional bool isFindcarBreaked = 25;
inline bool BCM_Info::has_isfindcarbreaked() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void BCM_Info::set_has_isfindcarbreaked() {
  _has_bits_[0] |= 0x01000000u;
}
inline void BCM_Info::clear_has_isfindcarbreaked() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void BCM_Info::clear_isfindcarbreaked() {
  isfindcarbreaked_ = false;
  clear_has_isfindcarbreaked();
}
inline bool BCM_Info::isfindcarbreaked() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.isFindcarBreaked)
  return isfindcarbreaked_;
}
inline void BCM_Info::set_isfindcarbreaked(bool value) {
  set_has_isfindcarbreaked();
  isfindcarbreaked_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.isFindcarBreaked)
}

// optional uint32 RES_Status = 26;
inline bool BCM_Info::has_res_status() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void BCM_Info::set_has_res_status() {
  _has_bits_[0] |= 0x02000000u;
}
inline void BCM_Info::clear_has_res_status() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void BCM_Info::clear_res_status() {
  res_status_ = 0u;
  clear_has_res_status();
}
inline ::google::protobuf::uint32 BCM_Info::res_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.RES_Status)
  return res_status_;
}
inline void BCM_Info::set_res_status(::google::protobuf::uint32 value) {
  set_has_res_status();
  res_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.RES_Status)
}

// optional uint32 Last_obstacle_notification = 27;
inline bool BCM_Info::has_last_obstacle_notification() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void BCM_Info::set_has_last_obstacle_notification() {
  _has_bits_[0] |= 0x04000000u;
}
inline void BCM_Info::clear_has_last_obstacle_notification() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void BCM_Info::clear_last_obstacle_notification() {
  last_obstacle_notification_ = 0u;
  clear_has_last_obstacle_notification();
}
inline ::google::protobuf::uint32 BCM_Info::last_obstacle_notification() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.Last_obstacle_notification)
  return last_obstacle_notification_;
}
inline void BCM_Info::set_last_obstacle_notification(::google::protobuf::uint32 value) {
  set_has_last_obstacle_notification();
  last_obstacle_notification_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.Last_obstacle_notification)
}

// optional uint32 SR_Motor_State = 28;
inline bool BCM_Info::has_sr_motor_state() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void BCM_Info::set_has_sr_motor_state() {
  _has_bits_[0] |= 0x08000000u;
}
inline void BCM_Info::clear_has_sr_motor_state() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void BCM_Info::clear_sr_motor_state() {
  sr_motor_state_ = 0u;
  clear_has_sr_motor_state();
}
inline ::google::protobuf::uint32 BCM_Info::sr_motor_state() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.SR_Motor_State)
  return sr_motor_state_;
}
inline void BCM_Info::set_sr_motor_state(::google::protobuf::uint32 value) {
  set_has_sr_motor_state();
  sr_motor_state_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.SR_Motor_State)
}

// optional uint32 Shade_Motor_State = 29;
inline bool BCM_Info::has_shade_motor_state() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void BCM_Info::set_has_shade_motor_state() {
  _has_bits_[0] |= 0x10000000u;
}
inline void BCM_Info::clear_has_shade_motor_state() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void BCM_Info::clear_shade_motor_state() {
  shade_motor_state_ = 0u;
  clear_has_shade_motor_state();
}
inline ::google::protobuf::uint32 BCM_Info::shade_motor_state() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.Shade_Motor_State)
  return shade_motor_state_;
}
inline void BCM_Info::set_shade_motor_state(::google::protobuf::uint32 value) {
  set_has_shade_motor_state();
  shade_motor_state_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.Shade_Motor_State)
}

// optional uint32 Shade_Area = 30;
inline bool BCM_Info::has_shade_area() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void BCM_Info::set_has_shade_area() {
  _has_bits_[0] |= 0x20000000u;
}
inline void BCM_Info::clear_has_shade_area() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void BCM_Info::clear_shade_area() {
  shade_area_ = 0u;
  clear_has_shade_area();
}
inline ::google::protobuf::uint32 BCM_Info::shade_area() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.Shade_Area)
  return shade_area_;
}
inline void BCM_Info::set_shade_area(::google::protobuf::uint32 value) {
  set_has_shade_area();
  shade_area_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.Shade_Area)
}

// optional uint32 BCM_SR_Degrade_Mode = 31;
inline bool BCM_Info::has_bcm_sr_degrade_mode() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void BCM_Info::set_has_bcm_sr_degrade_mode() {
  _has_bits_[0] |= 0x40000000u;
}
inline void BCM_Info::clear_has_bcm_sr_degrade_mode() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void BCM_Info::clear_bcm_sr_degrade_mode() {
  bcm_sr_degrade_mode_ = 0u;
  clear_has_bcm_sr_degrade_mode();
}
inline ::google::protobuf::uint32 BCM_Info::bcm_sr_degrade_mode() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.BCM_SR_Degrade_Mode)
  return bcm_sr_degrade_mode_;
}
inline void BCM_Info::set_bcm_sr_degrade_mode(::google::protobuf::uint32 value) {
  set_has_bcm_sr_degrade_mode();
  bcm_sr_degrade_mode_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.BCM_SR_Degrade_Mode)
}

// optional uint32 BCM_Shade_Degrade_Mode = 32;
inline bool BCM_Info::has_bcm_shade_degrade_mode() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void BCM_Info::set_has_bcm_shade_degrade_mode() {
  _has_bits_[0] |= 0x80000000u;
}
inline void BCM_Info::clear_has_bcm_shade_degrade_mode() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void BCM_Info::clear_bcm_shade_degrade_mode() {
  bcm_shade_degrade_mode_ = 0u;
  clear_has_bcm_shade_degrade_mode();
}
inline ::google::protobuf::uint32 BCM_Info::bcm_shade_degrade_mode() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.BCM_Shade_Degrade_Mode)
  return bcm_shade_degrade_mode_;
}
inline void BCM_Info::set_bcm_shade_degrade_mode(::google::protobuf::uint32 value) {
  set_has_bcm_shade_degrade_mode();
  bcm_shade_degrade_mode_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.BCM_Shade_Degrade_Mode)
}

// optional uint32 RESPreSoak_SmartphoneError = 33;
inline bool BCM_Info::has_respresoak_smartphoneerror() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void BCM_Info::set_has_respresoak_smartphoneerror() {
  _has_bits_[1] |= 0x00000001u;
}
inline void BCM_Info::clear_has_respresoak_smartphoneerror() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void BCM_Info::clear_respresoak_smartphoneerror() {
  respresoak_smartphoneerror_ = 0u;
  clear_has_respresoak_smartphoneerror();
}
inline ::google::protobuf::uint32 BCM_Info::respresoak_smartphoneerror() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.RESPreSoak_SmartphoneError)
  return respresoak_smartphoneerror_;
}
inline void BCM_Info::set_respresoak_smartphoneerror(::google::protobuf::uint32 value) {
  set_has_respresoak_smartphoneerror();
  respresoak_smartphoneerror_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.RESPreSoak_SmartphoneError)
}

// optional uint32 LeftTimeDuringThisRESCycle = 34;
inline bool BCM_Info::has_lefttimeduringthisrescycle() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void BCM_Info::set_has_lefttimeduringthisrescycle() {
  _has_bits_[1] |= 0x00000002u;
}
inline void BCM_Info::clear_has_lefttimeduringthisrescycle() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void BCM_Info::clear_lefttimeduringthisrescycle() {
  lefttimeduringthisrescycle_ = 0u;
  clear_has_lefttimeduringthisrescycle();
}
inline ::google::protobuf::uint32 BCM_Info::lefttimeduringthisrescycle() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.LeftTimeDuringThisRESCycle)
  return lefttimeduringthisrescycle_;
}
inline void BCM_Info::set_lefttimeduringthisrescycle(::google::protobuf::uint32 value) {
  set_has_lefttimeduringthisrescycle();
  lefttimeduringthisrescycle_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.LeftTimeDuringThisRESCycle)
}

// optional uint32 RearWiperStatus = 35;
inline bool BCM_Info::has_rearwiperstatus() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void BCM_Info::set_has_rearwiperstatus() {
  _has_bits_[1] |= 0x00000004u;
}
inline void BCM_Info::clear_has_rearwiperstatus() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void BCM_Info::clear_rearwiperstatus() {
  rearwiperstatus_ = 0u;
  clear_has_rearwiperstatus();
}
inline ::google::protobuf::uint32 BCM_Info::rearwiperstatus() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.RearWiperStatus)
  return rearwiperstatus_;
}
inline void BCM_Info::set_rearwiperstatus(::google::protobuf::uint32 value) {
  set_has_rearwiperstatus();
  rearwiperstatus_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.RearWiperStatus)
}

// optional uint32 DriveModeRequest = 36;
inline bool BCM_Info::has_drivemoderequest() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void BCM_Info::set_has_drivemoderequest() {
  _has_bits_[1] |= 0x00000008u;
}
inline void BCM_Info::clear_has_drivemoderequest() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void BCM_Info::clear_drivemoderequest() {
  drivemoderequest_ = 0u;
  clear_has_drivemoderequest();
}
inline ::google::protobuf::uint32 BCM_Info::drivemoderequest() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.DriveModeRequest)
  return drivemoderequest_;
}
inline void BCM_Info::set_drivemoderequest(::google::protobuf::uint32 value) {
  set_has_drivemoderequest();
  drivemoderequest_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.DriveModeRequest)
}

// optional uint32 ChildLockStateDisplay = 37;
inline bool BCM_Info::has_childlockstatedisplay() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void BCM_Info::set_has_childlockstatedisplay() {
  _has_bits_[1] |= 0x00000010u;
}
inline void BCM_Info::clear_has_childlockstatedisplay() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void BCM_Info::clear_childlockstatedisplay() {
  childlockstatedisplay_ = 0u;
  clear_has_childlockstatedisplay();
}
inline ::google::protobuf::uint32 BCM_Info::childlockstatedisplay() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.ChildLockStateDisplay)
  return childlockstatedisplay_;
}
inline void BCM_Info::set_childlockstatedisplay(::google::protobuf::uint32 value) {
  set_has_childlockstatedisplay();
  childlockstatedisplay_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.ChildLockStateDisplay)
}

// optional uint32 ClutchSwitchMaximumTravel = 38;
inline bool BCM_Info::has_clutchswitchmaximumtravel() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void BCM_Info::set_has_clutchswitchmaximumtravel() {
  _has_bits_[1] |= 0x00000020u;
}
inline void BCM_Info::clear_has_clutchswitchmaximumtravel() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void BCM_Info::clear_clutchswitchmaximumtravel() {
  clutchswitchmaximumtravel_ = 0u;
  clear_has_clutchswitchmaximumtravel();
}
inline ::google::protobuf::uint32 BCM_Info::clutchswitchmaximumtravel() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.ClutchSwitchMaximumTravel)
  return clutchswitchmaximumtravel_;
}
inline void BCM_Info::set_clutchswitchmaximumtravel(::google::protobuf::uint32 value) {
  set_has_clutchswitchmaximumtravel();
  clutchswitchmaximumtravel_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.ClutchSwitchMaximumTravel)
}

// optional uint32 ClutchSwitchMinimumTravel = 39;
inline bool BCM_Info::has_clutchswitchminimumtravel() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void BCM_Info::set_has_clutchswitchminimumtravel() {
  _has_bits_[1] |= 0x00000040u;
}
inline void BCM_Info::clear_has_clutchswitchminimumtravel() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void BCM_Info::clear_clutchswitchminimumtravel() {
  clutchswitchminimumtravel_ = 0u;
  clear_has_clutchswitchminimumtravel();
}
inline ::google::protobuf::uint32 BCM_Info::clutchswitchminimumtravel() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.ClutchSwitchMinimumTravel)
  return clutchswitchminimumtravel_;
}
inline void BCM_Info::set_clutchswitchminimumtravel(::google::protobuf::uint32 value) {
  set_has_clutchswitchminimumtravel();
  clutchswitchminimumtravel_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.ClutchSwitchMinimumTravel)
}

// optional uint32 RLS_Rain = 40;
inline bool BCM_Info::has_rls_rain() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void BCM_Info::set_has_rls_rain() {
  _has_bits_[1] |= 0x00000080u;
}
inline void BCM_Info::clear_has_rls_rain() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void BCM_Info::clear_rls_rain() {
  rls_rain_ = 0u;
  clear_has_rls_rain();
}
inline ::google::protobuf::uint32 BCM_Info::rls_rain() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.RLS_Rain)
  return rls_rain_;
}
inline void BCM_Info::set_rls_rain(::google::protobuf::uint32 value) {
  set_has_rls_rain();
  rls_rain_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.RLS_Rain)
}

// optional uint32 RearDefrostEngaged = 46;
inline bool BCM_Info::has_reardefrostengaged() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void BCM_Info::set_has_reardefrostengaged() {
  _has_bits_[1] |= 0x00000100u;
}
inline void BCM_Info::clear_has_reardefrostengaged() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void BCM_Info::clear_reardefrostengaged() {
  reardefrostengaged_ = 0u;
  clear_has_reardefrostengaged();
}
inline ::google::protobuf::uint32 BCM_Info::reardefrostengaged() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.RearDefrostEngaged)
  return reardefrostengaged_;
}
inline void BCM_Info::set_reardefrostengaged(::google::protobuf::uint32 value) {
  set_has_reardefrostengaged();
  reardefrostengaged_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.RearDefrostEngaged)
}

// optional uint32 PassengerDoorLockedStatus = 47;
inline bool BCM_Info::has_passengerdoorlockedstatus() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void BCM_Info::set_has_passengerdoorlockedstatus() {
  _has_bits_[1] |= 0x00000200u;
}
inline void BCM_Info::clear_has_passengerdoorlockedstatus() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void BCM_Info::clear_passengerdoorlockedstatus() {
  passengerdoorlockedstatus_ = 0u;
  clear_has_passengerdoorlockedstatus();
}
inline ::google::protobuf::uint32 BCM_Info::passengerdoorlockedstatus() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.PassengerDoorLockedStatus)
  return passengerdoorlockedstatus_;
}
inline void BCM_Info::set_passengerdoorlockedstatus(::google::protobuf::uint32 value) {
  set_has_passengerdoorlockedstatus();
  passengerdoorlockedstatus_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.PassengerDoorLockedStatus)
}

// optional uint32 RearLeftDoorLockedStatus = 48;
inline bool BCM_Info::has_rearleftdoorlockedstatus() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void BCM_Info::set_has_rearleftdoorlockedstatus() {
  _has_bits_[1] |= 0x00000400u;
}
inline void BCM_Info::clear_has_rearleftdoorlockedstatus() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void BCM_Info::clear_rearleftdoorlockedstatus() {
  rearleftdoorlockedstatus_ = 0u;
  clear_has_rearleftdoorlockedstatus();
}
inline ::google::protobuf::uint32 BCM_Info::rearleftdoorlockedstatus() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.RearLeftDoorLockedStatus)
  return rearleftdoorlockedstatus_;
}
inline void BCM_Info::set_rearleftdoorlockedstatus(::google::protobuf::uint32 value) {
  set_has_rearleftdoorlockedstatus();
  rearleftdoorlockedstatus_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.RearLeftDoorLockedStatus)
}

// optional uint32 RearRightDoorLockedStatus = 49;
inline bool BCM_Info::has_rearrightdoorlockedstatus() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void BCM_Info::set_has_rearrightdoorlockedstatus() {
  _has_bits_[1] |= 0x00000800u;
}
inline void BCM_Info::clear_has_rearrightdoorlockedstatus() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void BCM_Info::clear_rearrightdoorlockedstatus() {
  rearrightdoorlockedstatus_ = 0u;
  clear_has_rearrightdoorlockedstatus();
}
inline ::google::protobuf::uint32 BCM_Info::rearrightdoorlockedstatus() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.BCM_Info.RearRightDoorLockedStatus)
  return rearrightdoorlockedstatus_;
}
inline void BCM_Info::set_rearrightdoorlockedstatus(::google::protobuf::uint32 value) {
  set_has_rearrightdoorlockedstatus();
  rearrightdoorlockedstatus_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.BCM_Info.RearRightDoorLockedStatus)
}

// -------------------------------------------------------------------

// ACU_Info

// optional uint32 Airbag_Crash_Order = 1;
inline bool ACU_Info::has_airbag_crash_order() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACU_Info::set_has_airbag_crash_order() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACU_Info::clear_has_airbag_crash_order() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACU_Info::clear_airbag_crash_order() {
  airbag_crash_order_ = 0u;
  clear_has_airbag_crash_order();
}
inline ::google::protobuf::uint32 ACU_Info::airbag_crash_order() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ACU_Info.Airbag_Crash_Order)
  return airbag_crash_order_;
}
inline void ACU_Info::set_airbag_crash_order(::google::protobuf::uint32 value) {
  set_has_airbag_crash_order();
  airbag_crash_order_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ACU_Info.Airbag_Crash_Order)
}

// optional uint32 DriverSafetyBeltBuckleState = 2;
inline bool ACU_Info::has_driversafetybeltbucklestate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ACU_Info::set_has_driversafetybeltbucklestate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ACU_Info::clear_has_driversafetybeltbucklestate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ACU_Info::clear_driversafetybeltbucklestate() {
  driversafetybeltbucklestate_ = 0u;
  clear_has_driversafetybeltbucklestate();
}
inline ::google::protobuf::uint32 ACU_Info::driversafetybeltbucklestate() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ACU_Info.DriverSafetyBeltBuckleState)
  return driversafetybeltbucklestate_;
}
inline void ACU_Info::set_driversafetybeltbucklestate(::google::protobuf::uint32 value) {
  set_has_driversafetybeltbucklestate();
  driversafetybeltbucklestate_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ACU_Info.DriverSafetyBeltBuckleState)
}

// optional uint32 PassengerSafetyBeltBuckleState = 3;
inline bool ACU_Info::has_passengersafetybeltbucklestate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ACU_Info::set_has_passengersafetybeltbucklestate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ACU_Info::clear_has_passengersafetybeltbucklestate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ACU_Info::clear_passengersafetybeltbucklestate() {
  passengersafetybeltbucklestate_ = 0u;
  clear_has_passengersafetybeltbucklestate();
}
inline ::google::protobuf::uint32 ACU_Info::passengersafetybeltbucklestate() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ACU_Info.PassengerSafetyBeltBuckleState)
  return passengersafetybeltbucklestate_;
}
inline void ACU_Info::set_passengersafetybeltbucklestate(::google::protobuf::uint32 value) {
  set_has_passengersafetybeltbucklestate();
  passengersafetybeltbucklestate_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ACU_Info.PassengerSafetyBeltBuckleState)
}

// optional uint32 SecondRowCenterSafetyBeltState = 4;
inline bool ACU_Info::has_secondrowcentersafetybeltstate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ACU_Info::set_has_secondrowcentersafetybeltstate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ACU_Info::clear_has_secondrowcentersafetybeltstate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ACU_Info::clear_secondrowcentersafetybeltstate() {
  secondrowcentersafetybeltstate_ = 0u;
  clear_has_secondrowcentersafetybeltstate();
}
inline ::google::protobuf::uint32 ACU_Info::secondrowcentersafetybeltstate() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ACU_Info.SecondRowCenterSafetyBeltState)
  return secondrowcentersafetybeltstate_;
}
inline void ACU_Info::set_secondrowcentersafetybeltstate(::google::protobuf::uint32 value) {
  set_has_secondrowcentersafetybeltstate();
  secondrowcentersafetybeltstate_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ACU_Info.SecondRowCenterSafetyBeltState)
}

// optional uint32 SecondRowLeftSafetyBeltState = 5;
inline bool ACU_Info::has_secondrowleftsafetybeltstate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ACU_Info::set_has_secondrowleftsafetybeltstate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ACU_Info::clear_has_secondrowleftsafetybeltstate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ACU_Info::clear_secondrowleftsafetybeltstate() {
  secondrowleftsafetybeltstate_ = 0u;
  clear_has_secondrowleftsafetybeltstate();
}
inline ::google::protobuf::uint32 ACU_Info::secondrowleftsafetybeltstate() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ACU_Info.SecondRowLeftSafetyBeltState)
  return secondrowleftsafetybeltstate_;
}
inline void ACU_Info::set_secondrowleftsafetybeltstate(::google::protobuf::uint32 value) {
  set_has_secondrowleftsafetybeltstate();
  secondrowleftsafetybeltstate_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ACU_Info.SecondRowLeftSafetyBeltState)
}

// optional uint32 SecondRowRightSafetyBeltState = 6;
inline bool ACU_Info::has_secondrowrightsafetybeltstate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ACU_Info::set_has_secondrowrightsafetybeltstate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ACU_Info::clear_has_secondrowrightsafetybeltstate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ACU_Info::clear_secondrowrightsafetybeltstate() {
  secondrowrightsafetybeltstate_ = 0u;
  clear_has_secondrowrightsafetybeltstate();
}
inline ::google::protobuf::uint32 ACU_Info::secondrowrightsafetybeltstate() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ACU_Info.SecondRowRightSafetyBeltState)
  return secondrowrightsafetybeltstate_;
}
inline void ACU_Info::set_secondrowrightsafetybeltstate(::google::protobuf::uint32 value) {
  set_has_secondrowrightsafetybeltstate();
  secondrowrightsafetybeltstate_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ACU_Info.SecondRowRightSafetyBeltState)
}

// optional uint32 PassengerPresenceState = 7;
inline bool ACU_Info::has_passengerpresencestate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ACU_Info::set_has_passengerpresencestate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ACU_Info::clear_has_passengerpresencestate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ACU_Info::clear_passengerpresencestate() {
  passengerpresencestate_ = 0u;
  clear_has_passengerpresencestate();
}
inline ::google::protobuf::uint32 ACU_Info::passengerpresencestate() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ACU_Info.PassengerPresenceState)
  return passengerpresencestate_;
}
inline void ACU_Info::set_passengerpresencestate(::google::protobuf::uint32 value) {
  set_has_passengerpresencestate();
  passengerpresencestate_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ACU_Info.PassengerPresenceState)
}

// optional uint32 SecondRowCenterPresenceState = 8;
inline bool ACU_Info::has_secondrowcenterpresencestate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ACU_Info::set_has_secondrowcenterpresencestate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ACU_Info::clear_has_secondrowcenterpresencestate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ACU_Info::clear_secondrowcenterpresencestate() {
  secondrowcenterpresencestate_ = 0u;
  clear_has_secondrowcenterpresencestate();
}
inline ::google::protobuf::uint32 ACU_Info::secondrowcenterpresencestate() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ACU_Info.SecondRowCenterPresenceState)
  return secondrowcenterpresencestate_;
}
inline void ACU_Info::set_secondrowcenterpresencestate(::google::protobuf::uint32 value) {
  set_has_secondrowcenterpresencestate();
  secondrowcenterpresencestate_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ACU_Info.SecondRowCenterPresenceState)
}

// optional uint32 SecondRowLeftPresenceState = 9;
inline bool ACU_Info::has_secondrowleftpresencestate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ACU_Info::set_has_secondrowleftpresencestate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ACU_Info::clear_has_secondrowleftpresencestate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ACU_Info::clear_secondrowleftpresencestate() {
  secondrowleftpresencestate_ = 0u;
  clear_has_secondrowleftpresencestate();
}
inline ::google::protobuf::uint32 ACU_Info::secondrowleftpresencestate() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ACU_Info.SecondRowLeftPresenceState)
  return secondrowleftpresencestate_;
}
inline void ACU_Info::set_secondrowleftpresencestate(::google::protobuf::uint32 value) {
  set_has_secondrowleftpresencestate();
  secondrowleftpresencestate_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ACU_Info.SecondRowLeftPresenceState)
}

// optional uint32 SecondRowRightPresenceState = 10;
inline bool ACU_Info::has_secondrowrightpresencestate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ACU_Info::set_has_secondrowrightpresencestate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ACU_Info::clear_has_secondrowrightpresencestate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ACU_Info::clear_secondrowrightpresencestate() {
  secondrowrightpresencestate_ = 0u;
  clear_has_secondrowrightpresencestate();
}
inline ::google::protobuf::uint32 ACU_Info::secondrowrightpresencestate() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ACU_Info.SecondRowRightPresenceState)
  return secondrowrightpresencestate_;
}
inline void ACU_Info::set_secondrowrightpresencestate(::google::protobuf::uint32 value) {
  set_has_secondrowrightpresencestate();
  secondrowrightpresencestate_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ACU_Info.SecondRowRightPresenceState)
}

// optional uint32 FrontPassengerSafetyBeltReminder = 11;
inline bool ACU_Info::has_frontpassengersafetybeltreminder() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ACU_Info::set_has_frontpassengersafetybeltreminder() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ACU_Info::clear_has_frontpassengersafetybeltreminder() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ACU_Info::clear_frontpassengersafetybeltreminder() {
  frontpassengersafetybeltreminder_ = 0u;
  clear_has_frontpassengersafetybeltreminder();
}
inline ::google::protobuf::uint32 ACU_Info::frontpassengersafetybeltreminder() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ACU_Info.FrontPassengerSafetyBeltReminder)
  return frontpassengersafetybeltreminder_;
}
inline void ACU_Info::set_frontpassengersafetybeltreminder(::google::protobuf::uint32 value) {
  set_has_frontpassengersafetybeltreminder();
  frontpassengersafetybeltreminder_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ACU_Info.FrontPassengerSafetyBeltReminder)
}

// -------------------------------------------------------------------

// AT_Info

// optional uint32 FastTorqueRequest = 1;
inline bool AT_Info::has_fasttorquerequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AT_Info::set_has_fasttorquerequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AT_Info::clear_has_fasttorquerequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AT_Info::clear_fasttorquerequest() {
  fasttorquerequest_ = 0u;
  clear_has_fasttorquerequest();
}
inline ::google::protobuf::uint32 AT_Info::fasttorquerequest() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.AT_Info.FastTorqueRequest)
  return fasttorquerequest_;
}
inline void AT_Info::set_fasttorquerequest(::google::protobuf::uint32 value) {
  set_has_fasttorquerequest();
  fasttorquerequest_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.AT_Info.FastTorqueRequest)
}

// optional uint32 ATCVT_RangeIndication = 2;
inline bool AT_Info::has_atcvt_rangeindication() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AT_Info::set_has_atcvt_rangeindication() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AT_Info::clear_has_atcvt_rangeindication() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AT_Info::clear_atcvt_rangeindication() {
  atcvt_rangeindication_ = 0u;
  clear_has_atcvt_rangeindication();
}
inline ::google::protobuf::uint32 AT_Info::atcvt_rangeindication() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.AT_Info.ATCVT_RangeIndication)
  return atcvt_rangeindication_;
}
inline void AT_Info::set_atcvt_rangeindication(::google::protobuf::uint32 value) {
  set_has_atcvt_rangeindication();
  atcvt_rangeindication_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.AT_Info.ATCVT_RangeIndication)
}

// -------------------------------------------------------------------

// STRG_Info

// optional uint32 Steering_Angle = 1;
inline bool STRG_Info::has_steering_angle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void STRG_Info::set_has_steering_angle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void STRG_Info::clear_has_steering_angle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void STRG_Info::clear_steering_angle() {
  steering_angle_ = 0u;
  clear_has_steering_angle();
}
inline ::google::protobuf::uint32 STRG_Info::steering_angle() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.STRG_Info.Steering_Angle)
  return steering_angle_;
}
inline void STRG_Info::set_steering_angle(::google::protobuf::uint32 value) {
  set_has_steering_angle();
  steering_angle_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.STRG_Info.Steering_Angle)
}

// optional uint32 Steering_Angle_Velocity = 2;
inline bool STRG_Info::has_steering_angle_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void STRG_Info::set_has_steering_angle_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void STRG_Info::clear_has_steering_angle_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void STRG_Info::clear_steering_angle_velocity() {
  steering_angle_velocity_ = 0u;
  clear_has_steering_angle_velocity();
}
inline ::google::protobuf::uint32 STRG_Info::steering_angle_velocity() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.STRG_Info.Steering_Angle_Velocity)
  return steering_angle_velocity_;
}
inline void STRG_Info::set_steering_angle_velocity(::google::protobuf::uint32 value) {
  set_has_steering_angle_velocity();
  steering_angle_velocity_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.STRG_Info.Steering_Angle_Velocity)
}

// -------------------------------------------------------------------

// EPS_Info

// optional bool EPSteeringFailure = 1;
inline bool EPS_Info::has_epsteeringfailure() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EPS_Info::set_has_epsteeringfailure() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EPS_Info::clear_has_epsteeringfailure() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EPS_Info::clear_epsteeringfailure() {
  epsteeringfailure_ = false;
  clear_has_epsteeringfailure();
}
inline bool EPS_Info::epsteeringfailure() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.EPS_Info.EPSteeringFailure)
  return epsteeringfailure_;
}
inline void EPS_Info::set_epsteeringfailure(bool value) {
  set_has_epsteeringfailure();
  epsteeringfailure_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.EPS_Info.EPSteeringFailure)
}

// -------------------------------------------------------------------

// USM_Info

// optional bool HoodSW = 1;
inline bool USM_Info::has_hoodsw() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void USM_Info::set_has_hoodsw() {
  _has_bits_[0] |= 0x00000001u;
}
inline void USM_Info::clear_has_hoodsw() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void USM_Info::clear_hoodsw() {
  hoodsw_ = false;
  clear_has_hoodsw();
}
inline bool USM_Info::hoodsw() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.USM_Info.HoodSW)
  return hoodsw_;
}
inline void USM_Info::set_hoodsw(bool value) {
  set_has_hoodsw();
  hoodsw_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.USM_Info.HoodSW)
}

// optional bool ACCompClutchStatus = 2;
inline bool USM_Info::has_accompclutchstatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void USM_Info::set_has_accompclutchstatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void USM_Info::clear_has_accompclutchstatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void USM_Info::clear_accompclutchstatus() {
  accompclutchstatus_ = false;
  clear_has_accompclutchstatus();
}
inline bool USM_Info::accompclutchstatus() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.USM_Info.ACCompClutchStatus)
  return accompclutchstatus_;
}
inline void USM_Info::set_accompclutchstatus(bool value) {
  set_has_accompclutchstatus();
  accompclutchstatus_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.USM_Info.ACCompClutchStatus)
}

// optional uint32 FrontWiperStatus = 3;
inline bool USM_Info::has_frontwiperstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void USM_Info::set_has_frontwiperstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void USM_Info::clear_has_frontwiperstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void USM_Info::clear_frontwiperstatus() {
  frontwiperstatus_ = 0u;
  clear_has_frontwiperstatus();
}
inline ::google::protobuf::uint32 USM_Info::frontwiperstatus() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.USM_Info.FrontWiperStatus)
  return frontwiperstatus_;
}
inline void USM_Info::set_frontwiperstatus(::google::protobuf::uint32 value) {
  set_has_frontwiperstatus();
  frontwiperstatus_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.USM_Info.FrontWiperStatus)
}

// optional uint32 EngineFanSpeedStatus_PWM = 4;
inline bool USM_Info::has_enginefanspeedstatus_pwm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void USM_Info::set_has_enginefanspeedstatus_pwm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void USM_Info::clear_has_enginefanspeedstatus_pwm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void USM_Info::clear_enginefanspeedstatus_pwm() {
  enginefanspeedstatus_pwm_ = 0u;
  clear_has_enginefanspeedstatus_pwm();
}
inline ::google::protobuf::uint32 USM_Info::enginefanspeedstatus_pwm() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.USM_Info.EngineFanSpeedStatus_PWM)
  return enginefanspeedstatus_pwm_;
}
inline void USM_Info::set_enginefanspeedstatus_pwm(::google::protobuf::uint32 value) {
  set_has_enginefanspeedstatus_pwm();
  enginefanspeedstatus_pwm_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.USM_Info.EngineFanSpeedStatus_PWM)
}

// optional bool PositionLightsStatus = 5;
inline bool USM_Info::has_positionlightsstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void USM_Info::set_has_positionlightsstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void USM_Info::clear_has_positionlightsstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void USM_Info::clear_positionlightsstatus() {
  positionlightsstatus_ = false;
  clear_has_positionlightsstatus();
}
inline bool USM_Info::positionlightsstatus() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.USM_Info.PositionLightsStatus)
  return positionlightsstatus_;
}
inline void USM_Info::set_positionlightsstatus(bool value) {
  set_has_positionlightsstatus();
  positionlightsstatus_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.USM_Info.PositionLightsStatus)
}

// -------------------------------------------------------------------

// TPMS_Info

// optional bool Low_Tire_pressure_FR = 1;
inline bool TPMS_Info::has_low_tire_pressure_fr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPMS_Info::set_has_low_tire_pressure_fr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPMS_Info::clear_has_low_tire_pressure_fr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPMS_Info::clear_low_tire_pressure_fr() {
  low_tire_pressure_fr_ = false;
  clear_has_low_tire_pressure_fr();
}
inline bool TPMS_Info::low_tire_pressure_fr() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TPMS_Info.Low_Tire_pressure_FR)
  return low_tire_pressure_fr_;
}
inline void TPMS_Info::set_low_tire_pressure_fr(bool value) {
  set_has_low_tire_pressure_fr();
  low_tire_pressure_fr_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TPMS_Info.Low_Tire_pressure_FR)
}

// optional bool Low_Tire_pressure_FL = 2;
inline bool TPMS_Info::has_low_tire_pressure_fl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPMS_Info::set_has_low_tire_pressure_fl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPMS_Info::clear_has_low_tire_pressure_fl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPMS_Info::clear_low_tire_pressure_fl() {
  low_tire_pressure_fl_ = false;
  clear_has_low_tire_pressure_fl();
}
inline bool TPMS_Info::low_tire_pressure_fl() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TPMS_Info.Low_Tire_pressure_FL)
  return low_tire_pressure_fl_;
}
inline void TPMS_Info::set_low_tire_pressure_fl(bool value) {
  set_has_low_tire_pressure_fl();
  low_tire_pressure_fl_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TPMS_Info.Low_Tire_pressure_FL)
}

// optional bool Low_Tire_pressure_RR = 3;
inline bool TPMS_Info::has_low_tire_pressure_rr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPMS_Info::set_has_low_tire_pressure_rr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPMS_Info::clear_has_low_tire_pressure_rr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPMS_Info::clear_low_tire_pressure_rr() {
  low_tire_pressure_rr_ = false;
  clear_has_low_tire_pressure_rr();
}
inline bool TPMS_Info::low_tire_pressure_rr() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TPMS_Info.Low_Tire_pressure_RR)
  return low_tire_pressure_rr_;
}
inline void TPMS_Info::set_low_tire_pressure_rr(bool value) {
  set_has_low_tire_pressure_rr();
  low_tire_pressure_rr_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TPMS_Info.Low_Tire_pressure_RR)
}

// optional bool Low_Tire_pressure_RL = 4;
inline bool TPMS_Info::has_low_tire_pressure_rl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPMS_Info::set_has_low_tire_pressure_rl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPMS_Info::clear_has_low_tire_pressure_rl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPMS_Info::clear_low_tire_pressure_rl() {
  low_tire_pressure_rl_ = false;
  clear_has_low_tire_pressure_rl();
}
inline bool TPMS_Info::low_tire_pressure_rl() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TPMS_Info.Low_Tire_pressure_RL)
  return low_tire_pressure_rl_;
}
inline void TPMS_Info::set_low_tire_pressure_rl(bool value) {
  set_has_low_tire_pressure_rl();
  low_tire_pressure_rl_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TPMS_Info.Low_Tire_pressure_RL)
}

// optional uint32 tire_pressure_FR = 5;
inline bool TPMS_Info::has_tire_pressure_fr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TPMS_Info::set_has_tire_pressure_fr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TPMS_Info::clear_has_tire_pressure_fr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TPMS_Info::clear_tire_pressure_fr() {
  tire_pressure_fr_ = 0u;
  clear_has_tire_pressure_fr();
}
inline ::google::protobuf::uint32 TPMS_Info::tire_pressure_fr() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TPMS_Info.tire_pressure_FR)
  return tire_pressure_fr_;
}
inline void TPMS_Info::set_tire_pressure_fr(::google::protobuf::uint32 value) {
  set_has_tire_pressure_fr();
  tire_pressure_fr_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TPMS_Info.tire_pressure_FR)
}

// optional uint32 tire_pressure_FL = 6;
inline bool TPMS_Info::has_tire_pressure_fl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TPMS_Info::set_has_tire_pressure_fl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TPMS_Info::clear_has_tire_pressure_fl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TPMS_Info::clear_tire_pressure_fl() {
  tire_pressure_fl_ = 0u;
  clear_has_tire_pressure_fl();
}
inline ::google::protobuf::uint32 TPMS_Info::tire_pressure_fl() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TPMS_Info.tire_pressure_FL)
  return tire_pressure_fl_;
}
inline void TPMS_Info::set_tire_pressure_fl(::google::protobuf::uint32 value) {
  set_has_tire_pressure_fl();
  tire_pressure_fl_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TPMS_Info.tire_pressure_FL)
}

// optional uint32 tire_pressure_RR = 7;
inline bool TPMS_Info::has_tire_pressure_rr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TPMS_Info::set_has_tire_pressure_rr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TPMS_Info::clear_has_tire_pressure_rr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TPMS_Info::clear_tire_pressure_rr() {
  tire_pressure_rr_ = 0u;
  clear_has_tire_pressure_rr();
}
inline ::google::protobuf::uint32 TPMS_Info::tire_pressure_rr() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TPMS_Info.tire_pressure_RR)
  return tire_pressure_rr_;
}
inline void TPMS_Info::set_tire_pressure_rr(::google::protobuf::uint32 value) {
  set_has_tire_pressure_rr();
  tire_pressure_rr_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TPMS_Info.tire_pressure_RR)
}

// optional uint32 tire_pressure_RL = 8;
inline bool TPMS_Info::has_tire_pressure_rl() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TPMS_Info::set_has_tire_pressure_rl() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TPMS_Info::clear_has_tire_pressure_rl() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TPMS_Info::clear_tire_pressure_rl() {
  tire_pressure_rl_ = 0u;
  clear_has_tire_pressure_rl();
}
inline ::google::protobuf::uint32 TPMS_Info::tire_pressure_rl() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TPMS_Info.tire_pressure_RL)
  return tire_pressure_rl_;
}
inline void TPMS_Info::set_tire_pressure_rl(::google::protobuf::uint32 value) {
  set_has_tire_pressure_rl();
  tire_pressure_rl_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TPMS_Info.tire_pressure_RL)
}

// optional uint32 Tire_pressure_FR_Low = 9;
inline bool TPMS_Info::has_tire_pressure_fr_low() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TPMS_Info::set_has_tire_pressure_fr_low() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TPMS_Info::clear_has_tire_pressure_fr_low() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TPMS_Info::clear_tire_pressure_fr_low() {
  tire_pressure_fr_low_ = 0u;
  clear_has_tire_pressure_fr_low();
}
inline ::google::protobuf::uint32 TPMS_Info::tire_pressure_fr_low() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TPMS_Info.Tire_pressure_FR_Low)
  return tire_pressure_fr_low_;
}
inline void TPMS_Info::set_tire_pressure_fr_low(::google::protobuf::uint32 value) {
  set_has_tire_pressure_fr_low();
  tire_pressure_fr_low_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TPMS_Info.Tire_pressure_FR_Low)
}

// optional uint32 Tire_pressure_FL_Low = 10;
inline bool TPMS_Info::has_tire_pressure_fl_low() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TPMS_Info::set_has_tire_pressure_fl_low() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TPMS_Info::clear_has_tire_pressure_fl_low() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TPMS_Info::clear_tire_pressure_fl_low() {
  tire_pressure_fl_low_ = 0u;
  clear_has_tire_pressure_fl_low();
}
inline ::google::protobuf::uint32 TPMS_Info::tire_pressure_fl_low() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TPMS_Info.Tire_pressure_FL_Low)
  return tire_pressure_fl_low_;
}
inline void TPMS_Info::set_tire_pressure_fl_low(::google::protobuf::uint32 value) {
  set_has_tire_pressure_fl_low();
  tire_pressure_fl_low_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TPMS_Info.Tire_pressure_FL_Low)
}

// optional uint32 Tire_pressure_RR_Low = 11;
inline bool TPMS_Info::has_tire_pressure_rr_low() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TPMS_Info::set_has_tire_pressure_rr_low() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TPMS_Info::clear_has_tire_pressure_rr_low() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TPMS_Info::clear_tire_pressure_rr_low() {
  tire_pressure_rr_low_ = 0u;
  clear_has_tire_pressure_rr_low();
}
inline ::google::protobuf::uint32 TPMS_Info::tire_pressure_rr_low() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TPMS_Info.Tire_pressure_RR_Low)
  return tire_pressure_rr_low_;
}
inline void TPMS_Info::set_tire_pressure_rr_low(::google::protobuf::uint32 value) {
  set_has_tire_pressure_rr_low();
  tire_pressure_rr_low_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TPMS_Info.Tire_pressure_RR_Low)
}

// optional uint32 Tire_pressure_RL_Low = 12;
inline bool TPMS_Info::has_tire_pressure_rl_low() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TPMS_Info::set_has_tire_pressure_rl_low() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TPMS_Info::clear_has_tire_pressure_rl_low() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TPMS_Info::clear_tire_pressure_rl_low() {
  tire_pressure_rl_low_ = 0u;
  clear_has_tire_pressure_rl_low();
}
inline ::google::protobuf::uint32 TPMS_Info::tire_pressure_rl_low() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TPMS_Info.Tire_pressure_RL_Low)
  return tire_pressure_rl_low_;
}
inline void TPMS_Info::set_tire_pressure_rl_low(::google::protobuf::uint32 value) {
  set_has_tire_pressure_rl_low();
  tire_pressure_rl_low_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TPMS_Info.Tire_pressure_RL_Low)
}

// optional uint32 Tpms_Flag = 13;
inline bool TPMS_Info::has_tpms_flag() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TPMS_Info::set_has_tpms_flag() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TPMS_Info::clear_has_tpms_flag() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TPMS_Info::clear_tpms_flag() {
  tpms_flag_ = 0u;
  clear_has_tpms_flag();
}
inline ::google::protobuf::uint32 TPMS_Info::tpms_flag() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TPMS_Info.Tpms_Flag)
  return tpms_flag_;
}
inline void TPMS_Info::set_tpms_flag(::google::protobuf::uint32 value) {
  set_has_tpms_flag();
  tpms_flag_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TPMS_Info.Tpms_Flag)
}

// optional uint32 TpmsWarningLampRequest = 14;
inline bool TPMS_Info::has_tpmswarninglamprequest() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TPMS_Info::set_has_tpmswarninglamprequest() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TPMS_Info::clear_has_tpmswarninglamprequest() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TPMS_Info::clear_tpmswarninglamprequest() {
  tpmswarninglamprequest_ = 0u;
  clear_has_tpmswarninglamprequest();
}
inline ::google::protobuf::uint32 TPMS_Info::tpmswarninglamprequest() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TPMS_Info.TpmsWarningLampRequest)
  return tpmswarninglamprequest_;
}
inline void TPMS_Info::set_tpmswarninglamprequest(::google::protobuf::uint32 value) {
  set_has_tpmswarninglamprequest();
  tpmswarninglamprequest_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TPMS_Info.TpmsWarningLampRequest)
}

// optional uint32 SystemFailure_TPMS = 15;
inline bool TPMS_Info::has_systemfailure_tpms() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TPMS_Info::set_has_systemfailure_tpms() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TPMS_Info::clear_has_systemfailure_tpms() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TPMS_Info::clear_systemfailure_tpms() {
  systemfailure_tpms_ = 0u;
  clear_has_systemfailure_tpms();
}
inline ::google::protobuf::uint32 TPMS_Info::systemfailure_tpms() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TPMS_Info.SystemFailure_TPMS)
  return systemfailure_tpms_;
}
inline void TPMS_Info::set_systemfailure_tpms(::google::protobuf::uint32 value) {
  set_has_systemfailure_tpms();
  systemfailure_tpms_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TPMS_Info.SystemFailure_TPMS)
}

// optional uint32 Transmitter_status_FR = 16;
inline bool TPMS_Info::has_transmitter_status_fr() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TPMS_Info::set_has_transmitter_status_fr() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TPMS_Info::clear_has_transmitter_status_fr() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TPMS_Info::clear_transmitter_status_fr() {
  transmitter_status_fr_ = 0u;
  clear_has_transmitter_status_fr();
}
inline ::google::protobuf::uint32 TPMS_Info::transmitter_status_fr() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TPMS_Info.Transmitter_status_FR)
  return transmitter_status_fr_;
}
inline void TPMS_Info::set_transmitter_status_fr(::google::protobuf::uint32 value) {
  set_has_transmitter_status_fr();
  transmitter_status_fr_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TPMS_Info.Transmitter_status_FR)
}

// optional uint32 Transmitter_status_FL = 17;
inline bool TPMS_Info::has_transmitter_status_fl() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TPMS_Info::set_has_transmitter_status_fl() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TPMS_Info::clear_has_transmitter_status_fl() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TPMS_Info::clear_transmitter_status_fl() {
  transmitter_status_fl_ = 0u;
  clear_has_transmitter_status_fl();
}
inline ::google::protobuf::uint32 TPMS_Info::transmitter_status_fl() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TPMS_Info.Transmitter_status_FL)
  return transmitter_status_fl_;
}
inline void TPMS_Info::set_transmitter_status_fl(::google::protobuf::uint32 value) {
  set_has_transmitter_status_fl();
  transmitter_status_fl_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TPMS_Info.Transmitter_status_FL)
}

// optional uint32 Transmitter_status_RR = 18;
inline bool TPMS_Info::has_transmitter_status_rr() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TPMS_Info::set_has_transmitter_status_rr() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TPMS_Info::clear_has_transmitter_status_rr() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TPMS_Info::clear_transmitter_status_rr() {
  transmitter_status_rr_ = 0u;
  clear_has_transmitter_status_rr();
}
inline ::google::protobuf::uint32 TPMS_Info::transmitter_status_rr() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TPMS_Info.Transmitter_status_RR)
  return transmitter_status_rr_;
}
inline void TPMS_Info::set_transmitter_status_rr(::google::protobuf::uint32 value) {
  set_has_transmitter_status_rr();
  transmitter_status_rr_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TPMS_Info.Transmitter_status_RR)
}

// optional uint32 Transmitter_status_RL = 19;
inline bool TPMS_Info::has_transmitter_status_rl() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TPMS_Info::set_has_transmitter_status_rl() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TPMS_Info::clear_has_transmitter_status_rl() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TPMS_Info::clear_transmitter_status_rl() {
  transmitter_status_rl_ = 0u;
  clear_has_transmitter_status_rl();
}
inline ::google::protobuf::uint32 TPMS_Info::transmitter_status_rl() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TPMS_Info.Transmitter_status_RL)
  return transmitter_status_rl_;
}
inline void TPMS_Info::set_transmitter_status_rl(::google::protobuf::uint32 value) {
  set_has_transmitter_status_rl();
  transmitter_status_rl_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TPMS_Info.Transmitter_status_RL)
}

// -------------------------------------------------------------------

// WIRE_Info

// optional bool Reverse_Gear = 1;
inline bool WIRE_Info::has_reverse_gear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WIRE_Info::set_has_reverse_gear() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WIRE_Info::clear_has_reverse_gear() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WIRE_Info::clear_reverse_gear() {
  reverse_gear_ = false;
  clear_has_reverse_gear();
}
inline bool WIRE_Info::reverse_gear() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.WIRE_Info.Reverse_Gear)
  return reverse_gear_;
}
inline void WIRE_Info::set_reverse_gear(bool value) {
  set_has_reverse_gear();
  reverse_gear_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.WIRE_Info.Reverse_Gear)
}

// optional bool Neutral_Gear = 2;
inline bool WIRE_Info::has_neutral_gear() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WIRE_Info::set_has_neutral_gear() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WIRE_Info::clear_has_neutral_gear() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WIRE_Info::clear_neutral_gear() {
  neutral_gear_ = false;
  clear_has_neutral_gear();
}
inline bool WIRE_Info::neutral_gear() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.WIRE_Info.Neutral_Gear)
  return neutral_gear_;
}
inline void WIRE_Info::set_neutral_gear(bool value) {
  set_has_neutral_gear();
  neutral_gear_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.WIRE_Info.Neutral_Gear)
}

// optional bool driver_seat_belt_status = 3;
inline bool WIRE_Info::has_driver_seat_belt_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WIRE_Info::set_has_driver_seat_belt_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WIRE_Info::clear_has_driver_seat_belt_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WIRE_Info::clear_driver_seat_belt_status() {
  driver_seat_belt_status_ = false;
  clear_has_driver_seat_belt_status();
}
inline bool WIRE_Info::driver_seat_belt_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.WIRE_Info.driver_seat_belt_status)
  return driver_seat_belt_status_;
}
inline void WIRE_Info::set_driver_seat_belt_status(bool value) {
  set_has_driver_seat_belt_status();
  driver_seat_belt_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.WIRE_Info.driver_seat_belt_status)
}

// optional bool passenger_seat_belt_status = 4;
inline bool WIRE_Info::has_passenger_seat_belt_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WIRE_Info::set_has_passenger_seat_belt_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WIRE_Info::clear_has_passenger_seat_belt_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WIRE_Info::clear_passenger_seat_belt_status() {
  passenger_seat_belt_status_ = false;
  clear_has_passenger_seat_belt_status();
}
inline bool WIRE_Info::passenger_seat_belt_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.WIRE_Info.passenger_seat_belt_status)
  return passenger_seat_belt_status_;
}
inline void WIRE_Info::set_passenger_seat_belt_status(bool value) {
  set_has_passenger_seat_belt_status();
  passenger_seat_belt_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.WIRE_Info.passenger_seat_belt_status)
}

// optional bool HandBrakeSwitch = 5;
inline bool WIRE_Info::has_handbrakeswitch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WIRE_Info::set_has_handbrakeswitch() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WIRE_Info::clear_has_handbrakeswitch() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WIRE_Info::clear_handbrakeswitch() {
  handbrakeswitch_ = false;
  clear_has_handbrakeswitch();
}
inline bool WIRE_Info::handbrakeswitch() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.WIRE_Info.HandBrakeSwitch)
  return handbrakeswitch_;
}
inline void WIRE_Info::set_handbrakeswitch(bool value) {
  set_has_handbrakeswitch();
  handbrakeswitch_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.WIRE_Info.HandBrakeSwitch)
}

// optional bool ACC_status = 6;
inline bool WIRE_Info::has_acc_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WIRE_Info::set_has_acc_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WIRE_Info::clear_has_acc_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WIRE_Info::clear_acc_status() {
  acc_status_ = false;
  clear_has_acc_status();
}
inline bool WIRE_Info::acc_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.WIRE_Info.ACC_status)
  return acc_status_;
}
inline void WIRE_Info::set_acc_status(bool value) {
  set_has_acc_status();
  acc_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.WIRE_Info.ACC_status)
}

// optional bool IGN_status = 7;
inline bool WIRE_Info::has_ign_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WIRE_Info::set_has_ign_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WIRE_Info::clear_has_ign_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WIRE_Info::clear_ign_status() {
  ign_status_ = false;
  clear_has_ign_status();
}
inline bool WIRE_Info::ign_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.WIRE_Info.IGN_status)
  return ign_status_;
}
inline void WIRE_Info::set_ign_status(bool value) {
  set_has_ign_status();
  ign_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.WIRE_Info.IGN_status)
}

// optional bool Security_Indicator = 8;
inline bool WIRE_Info::has_security_indicator() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WIRE_Info::set_has_security_indicator() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WIRE_Info::clear_has_security_indicator() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WIRE_Info::clear_security_indicator() {
  security_indicator_ = false;
  clear_has_security_indicator();
}
inline bool WIRE_Info::security_indicator() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.WIRE_Info.Security_Indicator)
  return security_indicator_;
}
inline void WIRE_Info::set_security_indicator(bool value) {
  set_has_security_indicator();
  security_indicator_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.WIRE_Info.Security_Indicator)
}

// optional uint32 battery_status = 9;
inline bool WIRE_Info::has_battery_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WIRE_Info::set_has_battery_status() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WIRE_Info::clear_has_battery_status() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WIRE_Info::clear_battery_status() {
  battery_status_ = 0u;
  clear_has_battery_status();
}
inline ::google::protobuf::uint32 WIRE_Info::battery_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.WIRE_Info.battery_status)
  return battery_status_;
}
inline void WIRE_Info::set_battery_status(::google::protobuf::uint32 value) {
  set_has_battery_status();
  battery_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.WIRE_Info.battery_status)
}

// optional bool DA_Heart_Beat = 10;
inline bool WIRE_Info::has_da_heart_beat() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WIRE_Info::set_has_da_heart_beat() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WIRE_Info::clear_has_da_heart_beat() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WIRE_Info::clear_da_heart_beat() {
  da_heart_beat_ = false;
  clear_has_da_heart_beat();
}
inline bool WIRE_Info::da_heart_beat() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.WIRE_Info.DA_Heart_Beat)
  return da_heart_beat_;
}
inline void WIRE_Info::set_da_heart_beat(bool value) {
  set_has_da_heart_beat();
  da_heart_beat_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.WIRE_Info.DA_Heart_Beat)
}

// -------------------------------------------------------------------

// ECO_Info

// optional uint32 rapid_acceleration_count = 1;
inline bool ECO_Info::has_rapid_acceleration_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ECO_Info::set_has_rapid_acceleration_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ECO_Info::clear_has_rapid_acceleration_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ECO_Info::clear_rapid_acceleration_count() {
  rapid_acceleration_count_ = 0u;
  clear_has_rapid_acceleration_count();
}
inline ::google::protobuf::uint32 ECO_Info::rapid_acceleration_count() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ECO_Info.rapid_acceleration_count)
  return rapid_acceleration_count_;
}
inline void ECO_Info::set_rapid_acceleration_count(::google::protobuf::uint32 value) {
  set_has_rapid_acceleration_count();
  rapid_acceleration_count_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ECO_Info.rapid_acceleration_count)
}

// optional uint32 rapid_deceleration_count = 2;
inline bool ECO_Info::has_rapid_deceleration_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ECO_Info::set_has_rapid_deceleration_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ECO_Info::clear_has_rapid_deceleration_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ECO_Info::clear_rapid_deceleration_count() {
  rapid_deceleration_count_ = 0u;
  clear_has_rapid_deceleration_count();
}
inline ::google::protobuf::uint32 ECO_Info::rapid_deceleration_count() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ECO_Info.rapid_deceleration_count)
  return rapid_deceleration_count_;
}
inline void ECO_Info::set_rapid_deceleration_count(::google::protobuf::uint32 value) {
  set_has_rapid_deceleration_count();
  rapid_deceleration_count_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ECO_Info.rapid_deceleration_count)
}

// optional uint32 sharp_turn_count = 3;
inline bool ECO_Info::has_sharp_turn_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ECO_Info::set_has_sharp_turn_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ECO_Info::clear_has_sharp_turn_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ECO_Info::clear_sharp_turn_count() {
  sharp_turn_count_ = 0u;
  clear_has_sharp_turn_count();
}
inline ::google::protobuf::uint32 ECO_Info::sharp_turn_count() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ECO_Info.sharp_turn_count)
  return sharp_turn_count_;
}
inline void ECO_Info::set_sharp_turn_count(::google::protobuf::uint32 value) {
  set_has_sharp_turn_count();
  sharp_turn_count_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ECO_Info.sharp_turn_count)
}

// -------------------------------------------------------------------

// ALARM_Info

// optional uint32 alarm_type = 1;
inline bool ALARM_Info::has_alarm_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ALARM_Info::set_has_alarm_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ALARM_Info::clear_has_alarm_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ALARM_Info::clear_alarm_type() {
  alarm_type_ = 0u;
  clear_has_alarm_type();
}
inline ::google::protobuf::uint32 ALARM_Info::alarm_type() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ALARM_Info.alarm_type)
  return alarm_type_;
}
inline void ALARM_Info::set_alarm_type(::google::protobuf::uint32 value) {
  set_has_alarm_type();
  alarm_type_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ALARM_Info.alarm_type)
}

// optional bytes alarm_typeEx = 2;
inline bool ALARM_Info::has_alarm_typeex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ALARM_Info::set_has_alarm_typeex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ALARM_Info::clear_has_alarm_typeex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ALARM_Info::clear_alarm_typeex() {
  if (alarm_typeex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarm_typeex_->clear();
  }
  clear_has_alarm_typeex();
}
inline const ::std::string& ALARM_Info::alarm_typeex() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ALARM_Info.alarm_typeEx)
  return *alarm_typeex_;
}
inline void ALARM_Info::set_alarm_typeex(const ::std::string& value) {
  set_has_alarm_typeex();
  if (alarm_typeex_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarm_typeex_ = new ::std::string;
  }
  alarm_typeex_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.ALARM_Info.alarm_typeEx)
}
inline void ALARM_Info::set_alarm_typeex(const char* value) {
  set_has_alarm_typeex();
  if (alarm_typeex_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarm_typeex_ = new ::std::string;
  }
  alarm_typeex_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.ALARM_Info.alarm_typeEx)
}
inline void ALARM_Info::set_alarm_typeex(const void* value, size_t size) {
  set_has_alarm_typeex();
  if (alarm_typeex_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarm_typeex_ = new ::std::string;
  }
  alarm_typeex_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.ALARM_Info.alarm_typeEx)
}
inline ::std::string* ALARM_Info::mutable_alarm_typeex() {
  set_has_alarm_typeex();
  if (alarm_typeex_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarm_typeex_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.ALARM_Info.alarm_typeEx)
  return alarm_typeex_;
}
inline ::std::string* ALARM_Info::release_alarm_typeex() {
  clear_has_alarm_typeex();
  if (alarm_typeex_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = alarm_typeex_;
    alarm_typeex_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ALARM_Info::set_allocated_alarm_typeex(::std::string* alarm_typeex) {
  if (alarm_typeex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alarm_typeex_;
  }
  if (alarm_typeex) {
    set_has_alarm_typeex();
    alarm_typeex_ = alarm_typeex;
  } else {
    clear_has_alarm_typeex();
    alarm_typeex_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.ALARM_Info.alarm_typeEx)
}

// optional uint32 Transmitter_Fail = 3;
inline bool ALARM_Info::has_transmitter_fail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ALARM_Info::set_has_transmitter_fail() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ALARM_Info::clear_has_transmitter_fail() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ALARM_Info::clear_transmitter_fail() {
  transmitter_fail_ = 0u;
  clear_has_transmitter_fail();
}
inline ::google::protobuf::uint32 ALARM_Info::transmitter_fail() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ALARM_Info.Transmitter_Fail)
  return transmitter_fail_;
}
inline void ALARM_Info::set_transmitter_fail(::google::protobuf::uint32 value) {
  set_has_transmitter_fail();
  transmitter_fail_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ALARM_Info.Transmitter_Fail)
}

// optional uint32 LowTirePressure = 4;
inline bool ALARM_Info::has_lowtirepressure() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ALARM_Info::set_has_lowtirepressure() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ALARM_Info::clear_has_lowtirepressure() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ALARM_Info::clear_lowtirepressure() {
  lowtirepressure_ = 0u;
  clear_has_lowtirepressure();
}
inline ::google::protobuf::uint32 ALARM_Info::lowtirepressure() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ALARM_Info.LowTirePressure)
  return lowtirepressure_;
}
inline void ALARM_Info::set_lowtirepressure(::google::protobuf::uint32 value) {
  set_has_lowtirepressure();
  lowtirepressure_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ALARM_Info.LowTirePressure)
}

// -------------------------------------------------------------------

// ITM_Info

// optional uint32 havc_mode = 1;
inline bool ITM_Info::has_havc_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ITM_Info::set_has_havc_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ITM_Info::clear_has_havc_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ITM_Info::clear_havc_mode() {
  havc_mode_ = 0u;
  clear_has_havc_mode();
}
inline ::google::protobuf::uint32 ITM_Info::havc_mode() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ITM_Info.havc_mode)
  return havc_mode_;
}
inline void ITM_Info::set_havc_mode(::google::protobuf::uint32 value) {
  set_has_havc_mode();
  havc_mode_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ITM_Info.havc_mode)
}

// optional uint32 havc_circulation = 2;
inline bool ITM_Info::has_havc_circulation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ITM_Info::set_has_havc_circulation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ITM_Info::clear_has_havc_circulation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ITM_Info::clear_havc_circulation() {
  havc_circulation_ = 0u;
  clear_has_havc_circulation();
}
inline ::google::protobuf::uint32 ITM_Info::havc_circulation() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ITM_Info.havc_circulation)
  return havc_circulation_;
}
inline void ITM_Info::set_havc_circulation(::google::protobuf::uint32 value) {
  set_has_havc_circulation();
  havc_circulation_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ITM_Info.havc_circulation)
}

// optional uint32 havc_temperature = 3;
inline bool ITM_Info::has_havc_temperature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ITM_Info::set_has_havc_temperature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ITM_Info::clear_has_havc_temperature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ITM_Info::clear_havc_temperature() {
  havc_temperature_ = 0u;
  clear_has_havc_temperature();
}
inline ::google::protobuf::uint32 ITM_Info::havc_temperature() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ITM_Info.havc_temperature)
  return havc_temperature_;
}
inline void ITM_Info::set_havc_temperature(::google::protobuf::uint32 value) {
  set_has_havc_temperature();
  havc_temperature_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ITM_Info.havc_temperature)
}

// optional uint32 havc_air_volume = 4;
inline bool ITM_Info::has_havc_air_volume() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ITM_Info::set_has_havc_air_volume() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ITM_Info::clear_has_havc_air_volume() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ITM_Info::clear_havc_air_volume() {
  havc_air_volume_ = 0u;
  clear_has_havc_air_volume();
}
inline ::google::protobuf::uint32 ITM_Info::havc_air_volume() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ITM_Info.havc_air_volume)
  return havc_air_volume_;
}
inline void ITM_Info::set_havc_air_volume(::google::protobuf::uint32 value) {
  set_has_havc_air_volume();
  havc_air_volume_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ITM_Info.havc_air_volume)
}

// optional uint32 AVMPhotoUploadResult = 5;
inline bool ITM_Info::has_avmphotouploadresult() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ITM_Info::set_has_avmphotouploadresult() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ITM_Info::clear_has_avmphotouploadresult() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ITM_Info::clear_avmphotouploadresult() {
  avmphotouploadresult_ = 0u;
  clear_has_avmphotouploadresult();
}
inline ::google::protobuf::uint32 ITM_Info::avmphotouploadresult() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.ITM_Info.AVMPhotoUploadResult)
  return avmphotouploadresult_;
}
inline void ITM_Info::set_avmphotouploadresult(::google::protobuf::uint32 value) {
  set_has_avmphotouploadresult();
  avmphotouploadresult_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.ITM_Info.AVMPhotoUploadResult)
}

// -------------------------------------------------------------------

// IKEY_Info

// optional bool Fuel_Cut_Request = 1;
inline bool IKEY_Info::has_fuel_cut_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IKEY_Info::set_has_fuel_cut_request() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IKEY_Info::clear_has_fuel_cut_request() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IKEY_Info::clear_fuel_cut_request() {
  fuel_cut_request_ = false;
  clear_has_fuel_cut_request();
}
inline bool IKEY_Info::fuel_cut_request() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.IKEY_Info.Fuel_Cut_Request)
  return fuel_cut_request_;
}
inline void IKEY_Info::set_fuel_cut_request(bool value) {
  set_has_fuel_cut_request();
  fuel_cut_request_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.IKEY_Info.Fuel_Cut_Request)
}

// optional uint32 remote_enging_run_flag = 2;
inline bool IKEY_Info::has_remote_enging_run_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IKEY_Info::set_has_remote_enging_run_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IKEY_Info::clear_has_remote_enging_run_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IKEY_Info::clear_remote_enging_run_flag() {
  remote_enging_run_flag_ = 0u;
  clear_has_remote_enging_run_flag();
}
inline ::google::protobuf::uint32 IKEY_Info::remote_enging_run_flag() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.IKEY_Info.remote_enging_run_flag)
  return remote_enging_run_flag_;
}
inline void IKEY_Info::set_remote_enging_run_flag(::google::protobuf::uint32 value) {
  set_has_remote_enging_run_flag();
  remote_enging_run_flag_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.IKEY_Info.remote_enging_run_flag)
}

// optional uint32 RES_FailureFeedback = 3;
inline bool IKEY_Info::has_res_failurefeedback() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IKEY_Info::set_has_res_failurefeedback() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IKEY_Info::clear_has_res_failurefeedback() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IKEY_Info::clear_res_failurefeedback() {
  res_failurefeedback_ = 0u;
  clear_has_res_failurefeedback();
}
inline ::google::protobuf::uint32 IKEY_Info::res_failurefeedback() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.IKEY_Info.RES_FailureFeedback)
  return res_failurefeedback_;
}
inline void IKEY_Info::set_res_failurefeedback(::google::protobuf::uint32 value) {
  set_has_res_failurefeedback();
  res_failurefeedback_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.IKEY_Info.RES_FailureFeedback)
}

// optional uint32 PEPS_EngineforbidSt = 4;
inline bool IKEY_Info::has_peps_engineforbidst() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IKEY_Info::set_has_peps_engineforbidst() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IKEY_Info::clear_has_peps_engineforbidst() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IKEY_Info::clear_peps_engineforbidst() {
  peps_engineforbidst_ = 0u;
  clear_has_peps_engineforbidst();
}
inline ::google::protobuf::uint32 IKEY_Info::peps_engineforbidst() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.IKEY_Info.PEPS_EngineforbidSt)
  return peps_engineforbidst_;
}
inline void IKEY_Info::set_peps_engineforbidst(::google::protobuf::uint32 value) {
  set_has_peps_engineforbidst();
  peps_engineforbidst_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.IKEY_Info.PEPS_EngineforbidSt)
}

// optional uint32 StartAuthSts = 5;
inline bool IKEY_Info::has_startauthsts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IKEY_Info::set_has_startauthsts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IKEY_Info::clear_has_startauthsts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IKEY_Info::clear_startauthsts() {
  startauthsts_ = 0u;
  clear_has_startauthsts();
}
inline ::google::protobuf::uint32 IKEY_Info::startauthsts() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.IKEY_Info.StartAuthSts)
  return startauthsts_;
}
inline void IKEY_Info::set_startauthsts(::google::protobuf::uint32 value) {
  set_has_startauthsts();
  startauthsts_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.IKEY_Info.StartAuthSts)
}

// -------------------------------------------------------------------

// COMMON_Info

// optional uint32 DVRWorkStatus = 1;
inline bool COMMON_Info::has_dvrworkstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void COMMON_Info::set_has_dvrworkstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void COMMON_Info::clear_has_dvrworkstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void COMMON_Info::clear_dvrworkstatus() {
  dvrworkstatus_ = 0u;
  clear_has_dvrworkstatus();
}
inline ::google::protobuf::uint32 COMMON_Info::dvrworkstatus() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.COMMON_Info.DVRWorkStatus)
  return dvrworkstatus_;
}
inline void COMMON_Info::set_dvrworkstatus(::google::protobuf::uint32 value) {
  set_has_dvrworkstatus();
  dvrworkstatus_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.COMMON_Info.DVRWorkStatus)
}

// optional uint32 SHVM_DRVSeatVent = 2;
inline bool COMMON_Info::has_shvm_drvseatvent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void COMMON_Info::set_has_shvm_drvseatvent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void COMMON_Info::clear_has_shvm_drvseatvent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void COMMON_Info::clear_shvm_drvseatvent() {
  shvm_drvseatvent_ = 0u;
  clear_has_shvm_drvseatvent();
}
inline ::google::protobuf::uint32 COMMON_Info::shvm_drvseatvent() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.COMMON_Info.SHVM_DRVSeatVent)
  return shvm_drvseatvent_;
}
inline void COMMON_Info::set_shvm_drvseatvent(::google::protobuf::uint32 value) {
  set_has_shvm_drvseatvent();
  shvm_drvseatvent_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.COMMON_Info.SHVM_DRVSeatVent)
}

// optional uint32 SHVM_PasSeatVent = 3;
inline bool COMMON_Info::has_shvm_passeatvent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void COMMON_Info::set_has_shvm_passeatvent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void COMMON_Info::clear_has_shvm_passeatvent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void COMMON_Info::clear_shvm_passeatvent() {
  shvm_passeatvent_ = 0u;
  clear_has_shvm_passeatvent();
}
inline ::google::protobuf::uint32 COMMON_Info::shvm_passeatvent() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.COMMON_Info.SHVM_PasSeatVent)
  return shvm_passeatvent_;
}
inline void COMMON_Info::set_shvm_passeatvent(::google::protobuf::uint32 value) {
  set_has_shvm_passeatvent();
  shvm_passeatvent_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.COMMON_Info.SHVM_PasSeatVent)
}

// optional uint32 External_Temp = 4;
inline bool COMMON_Info::has_external_temp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void COMMON_Info::set_has_external_temp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void COMMON_Info::clear_has_external_temp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void COMMON_Info::clear_external_temp() {
  external_temp_ = 0u;
  clear_has_external_temp();
}
inline ::google::protobuf::uint32 COMMON_Info::external_temp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.COMMON_Info.External_Temp)
  return external_temp_;
}
inline void COMMON_Info::set_external_temp(::google::protobuf::uint32 value) {
  set_has_external_temp();
  external_temp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.COMMON_Info.External_Temp)
}

// optional uint32 sunroof_window_status = 5;
inline bool COMMON_Info::has_sunroof_window_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void COMMON_Info::set_has_sunroof_window_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void COMMON_Info::clear_has_sunroof_window_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void COMMON_Info::clear_sunroof_window_status() {
  sunroof_window_status_ = 0u;
  clear_has_sunroof_window_status();
}
inline ::google::protobuf::uint32 COMMON_Info::sunroof_window_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.COMMON_Info.sunroof_window_status)
  return sunroof_window_status_;
}
inline void COMMON_Info::set_sunroof_window_status(::google::protobuf::uint32 value) {
  set_has_sunroof_window_status();
  sunroof_window_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.COMMON_Info.sunroof_window_status)
}

// optional uint32 DVR_RemoteCommandResult = 6;
inline bool COMMON_Info::has_dvr_remotecommandresult() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void COMMON_Info::set_has_dvr_remotecommandresult() {
  _has_bits_[0] |= 0x00000020u;
}
inline void COMMON_Info::clear_has_dvr_remotecommandresult() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void COMMON_Info::clear_dvr_remotecommandresult() {
  dvr_remotecommandresult_ = 0u;
  clear_has_dvr_remotecommandresult();
}
inline ::google::protobuf::uint32 COMMON_Info::dvr_remotecommandresult() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.COMMON_Info.DVR_RemoteCommandResult)
  return dvr_remotecommandresult_;
}
inline void COMMON_Info::set_dvr_remotecommandresult(::google::protobuf::uint32 value) {
  set_has_dvr_remotecommandresult();
  dvr_remotecommandresult_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.COMMON_Info.DVR_RemoteCommandResult)
}

// optional uint32 UserSOC = 7;
inline bool COMMON_Info::has_usersoc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void COMMON_Info::set_has_usersoc() {
  _has_bits_[0] |= 0x00000040u;
}
inline void COMMON_Info::clear_has_usersoc() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void COMMON_Info::clear_usersoc() {
  usersoc_ = 0u;
  clear_has_usersoc();
}
inline ::google::protobuf::uint32 COMMON_Info::usersoc() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.COMMON_Info.UserSOC)
  return usersoc_;
}
inline void COMMON_Info::set_usersoc(::google::protobuf::uint32 value) {
  set_has_usersoc();
  usersoc_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.COMMON_Info.UserSOC)
}

// optional uint32 DCDC_Fault_Type_BLMS = 8;
inline bool COMMON_Info::has_dcdc_fault_type_blms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void COMMON_Info::set_has_dcdc_fault_type_blms() {
  _has_bits_[0] |= 0x00000080u;
}
inline void COMMON_Info::clear_has_dcdc_fault_type_blms() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void COMMON_Info::clear_dcdc_fault_type_blms() {
  dcdc_fault_type_blms_ = 0u;
  clear_has_dcdc_fault_type_blms();
}
inline ::google::protobuf::uint32 COMMON_Info::dcdc_fault_type_blms() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.COMMON_Info.DCDC_Fault_Type_BLMS)
  return dcdc_fault_type_blms_;
}
inline void COMMON_Info::set_dcdc_fault_type_blms(::google::protobuf::uint32 value) {
  set_has_dcdc_fault_type_blms();
  dcdc_fault_type_blms_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.COMMON_Info.DCDC_Fault_Type_BLMS)
}

// optional uint32 DCDCcurrentOutput_BLMS = 9;
inline bool COMMON_Info::has_dcdccurrentoutput_blms() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void COMMON_Info::set_has_dcdccurrentoutput_blms() {
  _has_bits_[0] |= 0x00000100u;
}
inline void COMMON_Info::clear_has_dcdccurrentoutput_blms() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void COMMON_Info::clear_dcdccurrentoutput_blms() {
  dcdccurrentoutput_blms_ = 0u;
  clear_has_dcdccurrentoutput_blms();
}
inline ::google::protobuf::uint32 COMMON_Info::dcdccurrentoutput_blms() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.COMMON_Info.DCDCcurrentOutput_BLMS)
  return dcdccurrentoutput_blms_;
}
inline void COMMON_Info::set_dcdccurrentoutput_blms(::google::protobuf::uint32 value) {
  set_has_dcdccurrentoutput_blms();
  dcdccurrentoutput_blms_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.COMMON_Info.DCDCcurrentOutput_BLMS)
}

// optional uint32 HVBatteryEnergyLevel = 10;
inline bool COMMON_Info::has_hvbatteryenergylevel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void COMMON_Info::set_has_hvbatteryenergylevel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void COMMON_Info::clear_has_hvbatteryenergylevel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void COMMON_Info::clear_hvbatteryenergylevel() {
  hvbatteryenergylevel_ = 0u;
  clear_has_hvbatteryenergylevel();
}
inline ::google::protobuf::uint32 COMMON_Info::hvbatteryenergylevel() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.COMMON_Info.HVBatteryEnergyLevel)
  return hvbatteryenergylevel_;
}
inline void COMMON_Info::set_hvbatteryenergylevel(::google::protobuf::uint32 value) {
  set_has_hvbatteryenergylevel();
  hvbatteryenergylevel_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.COMMON_Info.HVBatteryEnergyLevel)
}

// -------------------------------------------------------------------

// HVAC_Info

// optional uint32 Air_condition_status_driver_temp = 1;
inline bool HVAC_Info::has_air_condition_status_driver_temp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HVAC_Info::set_has_air_condition_status_driver_temp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HVAC_Info::clear_has_air_condition_status_driver_temp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HVAC_Info::clear_air_condition_status_driver_temp() {
  air_condition_status_driver_temp_ = 0u;
  clear_has_air_condition_status_driver_temp();
}
inline ::google::protobuf::uint32 HVAC_Info::air_condition_status_driver_temp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.HVAC_Info.Air_condition_status_driver_temp)
  return air_condition_status_driver_temp_;
}
inline void HVAC_Info::set_air_condition_status_driver_temp(::google::protobuf::uint32 value) {
  set_has_air_condition_status_driver_temp();
  air_condition_status_driver_temp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.HVAC_Info.Air_condition_status_driver_temp)
}

// optional uint32 Air_condition_status_passenger_temp = 2;
inline bool HVAC_Info::has_air_condition_status_passenger_temp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HVAC_Info::set_has_air_condition_status_passenger_temp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HVAC_Info::clear_has_air_condition_status_passenger_temp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HVAC_Info::clear_air_condition_status_passenger_temp() {
  air_condition_status_passenger_temp_ = 0u;
  clear_has_air_condition_status_passenger_temp();
}
inline ::google::protobuf::uint32 HVAC_Info::air_condition_status_passenger_temp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.HVAC_Info.Air_condition_status_passenger_temp)
  return air_condition_status_passenger_temp_;
}
inline void HVAC_Info::set_air_condition_status_passenger_temp(::google::protobuf::uint32 value) {
  set_has_air_condition_status_passenger_temp();
  air_condition_status_passenger_temp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.HVAC_Info.Air_condition_status_passenger_temp)
}

// optional uint32 Air_condition_status_Fan_volume = 3;
inline bool HVAC_Info::has_air_condition_status_fan_volume() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HVAC_Info::set_has_air_condition_status_fan_volume() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HVAC_Info::clear_has_air_condition_status_fan_volume() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HVAC_Info::clear_air_condition_status_fan_volume() {
  air_condition_status_fan_volume_ = 0u;
  clear_has_air_condition_status_fan_volume();
}
inline ::google::protobuf::uint32 HVAC_Info::air_condition_status_fan_volume() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.HVAC_Info.Air_condition_status_Fan_volume)
  return air_condition_status_fan_volume_;
}
inline void HVAC_Info::set_air_condition_status_fan_volume(::google::protobuf::uint32 value) {
  set_has_air_condition_status_fan_volume();
  air_condition_status_fan_volume_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.HVAC_Info.Air_condition_status_Fan_volume)
}

// optional uint32 Air_condition_status_AC_IND = 4;
inline bool HVAC_Info::has_air_condition_status_ac_ind() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HVAC_Info::set_has_air_condition_status_ac_ind() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HVAC_Info::clear_has_air_condition_status_ac_ind() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HVAC_Info::clear_air_condition_status_ac_ind() {
  air_condition_status_ac_ind_ = 0u;
  clear_has_air_condition_status_ac_ind();
}
inline ::google::protobuf::uint32 HVAC_Info::air_condition_status_ac_ind() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.HVAC_Info.Air_condition_status_AC_IND)
  return air_condition_status_ac_ind_;
}
inline void HVAC_Info::set_air_condition_status_ac_ind(::google::protobuf::uint32 value) {
  set_has_air_condition_status_ac_ind();
  air_condition_status_ac_ind_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.HVAC_Info.Air_condition_status_AC_IND)
}

// optional uint32 Air_condition_status_circulate_IND = 5;
inline bool HVAC_Info::has_air_condition_status_circulate_ind() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HVAC_Info::set_has_air_condition_status_circulate_ind() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HVAC_Info::clear_has_air_condition_status_circulate_ind() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HVAC_Info::clear_air_condition_status_circulate_ind() {
  air_condition_status_circulate_ind_ = 0u;
  clear_has_air_condition_status_circulate_ind();
}
inline ::google::protobuf::uint32 HVAC_Info::air_condition_status_circulate_ind() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.HVAC_Info.Air_condition_status_circulate_IND)
  return air_condition_status_circulate_ind_;
}
inline void HVAC_Info::set_air_condition_status_circulate_ind(::google::protobuf::uint32 value) {
  set_has_air_condition_status_circulate_ind();
  air_condition_status_circulate_ind_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.HVAC_Info.Air_condition_status_circulate_IND)
}

// optional uint32 Air_condition_status_ON_OFF_IND = 6;
inline bool HVAC_Info::has_air_condition_status_on_off_ind() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HVAC_Info::set_has_air_condition_status_on_off_ind() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HVAC_Info::clear_has_air_condition_status_on_off_ind() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HVAC_Info::clear_air_condition_status_on_off_ind() {
  air_condition_status_on_off_ind_ = 0u;
  clear_has_air_condition_status_on_off_ind();
}
inline ::google::protobuf::uint32 HVAC_Info::air_condition_status_on_off_ind() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.HVAC_Info.Air_condition_status_ON_OFF_IND)
  return air_condition_status_on_off_ind_;
}
inline void HVAC_Info::set_air_condition_status_on_off_ind(::google::protobuf::uint32 value) {
  set_has_air_condition_status_on_off_ind();
  air_condition_status_on_off_ind_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.HVAC_Info.Air_condition_status_ON_OFF_IND)
}

// optional uint32 Air_condition_status_AUTO_IND = 7;
inline bool HVAC_Info::has_air_condition_status_auto_ind() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HVAC_Info::set_has_air_condition_status_auto_ind() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HVAC_Info::clear_has_air_condition_status_auto_ind() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HVAC_Info::clear_air_condition_status_auto_ind() {
  air_condition_status_auto_ind_ = 0u;
  clear_has_air_condition_status_auto_ind();
}
inline ::google::protobuf::uint32 HVAC_Info::air_condition_status_auto_ind() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.HVAC_Info.Air_condition_status_AUTO_IND)
  return air_condition_status_auto_ind_;
}
inline void HVAC_Info::set_air_condition_status_auto_ind(::google::protobuf::uint32 value) {
  set_has_air_condition_status_auto_ind();
  air_condition_status_auto_ind_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.HVAC_Info.Air_condition_status_AUTO_IND)
}

// optional uint32 Air_condition_status_DUAL_IND = 8;
inline bool HVAC_Info::has_air_condition_status_dual_ind() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HVAC_Info::set_has_air_condition_status_dual_ind() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HVAC_Info::clear_has_air_condition_status_dual_ind() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HVAC_Info::clear_air_condition_status_dual_ind() {
  air_condition_status_dual_ind_ = 0u;
  clear_has_air_condition_status_dual_ind();
}
inline ::google::protobuf::uint32 HVAC_Info::air_condition_status_dual_ind() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.HVAC_Info.Air_condition_status_DUAL_IND)
  return air_condition_status_dual_ind_;
}
inline void HVAC_Info::set_air_condition_status_dual_ind(::google::protobuf::uint32 value) {
  set_has_air_condition_status_dual_ind();
  air_condition_status_dual_ind_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.HVAC_Info.Air_condition_status_DUAL_IND)
}

// optional uint32 Air_condition_status_SYNC_IND = 9;
inline bool HVAC_Info::has_air_condition_status_sync_ind() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HVAC_Info::set_has_air_condition_status_sync_ind() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HVAC_Info::clear_has_air_condition_status_sync_ind() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HVAC_Info::clear_air_condition_status_sync_ind() {
  air_condition_status_sync_ind_ = 0u;
  clear_has_air_condition_status_sync_ind();
}
inline ::google::protobuf::uint32 HVAC_Info::air_condition_status_sync_ind() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.HVAC_Info.Air_condition_status_SYNC_IND)
  return air_condition_status_sync_ind_;
}
inline void HVAC_Info::set_air_condition_status_sync_ind(::google::protobuf::uint32 value) {
  set_has_air_condition_status_sync_ind();
  air_condition_status_sync_ind_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.HVAC_Info.Air_condition_status_SYNC_IND)
}

// optional uint32 Air_condition_status_Front_Defrost_IND = 10;
inline bool HVAC_Info::has_air_condition_status_front_defrost_ind() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HVAC_Info::set_has_air_condition_status_front_defrost_ind() {
  _has_bits_[0] |= 0x00000200u;
}
inline void HVAC_Info::clear_has_air_condition_status_front_defrost_ind() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void HVAC_Info::clear_air_condition_status_front_defrost_ind() {
  air_condition_status_front_defrost_ind_ = 0u;
  clear_has_air_condition_status_front_defrost_ind();
}
inline ::google::protobuf::uint32 HVAC_Info::air_condition_status_front_defrost_ind() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.HVAC_Info.Air_condition_status_Front_Defrost_IND)
  return air_condition_status_front_defrost_ind_;
}
inline void HVAC_Info::set_air_condition_status_front_defrost_ind(::google::protobuf::uint32 value) {
  set_has_air_condition_status_front_defrost_ind();
  air_condition_status_front_defrost_ind_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.HVAC_Info.Air_condition_status_Front_Defrost_IND)
}

// optional uint32 Air_condition_status_Rear_Defrost_IND = 11;
inline bool HVAC_Info::has_air_condition_status_rear_defrost_ind() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void HVAC_Info::set_has_air_condition_status_rear_defrost_ind() {
  _has_bits_[0] |= 0x00000400u;
}
inline void HVAC_Info::clear_has_air_condition_status_rear_defrost_ind() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void HVAC_Info::clear_air_condition_status_rear_defrost_ind() {
  air_condition_status_rear_defrost_ind_ = 0u;
  clear_has_air_condition_status_rear_defrost_ind();
}
inline ::google::protobuf::uint32 HVAC_Info::air_condition_status_rear_defrost_ind() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.HVAC_Info.Air_condition_status_Rear_Defrost_IND)
  return air_condition_status_rear_defrost_ind_;
}
inline void HVAC_Info::set_air_condition_status_rear_defrost_ind(::google::protobuf::uint32 value) {
  set_has_air_condition_status_rear_defrost_ind();
  air_condition_status_rear_defrost_ind_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.HVAC_Info.Air_condition_status_Rear_Defrost_IND)
}

// optional uint32 Air_condition_status_Mode = 12;
inline bool HVAC_Info::has_air_condition_status_mode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void HVAC_Info::set_has_air_condition_status_mode() {
  _has_bits_[0] |= 0x00000800u;
}
inline void HVAC_Info::clear_has_air_condition_status_mode() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void HVAC_Info::clear_air_condition_status_mode() {
  air_condition_status_mode_ = 0u;
  clear_has_air_condition_status_mode();
}
inline ::google::protobuf::uint32 HVAC_Info::air_condition_status_mode() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.HVAC_Info.Air_condition_status_Mode)
  return air_condition_status_mode_;
}
inline void HVAC_Info::set_air_condition_status_mode(::google::protobuf::uint32 value) {
  set_has_air_condition_status_mode();
  air_condition_status_mode_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.HVAC_Info.Air_condition_status_Mode)
}

// optional uint32 Steering_Heat_status_SW = 13;
inline bool HVAC_Info::has_steering_heat_status_sw() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void HVAC_Info::set_has_steering_heat_status_sw() {
  _has_bits_[0] |= 0x00001000u;
}
inline void HVAC_Info::clear_has_steering_heat_status_sw() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void HVAC_Info::clear_steering_heat_status_sw() {
  steering_heat_status_sw_ = 0u;
  clear_has_steering_heat_status_sw();
}
inline ::google::protobuf::uint32 HVAC_Info::steering_heat_status_sw() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.HVAC_Info.Steering_Heat_status_SW)
  return steering_heat_status_sw_;
}
inline void HVAC_Info::set_steering_heat_status_sw(::google::protobuf::uint32 value) {
  set_has_steering_heat_status_sw();
  steering_heat_status_sw_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.HVAC_Info.Steering_Heat_status_SW)
}

// optional uint32 Seat_Heat_status_driver = 14;
inline bool HVAC_Info::has_seat_heat_status_driver() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void HVAC_Info::set_has_seat_heat_status_driver() {
  _has_bits_[0] |= 0x00002000u;
}
inline void HVAC_Info::clear_has_seat_heat_status_driver() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void HVAC_Info::clear_seat_heat_status_driver() {
  seat_heat_status_driver_ = 0u;
  clear_has_seat_heat_status_driver();
}
inline ::google::protobuf::uint32 HVAC_Info::seat_heat_status_driver() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.HVAC_Info.Seat_Heat_status_driver)
  return seat_heat_status_driver_;
}
inline void HVAC_Info::set_seat_heat_status_driver(::google::protobuf::uint32 value) {
  set_has_seat_heat_status_driver();
  seat_heat_status_driver_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.HVAC_Info.Seat_Heat_status_driver)
}

// optional uint32 Seat_Heat_status_passenager = 15;
inline bool HVAC_Info::has_seat_heat_status_passenager() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void HVAC_Info::set_has_seat_heat_status_passenager() {
  _has_bits_[0] |= 0x00004000u;
}
inline void HVAC_Info::clear_has_seat_heat_status_passenager() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void HVAC_Info::clear_seat_heat_status_passenager() {
  seat_heat_status_passenager_ = 0u;
  clear_has_seat_heat_status_passenager();
}
inline ::google::protobuf::uint32 HVAC_Info::seat_heat_status_passenager() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.HVAC_Info.Seat_Heat_status_passenager)
  return seat_heat_status_passenager_;
}
inline void HVAC_Info::set_seat_heat_status_passenager(::google::protobuf::uint32 value) {
  set_has_seat_heat_status_passenager();
  seat_heat_status_passenager_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.HVAC_Info.Seat_Heat_status_passenager)
}

// optional uint32 BlowerFanMotorStatus_AC = 16;
inline bool HVAC_Info::has_blowerfanmotorstatus_ac() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void HVAC_Info::set_has_blowerfanmotorstatus_ac() {
  _has_bits_[0] |= 0x00008000u;
}
inline void HVAC_Info::clear_has_blowerfanmotorstatus_ac() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void HVAC_Info::clear_blowerfanmotorstatus_ac() {
  blowerfanmotorstatus_ac_ = 0u;
  clear_has_blowerfanmotorstatus_ac();
}
inline ::google::protobuf::uint32 HVAC_Info::blowerfanmotorstatus_ac() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.HVAC_Info.BlowerFanMotorStatus_AC)
  return blowerfanmotorstatus_ac_;
}
inline void HVAC_Info::set_blowerfanmotorstatus_ac(::google::protobuf::uint32 value) {
  set_has_blowerfanmotorstatus_ac();
  blowerfanmotorstatus_ac_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.HVAC_Info.BlowerFanMotorStatus_AC)
}

// optional uint32 AC_StopAutoForbidden = 17;
inline bool HVAC_Info::has_ac_stopautoforbidden() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void HVAC_Info::set_has_ac_stopautoforbidden() {
  _has_bits_[0] |= 0x00010000u;
}
inline void HVAC_Info::clear_has_ac_stopautoforbidden() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void HVAC_Info::clear_ac_stopautoforbidden() {
  ac_stopautoforbidden_ = 0u;
  clear_has_ac_stopautoforbidden();
}
inline ::google::protobuf::uint32 HVAC_Info::ac_stopautoforbidden() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.HVAC_Info.AC_StopAutoForbidden)
  return ac_stopautoforbidden_;
}
inline void HVAC_Info::set_ac_stopautoforbidden(::google::protobuf::uint32 value) {
  set_has_ac_stopautoforbidden();
  ac_stopautoforbidden_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.HVAC_Info.AC_StopAutoForbidden)
}

// optional uint32 AirCondEcoActivationState = 18;
inline bool HVAC_Info::has_aircondecoactivationstate() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void HVAC_Info::set_has_aircondecoactivationstate() {
  _has_bits_[0] |= 0x00020000u;
}
inline void HVAC_Info::clear_has_aircondecoactivationstate() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void HVAC_Info::clear_aircondecoactivationstate() {
  aircondecoactivationstate_ = 0u;
  clear_has_aircondecoactivationstate();
}
inline ::google::protobuf::uint32 HVAC_Info::aircondecoactivationstate() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.HVAC_Info.AirCondEcoActivationState)
  return aircondecoactivationstate_;
}
inline void HVAC_Info::set_aircondecoactivationstate(::google::protobuf::uint32 value) {
  set_has_aircondecoactivationstate();
  aircondecoactivationstate_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.HVAC_Info.AirCondEcoActivationState)
}

// -------------------------------------------------------------------

// SBOX_info

// optional bool PM25OnOffState = 1;
inline bool SBOX_info::has_pm25onoffstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SBOX_info::set_has_pm25onoffstate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SBOX_info::clear_has_pm25onoffstate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SBOX_info::clear_pm25onoffstate() {
  pm25onoffstate_ = false;
  clear_has_pm25onoffstate();
}
inline bool SBOX_info::pm25onoffstate() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SBOX_info.PM25OnOffState)
  return pm25onoffstate_;
}
inline void SBOX_info::set_pm25onoffstate(bool value) {
  set_has_pm25onoffstate();
  pm25onoffstate_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SBOX_info.PM25OnOffState)
}

// optional bool PM25FaultState = 2;
inline bool SBOX_info::has_pm25faultstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SBOX_info::set_has_pm25faultstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SBOX_info::clear_has_pm25faultstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SBOX_info::clear_pm25faultstate() {
  pm25faultstate_ = false;
  clear_has_pm25faultstate();
}
inline bool SBOX_info::pm25faultstate() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SBOX_info.PM25FaultState)
  return pm25faultstate_;
}
inline void SBOX_info::set_pm25faultstate(bool value) {
  set_has_pm25faultstate();
  pm25faultstate_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SBOX_info.PM25FaultState)
}

// optional uint32 PM25State = 3;
inline bool SBOX_info::has_pm25state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SBOX_info::set_has_pm25state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SBOX_info::clear_has_pm25state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SBOX_info::clear_pm25state() {
  pm25state_ = 0u;
  clear_has_pm25state();
}
inline ::google::protobuf::uint32 SBOX_info::pm25state() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SBOX_info.PM25State)
  return pm25state_;
}
inline void SBOX_info::set_pm25state(::google::protobuf::uint32 value) {
  set_has_pm25state();
  pm25state_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SBOX_info.PM25State)
}

// optional uint32 PM25Value = 4;
inline bool SBOX_info::has_pm25value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SBOX_info::set_has_pm25value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SBOX_info::clear_has_pm25value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SBOX_info::clear_pm25value() {
  pm25value_ = 0u;
  clear_has_pm25value();
}
inline ::google::protobuf::uint32 SBOX_info::pm25value() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SBOX_info.PM25Value)
  return pm25value_;
}
inline void SBOX_info::set_pm25value(::google::protobuf::uint32 value) {
  set_has_pm25value();
  pm25value_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SBOX_info.PM25Value)
}

// optional uint32 Seat_Position_Feedback = 5;
inline bool SBOX_info::has_seat_position_feedback() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SBOX_info::set_has_seat_position_feedback() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SBOX_info::clear_has_seat_position_feedback() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SBOX_info::clear_seat_position_feedback() {
  seat_position_feedback_ = 0u;
  clear_has_seat_position_feedback();
}
inline ::google::protobuf::uint32 SBOX_info::seat_position_feedback() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SBOX_info.Seat_Position_Feedback)
  return seat_position_feedback_;
}
inline void SBOX_info::set_seat_position_feedback(::google::protobuf::uint32 value) {
  set_has_seat_position_feedback();
  seat_position_feedback_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SBOX_info.Seat_Position_Feedback)
}

// optional uint32 Seat_Heater_Feedback_Main = 6;
inline bool SBOX_info::has_seat_heater_feedback_main() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SBOX_info::set_has_seat_heater_feedback_main() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SBOX_info::clear_has_seat_heater_feedback_main() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SBOX_info::clear_seat_heater_feedback_main() {
  seat_heater_feedback_main_ = 0u;
  clear_has_seat_heater_feedback_main();
}
inline ::google::protobuf::uint32 SBOX_info::seat_heater_feedback_main() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SBOX_info.Seat_Heater_Feedback_Main)
  return seat_heater_feedback_main_;
}
inline void SBOX_info::set_seat_heater_feedback_main(::google::protobuf::uint32 value) {
  set_has_seat_heater_feedback_main();
  seat_heater_feedback_main_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SBOX_info.Seat_Heater_Feedback_Main)
}

// optional uint32 Seat_Heater_Feedback_FR = 7;
inline bool SBOX_info::has_seat_heater_feedback_fr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SBOX_info::set_has_seat_heater_feedback_fr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SBOX_info::clear_has_seat_heater_feedback_fr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SBOX_info::clear_seat_heater_feedback_fr() {
  seat_heater_feedback_fr_ = 0u;
  clear_has_seat_heater_feedback_fr();
}
inline ::google::protobuf::uint32 SBOX_info::seat_heater_feedback_fr() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SBOX_info.Seat_Heater_Feedback_FR)
  return seat_heater_feedback_fr_;
}
inline void SBOX_info::set_seat_heater_feedback_fr(::google::protobuf::uint32 value) {
  set_has_seat_heater_feedback_fr();
  seat_heater_feedback_fr_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SBOX_info.Seat_Heater_Feedback_FR)
}

// optional uint32 HAVC_mode_feedback = 8;
inline bool SBOX_info::has_havc_mode_feedback() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SBOX_info::set_has_havc_mode_feedback() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SBOX_info::clear_has_havc_mode_feedback() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SBOX_info::clear_havc_mode_feedback() {
  havc_mode_feedback_ = 0u;
  clear_has_havc_mode_feedback();
}
inline ::google::protobuf::uint32 SBOX_info::havc_mode_feedback() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SBOX_info.HAVC_mode_feedback)
  return havc_mode_feedback_;
}
inline void SBOX_info::set_havc_mode_feedback(::google::protobuf::uint32 value) {
  set_has_havc_mode_feedback();
  havc_mode_feedback_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SBOX_info.HAVC_mode_feedback)
}

// optional uint32 HAVC_circulation_feedback = 9;
inline bool SBOX_info::has_havc_circulation_feedback() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SBOX_info::set_has_havc_circulation_feedback() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SBOX_info::clear_has_havc_circulation_feedback() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SBOX_info::clear_havc_circulation_feedback() {
  havc_circulation_feedback_ = 0u;
  clear_has_havc_circulation_feedback();
}
inline ::google::protobuf::uint32 SBOX_info::havc_circulation_feedback() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SBOX_info.HAVC_circulation_feedback)
  return havc_circulation_feedback_;
}
inline void SBOX_info::set_havc_circulation_feedback(::google::protobuf::uint32 value) {
  set_has_havc_circulation_feedback();
  havc_circulation_feedback_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SBOX_info.HAVC_circulation_feedback)
}

// optional uint32 HAVC_temperature_feedback = 10;
inline bool SBOX_info::has_havc_temperature_feedback() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SBOX_info::set_has_havc_temperature_feedback() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SBOX_info::clear_has_havc_temperature_feedback() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SBOX_info::clear_havc_temperature_feedback() {
  havc_temperature_feedback_ = 0u;
  clear_has_havc_temperature_feedback();
}
inline ::google::protobuf::uint32 SBOX_info::havc_temperature_feedback() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SBOX_info.HAVC_temperature_feedback)
  return havc_temperature_feedback_;
}
inline void SBOX_info::set_havc_temperature_feedback(::google::protobuf::uint32 value) {
  set_has_havc_temperature_feedback();
  havc_temperature_feedback_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SBOX_info.HAVC_temperature_feedback)
}

// optional uint32 HAVC_air_volume_feedback = 11;
inline bool SBOX_info::has_havc_air_volume_feedback() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SBOX_info::set_has_havc_air_volume_feedback() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SBOX_info::clear_has_havc_air_volume_feedback() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SBOX_info::clear_havc_air_volume_feedback() {
  havc_air_volume_feedback_ = 0u;
  clear_has_havc_air_volume_feedback();
}
inline ::google::protobuf::uint32 SBOX_info::havc_air_volume_feedback() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SBOX_info.HAVC_air_volume_feedback)
  return havc_air_volume_feedback_;
}
inline void SBOX_info::set_havc_air_volume_feedback(::google::protobuf::uint32 value) {
  set_has_havc_air_volume_feedback();
  havc_air_volume_feedback_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SBOX_info.HAVC_air_volume_feedback)
}

// optional uint32 AUTO = 12;
inline bool SBOX_info::has_auto_() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SBOX_info::set_has_auto_() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SBOX_info::clear_has_auto_() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SBOX_info::clear_auto_() {
  auto__ = 0u;
  clear_has_auto_();
}
inline ::google::protobuf::uint32 SBOX_info::auto_() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SBOX_info.AUTO)
  return auto__;
}
inline void SBOX_info::set_auto_(::google::protobuf::uint32 value) {
  set_has_auto_();
  auto__ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SBOX_info.AUTO)
}

// optional bool HVAC_Type = 13;
inline bool SBOX_info::has_hvac_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SBOX_info::set_has_hvac_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SBOX_info::clear_has_hvac_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SBOX_info::clear_hvac_type() {
  hvac_type_ = false;
  clear_has_hvac_type();
}
inline bool SBOX_info::hvac_type() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SBOX_info.HVAC_Type)
  return hvac_type_;
}
inline void SBOX_info::set_hvac_type(bool value) {
  set_has_hvac_type();
  hvac_type_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SBOX_info.HVAC_Type)
}

// optional uint32 DirectOutsideTemp = 14;
inline bool SBOX_info::has_directoutsidetemp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SBOX_info::set_has_directoutsidetemp() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SBOX_info::clear_has_directoutsidetemp() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SBOX_info::clear_directoutsidetemp() {
  directoutsidetemp_ = 0u;
  clear_has_directoutsidetemp();
}
inline ::google::protobuf::uint32 SBOX_info::directoutsidetemp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SBOX_info.DirectOutsideTemp)
  return directoutsidetemp_;
}
inline void SBOX_info::set_directoutsidetemp(::google::protobuf::uint32 value) {
  set_has_directoutsidetemp();
  directoutsidetemp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SBOX_info.DirectOutsideTemp)
}

// optional uint32 DefrostState = 15;
inline bool SBOX_info::has_defroststate() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SBOX_info::set_has_defroststate() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SBOX_info::clear_has_defroststate() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SBOX_info::clear_defroststate() {
  defroststate_ = 0u;
  clear_has_defroststate();
}
inline ::google::protobuf::uint32 SBOX_info::defroststate() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SBOX_info.DefrostState)
  return defroststate_;
}
inline void SBOX_info::set_defroststate(::google::protobuf::uint32 value) {
  set_has_defroststate();
  defroststate_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SBOX_info.DefrostState)
}

// optional uint32 Cooling_Warming_Feedback = 16;
inline bool SBOX_info::has_cooling_warming_feedback() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SBOX_info::set_has_cooling_warming_feedback() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SBOX_info::clear_has_cooling_warming_feedback() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SBOX_info::clear_cooling_warming_feedback() {
  cooling_warming_feedback_ = 0u;
  clear_has_cooling_warming_feedback();
}
inline ::google::protobuf::uint32 SBOX_info::cooling_warming_feedback() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SBOX_info.Cooling_Warming_Feedback)
  return cooling_warming_feedback_;
}
inline void SBOX_info::set_cooling_warming_feedback(::google::protobuf::uint32 value) {
  set_has_cooling_warming_feedback();
  cooling_warming_feedback_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SBOX_info.Cooling_Warming_Feedback)
}

// optional uint32 S_BOX_ControlData_AC_ON_OFF = 17;
inline bool SBOX_info::has_s_box_controldata_ac_on_off() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SBOX_info::set_has_s_box_controldata_ac_on_off() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SBOX_info::clear_has_s_box_controldata_ac_on_off() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SBOX_info::clear_s_box_controldata_ac_on_off() {
  s_box_controldata_ac_on_off_ = 0u;
  clear_has_s_box_controldata_ac_on_off();
}
inline ::google::protobuf::uint32 SBOX_info::s_box_controldata_ac_on_off() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SBOX_info.S_BOX_ControlData_AC_ON_OFF)
  return s_box_controldata_ac_on_off_;
}
inline void SBOX_info::set_s_box_controldata_ac_on_off(::google::protobuf::uint32 value) {
  set_has_s_box_controldata_ac_on_off();
  s_box_controldata_ac_on_off_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SBOX_info.S_BOX_ControlData_AC_ON_OFF)
}

// optional uint32 UVC_IN_feedback = 18;
inline bool SBOX_info::has_uvc_in_feedback() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SBOX_info::set_has_uvc_in_feedback() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SBOX_info::clear_has_uvc_in_feedback() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SBOX_info::clear_uvc_in_feedback() {
  uvc_in_feedback_ = 0u;
  clear_has_uvc_in_feedback();
}
inline ::google::protobuf::uint32 SBOX_info::uvc_in_feedback() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SBOX_info.UVC_IN_feedback)
  return uvc_in_feedback_;
}
inline void SBOX_info::set_uvc_in_feedback(::google::protobuf::uint32 value) {
  set_has_uvc_in_feedback();
  uvc_in_feedback_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SBOX_info.UVC_IN_feedback)
}

// optional bool UVS_state_feedback = 19;
inline bool SBOX_info::has_uvs_state_feedback() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SBOX_info::set_has_uvs_state_feedback() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SBOX_info::clear_has_uvs_state_feedback() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SBOX_info::clear_uvs_state_feedback() {
  uvs_state_feedback_ = false;
  clear_has_uvs_state_feedback();
}
inline bool SBOX_info::uvs_state_feedback() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SBOX_info.UVS_state_feedback)
  return uvs_state_feedback_;
}
inline void SBOX_info::set_uvs_state_feedback(bool value) {
  set_has_uvs_state_feedback();
  uvs_state_feedback_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SBOX_info.UVS_state_feedback)
}

// optional bool EUCU_state_feedback = 20;
inline bool SBOX_info::has_eucu_state_feedback() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SBOX_info::set_has_eucu_state_feedback() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SBOX_info::clear_has_eucu_state_feedback() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SBOX_info::clear_eucu_state_feedback() {
  eucu_state_feedback_ = false;
  clear_has_eucu_state_feedback();
}
inline bool SBOX_info::eucu_state_feedback() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SBOX_info.EUCU_state_feedback)
  return eucu_state_feedback_;
}
inline void SBOX_info::set_eucu_state_feedback(bool value) {
  set_has_eucu_state_feedback();
  eucu_state_feedback_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SBOX_info.EUCU_state_feedback)
}

// -------------------------------------------------------------------

// DVR_Info

// optional uint32 DVR_Collision_Happen = 1;
inline bool DVR_Info::has_dvr_collision_happen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DVR_Info::set_has_dvr_collision_happen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DVR_Info::clear_has_dvr_collision_happen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DVR_Info::clear_dvr_collision_happen() {
  dvr_collision_happen_ = 0u;
  clear_has_dvr_collision_happen();
}
inline ::google::protobuf::uint32 DVR_Info::dvr_collision_happen() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.DVR_Info.DVR_Collision_Happen)
  return dvr_collision_happen_;
}
inline void DVR_Info::set_dvr_collision_happen(::google::protobuf::uint32 value) {
  set_has_dvr_collision_happen();
  dvr_collision_happen_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.DVR_Info.DVR_Collision_Happen)
}

// optional uint32 DVR_CollisionPhoto_Transmit = 2;
inline bool DVR_Info::has_dvr_collisionphoto_transmit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DVR_Info::set_has_dvr_collisionphoto_transmit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DVR_Info::clear_has_dvr_collisionphoto_transmit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DVR_Info::clear_dvr_collisionphoto_transmit() {
  dvr_collisionphoto_transmit_ = 0u;
  clear_has_dvr_collisionphoto_transmit();
}
inline ::google::protobuf::uint32 DVR_Info::dvr_collisionphoto_transmit() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.DVR_Info.DVR_CollisionPhoto_Transmit)
  return dvr_collisionphoto_transmit_;
}
inline void DVR_Info::set_dvr_collisionphoto_transmit(::google::protobuf::uint32 value) {
  set_has_dvr_collisionphoto_transmit();
  dvr_collisionphoto_transmit_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.DVR_Info.DVR_CollisionPhoto_Transmit)
}

// optional uint32 DVR_CollisionVideo_Transmit = 3;
inline bool DVR_Info::has_dvr_collisionvideo_transmit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DVR_Info::set_has_dvr_collisionvideo_transmit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DVR_Info::clear_has_dvr_collisionvideo_transmit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DVR_Info::clear_dvr_collisionvideo_transmit() {
  dvr_collisionvideo_transmit_ = 0u;
  clear_has_dvr_collisionvideo_transmit();
}
inline ::google::protobuf::uint32 DVR_Info::dvr_collisionvideo_transmit() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.DVR_Info.DVR_CollisionVideo_Transmit)
  return dvr_collisionvideo_transmit_;
}
inline void DVR_Info::set_dvr_collisionvideo_transmit(::google::protobuf::uint32 value) {
  set_has_dvr_collisionvideo_transmit();
  dvr_collisionvideo_transmit_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.DVR_Info.DVR_CollisionVideo_Transmit)
}

// optional uint32 DVR_Response = 4;
inline bool DVR_Info::has_dvr_response() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DVR_Info::set_has_dvr_response() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DVR_Info::clear_has_dvr_response() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DVR_Info::clear_dvr_response() {
  dvr_response_ = 0u;
  clear_has_dvr_response();
}
inline ::google::protobuf::uint32 DVR_Info::dvr_response() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.DVR_Info.DVR_Response)
  return dvr_response_;
}
inline void DVR_Info::set_dvr_response(::google::protobuf::uint32 value) {
  set_has_dvr_response();
  dvr_response_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.DVR_Info.DVR_Response)
}

// -------------------------------------------------------------------

// Basic_Info

// optional .tbox.protocol.ECM_Info ecm_info = 1;
inline bool Basic_Info::has_ecm_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Basic_Info::set_has_ecm_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Basic_Info::clear_has_ecm_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Basic_Info::clear_ecm_info() {
  if (ecm_info_ != NULL) ecm_info_->::tbox::protocol::ECM_Info::Clear();
  clear_has_ecm_info();
}
inline const ::tbox::protocol::ECM_Info& Basic_Info::ecm_info() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Basic_Info.ecm_info)
  return ecm_info_ != NULL ? *ecm_info_ : *default_instance_->ecm_info_;
}
inline ::tbox::protocol::ECM_Info* Basic_Info::mutable_ecm_info() {
  set_has_ecm_info();
  if (ecm_info_ == NULL) ecm_info_ = new ::tbox::protocol::ECM_Info;
  // @@protoc_insertion_point(field_mutable:tbox.protocol.Basic_Info.ecm_info)
  return ecm_info_;
}
inline ::tbox::protocol::ECM_Info* Basic_Info::release_ecm_info() {
  clear_has_ecm_info();
  ::tbox::protocol::ECM_Info* temp = ecm_info_;
  ecm_info_ = NULL;
  return temp;
}
inline void Basic_Info::set_allocated_ecm_info(::tbox::protocol::ECM_Info* ecm_info) {
  delete ecm_info_;
  ecm_info_ = ecm_info;
  if (ecm_info) {
    set_has_ecm_info();
  } else {
    clear_has_ecm_info();
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.Basic_Info.ecm_info)
}

// optional .tbox.protocol.ABSVDC_Info absvdc_info = 2;
inline bool Basic_Info::has_absvdc_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Basic_Info::set_has_absvdc_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Basic_Info::clear_has_absvdc_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Basic_Info::clear_absvdc_info() {
  if (absvdc_info_ != NULL) absvdc_info_->::tbox::protocol::ABSVDC_Info::Clear();
  clear_has_absvdc_info();
}
inline const ::tbox::protocol::ABSVDC_Info& Basic_Info::absvdc_info() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Basic_Info.absvdc_info)
  return absvdc_info_ != NULL ? *absvdc_info_ : *default_instance_->absvdc_info_;
}
inline ::tbox::protocol::ABSVDC_Info* Basic_Info::mutable_absvdc_info() {
  set_has_absvdc_info();
  if (absvdc_info_ == NULL) absvdc_info_ = new ::tbox::protocol::ABSVDC_Info;
  // @@protoc_insertion_point(field_mutable:tbox.protocol.Basic_Info.absvdc_info)
  return absvdc_info_;
}
inline ::tbox::protocol::ABSVDC_Info* Basic_Info::release_absvdc_info() {
  clear_has_absvdc_info();
  ::tbox::protocol::ABSVDC_Info* temp = absvdc_info_;
  absvdc_info_ = NULL;
  return temp;
}
inline void Basic_Info::set_allocated_absvdc_info(::tbox::protocol::ABSVDC_Info* absvdc_info) {
  delete absvdc_info_;
  absvdc_info_ = absvdc_info;
  if (absvdc_info) {
    set_has_absvdc_info();
  } else {
    clear_has_absvdc_info();
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.Basic_Info.absvdc_info)
}

// optional .tbox.protocol.METER_Info meter_info = 3;
inline bool Basic_Info::has_meter_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Basic_Info::set_has_meter_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Basic_Info::clear_has_meter_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Basic_Info::clear_meter_info() {
  if (meter_info_ != NULL) meter_info_->::tbox::protocol::METER_Info::Clear();
  clear_has_meter_info();
}
inline const ::tbox::protocol::METER_Info& Basic_Info::meter_info() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Basic_Info.meter_info)
  return meter_info_ != NULL ? *meter_info_ : *default_instance_->meter_info_;
}
inline ::tbox::protocol::METER_Info* Basic_Info::mutable_meter_info() {
  set_has_meter_info();
  if (meter_info_ == NULL) meter_info_ = new ::tbox::protocol::METER_Info;
  // @@protoc_insertion_point(field_mutable:tbox.protocol.Basic_Info.meter_info)
  return meter_info_;
}
inline ::tbox::protocol::METER_Info* Basic_Info::release_meter_info() {
  clear_has_meter_info();
  ::tbox::protocol::METER_Info* temp = meter_info_;
  meter_info_ = NULL;
  return temp;
}
inline void Basic_Info::set_allocated_meter_info(::tbox::protocol::METER_Info* meter_info) {
  delete meter_info_;
  meter_info_ = meter_info;
  if (meter_info) {
    set_has_meter_info();
  } else {
    clear_has_meter_info();
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.Basic_Info.meter_info)
}

// optional .tbox.protocol.BCM_Info bcm_info = 4;
inline bool Basic_Info::has_bcm_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Basic_Info::set_has_bcm_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Basic_Info::clear_has_bcm_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Basic_Info::clear_bcm_info() {
  if (bcm_info_ != NULL) bcm_info_->::tbox::protocol::BCM_Info::Clear();
  clear_has_bcm_info();
}
inline const ::tbox::protocol::BCM_Info& Basic_Info::bcm_info() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Basic_Info.bcm_info)
  return bcm_info_ != NULL ? *bcm_info_ : *default_instance_->bcm_info_;
}
inline ::tbox::protocol::BCM_Info* Basic_Info::mutable_bcm_info() {
  set_has_bcm_info();
  if (bcm_info_ == NULL) bcm_info_ = new ::tbox::protocol::BCM_Info;
  // @@protoc_insertion_point(field_mutable:tbox.protocol.Basic_Info.bcm_info)
  return bcm_info_;
}
inline ::tbox::protocol::BCM_Info* Basic_Info::release_bcm_info() {
  clear_has_bcm_info();
  ::tbox::protocol::BCM_Info* temp = bcm_info_;
  bcm_info_ = NULL;
  return temp;
}
inline void Basic_Info::set_allocated_bcm_info(::tbox::protocol::BCM_Info* bcm_info) {
  delete bcm_info_;
  bcm_info_ = bcm_info;
  if (bcm_info) {
    set_has_bcm_info();
  } else {
    clear_has_bcm_info();
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.Basic_Info.bcm_info)
}

// optional .tbox.protocol.ACU_Info acu_info = 5;
inline bool Basic_Info::has_acu_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Basic_Info::set_has_acu_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Basic_Info::clear_has_acu_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Basic_Info::clear_acu_info() {
  if (acu_info_ != NULL) acu_info_->::tbox::protocol::ACU_Info::Clear();
  clear_has_acu_info();
}
inline const ::tbox::protocol::ACU_Info& Basic_Info::acu_info() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Basic_Info.acu_info)
  return acu_info_ != NULL ? *acu_info_ : *default_instance_->acu_info_;
}
inline ::tbox::protocol::ACU_Info* Basic_Info::mutable_acu_info() {
  set_has_acu_info();
  if (acu_info_ == NULL) acu_info_ = new ::tbox::protocol::ACU_Info;
  // @@protoc_insertion_point(field_mutable:tbox.protocol.Basic_Info.acu_info)
  return acu_info_;
}
inline ::tbox::protocol::ACU_Info* Basic_Info::release_acu_info() {
  clear_has_acu_info();
  ::tbox::protocol::ACU_Info* temp = acu_info_;
  acu_info_ = NULL;
  return temp;
}
inline void Basic_Info::set_allocated_acu_info(::tbox::protocol::ACU_Info* acu_info) {
  delete acu_info_;
  acu_info_ = acu_info;
  if (acu_info) {
    set_has_acu_info();
  } else {
    clear_has_acu_info();
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.Basic_Info.acu_info)
}

// optional .tbox.protocol.AT_Info at_info = 6;
inline bool Basic_Info::has_at_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Basic_Info::set_has_at_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Basic_Info::clear_has_at_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Basic_Info::clear_at_info() {
  if (at_info_ != NULL) at_info_->::tbox::protocol::AT_Info::Clear();
  clear_has_at_info();
}
inline const ::tbox::protocol::AT_Info& Basic_Info::at_info() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Basic_Info.at_info)
  return at_info_ != NULL ? *at_info_ : *default_instance_->at_info_;
}
inline ::tbox::protocol::AT_Info* Basic_Info::mutable_at_info() {
  set_has_at_info();
  if (at_info_ == NULL) at_info_ = new ::tbox::protocol::AT_Info;
  // @@protoc_insertion_point(field_mutable:tbox.protocol.Basic_Info.at_info)
  return at_info_;
}
inline ::tbox::protocol::AT_Info* Basic_Info::release_at_info() {
  clear_has_at_info();
  ::tbox::protocol::AT_Info* temp = at_info_;
  at_info_ = NULL;
  return temp;
}
inline void Basic_Info::set_allocated_at_info(::tbox::protocol::AT_Info* at_info) {
  delete at_info_;
  at_info_ = at_info;
  if (at_info) {
    set_has_at_info();
  } else {
    clear_has_at_info();
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.Basic_Info.at_info)
}

// optional .tbox.protocol.STRG_Info strg_info = 7;
inline bool Basic_Info::has_strg_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Basic_Info::set_has_strg_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Basic_Info::clear_has_strg_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Basic_Info::clear_strg_info() {
  if (strg_info_ != NULL) strg_info_->::tbox::protocol::STRG_Info::Clear();
  clear_has_strg_info();
}
inline const ::tbox::protocol::STRG_Info& Basic_Info::strg_info() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Basic_Info.strg_info)
  return strg_info_ != NULL ? *strg_info_ : *default_instance_->strg_info_;
}
inline ::tbox::protocol::STRG_Info* Basic_Info::mutable_strg_info() {
  set_has_strg_info();
  if (strg_info_ == NULL) strg_info_ = new ::tbox::protocol::STRG_Info;
  // @@protoc_insertion_point(field_mutable:tbox.protocol.Basic_Info.strg_info)
  return strg_info_;
}
inline ::tbox::protocol::STRG_Info* Basic_Info::release_strg_info() {
  clear_has_strg_info();
  ::tbox::protocol::STRG_Info* temp = strg_info_;
  strg_info_ = NULL;
  return temp;
}
inline void Basic_Info::set_allocated_strg_info(::tbox::protocol::STRG_Info* strg_info) {
  delete strg_info_;
  strg_info_ = strg_info;
  if (strg_info) {
    set_has_strg_info();
  } else {
    clear_has_strg_info();
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.Basic_Info.strg_info)
}

// optional .tbox.protocol.EPS_Info eps_info = 8;
inline bool Basic_Info::has_eps_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Basic_Info::set_has_eps_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Basic_Info::clear_has_eps_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Basic_Info::clear_eps_info() {
  if (eps_info_ != NULL) eps_info_->::tbox::protocol::EPS_Info::Clear();
  clear_has_eps_info();
}
inline const ::tbox::protocol::EPS_Info& Basic_Info::eps_info() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Basic_Info.eps_info)
  return eps_info_ != NULL ? *eps_info_ : *default_instance_->eps_info_;
}
inline ::tbox::protocol::EPS_Info* Basic_Info::mutable_eps_info() {
  set_has_eps_info();
  if (eps_info_ == NULL) eps_info_ = new ::tbox::protocol::EPS_Info;
  // @@protoc_insertion_point(field_mutable:tbox.protocol.Basic_Info.eps_info)
  return eps_info_;
}
inline ::tbox::protocol::EPS_Info* Basic_Info::release_eps_info() {
  clear_has_eps_info();
  ::tbox::protocol::EPS_Info* temp = eps_info_;
  eps_info_ = NULL;
  return temp;
}
inline void Basic_Info::set_allocated_eps_info(::tbox::protocol::EPS_Info* eps_info) {
  delete eps_info_;
  eps_info_ = eps_info;
  if (eps_info) {
    set_has_eps_info();
  } else {
    clear_has_eps_info();
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.Basic_Info.eps_info)
}

// optional .tbox.protocol.USM_Info usm_info = 9;
inline bool Basic_Info::has_usm_info() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Basic_Info::set_has_usm_info() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Basic_Info::clear_has_usm_info() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Basic_Info::clear_usm_info() {
  if (usm_info_ != NULL) usm_info_->::tbox::protocol::USM_Info::Clear();
  clear_has_usm_info();
}
inline const ::tbox::protocol::USM_Info& Basic_Info::usm_info() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Basic_Info.usm_info)
  return usm_info_ != NULL ? *usm_info_ : *default_instance_->usm_info_;
}
inline ::tbox::protocol::USM_Info* Basic_Info::mutable_usm_info() {
  set_has_usm_info();
  if (usm_info_ == NULL) usm_info_ = new ::tbox::protocol::USM_Info;
  // @@protoc_insertion_point(field_mutable:tbox.protocol.Basic_Info.usm_info)
  return usm_info_;
}
inline ::tbox::protocol::USM_Info* Basic_Info::release_usm_info() {
  clear_has_usm_info();
  ::tbox::protocol::USM_Info* temp = usm_info_;
  usm_info_ = NULL;
  return temp;
}
inline void Basic_Info::set_allocated_usm_info(::tbox::protocol::USM_Info* usm_info) {
  delete usm_info_;
  usm_info_ = usm_info;
  if (usm_info) {
    set_has_usm_info();
  } else {
    clear_has_usm_info();
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.Basic_Info.usm_info)
}

// optional .tbox.protocol.TPMS_Info tpms_info = 10;
inline bool Basic_Info::has_tpms_info() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Basic_Info::set_has_tpms_info() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Basic_Info::clear_has_tpms_info() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Basic_Info::clear_tpms_info() {
  if (tpms_info_ != NULL) tpms_info_->::tbox::protocol::TPMS_Info::Clear();
  clear_has_tpms_info();
}
inline const ::tbox::protocol::TPMS_Info& Basic_Info::tpms_info() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Basic_Info.tpms_info)
  return tpms_info_ != NULL ? *tpms_info_ : *default_instance_->tpms_info_;
}
inline ::tbox::protocol::TPMS_Info* Basic_Info::mutable_tpms_info() {
  set_has_tpms_info();
  if (tpms_info_ == NULL) tpms_info_ = new ::tbox::protocol::TPMS_Info;
  // @@protoc_insertion_point(field_mutable:tbox.protocol.Basic_Info.tpms_info)
  return tpms_info_;
}
inline ::tbox::protocol::TPMS_Info* Basic_Info::release_tpms_info() {
  clear_has_tpms_info();
  ::tbox::protocol::TPMS_Info* temp = tpms_info_;
  tpms_info_ = NULL;
  return temp;
}
inline void Basic_Info::set_allocated_tpms_info(::tbox::protocol::TPMS_Info* tpms_info) {
  delete tpms_info_;
  tpms_info_ = tpms_info;
  if (tpms_info) {
    set_has_tpms_info();
  } else {
    clear_has_tpms_info();
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.Basic_Info.tpms_info)
}

// optional .tbox.protocol.WIRE_Info wire_info = 11;
inline bool Basic_Info::has_wire_info() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Basic_Info::set_has_wire_info() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Basic_Info::clear_has_wire_info() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Basic_Info::clear_wire_info() {
  if (wire_info_ != NULL) wire_info_->::tbox::protocol::WIRE_Info::Clear();
  clear_has_wire_info();
}
inline const ::tbox::protocol::WIRE_Info& Basic_Info::wire_info() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Basic_Info.wire_info)
  return wire_info_ != NULL ? *wire_info_ : *default_instance_->wire_info_;
}
inline ::tbox::protocol::WIRE_Info* Basic_Info::mutable_wire_info() {
  set_has_wire_info();
  if (wire_info_ == NULL) wire_info_ = new ::tbox::protocol::WIRE_Info;
  // @@protoc_insertion_point(field_mutable:tbox.protocol.Basic_Info.wire_info)
  return wire_info_;
}
inline ::tbox::protocol::WIRE_Info* Basic_Info::release_wire_info() {
  clear_has_wire_info();
  ::tbox::protocol::WIRE_Info* temp = wire_info_;
  wire_info_ = NULL;
  return temp;
}
inline void Basic_Info::set_allocated_wire_info(::tbox::protocol::WIRE_Info* wire_info) {
  delete wire_info_;
  wire_info_ = wire_info;
  if (wire_info) {
    set_has_wire_info();
  } else {
    clear_has_wire_info();
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.Basic_Info.wire_info)
}

// optional .tbox.protocol.ECO_Info eco_info = 12;
inline bool Basic_Info::has_eco_info() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Basic_Info::set_has_eco_info() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Basic_Info::clear_has_eco_info() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Basic_Info::clear_eco_info() {
  if (eco_info_ != NULL) eco_info_->::tbox::protocol::ECO_Info::Clear();
  clear_has_eco_info();
}
inline const ::tbox::protocol::ECO_Info& Basic_Info::eco_info() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Basic_Info.eco_info)
  return eco_info_ != NULL ? *eco_info_ : *default_instance_->eco_info_;
}
inline ::tbox::protocol::ECO_Info* Basic_Info::mutable_eco_info() {
  set_has_eco_info();
  if (eco_info_ == NULL) eco_info_ = new ::tbox::protocol::ECO_Info;
  // @@protoc_insertion_point(field_mutable:tbox.protocol.Basic_Info.eco_info)
  return eco_info_;
}
inline ::tbox::protocol::ECO_Info* Basic_Info::release_eco_info() {
  clear_has_eco_info();
  ::tbox::protocol::ECO_Info* temp = eco_info_;
  eco_info_ = NULL;
  return temp;
}
inline void Basic_Info::set_allocated_eco_info(::tbox::protocol::ECO_Info* eco_info) {
  delete eco_info_;
  eco_info_ = eco_info;
  if (eco_info) {
    set_has_eco_info();
  } else {
    clear_has_eco_info();
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.Basic_Info.eco_info)
}

// optional .tbox.protocol.ALARM_Info alarm_info = 13;
inline bool Basic_Info::has_alarm_info() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Basic_Info::set_has_alarm_info() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Basic_Info::clear_has_alarm_info() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Basic_Info::clear_alarm_info() {
  if (alarm_info_ != NULL) alarm_info_->::tbox::protocol::ALARM_Info::Clear();
  clear_has_alarm_info();
}
inline const ::tbox::protocol::ALARM_Info& Basic_Info::alarm_info() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Basic_Info.alarm_info)
  return alarm_info_ != NULL ? *alarm_info_ : *default_instance_->alarm_info_;
}
inline ::tbox::protocol::ALARM_Info* Basic_Info::mutable_alarm_info() {
  set_has_alarm_info();
  if (alarm_info_ == NULL) alarm_info_ = new ::tbox::protocol::ALARM_Info;
  // @@protoc_insertion_point(field_mutable:tbox.protocol.Basic_Info.alarm_info)
  return alarm_info_;
}
inline ::tbox::protocol::ALARM_Info* Basic_Info::release_alarm_info() {
  clear_has_alarm_info();
  ::tbox::protocol::ALARM_Info* temp = alarm_info_;
  alarm_info_ = NULL;
  return temp;
}
inline void Basic_Info::set_allocated_alarm_info(::tbox::protocol::ALARM_Info* alarm_info) {
  delete alarm_info_;
  alarm_info_ = alarm_info;
  if (alarm_info) {
    set_has_alarm_info();
  } else {
    clear_has_alarm_info();
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.Basic_Info.alarm_info)
}

// optional .tbox.protocol.ITM_Info itm_info = 14;
inline bool Basic_Info::has_itm_info() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Basic_Info::set_has_itm_info() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Basic_Info::clear_has_itm_info() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Basic_Info::clear_itm_info() {
  if (itm_info_ != NULL) itm_info_->::tbox::protocol::ITM_Info::Clear();
  clear_has_itm_info();
}
inline const ::tbox::protocol::ITM_Info& Basic_Info::itm_info() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Basic_Info.itm_info)
  return itm_info_ != NULL ? *itm_info_ : *default_instance_->itm_info_;
}
inline ::tbox::protocol::ITM_Info* Basic_Info::mutable_itm_info() {
  set_has_itm_info();
  if (itm_info_ == NULL) itm_info_ = new ::tbox::protocol::ITM_Info;
  // @@protoc_insertion_point(field_mutable:tbox.protocol.Basic_Info.itm_info)
  return itm_info_;
}
inline ::tbox::protocol::ITM_Info* Basic_Info::release_itm_info() {
  clear_has_itm_info();
  ::tbox::protocol::ITM_Info* temp = itm_info_;
  itm_info_ = NULL;
  return temp;
}
inline void Basic_Info::set_allocated_itm_info(::tbox::protocol::ITM_Info* itm_info) {
  delete itm_info_;
  itm_info_ = itm_info;
  if (itm_info) {
    set_has_itm_info();
  } else {
    clear_has_itm_info();
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.Basic_Info.itm_info)
}

// optional .tbox.protocol.IKEY_Info ikey_info = 15;
inline bool Basic_Info::has_ikey_info() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Basic_Info::set_has_ikey_info() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Basic_Info::clear_has_ikey_info() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Basic_Info::clear_ikey_info() {
  if (ikey_info_ != NULL) ikey_info_->::tbox::protocol::IKEY_Info::Clear();
  clear_has_ikey_info();
}
inline const ::tbox::protocol::IKEY_Info& Basic_Info::ikey_info() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Basic_Info.ikey_info)
  return ikey_info_ != NULL ? *ikey_info_ : *default_instance_->ikey_info_;
}
inline ::tbox::protocol::IKEY_Info* Basic_Info::mutable_ikey_info() {
  set_has_ikey_info();
  if (ikey_info_ == NULL) ikey_info_ = new ::tbox::protocol::IKEY_Info;
  // @@protoc_insertion_point(field_mutable:tbox.protocol.Basic_Info.ikey_info)
  return ikey_info_;
}
inline ::tbox::protocol::IKEY_Info* Basic_Info::release_ikey_info() {
  clear_has_ikey_info();
  ::tbox::protocol::IKEY_Info* temp = ikey_info_;
  ikey_info_ = NULL;
  return temp;
}
inline void Basic_Info::set_allocated_ikey_info(::tbox::protocol::IKEY_Info* ikey_info) {
  delete ikey_info_;
  ikey_info_ = ikey_info;
  if (ikey_info) {
    set_has_ikey_info();
  } else {
    clear_has_ikey_info();
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.Basic_Info.ikey_info)
}

// optional .tbox.protocol.COMMON_Info common_info = 16;
inline bool Basic_Info::has_common_info() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Basic_Info::set_has_common_info() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Basic_Info::clear_has_common_info() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Basic_Info::clear_common_info() {
  if (common_info_ != NULL) common_info_->::tbox::protocol::COMMON_Info::Clear();
  clear_has_common_info();
}
inline const ::tbox::protocol::COMMON_Info& Basic_Info::common_info() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Basic_Info.common_info)
  return common_info_ != NULL ? *common_info_ : *default_instance_->common_info_;
}
inline ::tbox::protocol::COMMON_Info* Basic_Info::mutable_common_info() {
  set_has_common_info();
  if (common_info_ == NULL) common_info_ = new ::tbox::protocol::COMMON_Info;
  // @@protoc_insertion_point(field_mutable:tbox.protocol.Basic_Info.common_info)
  return common_info_;
}
inline ::tbox::protocol::COMMON_Info* Basic_Info::release_common_info() {
  clear_has_common_info();
  ::tbox::protocol::COMMON_Info* temp = common_info_;
  common_info_ = NULL;
  return temp;
}
inline void Basic_Info::set_allocated_common_info(::tbox::protocol::COMMON_Info* common_info) {
  delete common_info_;
  common_info_ = common_info;
  if (common_info) {
    set_has_common_info();
  } else {
    clear_has_common_info();
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.Basic_Info.common_info)
}

// optional .tbox.protocol.SBOX_info sbox_info = 17;
inline bool Basic_Info::has_sbox_info() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Basic_Info::set_has_sbox_info() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Basic_Info::clear_has_sbox_info() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Basic_Info::clear_sbox_info() {
  if (sbox_info_ != NULL) sbox_info_->::tbox::protocol::SBOX_info::Clear();
  clear_has_sbox_info();
}
inline const ::tbox::protocol::SBOX_info& Basic_Info::sbox_info() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Basic_Info.sbox_info)
  return sbox_info_ != NULL ? *sbox_info_ : *default_instance_->sbox_info_;
}
inline ::tbox::protocol::SBOX_info* Basic_Info::mutable_sbox_info() {
  set_has_sbox_info();
  if (sbox_info_ == NULL) sbox_info_ = new ::tbox::protocol::SBOX_info;
  // @@protoc_insertion_point(field_mutable:tbox.protocol.Basic_Info.sbox_info)
  return sbox_info_;
}
inline ::tbox::protocol::SBOX_info* Basic_Info::release_sbox_info() {
  clear_has_sbox_info();
  ::tbox::protocol::SBOX_info* temp = sbox_info_;
  sbox_info_ = NULL;
  return temp;
}
inline void Basic_Info::set_allocated_sbox_info(::tbox::protocol::SBOX_info* sbox_info) {
  delete sbox_info_;
  sbox_info_ = sbox_info;
  if (sbox_info) {
    set_has_sbox_info();
  } else {
    clear_has_sbox_info();
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.Basic_Info.sbox_info)
}

// optional .tbox.protocol.HVAC_Info hvac_info = 18;
inline bool Basic_Info::has_hvac_info() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Basic_Info::set_has_hvac_info() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Basic_Info::clear_has_hvac_info() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Basic_Info::clear_hvac_info() {
  if (hvac_info_ != NULL) hvac_info_->::tbox::protocol::HVAC_Info::Clear();
  clear_has_hvac_info();
}
inline const ::tbox::protocol::HVAC_Info& Basic_Info::hvac_info() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Basic_Info.hvac_info)
  return hvac_info_ != NULL ? *hvac_info_ : *default_instance_->hvac_info_;
}
inline ::tbox::protocol::HVAC_Info* Basic_Info::mutable_hvac_info() {
  set_has_hvac_info();
  if (hvac_info_ == NULL) hvac_info_ = new ::tbox::protocol::HVAC_Info;
  // @@protoc_insertion_point(field_mutable:tbox.protocol.Basic_Info.hvac_info)
  return hvac_info_;
}
inline ::tbox::protocol::HVAC_Info* Basic_Info::release_hvac_info() {
  clear_has_hvac_info();
  ::tbox::protocol::HVAC_Info* temp = hvac_info_;
  hvac_info_ = NULL;
  return temp;
}
inline void Basic_Info::set_allocated_hvac_info(::tbox::protocol::HVAC_Info* hvac_info) {
  delete hvac_info_;
  hvac_info_ = hvac_info;
  if (hvac_info) {
    set_has_hvac_info();
  } else {
    clear_has_hvac_info();
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.Basic_Info.hvac_info)
}

// optional .tbox.protocol.DVR_Info dvr_info = 19;
inline bool Basic_Info::has_dvr_info() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Basic_Info::set_has_dvr_info() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Basic_Info::clear_has_dvr_info() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Basic_Info::clear_dvr_info() {
  if (dvr_info_ != NULL) dvr_info_->::tbox::protocol::DVR_Info::Clear();
  clear_has_dvr_info();
}
inline const ::tbox::protocol::DVR_Info& Basic_Info::dvr_info() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Basic_Info.dvr_info)
  return dvr_info_ != NULL ? *dvr_info_ : *default_instance_->dvr_info_;
}
inline ::tbox::protocol::DVR_Info* Basic_Info::mutable_dvr_info() {
  set_has_dvr_info();
  if (dvr_info_ == NULL) dvr_info_ = new ::tbox::protocol::DVR_Info;
  // @@protoc_insertion_point(field_mutable:tbox.protocol.Basic_Info.dvr_info)
  return dvr_info_;
}
inline ::tbox::protocol::DVR_Info* Basic_Info::release_dvr_info() {
  clear_has_dvr_info();
  ::tbox::protocol::DVR_Info* temp = dvr_info_;
  dvr_info_ = NULL;
  return temp;
}
inline void Basic_Info::set_allocated_dvr_info(::tbox::protocol::DVR_Info* dvr_info) {
  delete dvr_info_;
  dvr_info_ = dvr_info;
  if (dvr_info) {
    set_has_dvr_info();
  } else {
    clear_has_dvr_info();
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.Basic_Info.dvr_info)
}

// -------------------------------------------------------------------

// Vehicle_Info

// required bool Info_type = 1;
inline bool Vehicle_Info::has_info_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vehicle_Info::set_has_info_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vehicle_Info::clear_has_info_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vehicle_Info::clear_info_type() {
  info_type_ = false;
  clear_has_info_type();
}
inline bool Vehicle_Info::info_type() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Vehicle_Info.Info_type)
  return info_type_;
}
inline void Vehicle_Info::set_info_type(bool value) {
  set_has_info_type();
  info_type_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.Vehicle_Info.Info_type)
}

// required uint32 collect_time = 2;
inline bool Vehicle_Info::has_collect_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vehicle_Info::set_has_collect_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vehicle_Info::clear_has_collect_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vehicle_Info::clear_collect_time() {
  collect_time_ = 0u;
  clear_has_collect_time();
}
inline ::google::protobuf::uint32 Vehicle_Info::collect_time() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Vehicle_Info.collect_time)
  return collect_time_;
}
inline void Vehicle_Info::set_collect_time(::google::protobuf::uint32 value) {
  set_has_collect_time();
  collect_time_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.Vehicle_Info.collect_time)
}

// required .tbox.protocol.Basic_Info basic_info = 3;
inline bool Vehicle_Info::has_basic_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vehicle_Info::set_has_basic_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vehicle_Info::clear_has_basic_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vehicle_Info::clear_basic_info() {
  if (basic_info_ != NULL) basic_info_->::tbox::protocol::Basic_Info::Clear();
  clear_has_basic_info();
}
inline const ::tbox::protocol::Basic_Info& Vehicle_Info::basic_info() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Vehicle_Info.basic_info)
  return basic_info_ != NULL ? *basic_info_ : *default_instance_->basic_info_;
}
inline ::tbox::protocol::Basic_Info* Vehicle_Info::mutable_basic_info() {
  set_has_basic_info();
  if (basic_info_ == NULL) basic_info_ = new ::tbox::protocol::Basic_Info;
  // @@protoc_insertion_point(field_mutable:tbox.protocol.Vehicle_Info.basic_info)
  return basic_info_;
}
inline ::tbox::protocol::Basic_Info* Vehicle_Info::release_basic_info() {
  clear_has_basic_info();
  ::tbox::protocol::Basic_Info* temp = basic_info_;
  basic_info_ = NULL;
  return temp;
}
inline void Vehicle_Info::set_allocated_basic_info(::tbox::protocol::Basic_Info* basic_info) {
  delete basic_info_;
  basic_info_ = basic_info;
  if (basic_info) {
    set_has_basic_info();
  } else {
    clear_has_basic_info();
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.Vehicle_Info.basic_info)
}

// required uint32 time_stamp = 4;
inline bool Vehicle_Info::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Vehicle_Info::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Vehicle_Info::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Vehicle_Info::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 Vehicle_Info::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Vehicle_Info.time_stamp)
  return time_stamp_;
}
inline void Vehicle_Info::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.Vehicle_Info.time_stamp)
}

// optional uint32 IgnOnTag = 5;
inline bool Vehicle_Info::has_ignontag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Vehicle_Info::set_has_ignontag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Vehicle_Info::clear_has_ignontag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Vehicle_Info::clear_ignontag() {
  ignontag_ = 0u;
  clear_has_ignontag();
}
inline ::google::protobuf::uint32 Vehicle_Info::ignontag() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Vehicle_Info.IgnOnTag)
  return ignontag_;
}
inline void Vehicle_Info::set_ignontag(::google::protobuf::uint32 value) {
  set_has_ignontag();
  ignontag_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.Vehicle_Info.IgnOnTag)
}

// optional uint32 EF82 = 6;
inline bool Vehicle_Info::has_ef82() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Vehicle_Info::set_has_ef82() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Vehicle_Info::clear_has_ef82() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Vehicle_Info::clear_ef82() {
  ef82_ = 0u;
  clear_has_ef82();
}
inline ::google::protobuf::uint32 Vehicle_Info::ef82() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Vehicle_Info.EF82)
  return ef82_;
}
inline void Vehicle_Info::set_ef82(::google::protobuf::uint32 value) {
  set_has_ef82();
  ef82_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.Vehicle_Info.EF82)
}

// optional string Version = 7;
inline bool Vehicle_Info::has_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Vehicle_Info::set_has_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Vehicle_Info::clear_has_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Vehicle_Info::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& Vehicle_Info::version() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Vehicle_Info.Version)
  return *version_;
}
inline void Vehicle_Info::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.Vehicle_Info.Version)
}
inline void Vehicle_Info::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.Vehicle_Info.Version)
}
inline void Vehicle_Info::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.Vehicle_Info.Version)
}
inline ::std::string* Vehicle_Info::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.Vehicle_Info.Version)
  return version_;
}
inline ::std::string* Vehicle_Info::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Vehicle_Info::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.Vehicle_Info.Version)
}

// -------------------------------------------------------------------

// Vehicle_InfoRsp

// required uint32 errcode = 1;
inline bool Vehicle_InfoRsp::has_errcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vehicle_InfoRsp::set_has_errcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vehicle_InfoRsp::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vehicle_InfoRsp::clear_errcode() {
  errcode_ = 0u;
  clear_has_errcode();
}
inline ::google::protobuf::uint32 Vehicle_InfoRsp::errcode() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Vehicle_InfoRsp.errcode)
  return errcode_;
}
inline void Vehicle_InfoRsp::set_errcode(::google::protobuf::uint32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.Vehicle_InfoRsp.errcode)
}

// required uint32 time_stamp = 2;
inline bool Vehicle_InfoRsp::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vehicle_InfoRsp::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vehicle_InfoRsp::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vehicle_InfoRsp::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 Vehicle_InfoRsp::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Vehicle_InfoRsp.time_stamp)
  return time_stamp_;
}
inline void Vehicle_InfoRsp::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.Vehicle_InfoRsp.time_stamp)
}

// -------------------------------------------------------------------

// Location_Info

// required bool Info_type = 1;
inline bool Location_Info::has_info_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Location_Info::set_has_info_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Location_Info::clear_has_info_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Location_Info::clear_info_type() {
  info_type_ = false;
  clear_has_info_type();
}
inline bool Location_Info::info_type() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Location_Info.Info_type)
  return info_type_;
}
inline void Location_Info::set_info_type(bool value) {
  set_has_info_type();
  info_type_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.Location_Info.Info_type)
}

// required uint32 collect_time = 2;
inline bool Location_Info::has_collect_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Location_Info::set_has_collect_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Location_Info::clear_has_collect_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Location_Info::clear_collect_time() {
  collect_time_ = 0u;
  clear_has_collect_time();
}
inline ::google::protobuf::uint32 Location_Info::collect_time() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Location_Info.collect_time)
  return collect_time_;
}
inline void Location_Info::set_collect_time(::google::protobuf::uint32 value) {
  set_has_collect_time();
  collect_time_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.Location_Info.collect_time)
}

// required uint32 location_status = 3;
inline bool Location_Info::has_location_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Location_Info::set_has_location_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Location_Info::clear_has_location_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Location_Info::clear_location_status() {
  location_status_ = 0u;
  clear_has_location_status();
}
inline ::google::protobuf::uint32 Location_Info::location_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Location_Info.location_status)
  return location_status_;
}
inline void Location_Info::set_location_status(::google::protobuf::uint32 value) {
  set_has_location_status();
  location_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.Location_Info.location_status)
}

// required uint32 longitude = 4;
inline bool Location_Info::has_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Location_Info::set_has_longitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Location_Info::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Location_Info::clear_longitude() {
  longitude_ = 0u;
  clear_has_longitude();
}
inline ::google::protobuf::uint32 Location_Info::longitude() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Location_Info.longitude)
  return longitude_;
}
inline void Location_Info::set_longitude(::google::protobuf::uint32 value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.Location_Info.longitude)
}

// required uint32 latitude = 5;
inline bool Location_Info::has_latitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Location_Info::set_has_latitude() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Location_Info::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Location_Info::clear_latitude() {
  latitude_ = 0u;
  clear_has_latitude();
}
inline ::google::protobuf::uint32 Location_Info::latitude() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Location_Info.latitude)
  return latitude_;
}
inline void Location_Info::set_latitude(::google::protobuf::uint32 value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.Location_Info.latitude)
}

// required uint32 speed = 6;
inline bool Location_Info::has_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Location_Info::set_has_speed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Location_Info::clear_has_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Location_Info::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
inline ::google::protobuf::uint32 Location_Info::speed() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Location_Info.speed)
  return speed_;
}
inline void Location_Info::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.Location_Info.speed)
}

// required uint32 direction = 7;
inline bool Location_Info::has_direction() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Location_Info::set_has_direction() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Location_Info::clear_has_direction() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Location_Info::clear_direction() {
  direction_ = 0u;
  clear_has_direction();
}
inline ::google::protobuf::uint32 Location_Info::direction() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Location_Info.direction)
  return direction_;
}
inline void Location_Info::set_direction(::google::protobuf::uint32 value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.Location_Info.direction)
}

// required uint32 time_stamp = 8;
inline bool Location_Info::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Location_Info::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Location_Info::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Location_Info::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 Location_Info::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Location_Info.time_stamp)
  return time_stamp_;
}
inline void Location_Info::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.Location_Info.time_stamp)
}

// optional uint32 isGPSconversion = 9;
inline bool Location_Info::has_isgpsconversion() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Location_Info::set_has_isgpsconversion() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Location_Info::clear_has_isgpsconversion() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Location_Info::clear_isgpsconversion() {
  isgpsconversion_ = 0u;
  clear_has_isgpsconversion();
}
inline ::google::protobuf::uint32 Location_Info::isgpsconversion() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Location_Info.isGPSconversion)
  return isgpsconversion_;
}
inline void Location_Info::set_isgpsconversion(::google::protobuf::uint32 value) {
  set_has_isgpsconversion();
  isgpsconversion_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.Location_Info.isGPSconversion)
}

// -------------------------------------------------------------------

// Location_InfoRsp

// required uint32 errcode = 1;
inline bool Location_InfoRsp::has_errcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Location_InfoRsp::set_has_errcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Location_InfoRsp::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Location_InfoRsp::clear_errcode() {
  errcode_ = 0u;
  clear_has_errcode();
}
inline ::google::protobuf::uint32 Location_InfoRsp::errcode() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Location_InfoRsp.errcode)
  return errcode_;
}
inline void Location_InfoRsp::set_errcode(::google::protobuf::uint32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.Location_InfoRsp.errcode)
}

// required uint32 time_stamp = 2;
inline bool Location_InfoRsp::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Location_InfoRsp::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Location_InfoRsp::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Location_InfoRsp::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 Location_InfoRsp::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Location_InfoRsp.time_stamp)
  return time_stamp_;
}
inline void Location_InfoRsp::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.Location_InfoRsp.time_stamp)
}

// -------------------------------------------------------------------

// RemoteControlResultRsp

// required uint32 control_type = 1;
inline bool RemoteControlResultRsp::has_control_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoteControlResultRsp::set_has_control_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoteControlResultRsp::clear_has_control_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoteControlResultRsp::clear_control_type() {
  control_type_ = 0u;
  clear_has_control_type();
}
inline ::google::protobuf::uint32 RemoteControlResultRsp::control_type() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RemoteControlResultRsp.control_type)
  return control_type_;
}
inline void RemoteControlResultRsp::set_control_type(::google::protobuf::uint32 value) {
  set_has_control_type();
  control_type_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.RemoteControlResultRsp.control_type)
}

// required uint32 control_value = 2;
inline bool RemoteControlResultRsp::has_control_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoteControlResultRsp::set_has_control_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemoteControlResultRsp::clear_has_control_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemoteControlResultRsp::clear_control_value() {
  control_value_ = 0u;
  clear_has_control_value();
}
inline ::google::protobuf::uint32 RemoteControlResultRsp::control_value() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RemoteControlResultRsp.control_value)
  return control_value_;
}
inline void RemoteControlResultRsp::set_control_value(::google::protobuf::uint32 value) {
  set_has_control_value();
  control_value_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.RemoteControlResultRsp.control_value)
}

// required uint32 serial_number = 3;
inline bool RemoteControlResultRsp::has_serial_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RemoteControlResultRsp::set_has_serial_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RemoteControlResultRsp::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RemoteControlResultRsp::clear_serial_number() {
  serial_number_ = 0u;
  clear_has_serial_number();
}
inline ::google::protobuf::uint32 RemoteControlResultRsp::serial_number() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RemoteControlResultRsp.serial_number)
  return serial_number_;
}
inline void RemoteControlResultRsp::set_serial_number(::google::protobuf::uint32 value) {
  set_has_serial_number();
  serial_number_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.RemoteControlResultRsp.serial_number)
}

// required uint32 control_result = 4;
inline bool RemoteControlResultRsp::has_control_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RemoteControlResultRsp::set_has_control_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RemoteControlResultRsp::clear_has_control_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RemoteControlResultRsp::clear_control_result() {
  control_result_ = 0u;
  clear_has_control_result();
}
inline ::google::protobuf::uint32 RemoteControlResultRsp::control_result() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RemoteControlResultRsp.control_result)
  return control_result_;
}
inline void RemoteControlResultRsp::set_control_result(::google::protobuf::uint32 value) {
  set_has_control_result();
  control_result_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.RemoteControlResultRsp.control_result)
}

// required uint32 time_stamp = 5;
inline bool RemoteControlResultRsp::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RemoteControlResultRsp::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RemoteControlResultRsp::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RemoteControlResultRsp::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 RemoteControlResultRsp::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RemoteControlResultRsp.time_stamp)
  return time_stamp_;
}
inline void RemoteControlResultRsp::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.RemoteControlResultRsp.time_stamp)
}

// -------------------------------------------------------------------

// RemoteControlReq

// required uint32 control_type = 1;
inline bool RemoteControlReq::has_control_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoteControlReq::set_has_control_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoteControlReq::clear_has_control_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoteControlReq::clear_control_type() {
  control_type_ = 0u;
  clear_has_control_type();
}
inline ::google::protobuf::uint32 RemoteControlReq::control_type() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RemoteControlReq.control_type)
  return control_type_;
}
inline void RemoteControlReq::set_control_type(::google::protobuf::uint32 value) {
  set_has_control_type();
  control_type_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.RemoteControlReq.control_type)
}

// required uint32 control_value = 2;
inline bool RemoteControlReq::has_control_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoteControlReq::set_has_control_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemoteControlReq::clear_has_control_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemoteControlReq::clear_control_value() {
  control_value_ = 0u;
  clear_has_control_value();
}
inline ::google::protobuf::uint32 RemoteControlReq::control_value() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RemoteControlReq.control_value)
  return control_value_;
}
inline void RemoteControlReq::set_control_value(::google::protobuf::uint32 value) {
  set_has_control_value();
  control_value_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.RemoteControlReq.control_value)
}

// required uint32 serial_number = 3;
inline bool RemoteControlReq::has_serial_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RemoteControlReq::set_has_serial_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RemoteControlReq::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RemoteControlReq::clear_serial_number() {
  serial_number_ = 0u;
  clear_has_serial_number();
}
inline ::google::protobuf::uint32 RemoteControlReq::serial_number() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RemoteControlReq.serial_number)
  return serial_number_;
}
inline void RemoteControlReq::set_serial_number(::google::protobuf::uint32 value) {
  set_has_serial_number();
  serial_number_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.RemoteControlReq.serial_number)
}

// required uint32 time_stamp = 4;
inline bool RemoteControlReq::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RemoteControlReq::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RemoteControlReq::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RemoteControlReq::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 RemoteControlReq::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RemoteControlReq.time_stamp)
  return time_stamp_;
}
inline void RemoteControlReq::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.RemoteControlReq.time_stamp)
}

// optional string signal_data = 5;
inline bool RemoteControlReq::has_signal_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RemoteControlReq::set_has_signal_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RemoteControlReq::clear_has_signal_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RemoteControlReq::clear_signal_data() {
  if (signal_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signal_data_->clear();
  }
  clear_has_signal_data();
}
inline const ::std::string& RemoteControlReq::signal_data() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RemoteControlReq.signal_data)
  return *signal_data_;
}
inline void RemoteControlReq::set_signal_data(const ::std::string& value) {
  set_has_signal_data();
  if (signal_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signal_data_ = new ::std::string;
  }
  signal_data_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RemoteControlReq.signal_data)
}
inline void RemoteControlReq::set_signal_data(const char* value) {
  set_has_signal_data();
  if (signal_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signal_data_ = new ::std::string;
  }
  signal_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RemoteControlReq.signal_data)
}
inline void RemoteControlReq::set_signal_data(const char* value, size_t size) {
  set_has_signal_data();
  if (signal_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signal_data_ = new ::std::string;
  }
  signal_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RemoteControlReq.signal_data)
}
inline ::std::string* RemoteControlReq::mutable_signal_data() {
  set_has_signal_data();
  if (signal_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signal_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RemoteControlReq.signal_data)
  return signal_data_;
}
inline ::std::string* RemoteControlReq::release_signal_data() {
  clear_has_signal_data();
  if (signal_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = signal_data_;
    signal_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RemoteControlReq::set_allocated_signal_data(::std::string* signal_data) {
  if (signal_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signal_data_;
  }
  if (signal_data) {
    set_has_signal_data();
    signal_data_ = signal_data;
  } else {
    clear_has_signal_data();
    signal_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RemoteControlReq.signal_data)
}

// -------------------------------------------------------------------

// FlowCountRsp

// required uint32 dataAllowance = 1;
inline bool FlowCountRsp::has_dataallowance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlowCountRsp::set_has_dataallowance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlowCountRsp::clear_has_dataallowance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlowCountRsp::clear_dataallowance() {
  dataallowance_ = 0u;
  clear_has_dataallowance();
}
inline ::google::protobuf::uint32 FlowCountRsp::dataallowance() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.FlowCountRsp.dataAllowance)
  return dataallowance_;
}
inline void FlowCountRsp::set_dataallowance(::google::protobuf::uint32 value) {
  set_has_dataallowance();
  dataallowance_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.FlowCountRsp.dataAllowance)
}

// required uint32 dataUsage = 2;
inline bool FlowCountRsp::has_datausage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlowCountRsp::set_has_datausage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlowCountRsp::clear_has_datausage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlowCountRsp::clear_datausage() {
  datausage_ = 0u;
  clear_has_datausage();
}
inline ::google::protobuf::uint32 FlowCountRsp::datausage() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.FlowCountRsp.dataUsage)
  return datausage_;
}
inline void FlowCountRsp::set_datausage(::google::protobuf::uint32 value) {
  set_has_datausage();
  datausage_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.FlowCountRsp.dataUsage)
}

// required uint32 dataAvailable = 3;
inline bool FlowCountRsp::has_dataavailable() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FlowCountRsp::set_has_dataavailable() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FlowCountRsp::clear_has_dataavailable() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FlowCountRsp::clear_dataavailable() {
  dataavailable_ = 0u;
  clear_has_dataavailable();
}
inline ::google::protobuf::uint32 FlowCountRsp::dataavailable() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.FlowCountRsp.dataAvailable)
  return dataavailable_;
}
inline void FlowCountRsp::set_dataavailable(::google::protobuf::uint32 value) {
  set_has_dataavailable();
  dataavailable_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.FlowCountRsp.dataAvailable)
}

// -------------------------------------------------------------------

// FlowCountLimitReq

// required uint32 limitVal = 1;
inline bool FlowCountLimitReq::has_limitval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlowCountLimitReq::set_has_limitval() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlowCountLimitReq::clear_has_limitval() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlowCountLimitReq::clear_limitval() {
  limitval_ = 0u;
  clear_has_limitval();
}
inline ::google::protobuf::uint32 FlowCountLimitReq::limitval() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.FlowCountLimitReq.limitVal)
  return limitval_;
}
inline void FlowCountLimitReq::set_limitval(::google::protobuf::uint32 value) {
  set_has_limitval();
  limitval_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.FlowCountLimitReq.limitVal)
}

// -------------------------------------------------------------------

// OtaUpgradeReq

// repeated .tbox.protocol.UpgradeInfo upgradeinfo = 1;
inline int OtaUpgradeReq::upgradeinfo_size() const {
  return upgradeinfo_.size();
}
inline void OtaUpgradeReq::clear_upgradeinfo() {
  upgradeinfo_.Clear();
}
inline const ::tbox::protocol::UpgradeInfo& OtaUpgradeReq::upgradeinfo(int index) const {
  // @@protoc_insertion_point(field_get:tbox.protocol.OtaUpgradeReq.upgradeinfo)
  return upgradeinfo_.Get(index);
}
inline ::tbox::protocol::UpgradeInfo* OtaUpgradeReq::mutable_upgradeinfo(int index) {
  // @@protoc_insertion_point(field_mutable:tbox.protocol.OtaUpgradeReq.upgradeinfo)
  return upgradeinfo_.Mutable(index);
}
inline ::tbox::protocol::UpgradeInfo* OtaUpgradeReq::add_upgradeinfo() {
  // @@protoc_insertion_point(field_add:tbox.protocol.OtaUpgradeReq.upgradeinfo)
  return upgradeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tbox::protocol::UpgradeInfo >&
OtaUpgradeReq::upgradeinfo() const {
  // @@protoc_insertion_point(field_list:tbox.protocol.OtaUpgradeReq.upgradeinfo)
  return upgradeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::tbox::protocol::UpgradeInfo >*
OtaUpgradeReq::mutable_upgradeinfo() {
  // @@protoc_insertion_point(field_mutable_list:tbox.protocol.OtaUpgradeReq.upgradeinfo)
  return &upgradeinfo_;
}

// required uint32 serial_number = 2;
inline bool OtaUpgradeReq::has_serial_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OtaUpgradeReq::set_has_serial_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OtaUpgradeReq::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OtaUpgradeReq::clear_serial_number() {
  serial_number_ = 0u;
  clear_has_serial_number();
}
inline ::google::protobuf::uint32 OtaUpgradeReq::serial_number() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.OtaUpgradeReq.serial_number)
  return serial_number_;
}
inline void OtaUpgradeReq::set_serial_number(::google::protobuf::uint32 value) {
  set_has_serial_number();
  serial_number_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.OtaUpgradeReq.serial_number)
}

// required uint32 time_stamp = 3;
inline bool OtaUpgradeReq::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OtaUpgradeReq::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OtaUpgradeReq::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OtaUpgradeReq::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 OtaUpgradeReq::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.OtaUpgradeReq.time_stamp)
  return time_stamp_;
}
inline void OtaUpgradeReq::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.OtaUpgradeReq.time_stamp)
}

// -------------------------------------------------------------------

// OtaUpgradeRsp

// required uint32 errcode = 1;
inline bool OtaUpgradeRsp::has_errcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OtaUpgradeRsp::set_has_errcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OtaUpgradeRsp::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OtaUpgradeRsp::clear_errcode() {
  errcode_ = 0u;
  clear_has_errcode();
}
inline ::google::protobuf::uint32 OtaUpgradeRsp::errcode() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.OtaUpgradeRsp.errcode)
  return errcode_;
}
inline void OtaUpgradeRsp::set_errcode(::google::protobuf::uint32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.OtaUpgradeRsp.errcode)
}

// required uint32 time_stamp = 2;
inline bool OtaUpgradeRsp::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OtaUpgradeRsp::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OtaUpgradeRsp::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OtaUpgradeRsp::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 OtaUpgradeRsp::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.OtaUpgradeRsp.time_stamp)
  return time_stamp_;
}
inline void OtaUpgradeRsp::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.OtaUpgradeRsp.time_stamp)
}

// required uint32 serial_number = 3;
inline bool OtaUpgradeRsp::has_serial_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OtaUpgradeRsp::set_has_serial_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OtaUpgradeRsp::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OtaUpgradeRsp::clear_serial_number() {
  serial_number_ = 0u;
  clear_has_serial_number();
}
inline ::google::protobuf::uint32 OtaUpgradeRsp::serial_number() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.OtaUpgradeRsp.serial_number)
  return serial_number_;
}
inline void OtaUpgradeRsp::set_serial_number(::google::protobuf::uint32 value) {
  set_has_serial_number();
  serial_number_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.OtaUpgradeRsp.serial_number)
}

// -------------------------------------------------------------------

// CancelOtaUpgradeRsp

// required uint32 errcode = 1;
inline bool CancelOtaUpgradeRsp::has_errcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CancelOtaUpgradeRsp::set_has_errcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CancelOtaUpgradeRsp::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CancelOtaUpgradeRsp::clear_errcode() {
  errcode_ = 0u;
  clear_has_errcode();
}
inline ::google::protobuf::uint32 CancelOtaUpgradeRsp::errcode() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.CancelOtaUpgradeRsp.errcode)
  return errcode_;
}
inline void CancelOtaUpgradeRsp::set_errcode(::google::protobuf::uint32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.CancelOtaUpgradeRsp.errcode)
}

// -------------------------------------------------------------------

// OtaUpgradeProgressReq

// required .tbox.protocol.UpgradeProgressCodeType UpgradeProgressCode = 1;
inline bool OtaUpgradeProgressReq::has_upgradeprogresscode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OtaUpgradeProgressReq::set_has_upgradeprogresscode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OtaUpgradeProgressReq::clear_has_upgradeprogresscode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OtaUpgradeProgressReq::clear_upgradeprogresscode() {
  upgradeprogresscode_ = 0;
  clear_has_upgradeprogresscode();
}
inline ::tbox::protocol::UpgradeProgressCodeType OtaUpgradeProgressReq::upgradeprogresscode() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.OtaUpgradeProgressReq.UpgradeProgressCode)
  return static_cast< ::tbox::protocol::UpgradeProgressCodeType >(upgradeprogresscode_);
}
inline void OtaUpgradeProgressReq::set_upgradeprogresscode(::tbox::protocol::UpgradeProgressCodeType value) {
  assert(::tbox::protocol::UpgradeProgressCodeType_IsValid(value));
  set_has_upgradeprogresscode();
  upgradeprogresscode_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.OtaUpgradeProgressReq.UpgradeProgressCode)
}

// optional uint32 errcode = 2;
inline bool OtaUpgradeProgressReq::has_errcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OtaUpgradeProgressReq::set_has_errcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OtaUpgradeProgressReq::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OtaUpgradeProgressReq::clear_errcode() {
  errcode_ = 0u;
  clear_has_errcode();
}
inline ::google::protobuf::uint32 OtaUpgradeProgressReq::errcode() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.OtaUpgradeProgressReq.errcode)
  return errcode_;
}
inline void OtaUpgradeProgressReq::set_errcode(::google::protobuf::uint32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.OtaUpgradeProgressReq.errcode)
}

// -------------------------------------------------------------------

// CertCom

// required uint32 serial_number = 1;
inline bool CertCom::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CertCom::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CertCom::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CertCom::clear_serial_number() {
  serial_number_ = 0u;
  clear_has_serial_number();
}
inline ::google::protobuf::uint32 CertCom::serial_number() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.CertCom.serial_number)
  return serial_number_;
}
inline void CertCom::set_serial_number(::google::protobuf::uint32 value) {
  set_has_serial_number();
  serial_number_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.CertCom.serial_number)
}

// required uint32 cur_cert_id = 2;
inline bool CertCom::has_cur_cert_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CertCom::set_has_cur_cert_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CertCom::clear_has_cur_cert_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CertCom::clear_cur_cert_id() {
  cur_cert_id_ = 0u;
  clear_has_cur_cert_id();
}
inline ::google::protobuf::uint32 CertCom::cur_cert_id() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.CertCom.cur_cert_id)
  return cur_cert_id_;
}
inline void CertCom::set_cur_cert_id(::google::protobuf::uint32 value) {
  set_has_cur_cert_id();
  cur_cert_id_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.CertCom.cur_cert_id)
}

// required uint32 data_status = 3;
inline bool CertCom::has_data_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CertCom::set_has_data_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CertCom::clear_has_data_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CertCom::clear_data_status() {
  data_status_ = 0u;
  clear_has_data_status();
}
inline ::google::protobuf::uint32 CertCom::data_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.CertCom.data_status)
  return data_status_;
}
inline void CertCom::set_data_status(::google::protobuf::uint32 value) {
  set_has_data_status();
  data_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.CertCom.data_status)
}

// required uint32 cmd_id = 4;
inline bool CertCom::has_cmd_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CertCom::set_has_cmd_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CertCom::clear_has_cmd_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CertCom::clear_cmd_id() {
  cmd_id_ = 0u;
  clear_has_cmd_id();
}
inline ::google::protobuf::uint32 CertCom::cmd_id() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.CertCom.cmd_id)
  return cmd_id_;
}
inline void CertCom::set_cmd_id(::google::protobuf::uint32 value) {
  set_has_cmd_id();
  cmd_id_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.CertCom.cmd_id)
}

// required string dcm_no = 5;
inline bool CertCom::has_dcm_no() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CertCom::set_has_dcm_no() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CertCom::clear_has_dcm_no() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CertCom::clear_dcm_no() {
  if (dcm_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dcm_no_->clear();
  }
  clear_has_dcm_no();
}
inline const ::std::string& CertCom::dcm_no() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.CertCom.dcm_no)
  return *dcm_no_;
}
inline void CertCom::set_dcm_no(const ::std::string& value) {
  set_has_dcm_no();
  if (dcm_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dcm_no_ = new ::std::string;
  }
  dcm_no_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.CertCom.dcm_no)
}
inline void CertCom::set_dcm_no(const char* value) {
  set_has_dcm_no();
  if (dcm_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dcm_no_ = new ::std::string;
  }
  dcm_no_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.CertCom.dcm_no)
}
inline void CertCom::set_dcm_no(const char* value, size_t size) {
  set_has_dcm_no();
  if (dcm_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dcm_no_ = new ::std::string;
  }
  dcm_no_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.CertCom.dcm_no)
}
inline ::std::string* CertCom::mutable_dcm_no() {
  set_has_dcm_no();
  if (dcm_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dcm_no_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.CertCom.dcm_no)
  return dcm_no_;
}
inline ::std::string* CertCom::release_dcm_no() {
  clear_has_dcm_no();
  if (dcm_no_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dcm_no_;
    dcm_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CertCom::set_allocated_dcm_no(::std::string* dcm_no) {
  if (dcm_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dcm_no_;
  }
  if (dcm_no) {
    set_has_dcm_no();
    dcm_no_ = dcm_no;
  } else {
    clear_has_dcm_no();
    dcm_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.CertCom.dcm_no)
}

// optional uint32 errcode = 6;
inline bool CertCom::has_errcode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CertCom::set_has_errcode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CertCom::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CertCom::clear_errcode() {
  errcode_ = 0u;
  clear_has_errcode();
}
inline ::google::protobuf::uint32 CertCom::errcode() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.CertCom.errcode)
  return errcode_;
}
inline void CertCom::set_errcode(::google::protobuf::uint32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.CertCom.errcode)
}

// required bytes data_info = 7;
inline bool CertCom::has_data_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CertCom::set_has_data_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CertCom::clear_has_data_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CertCom::clear_data_info() {
  if (data_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_info_->clear();
  }
  clear_has_data_info();
}
inline const ::std::string& CertCom::data_info() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.CertCom.data_info)
  return *data_info_;
}
inline void CertCom::set_data_info(const ::std::string& value) {
  set_has_data_info();
  if (data_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_info_ = new ::std::string;
  }
  data_info_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.CertCom.data_info)
}
inline void CertCom::set_data_info(const char* value) {
  set_has_data_info();
  if (data_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_info_ = new ::std::string;
  }
  data_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.CertCom.data_info)
}
inline void CertCom::set_data_info(const void* value, size_t size) {
  set_has_data_info();
  if (data_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_info_ = new ::std::string;
  }
  data_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.CertCom.data_info)
}
inline ::std::string* CertCom::mutable_data_info() {
  set_has_data_info();
  if (data_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.CertCom.data_info)
  return data_info_;
}
inline ::std::string* CertCom::release_data_info() {
  clear_has_data_info();
  if (data_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_info_;
    data_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CertCom::set_allocated_data_info(::std::string* data_info) {
  if (data_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_info_;
  }
  if (data_info) {
    set_has_data_info();
    data_info_ = data_info;
  } else {
    clear_has_data_info();
    data_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.CertCom.data_info)
}

// optional bytes sign_data = 8;
inline bool CertCom::has_sign_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CertCom::set_has_sign_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CertCom::clear_has_sign_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CertCom::clear_sign_data() {
  if (sign_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_data_->clear();
  }
  clear_has_sign_data();
}
inline const ::std::string& CertCom::sign_data() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.CertCom.sign_data)
  return *sign_data_;
}
inline void CertCom::set_sign_data(const ::std::string& value) {
  set_has_sign_data();
  if (sign_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_data_ = new ::std::string;
  }
  sign_data_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.CertCom.sign_data)
}
inline void CertCom::set_sign_data(const char* value) {
  set_has_sign_data();
  if (sign_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_data_ = new ::std::string;
  }
  sign_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.CertCom.sign_data)
}
inline void CertCom::set_sign_data(const void* value, size_t size) {
  set_has_sign_data();
  if (sign_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_data_ = new ::std::string;
  }
  sign_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.CertCom.sign_data)
}
inline ::std::string* CertCom::mutable_sign_data() {
  set_has_sign_data();
  if (sign_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.CertCom.sign_data)
  return sign_data_;
}
inline ::std::string* CertCom::release_sign_data() {
  clear_has_sign_data();
  if (sign_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_data_;
    sign_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CertCom::set_allocated_sign_data(::std::string* sign_data) {
  if (sign_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_data_;
  }
  if (sign_data) {
    set_has_sign_data();
    sign_data_ = sign_data;
  } else {
    clear_has_sign_data();
    sign_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.CertCom.sign_data)
}

// -------------------------------------------------------------------

// TCUCertApply_Req

// required uint32 time_stamp = 1;
inline bool TCUCertApply_Req::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCUCertApply_Req::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCUCertApply_Req::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCUCertApply_Req::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 TCUCertApply_Req::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TCUCertApply_Req.time_stamp)
  return time_stamp_;
}
inline void TCUCertApply_Req::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TCUCertApply_Req.time_stamp)
}

// required string vin = 2;
inline bool TCUCertApply_Req::has_vin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCUCertApply_Req::set_has_vin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCUCertApply_Req::clear_has_vin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCUCertApply_Req::clear_vin() {
  if (vin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vin_->clear();
  }
  clear_has_vin();
}
inline const ::std::string& TCUCertApply_Req::vin() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TCUCertApply_Req.vin)
  return *vin_;
}
inline void TCUCertApply_Req::set_vin(const ::std::string& value) {
  set_has_vin();
  if (vin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vin_ = new ::std::string;
  }
  vin_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.TCUCertApply_Req.vin)
}
inline void TCUCertApply_Req::set_vin(const char* value) {
  set_has_vin();
  if (vin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vin_ = new ::std::string;
  }
  vin_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.TCUCertApply_Req.vin)
}
inline void TCUCertApply_Req::set_vin(const char* value, size_t size) {
  set_has_vin();
  if (vin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vin_ = new ::std::string;
  }
  vin_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.TCUCertApply_Req.vin)
}
inline ::std::string* TCUCertApply_Req::mutable_vin() {
  set_has_vin();
  if (vin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vin_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.TCUCertApply_Req.vin)
  return vin_;
}
inline ::std::string* TCUCertApply_Req::release_vin() {
  clear_has_vin();
  if (vin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vin_;
    vin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCUCertApply_Req::set_allocated_vin(::std::string* vin) {
  if (vin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vin_;
  }
  if (vin) {
    set_has_vin();
    vin_ = vin;
  } else {
    clear_has_vin();
    vin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.TCUCertApply_Req.vin)
}

// required uint32 cert_status = 3;
inline bool TCUCertApply_Req::has_cert_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCUCertApply_Req::set_has_cert_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCUCertApply_Req::clear_has_cert_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCUCertApply_Req::clear_cert_status() {
  cert_status_ = 0u;
  clear_has_cert_status();
}
inline ::google::protobuf::uint32 TCUCertApply_Req::cert_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TCUCertApply_Req.cert_status)
  return cert_status_;
}
inline void TCUCertApply_Req::set_cert_status(::google::protobuf::uint32 value) {
  set_has_cert_status();
  cert_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TCUCertApply_Req.cert_status)
}

// required uint32 duration = 4;
inline bool TCUCertApply_Req::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCUCertApply_Req::set_has_duration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCUCertApply_Req::clear_has_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCUCertApply_Req::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
inline ::google::protobuf::uint32 TCUCertApply_Req::duration() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TCUCertApply_Req.duration)
  return duration_;
}
inline void TCUCertApply_Req::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TCUCertApply_Req.duration)
}

// required bytes p10_csr = 5;
inline bool TCUCertApply_Req::has_p10_csr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCUCertApply_Req::set_has_p10_csr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCUCertApply_Req::clear_has_p10_csr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCUCertApply_Req::clear_p10_csr() {
  if (p10_csr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    p10_csr_->clear();
  }
  clear_has_p10_csr();
}
inline const ::std::string& TCUCertApply_Req::p10_csr() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TCUCertApply_Req.p10_csr)
  return *p10_csr_;
}
inline void TCUCertApply_Req::set_p10_csr(const ::std::string& value) {
  set_has_p10_csr();
  if (p10_csr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    p10_csr_ = new ::std::string;
  }
  p10_csr_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.TCUCertApply_Req.p10_csr)
}
inline void TCUCertApply_Req::set_p10_csr(const char* value) {
  set_has_p10_csr();
  if (p10_csr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    p10_csr_ = new ::std::string;
  }
  p10_csr_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.TCUCertApply_Req.p10_csr)
}
inline void TCUCertApply_Req::set_p10_csr(const void* value, size_t size) {
  set_has_p10_csr();
  if (p10_csr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    p10_csr_ = new ::std::string;
  }
  p10_csr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.TCUCertApply_Req.p10_csr)
}
inline ::std::string* TCUCertApply_Req::mutable_p10_csr() {
  set_has_p10_csr();
  if (p10_csr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    p10_csr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.TCUCertApply_Req.p10_csr)
  return p10_csr_;
}
inline ::std::string* TCUCertApply_Req::release_p10_csr() {
  clear_has_p10_csr();
  if (p10_csr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = p10_csr_;
    p10_csr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCUCertApply_Req::set_allocated_p10_csr(::std::string* p10_csr) {
  if (p10_csr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete p10_csr_;
  }
  if (p10_csr) {
    set_has_p10_csr();
    p10_csr_ = p10_csr;
  } else {
    clear_has_p10_csr();
    p10_csr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.TCUCertApply_Req.p10_csr)
}

// optional bytes cst_sign_data = 6;
inline bool TCUCertApply_Req::has_cst_sign_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCUCertApply_Req::set_has_cst_sign_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCUCertApply_Req::clear_has_cst_sign_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCUCertApply_Req::clear_cst_sign_data() {
  if (cst_sign_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cst_sign_data_->clear();
  }
  clear_has_cst_sign_data();
}
inline const ::std::string& TCUCertApply_Req::cst_sign_data() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TCUCertApply_Req.cst_sign_data)
  return *cst_sign_data_;
}
inline void TCUCertApply_Req::set_cst_sign_data(const ::std::string& value) {
  set_has_cst_sign_data();
  if (cst_sign_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cst_sign_data_ = new ::std::string;
  }
  cst_sign_data_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.TCUCertApply_Req.cst_sign_data)
}
inline void TCUCertApply_Req::set_cst_sign_data(const char* value) {
  set_has_cst_sign_data();
  if (cst_sign_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cst_sign_data_ = new ::std::string;
  }
  cst_sign_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.TCUCertApply_Req.cst_sign_data)
}
inline void TCUCertApply_Req::set_cst_sign_data(const void* value, size_t size) {
  set_has_cst_sign_data();
  if (cst_sign_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cst_sign_data_ = new ::std::string;
  }
  cst_sign_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.TCUCertApply_Req.cst_sign_data)
}
inline ::std::string* TCUCertApply_Req::mutable_cst_sign_data() {
  set_has_cst_sign_data();
  if (cst_sign_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cst_sign_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.TCUCertApply_Req.cst_sign_data)
  return cst_sign_data_;
}
inline ::std::string* TCUCertApply_Req::release_cst_sign_data() {
  clear_has_cst_sign_data();
  if (cst_sign_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cst_sign_data_;
    cst_sign_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCUCertApply_Req::set_allocated_cst_sign_data(::std::string* cst_sign_data) {
  if (cst_sign_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cst_sign_data_;
  }
  if (cst_sign_data) {
    set_has_cst_sign_data();
    cst_sign_data_ = cst_sign_data;
  } else {
    clear_has_cst_sign_data();
    cst_sign_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.TCUCertApply_Req.cst_sign_data)
}

// optional string cert_format = 7;
inline bool TCUCertApply_Req::has_cert_format() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TCUCertApply_Req::set_has_cert_format() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TCUCertApply_Req::clear_has_cert_format() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TCUCertApply_Req::clear_cert_format() {
  if (cert_format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_format_->clear();
  }
  clear_has_cert_format();
}
inline const ::std::string& TCUCertApply_Req::cert_format() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TCUCertApply_Req.cert_format)
  return *cert_format_;
}
inline void TCUCertApply_Req::set_cert_format(const ::std::string& value) {
  set_has_cert_format();
  if (cert_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_format_ = new ::std::string;
  }
  cert_format_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.TCUCertApply_Req.cert_format)
}
inline void TCUCertApply_Req::set_cert_format(const char* value) {
  set_has_cert_format();
  if (cert_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_format_ = new ::std::string;
  }
  cert_format_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.TCUCertApply_Req.cert_format)
}
inline void TCUCertApply_Req::set_cert_format(const char* value, size_t size) {
  set_has_cert_format();
  if (cert_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_format_ = new ::std::string;
  }
  cert_format_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.TCUCertApply_Req.cert_format)
}
inline ::std::string* TCUCertApply_Req::mutable_cert_format() {
  set_has_cert_format();
  if (cert_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_format_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.TCUCertApply_Req.cert_format)
  return cert_format_;
}
inline ::std::string* TCUCertApply_Req::release_cert_format() {
  clear_has_cert_format();
  if (cert_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cert_format_;
    cert_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCUCertApply_Req::set_allocated_cert_format(::std::string* cert_format) {
  if (cert_format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cert_format_;
  }
  if (cert_format) {
    set_has_cert_format();
    cert_format_ = cert_format;
  } else {
    clear_has_cert_format();
    cert_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.TCUCertApply_Req.cert_format)
}

// optional uint32 sign_type = 8;
inline bool TCUCertApply_Req::has_sign_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TCUCertApply_Req::set_has_sign_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TCUCertApply_Req::clear_has_sign_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TCUCertApply_Req::clear_sign_type() {
  sign_type_ = 0u;
  clear_has_sign_type();
}
inline ::google::protobuf::uint32 TCUCertApply_Req::sign_type() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TCUCertApply_Req.sign_type)
  return sign_type_;
}
inline void TCUCertApply_Req::set_sign_type(::google::protobuf::uint32 value) {
  set_has_sign_type();
  sign_type_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TCUCertApply_Req.sign_type)
}

// -------------------------------------------------------------------

// TCUCertApply_Rsp

// required uint32 time_stamp = 1;
inline bool TCUCertApply_Rsp::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCUCertApply_Rsp::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCUCertApply_Rsp::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCUCertApply_Rsp::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 TCUCertApply_Rsp::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TCUCertApply_Rsp.time_stamp)
  return time_stamp_;
}
inline void TCUCertApply_Rsp::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TCUCertApply_Rsp.time_stamp)
}

// optional uint32 recv_status = 2;
inline bool TCUCertApply_Rsp::has_recv_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCUCertApply_Rsp::set_has_recv_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCUCertApply_Rsp::clear_has_recv_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCUCertApply_Rsp::clear_recv_status() {
  recv_status_ = 0u;
  clear_has_recv_status();
}
inline ::google::protobuf::uint32 TCUCertApply_Rsp::recv_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TCUCertApply_Rsp.recv_status)
  return recv_status_;
}
inline void TCUCertApply_Rsp::set_recv_status(::google::protobuf::uint32 value) {
  set_has_recv_status();
  recv_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TCUCertApply_Rsp.recv_status)
}

// -------------------------------------------------------------------

// CertIssue_Req

// required uint32 time_stamp = 1;
inline bool CertIssue_Req::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CertIssue_Req::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CertIssue_Req::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CertIssue_Req::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 CertIssue_Req::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.CertIssue_Req.time_stamp)
  return time_stamp_;
}
inline void CertIssue_Req::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.CertIssue_Req.time_stamp)
}

// required uint32 cert_apply_status = 2;
inline bool CertIssue_Req::has_cert_apply_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CertIssue_Req::set_has_cert_apply_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CertIssue_Req::clear_has_cert_apply_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CertIssue_Req::clear_cert_apply_status() {
  cert_apply_status_ = 0u;
  clear_has_cert_apply_status();
}
inline ::google::protobuf::uint32 CertIssue_Req::cert_apply_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.CertIssue_Req.cert_apply_status)
  return cert_apply_status_;
}
inline void CertIssue_Req::set_cert_apply_status(::google::protobuf::uint32 value) {
  set_has_cert_apply_status();
  cert_apply_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.CertIssue_Req.cert_apply_status)
}

// optional uint32 apply_cert_id = 3;
inline bool CertIssue_Req::has_apply_cert_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CertIssue_Req::set_has_apply_cert_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CertIssue_Req::clear_has_apply_cert_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CertIssue_Req::clear_apply_cert_id() {
  apply_cert_id_ = 0u;
  clear_has_apply_cert_id();
}
inline ::google::protobuf::uint32 CertIssue_Req::apply_cert_id() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.CertIssue_Req.apply_cert_id)
  return apply_cert_id_;
}
inline void CertIssue_Req::set_apply_cert_id(::google::protobuf::uint32 value) {
  set_has_apply_cert_id();
  apply_cert_id_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.CertIssue_Req.apply_cert_id)
}

// optional bytes cert_data = 4;
inline bool CertIssue_Req::has_cert_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CertIssue_Req::set_has_cert_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CertIssue_Req::clear_has_cert_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CertIssue_Req::clear_cert_data() {
  if (cert_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_data_->clear();
  }
  clear_has_cert_data();
}
inline const ::std::string& CertIssue_Req::cert_data() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.CertIssue_Req.cert_data)
  return *cert_data_;
}
inline void CertIssue_Req::set_cert_data(const ::std::string& value) {
  set_has_cert_data();
  if (cert_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_data_ = new ::std::string;
  }
  cert_data_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.CertIssue_Req.cert_data)
}
inline void CertIssue_Req::set_cert_data(const char* value) {
  set_has_cert_data();
  if (cert_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_data_ = new ::std::string;
  }
  cert_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.CertIssue_Req.cert_data)
}
inline void CertIssue_Req::set_cert_data(const void* value, size_t size) {
  set_has_cert_data();
  if (cert_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_data_ = new ::std::string;
  }
  cert_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.CertIssue_Req.cert_data)
}
inline ::std::string* CertIssue_Req::mutable_cert_data() {
  set_has_cert_data();
  if (cert_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cert_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.CertIssue_Req.cert_data)
  return cert_data_;
}
inline ::std::string* CertIssue_Req::release_cert_data() {
  clear_has_cert_data();
  if (cert_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cert_data_;
    cert_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CertIssue_Req::set_allocated_cert_data(::std::string* cert_data) {
  if (cert_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cert_data_;
  }
  if (cert_data) {
    set_has_cert_data();
    cert_data_ = cert_data;
  } else {
    clear_has_cert_data();
    cert_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.CertIssue_Req.cert_data)
}

// -------------------------------------------------------------------

// CertIssue_Rsp

// required uint32 time_stamp = 1;
inline bool CertIssue_Rsp::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CertIssue_Rsp::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CertIssue_Rsp::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CertIssue_Rsp::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 CertIssue_Rsp::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.CertIssue_Rsp.time_stamp)
  return time_stamp_;
}
inline void CertIssue_Rsp::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.CertIssue_Rsp.time_stamp)
}

// required uint32 cert_recv_status = 2;
inline bool CertIssue_Rsp::has_cert_recv_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CertIssue_Rsp::set_has_cert_recv_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CertIssue_Rsp::clear_has_cert_recv_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CertIssue_Rsp::clear_cert_recv_status() {
  cert_recv_status_ = 0u;
  clear_has_cert_recv_status();
}
inline ::google::protobuf::uint32 CertIssue_Rsp::cert_recv_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.CertIssue_Rsp.cert_recv_status)
  return cert_recv_status_;
}
inline void CertIssue_Rsp::set_cert_recv_status(::google::protobuf::uint32 value) {
  set_has_cert_recv_status();
  cert_recv_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.CertIssue_Rsp.cert_recv_status)
}

// optional uint32 apply_cert_id = 3;
inline bool CertIssue_Rsp::has_apply_cert_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CertIssue_Rsp::set_has_apply_cert_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CertIssue_Rsp::clear_has_apply_cert_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CertIssue_Rsp::clear_apply_cert_id() {
  apply_cert_id_ = 0u;
  clear_has_apply_cert_id();
}
inline ::google::protobuf::uint32 CertIssue_Rsp::apply_cert_id() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.CertIssue_Rsp.apply_cert_id)
  return apply_cert_id_;
}
inline void CertIssue_Rsp::set_apply_cert_id(::google::protobuf::uint32 value) {
  set_has_apply_cert_id();
  apply_cert_id_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.CertIssue_Rsp.apply_cert_id)
}

// -------------------------------------------------------------------

// RSALoginReq

// required string tcu_device_sn = 1;
inline bool RSALoginReq::has_tcu_device_sn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RSALoginReq::set_has_tcu_device_sn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RSALoginReq::clear_has_tcu_device_sn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RSALoginReq::clear_tcu_device_sn() {
  if (tcu_device_sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tcu_device_sn_->clear();
  }
  clear_has_tcu_device_sn();
}
inline const ::std::string& RSALoginReq::tcu_device_sn() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RSALoginReq.tcu_device_sn)
  return *tcu_device_sn_;
}
inline void RSALoginReq::set_tcu_device_sn(const ::std::string& value) {
  set_has_tcu_device_sn();
  if (tcu_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tcu_device_sn_ = new ::std::string;
  }
  tcu_device_sn_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RSALoginReq.tcu_device_sn)
}
inline void RSALoginReq::set_tcu_device_sn(const char* value) {
  set_has_tcu_device_sn();
  if (tcu_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tcu_device_sn_ = new ::std::string;
  }
  tcu_device_sn_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RSALoginReq.tcu_device_sn)
}
inline void RSALoginReq::set_tcu_device_sn(const char* value, size_t size) {
  set_has_tcu_device_sn();
  if (tcu_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tcu_device_sn_ = new ::std::string;
  }
  tcu_device_sn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RSALoginReq.tcu_device_sn)
}
inline ::std::string* RSALoginReq::mutable_tcu_device_sn() {
  set_has_tcu_device_sn();
  if (tcu_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tcu_device_sn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RSALoginReq.tcu_device_sn)
  return tcu_device_sn_;
}
inline ::std::string* RSALoginReq::release_tcu_device_sn() {
  clear_has_tcu_device_sn();
  if (tcu_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tcu_device_sn_;
    tcu_device_sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RSALoginReq::set_allocated_tcu_device_sn(::std::string* tcu_device_sn) {
  if (tcu_device_sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tcu_device_sn_;
  }
  if (tcu_device_sn) {
    set_has_tcu_device_sn();
    tcu_device_sn_ = tcu_device_sn;
  } else {
    clear_has_tcu_device_sn();
    tcu_device_sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RSALoginReq.tcu_device_sn)
}

// required string imsi = 2;
inline bool RSALoginReq::has_imsi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RSALoginReq::set_has_imsi() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RSALoginReq::clear_has_imsi() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RSALoginReq::clear_imsi() {
  if (imsi_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imsi_->clear();
  }
  clear_has_imsi();
}
inline const ::std::string& RSALoginReq::imsi() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RSALoginReq.imsi)
  return *imsi_;
}
inline void RSALoginReq::set_imsi(const ::std::string& value) {
  set_has_imsi();
  if (imsi_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imsi_ = new ::std::string;
  }
  imsi_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RSALoginReq.imsi)
}
inline void RSALoginReq::set_imsi(const char* value) {
  set_has_imsi();
  if (imsi_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imsi_ = new ::std::string;
  }
  imsi_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RSALoginReq.imsi)
}
inline void RSALoginReq::set_imsi(const char* value, size_t size) {
  set_has_imsi();
  if (imsi_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imsi_ = new ::std::string;
  }
  imsi_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RSALoginReq.imsi)
}
inline ::std::string* RSALoginReq::mutable_imsi() {
  set_has_imsi();
  if (imsi_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imsi_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RSALoginReq.imsi)
  return imsi_;
}
inline ::std::string* RSALoginReq::release_imsi() {
  clear_has_imsi();
  if (imsi_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = imsi_;
    imsi_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RSALoginReq::set_allocated_imsi(::std::string* imsi) {
  if (imsi_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imsi_;
  }
  if (imsi) {
    set_has_imsi();
    imsi_ = imsi;
  } else {
    clear_has_imsi();
    imsi_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RSALoginReq.imsi)
}

// required string imei = 3;
inline bool RSALoginReq::has_imei() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RSALoginReq::set_has_imei() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RSALoginReq::clear_has_imei() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RSALoginReq::clear_imei() {
  if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imei_->clear();
  }
  clear_has_imei();
}
inline const ::std::string& RSALoginReq::imei() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RSALoginReq.imei)
  return *imei_;
}
inline void RSALoginReq::set_imei(const ::std::string& value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RSALoginReq.imei)
}
inline void RSALoginReq::set_imei(const char* value) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imei_ = new ::std::string;
  }
  imei_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RSALoginReq.imei)
}
inline void RSALoginReq::set_imei(const char* value, size_t size) {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imei_ = new ::std::string;
  }
  imei_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RSALoginReq.imei)
}
inline ::std::string* RSALoginReq::mutable_imei() {
  set_has_imei();
  if (imei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imei_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RSALoginReq.imei)
  return imei_;
}
inline ::std::string* RSALoginReq::release_imei() {
  clear_has_imei();
  if (imei_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = imei_;
    imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RSALoginReq::set_allocated_imei(::std::string* imei) {
  if (imei_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imei_;
  }
  if (imei) {
    set_has_imei();
    imei_ = imei;
  } else {
    clear_has_imei();
    imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RSALoginReq.imei)
}

// required string software_version = 4;
inline bool RSALoginReq::has_software_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RSALoginReq::set_has_software_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RSALoginReq::clear_has_software_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RSALoginReq::clear_software_version() {
  if (software_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    software_version_->clear();
  }
  clear_has_software_version();
}
inline const ::std::string& RSALoginReq::software_version() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RSALoginReq.software_version)
  return *software_version_;
}
inline void RSALoginReq::set_software_version(const ::std::string& value) {
  set_has_software_version();
  if (software_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    software_version_ = new ::std::string;
  }
  software_version_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RSALoginReq.software_version)
}
inline void RSALoginReq::set_software_version(const char* value) {
  set_has_software_version();
  if (software_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    software_version_ = new ::std::string;
  }
  software_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RSALoginReq.software_version)
}
inline void RSALoginReq::set_software_version(const char* value, size_t size) {
  set_has_software_version();
  if (software_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    software_version_ = new ::std::string;
  }
  software_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RSALoginReq.software_version)
}
inline ::std::string* RSALoginReq::mutable_software_version() {
  set_has_software_version();
  if (software_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    software_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RSALoginReq.software_version)
  return software_version_;
}
inline ::std::string* RSALoginReq::release_software_version() {
  clear_has_software_version();
  if (software_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = software_version_;
    software_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RSALoginReq::set_allocated_software_version(::std::string* software_version) {
  if (software_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete software_version_;
  }
  if (software_version) {
    set_has_software_version();
    software_version_ = software_version;
  } else {
    clear_has_software_version();
    software_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RSALoginReq.software_version)
}

// required string hardware_version = 5;
inline bool RSALoginReq::has_hardware_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RSALoginReq::set_has_hardware_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RSALoginReq::clear_has_hardware_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RSALoginReq::clear_hardware_version() {
  if (hardware_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hardware_version_->clear();
  }
  clear_has_hardware_version();
}
inline const ::std::string& RSALoginReq::hardware_version() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RSALoginReq.hardware_version)
  return *hardware_version_;
}
inline void RSALoginReq::set_hardware_version(const ::std::string& value) {
  set_has_hardware_version();
  if (hardware_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hardware_version_ = new ::std::string;
  }
  hardware_version_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RSALoginReq.hardware_version)
}
inline void RSALoginReq::set_hardware_version(const char* value) {
  set_has_hardware_version();
  if (hardware_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hardware_version_ = new ::std::string;
  }
  hardware_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RSALoginReq.hardware_version)
}
inline void RSALoginReq::set_hardware_version(const char* value, size_t size) {
  set_has_hardware_version();
  if (hardware_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hardware_version_ = new ::std::string;
  }
  hardware_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RSALoginReq.hardware_version)
}
inline ::std::string* RSALoginReq::mutable_hardware_version() {
  set_has_hardware_version();
  if (hardware_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hardware_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RSALoginReq.hardware_version)
  return hardware_version_;
}
inline ::std::string* RSALoginReq::release_hardware_version() {
  clear_has_hardware_version();
  if (hardware_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hardware_version_;
    hardware_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RSALoginReq::set_allocated_hardware_version(::std::string* hardware_version) {
  if (hardware_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hardware_version_;
  }
  if (hardware_version) {
    set_has_hardware_version();
    hardware_version_ = hardware_version;
  } else {
    clear_has_hardware_version();
    hardware_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RSALoginReq.hardware_version)
}

// required uint32 time_stamp = 6;
inline bool RSALoginReq::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RSALoginReq::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RSALoginReq::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RSALoginReq::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 RSALoginReq::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RSALoginReq.time_stamp)
  return time_stamp_;
}
inline void RSALoginReq::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.RSALoginReq.time_stamp)
}

// optional string g4_version = 7;
inline bool RSALoginReq::has_g4_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RSALoginReq::set_has_g4_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RSALoginReq::clear_has_g4_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RSALoginReq::clear_g4_version() {
  if (g4_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    g4_version_->clear();
  }
  clear_has_g4_version();
}
inline const ::std::string& RSALoginReq::g4_version() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RSALoginReq.g4_version)
  return *g4_version_;
}
inline void RSALoginReq::set_g4_version(const ::std::string& value) {
  set_has_g4_version();
  if (g4_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    g4_version_ = new ::std::string;
  }
  g4_version_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RSALoginReq.g4_version)
}
inline void RSALoginReq::set_g4_version(const char* value) {
  set_has_g4_version();
  if (g4_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    g4_version_ = new ::std::string;
  }
  g4_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RSALoginReq.g4_version)
}
inline void RSALoginReq::set_g4_version(const char* value, size_t size) {
  set_has_g4_version();
  if (g4_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    g4_version_ = new ::std::string;
  }
  g4_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RSALoginReq.g4_version)
}
inline ::std::string* RSALoginReq::mutable_g4_version() {
  set_has_g4_version();
  if (g4_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    g4_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RSALoginReq.g4_version)
  return g4_version_;
}
inline ::std::string* RSALoginReq::release_g4_version() {
  clear_has_g4_version();
  if (g4_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = g4_version_;
    g4_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RSALoginReq::set_allocated_g4_version(::std::string* g4_version) {
  if (g4_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete g4_version_;
  }
  if (g4_version) {
    set_has_g4_version();
    g4_version_ = g4_version;
  } else {
    clear_has_g4_version();
    g4_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RSALoginReq.g4_version)
}

// optional string vehicle_type = 8;
inline bool RSALoginReq::has_vehicle_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RSALoginReq::set_has_vehicle_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RSALoginReq::clear_has_vehicle_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RSALoginReq::clear_vehicle_type() {
  if (vehicle_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vehicle_type_->clear();
  }
  clear_has_vehicle_type();
}
inline const ::std::string& RSALoginReq::vehicle_type() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RSALoginReq.vehicle_type)
  return *vehicle_type_;
}
inline void RSALoginReq::set_vehicle_type(const ::std::string& value) {
  set_has_vehicle_type();
  if (vehicle_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vehicle_type_ = new ::std::string;
  }
  vehicle_type_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RSALoginReq.vehicle_type)
}
inline void RSALoginReq::set_vehicle_type(const char* value) {
  set_has_vehicle_type();
  if (vehicle_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vehicle_type_ = new ::std::string;
  }
  vehicle_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RSALoginReq.vehicle_type)
}
inline void RSALoginReq::set_vehicle_type(const char* value, size_t size) {
  set_has_vehicle_type();
  if (vehicle_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vehicle_type_ = new ::std::string;
  }
  vehicle_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RSALoginReq.vehicle_type)
}
inline ::std::string* RSALoginReq::mutable_vehicle_type() {
  set_has_vehicle_type();
  if (vehicle_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vehicle_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RSALoginReq.vehicle_type)
  return vehicle_type_;
}
inline ::std::string* RSALoginReq::release_vehicle_type() {
  clear_has_vehicle_type();
  if (vehicle_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vehicle_type_;
    vehicle_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RSALoginReq::set_allocated_vehicle_type(::std::string* vehicle_type) {
  if (vehicle_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vehicle_type_;
  }
  if (vehicle_type) {
    set_has_vehicle_type();
    vehicle_type_ = vehicle_type;
  } else {
    clear_has_vehicle_type();
    vehicle_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RSALoginReq.vehicle_type)
}

// -------------------------------------------------------------------

// SendRSARsp

// required uint32 errcode = 1;
inline bool SendRSARsp::has_errcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendRSARsp::set_has_errcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendRSARsp::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendRSARsp::clear_errcode() {
  errcode_ = 0u;
  clear_has_errcode();
}
inline ::google::protobuf::uint32 SendRSARsp::errcode() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRSARsp.errcode)
  return errcode_;
}
inline void SendRSARsp::set_errcode(::google::protobuf::uint32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRSARsp.errcode)
}

// optional uint32 N_len = 2;
inline bool SendRSARsp::has_n_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendRSARsp::set_has_n_len() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendRSARsp::clear_has_n_len() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendRSARsp::clear_n_len() {
  n_len_ = 0u;
  clear_has_n_len();
}
inline ::google::protobuf::uint32 SendRSARsp::n_len() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRSARsp.N_len)
  return n_len_;
}
inline void SendRSARsp::set_n_len(::google::protobuf::uint32 value) {
  set_has_n_len();
  n_len_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRSARsp.N_len)
}

// optional bytes N_string = 3;
inline bool SendRSARsp::has_n_string() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendRSARsp::set_has_n_string() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendRSARsp::clear_has_n_string() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendRSARsp::clear_n_string() {
  if (n_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    n_string_->clear();
  }
  clear_has_n_string();
}
inline const ::std::string& SendRSARsp::n_string() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRSARsp.N_string)
  return *n_string_;
}
inline void SendRSARsp::set_n_string(const ::std::string& value) {
  set_has_n_string();
  if (n_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    n_string_ = new ::std::string;
  }
  n_string_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRSARsp.N_string)
}
inline void SendRSARsp::set_n_string(const char* value) {
  set_has_n_string();
  if (n_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    n_string_ = new ::std::string;
  }
  n_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.SendRSARsp.N_string)
}
inline void SendRSARsp::set_n_string(const void* value, size_t size) {
  set_has_n_string();
  if (n_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    n_string_ = new ::std::string;
  }
  n_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.SendRSARsp.N_string)
}
inline ::std::string* SendRSARsp::mutable_n_string() {
  set_has_n_string();
  if (n_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    n_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.SendRSARsp.N_string)
  return n_string_;
}
inline ::std::string* SendRSARsp::release_n_string() {
  clear_has_n_string();
  if (n_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = n_string_;
    n_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendRSARsp::set_allocated_n_string(::std::string* n_string) {
  if (n_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete n_string_;
  }
  if (n_string) {
    set_has_n_string();
    n_string_ = n_string;
  } else {
    clear_has_n_string();
    n_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.SendRSARsp.N_string)
}

// optional uint32 E1_len = 4;
inline bool SendRSARsp::has_e1_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SendRSARsp::set_has_e1_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SendRSARsp::clear_has_e1_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SendRSARsp::clear_e1_len() {
  e1_len_ = 0u;
  clear_has_e1_len();
}
inline ::google::protobuf::uint32 SendRSARsp::e1_len() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRSARsp.E1_len)
  return e1_len_;
}
inline void SendRSARsp::set_e1_len(::google::protobuf::uint32 value) {
  set_has_e1_len();
  e1_len_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRSARsp.E1_len)
}

// optional bytes E1_string = 5;
inline bool SendRSARsp::has_e1_string() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SendRSARsp::set_has_e1_string() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SendRSARsp::clear_has_e1_string() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SendRSARsp::clear_e1_string() {
  if (e1_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    e1_string_->clear();
  }
  clear_has_e1_string();
}
inline const ::std::string& SendRSARsp::e1_string() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRSARsp.E1_string)
  return *e1_string_;
}
inline void SendRSARsp::set_e1_string(const ::std::string& value) {
  set_has_e1_string();
  if (e1_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    e1_string_ = new ::std::string;
  }
  e1_string_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRSARsp.E1_string)
}
inline void SendRSARsp::set_e1_string(const char* value) {
  set_has_e1_string();
  if (e1_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    e1_string_ = new ::std::string;
  }
  e1_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.SendRSARsp.E1_string)
}
inline void SendRSARsp::set_e1_string(const void* value, size_t size) {
  set_has_e1_string();
  if (e1_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    e1_string_ = new ::std::string;
  }
  e1_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.SendRSARsp.E1_string)
}
inline ::std::string* SendRSARsp::mutable_e1_string() {
  set_has_e1_string();
  if (e1_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    e1_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.SendRSARsp.E1_string)
  return e1_string_;
}
inline ::std::string* SendRSARsp::release_e1_string() {
  clear_has_e1_string();
  if (e1_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = e1_string_;
    e1_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendRSARsp::set_allocated_e1_string(::std::string* e1_string) {
  if (e1_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete e1_string_;
  }
  if (e1_string) {
    set_has_e1_string();
    e1_string_ = e1_string;
  } else {
    clear_has_e1_string();
    e1_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.SendRSARsp.E1_string)
}

// -------------------------------------------------------------------

// SendRC4Req

// required string da_device_sn = 1;
inline bool SendRC4Req::has_da_device_sn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendRC4Req::set_has_da_device_sn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendRC4Req::clear_has_da_device_sn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendRC4Req::clear_da_device_sn() {
  if (da_device_sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    da_device_sn_->clear();
  }
  clear_has_da_device_sn();
}
inline const ::std::string& SendRC4Req::da_device_sn() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRC4Req.da_device_sn)
  return *da_device_sn_;
}
inline void SendRC4Req::set_da_device_sn(const ::std::string& value) {
  set_has_da_device_sn();
  if (da_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    da_device_sn_ = new ::std::string;
  }
  da_device_sn_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRC4Req.da_device_sn)
}
inline void SendRC4Req::set_da_device_sn(const char* value) {
  set_has_da_device_sn();
  if (da_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    da_device_sn_ = new ::std::string;
  }
  da_device_sn_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.SendRC4Req.da_device_sn)
}
inline void SendRC4Req::set_da_device_sn(const char* value, size_t size) {
  set_has_da_device_sn();
  if (da_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    da_device_sn_ = new ::std::string;
  }
  da_device_sn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.SendRC4Req.da_device_sn)
}
inline ::std::string* SendRC4Req::mutable_da_device_sn() {
  set_has_da_device_sn();
  if (da_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    da_device_sn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.SendRC4Req.da_device_sn)
  return da_device_sn_;
}
inline ::std::string* SendRC4Req::release_da_device_sn() {
  clear_has_da_device_sn();
  if (da_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = da_device_sn_;
    da_device_sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendRC4Req::set_allocated_da_device_sn(::std::string* da_device_sn) {
  if (da_device_sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete da_device_sn_;
  }
  if (da_device_sn) {
    set_has_da_device_sn();
    da_device_sn_ = da_device_sn;
  } else {
    clear_has_da_device_sn();
    da_device_sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.SendRC4Req.da_device_sn)
}

// required string vin = 2;
inline bool SendRC4Req::has_vin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendRC4Req::set_has_vin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendRC4Req::clear_has_vin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendRC4Req::clear_vin() {
  if (vin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vin_->clear();
  }
  clear_has_vin();
}
inline const ::std::string& SendRC4Req::vin() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRC4Req.vin)
  return *vin_;
}
inline void SendRC4Req::set_vin(const ::std::string& value) {
  set_has_vin();
  if (vin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vin_ = new ::std::string;
  }
  vin_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRC4Req.vin)
}
inline void SendRC4Req::set_vin(const char* value) {
  set_has_vin();
  if (vin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vin_ = new ::std::string;
  }
  vin_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.SendRC4Req.vin)
}
inline void SendRC4Req::set_vin(const char* value, size_t size) {
  set_has_vin();
  if (vin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vin_ = new ::std::string;
  }
  vin_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.SendRC4Req.vin)
}
inline ::std::string* SendRC4Req::mutable_vin() {
  set_has_vin();
  if (vin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vin_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.SendRC4Req.vin)
  return vin_;
}
inline ::std::string* SendRC4Req::release_vin() {
  clear_has_vin();
  if (vin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vin_;
    vin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendRC4Req::set_allocated_vin(::std::string* vin) {
  if (vin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vin_;
  }
  if (vin) {
    set_has_vin();
    vin_ = vin;
  } else {
    clear_has_vin();
    vin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.SendRC4Req.vin)
}

// required string iccid = 3;
inline bool SendRC4Req::has_iccid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendRC4Req::set_has_iccid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendRC4Req::clear_has_iccid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendRC4Req::clear_iccid() {
  if (iccid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iccid_->clear();
  }
  clear_has_iccid();
}
inline const ::std::string& SendRC4Req::iccid() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRC4Req.iccid)
  return *iccid_;
}
inline void SendRC4Req::set_iccid(const ::std::string& value) {
  set_has_iccid();
  if (iccid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iccid_ = new ::std::string;
  }
  iccid_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRC4Req.iccid)
}
inline void SendRC4Req::set_iccid(const char* value) {
  set_has_iccid();
  if (iccid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iccid_ = new ::std::string;
  }
  iccid_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.SendRC4Req.iccid)
}
inline void SendRC4Req::set_iccid(const char* value, size_t size) {
  set_has_iccid();
  if (iccid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iccid_ = new ::std::string;
  }
  iccid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.SendRC4Req.iccid)
}
inline ::std::string* SendRC4Req::mutable_iccid() {
  set_has_iccid();
  if (iccid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iccid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.SendRC4Req.iccid)
  return iccid_;
}
inline ::std::string* SendRC4Req::release_iccid() {
  clear_has_iccid();
  if (iccid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = iccid_;
    iccid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendRC4Req::set_allocated_iccid(::std::string* iccid) {
  if (iccid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iccid_;
  }
  if (iccid) {
    set_has_iccid();
    iccid_ = iccid;
  } else {
    clear_has_iccid();
    iccid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.SendRC4Req.iccid)
}

// required uint32 serial_number = 4;
inline bool SendRC4Req::has_serial_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SendRC4Req::set_has_serial_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SendRC4Req::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SendRC4Req::clear_serial_number() {
  serial_number_ = 0u;
  clear_has_serial_number();
}
inline ::google::protobuf::uint32 SendRC4Req::serial_number() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRC4Req.serial_number)
  return serial_number_;
}
inline void SendRC4Req::set_serial_number(::google::protobuf::uint32 value) {
  set_has_serial_number();
  serial_number_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRC4Req.serial_number)
}

// required uint32 key_len = 5;
inline bool SendRC4Req::has_key_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SendRC4Req::set_has_key_len() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SendRC4Req::clear_has_key_len() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SendRC4Req::clear_key_len() {
  key_len_ = 0u;
  clear_has_key_len();
}
inline ::google::protobuf::uint32 SendRC4Req::key_len() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRC4Req.key_len)
  return key_len_;
}
inline void SendRC4Req::set_key_len(::google::protobuf::uint32 value) {
  set_has_key_len();
  key_len_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRC4Req.key_len)
}

// required bytes key = 6;
inline bool SendRC4Req::has_key() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SendRC4Req::set_has_key() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SendRC4Req::clear_has_key() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SendRC4Req::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& SendRC4Req::key() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRC4Req.key)
  return *key_;
}
inline void SendRC4Req::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRC4Req.key)
}
inline void SendRC4Req::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.SendRC4Req.key)
}
inline void SendRC4Req::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.SendRC4Req.key)
}
inline ::std::string* SendRC4Req::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.SendRC4Req.key)
  return key_;
}
inline ::std::string* SendRC4Req::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendRC4Req::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.SendRC4Req.key)
}

// optional bool upgrading = 7;
inline bool SendRC4Req::has_upgrading() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SendRC4Req::set_has_upgrading() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SendRC4Req::clear_has_upgrading() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SendRC4Req::clear_upgrading() {
  upgrading_ = false;
  clear_has_upgrading();
}
inline bool SendRC4Req::upgrading() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRC4Req.upgrading)
  return upgrading_;
}
inline void SendRC4Req::set_upgrading(bool value) {
  set_has_upgrading();
  upgrading_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRC4Req.upgrading)
}

// optional bool bcm_reg_status = 8;
inline bool SendRC4Req::has_bcm_reg_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SendRC4Req::set_has_bcm_reg_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SendRC4Req::clear_has_bcm_reg_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SendRC4Req::clear_bcm_reg_status() {
  bcm_reg_status_ = false;
  clear_has_bcm_reg_status();
}
inline bool SendRC4Req::bcm_reg_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRC4Req.bcm_reg_status)
  return bcm_reg_status_;
}
inline void SendRC4Req::set_bcm_reg_status(bool value) {
  set_has_bcm_reg_status();
  bcm_reg_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRC4Req.bcm_reg_status)
}

// optional uint32 gps_contrlstatus = 9;
inline bool SendRC4Req::has_gps_contrlstatus() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SendRC4Req::set_has_gps_contrlstatus() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SendRC4Req::clear_has_gps_contrlstatus() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SendRC4Req::clear_gps_contrlstatus() {
  gps_contrlstatus_ = 0u;
  clear_has_gps_contrlstatus();
}
inline ::google::protobuf::uint32 SendRC4Req::gps_contrlstatus() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRC4Req.gps_contrlstatus)
  return gps_contrlstatus_;
}
inline void SendRC4Req::set_gps_contrlstatus(::google::protobuf::uint32 value) {
  set_has_gps_contrlstatus();
  gps_contrlstatus_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRC4Req.gps_contrlstatus)
}

// optional uint32 vel_contrlstatus = 10;
inline bool SendRC4Req::has_vel_contrlstatus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SendRC4Req::set_has_vel_contrlstatus() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SendRC4Req::clear_has_vel_contrlstatus() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SendRC4Req::clear_vel_contrlstatus() {
  vel_contrlstatus_ = 0u;
  clear_has_vel_contrlstatus();
}
inline ::google::protobuf::uint32 SendRC4Req::vel_contrlstatus() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRC4Req.vel_contrlstatus)
  return vel_contrlstatus_;
}
inline void SendRC4Req::set_vel_contrlstatus(::google::protobuf::uint32 value) {
  set_has_vel_contrlstatus();
  vel_contrlstatus_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRC4Req.vel_contrlstatus)
}

// -------------------------------------------------------------------

// SendRC4Resp

// required uint32 errcode = 1;
inline bool SendRC4Resp::has_errcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendRC4Resp::set_has_errcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendRC4Resp::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendRC4Resp::clear_errcode() {
  errcode_ = 0u;
  clear_has_errcode();
}
inline ::google::protobuf::uint32 SendRC4Resp::errcode() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRC4Resp.errcode)
  return errcode_;
}
inline void SendRC4Resp::set_errcode(::google::protobuf::uint32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRC4Resp.errcode)
}

// required uint32 serial_number = 2;
inline bool SendRC4Resp::has_serial_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendRC4Resp::set_has_serial_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendRC4Resp::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendRC4Resp::clear_serial_number() {
  serial_number_ = 0u;
  clear_has_serial_number();
}
inline ::google::protobuf::uint32 SendRC4Resp::serial_number() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRC4Resp.serial_number)
  return serial_number_;
}
inline void SendRC4Resp::set_serial_number(::google::protobuf::uint32 value) {
  set_has_serial_number();
  serial_number_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRC4Resp.serial_number)
}

// required uint32 time_stamp = 3;
inline bool SendRC4Resp::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendRC4Resp::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendRC4Resp::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendRC4Resp::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 SendRC4Resp::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRC4Resp.time_stamp)
  return time_stamp_;
}
inline void SendRC4Resp::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.SendRC4Resp.time_stamp)
}

// repeated .tbox.protocol.UpgradeInfo upgradeinfo = 4;
inline int SendRC4Resp::upgradeinfo_size() const {
  return upgradeinfo_.size();
}
inline void SendRC4Resp::clear_upgradeinfo() {
  upgradeinfo_.Clear();
}
inline const ::tbox::protocol::UpgradeInfo& SendRC4Resp::upgradeinfo(int index) const {
  // @@protoc_insertion_point(field_get:tbox.protocol.SendRC4Resp.upgradeinfo)
  return upgradeinfo_.Get(index);
}
inline ::tbox::protocol::UpgradeInfo* SendRC4Resp::mutable_upgradeinfo(int index) {
  // @@protoc_insertion_point(field_mutable:tbox.protocol.SendRC4Resp.upgradeinfo)
  return upgradeinfo_.Mutable(index);
}
inline ::tbox::protocol::UpgradeInfo* SendRC4Resp::add_upgradeinfo() {
  // @@protoc_insertion_point(field_add:tbox.protocol.SendRC4Resp.upgradeinfo)
  return upgradeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tbox::protocol::UpgradeInfo >&
SendRC4Resp::upgradeinfo() const {
  // @@protoc_insertion_point(field_list:tbox.protocol.SendRC4Resp.upgradeinfo)
  return upgradeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::tbox::protocol::UpgradeInfo >*
SendRC4Resp::mutable_upgradeinfo() {
  // @@protoc_insertion_point(field_mutable_list:tbox.protocol.SendRC4Resp.upgradeinfo)
  return &upgradeinfo_;
}

// -------------------------------------------------------------------

// WakeUpDVRRsp

// required uint32 serial_number = 1;
inline bool WakeUpDVRRsp::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WakeUpDVRRsp::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WakeUpDVRRsp::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WakeUpDVRRsp::clear_serial_number() {
  serial_number_ = 0u;
  clear_has_serial_number();
}
inline ::google::protobuf::uint32 WakeUpDVRRsp::serial_number() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.WakeUpDVRRsp.serial_number)
  return serial_number_;
}
inline void WakeUpDVRRsp::set_serial_number(::google::protobuf::uint32 value) {
  set_has_serial_number();
  serial_number_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.WakeUpDVRRsp.serial_number)
}

// required uint32 control_result = 2;
inline bool WakeUpDVRRsp::has_control_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WakeUpDVRRsp::set_has_control_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WakeUpDVRRsp::clear_has_control_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WakeUpDVRRsp::clear_control_result() {
  control_result_ = 0u;
  clear_has_control_result();
}
inline ::google::protobuf::uint32 WakeUpDVRRsp::control_result() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.WakeUpDVRRsp.control_result)
  return control_result_;
}
inline void WakeUpDVRRsp::set_control_result(::google::protobuf::uint32 value) {
  set_has_control_result();
  control_result_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.WakeUpDVRRsp.control_result)
}

// -------------------------------------------------------------------

// WakeUpDVRReq

// required uint32 serial_number = 1;
inline bool WakeUpDVRReq::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WakeUpDVRReq::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WakeUpDVRReq::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WakeUpDVRReq::clear_serial_number() {
  serial_number_ = 0u;
  clear_has_serial_number();
}
inline ::google::protobuf::uint32 WakeUpDVRReq::serial_number() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.WakeUpDVRReq.serial_number)
  return serial_number_;
}
inline void WakeUpDVRReq::set_serial_number(::google::protobuf::uint32 value) {
  set_has_serial_number();
  serial_number_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.WakeUpDVRReq.serial_number)
}

// required uint32 time_stamp = 2;
inline bool WakeUpDVRReq::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WakeUpDVRReq::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WakeUpDVRReq::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WakeUpDVRReq::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 WakeUpDVRReq::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.WakeUpDVRReq.time_stamp)
  return time_stamp_;
}
inline void WakeUpDVRReq::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.WakeUpDVRReq.time_stamp)
}

// -------------------------------------------------------------------

// RmtDiagRsp

// required .tbox.protocol.RmtDiagRspCode result = 1;
inline bool RmtDiagRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RmtDiagRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RmtDiagRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RmtDiagRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::tbox::protocol::RmtDiagRspCode RmtDiagRsp::result() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RmtDiagRsp.result)
  return static_cast< ::tbox::protocol::RmtDiagRspCode >(result_);
}
inline void RmtDiagRsp::set_result(::tbox::protocol::RmtDiagRspCode value) {
  assert(::tbox::protocol::RmtDiagRspCode_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.RmtDiagRsp.result)
}

// required uint32 serial_number = 2;
inline bool RmtDiagRsp::has_serial_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RmtDiagRsp::set_has_serial_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RmtDiagRsp::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RmtDiagRsp::clear_serial_number() {
  serial_number_ = 0u;
  clear_has_serial_number();
}
inline ::google::protobuf::uint32 RmtDiagRsp::serial_number() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RmtDiagRsp.serial_number)
  return serial_number_;
}
inline void RmtDiagRsp::set_serial_number(::google::protobuf::uint32 value) {
  set_has_serial_number();
  serial_number_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.RmtDiagRsp.serial_number)
}

// required uint32 time_stamp = 3;
inline bool RmtDiagRsp::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RmtDiagRsp::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RmtDiagRsp::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RmtDiagRsp::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 RmtDiagRsp::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RmtDiagRsp.time_stamp)
  return time_stamp_;
}
inline void RmtDiagRsp::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.RmtDiagRsp.time_stamp)
}

// optional bytes Diag_AVM = 4;
inline bool RmtDiagRsp::has_diag_avm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RmtDiagRsp::set_has_diag_avm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RmtDiagRsp::clear_has_diag_avm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RmtDiagRsp::clear_diag_avm() {
  if (diag_avm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_avm_->clear();
  }
  clear_has_diag_avm();
}
inline const ::std::string& RmtDiagRsp::diag_avm() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RmtDiagRsp.Diag_AVM)
  return *diag_avm_;
}
inline void RmtDiagRsp::set_diag_avm(const ::std::string& value) {
  set_has_diag_avm();
  if (diag_avm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_avm_ = new ::std::string;
  }
  diag_avm_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RmtDiagRsp.Diag_AVM)
}
inline void RmtDiagRsp::set_diag_avm(const char* value) {
  set_has_diag_avm();
  if (diag_avm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_avm_ = new ::std::string;
  }
  diag_avm_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RmtDiagRsp.Diag_AVM)
}
inline void RmtDiagRsp::set_diag_avm(const void* value, size_t size) {
  set_has_diag_avm();
  if (diag_avm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_avm_ = new ::std::string;
  }
  diag_avm_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RmtDiagRsp.Diag_AVM)
}
inline ::std::string* RmtDiagRsp::mutable_diag_avm() {
  set_has_diag_avm();
  if (diag_avm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_avm_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RmtDiagRsp.Diag_AVM)
  return diag_avm_;
}
inline ::std::string* RmtDiagRsp::release_diag_avm() {
  clear_has_diag_avm();
  if (diag_avm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diag_avm_;
    diag_avm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RmtDiagRsp::set_allocated_diag_avm(::std::string* diag_avm) {
  if (diag_avm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_avm_;
  }
  if (diag_avm) {
    set_has_diag_avm();
    diag_avm_ = diag_avm;
  } else {
    clear_has_diag_avm();
    diag_avm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RmtDiagRsp.Diag_AVM)
}

// optional bytes Diag_SONAR = 5;
inline bool RmtDiagRsp::has_diag_sonar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RmtDiagRsp::set_has_diag_sonar() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RmtDiagRsp::clear_has_diag_sonar() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RmtDiagRsp::clear_diag_sonar() {
  if (diag_sonar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_sonar_->clear();
  }
  clear_has_diag_sonar();
}
inline const ::std::string& RmtDiagRsp::diag_sonar() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RmtDiagRsp.Diag_SONAR)
  return *diag_sonar_;
}
inline void RmtDiagRsp::set_diag_sonar(const ::std::string& value) {
  set_has_diag_sonar();
  if (diag_sonar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_sonar_ = new ::std::string;
  }
  diag_sonar_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RmtDiagRsp.Diag_SONAR)
}
inline void RmtDiagRsp::set_diag_sonar(const char* value) {
  set_has_diag_sonar();
  if (diag_sonar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_sonar_ = new ::std::string;
  }
  diag_sonar_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RmtDiagRsp.Diag_SONAR)
}
inline void RmtDiagRsp::set_diag_sonar(const void* value, size_t size) {
  set_has_diag_sonar();
  if (diag_sonar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_sonar_ = new ::std::string;
  }
  diag_sonar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RmtDiagRsp.Diag_SONAR)
}
inline ::std::string* RmtDiagRsp::mutable_diag_sonar() {
  set_has_diag_sonar();
  if (diag_sonar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_sonar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RmtDiagRsp.Diag_SONAR)
  return diag_sonar_;
}
inline ::std::string* RmtDiagRsp::release_diag_sonar() {
  clear_has_diag_sonar();
  if (diag_sonar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diag_sonar_;
    diag_sonar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RmtDiagRsp::set_allocated_diag_sonar(::std::string* diag_sonar) {
  if (diag_sonar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_sonar_;
  }
  if (diag_sonar) {
    set_has_diag_sonar();
    diag_sonar_ = diag_sonar;
  } else {
    clear_has_diag_sonar();
    diag_sonar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RmtDiagRsp.Diag_SONAR)
}

// optional bytes Diag_BSW = 6;
inline bool RmtDiagRsp::has_diag_bsw() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RmtDiagRsp::set_has_diag_bsw() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RmtDiagRsp::clear_has_diag_bsw() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RmtDiagRsp::clear_diag_bsw() {
  if (diag_bsw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_bsw_->clear();
  }
  clear_has_diag_bsw();
}
inline const ::std::string& RmtDiagRsp::diag_bsw() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RmtDiagRsp.Diag_BSW)
  return *diag_bsw_;
}
inline void RmtDiagRsp::set_diag_bsw(const ::std::string& value) {
  set_has_diag_bsw();
  if (diag_bsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_bsw_ = new ::std::string;
  }
  diag_bsw_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RmtDiagRsp.Diag_BSW)
}
inline void RmtDiagRsp::set_diag_bsw(const char* value) {
  set_has_diag_bsw();
  if (diag_bsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_bsw_ = new ::std::string;
  }
  diag_bsw_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RmtDiagRsp.Diag_BSW)
}
inline void RmtDiagRsp::set_diag_bsw(const void* value, size_t size) {
  set_has_diag_bsw();
  if (diag_bsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_bsw_ = new ::std::string;
  }
  diag_bsw_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RmtDiagRsp.Diag_BSW)
}
inline ::std::string* RmtDiagRsp::mutable_diag_bsw() {
  set_has_diag_bsw();
  if (diag_bsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_bsw_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RmtDiagRsp.Diag_BSW)
  return diag_bsw_;
}
inline ::std::string* RmtDiagRsp::release_diag_bsw() {
  clear_has_diag_bsw();
  if (diag_bsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diag_bsw_;
    diag_bsw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RmtDiagRsp::set_allocated_diag_bsw(::std::string* diag_bsw) {
  if (diag_bsw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_bsw_;
  }
  if (diag_bsw) {
    set_has_diag_bsw();
    diag_bsw_ = diag_bsw;
  } else {
    clear_has_diag_bsw();
    diag_bsw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RmtDiagRsp.Diag_BSW)
}

// optional bytes Diag_ECM = 7;
inline bool RmtDiagRsp::has_diag_ecm() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RmtDiagRsp::set_has_diag_ecm() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RmtDiagRsp::clear_has_diag_ecm() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RmtDiagRsp::clear_diag_ecm() {
  if (diag_ecm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_ecm_->clear();
  }
  clear_has_diag_ecm();
}
inline const ::std::string& RmtDiagRsp::diag_ecm() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RmtDiagRsp.Diag_ECM)
  return *diag_ecm_;
}
inline void RmtDiagRsp::set_diag_ecm(const ::std::string& value) {
  set_has_diag_ecm();
  if (diag_ecm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_ecm_ = new ::std::string;
  }
  diag_ecm_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RmtDiagRsp.Diag_ECM)
}
inline void RmtDiagRsp::set_diag_ecm(const char* value) {
  set_has_diag_ecm();
  if (diag_ecm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_ecm_ = new ::std::string;
  }
  diag_ecm_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RmtDiagRsp.Diag_ECM)
}
inline void RmtDiagRsp::set_diag_ecm(const void* value, size_t size) {
  set_has_diag_ecm();
  if (diag_ecm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_ecm_ = new ::std::string;
  }
  diag_ecm_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RmtDiagRsp.Diag_ECM)
}
inline ::std::string* RmtDiagRsp::mutable_diag_ecm() {
  set_has_diag_ecm();
  if (diag_ecm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_ecm_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RmtDiagRsp.Diag_ECM)
  return diag_ecm_;
}
inline ::std::string* RmtDiagRsp::release_diag_ecm() {
  clear_has_diag_ecm();
  if (diag_ecm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diag_ecm_;
    diag_ecm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RmtDiagRsp::set_allocated_diag_ecm(::std::string* diag_ecm) {
  if (diag_ecm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_ecm_;
  }
  if (diag_ecm) {
    set_has_diag_ecm();
    diag_ecm_ = diag_ecm;
  } else {
    clear_has_diag_ecm();
    diag_ecm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RmtDiagRsp.Diag_ECM)
}

// optional bytes Diag_TCM = 8;
inline bool RmtDiagRsp::has_diag_tcm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RmtDiagRsp::set_has_diag_tcm() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RmtDiagRsp::clear_has_diag_tcm() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RmtDiagRsp::clear_diag_tcm() {
  if (diag_tcm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_tcm_->clear();
  }
  clear_has_diag_tcm();
}
inline const ::std::string& RmtDiagRsp::diag_tcm() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RmtDiagRsp.Diag_TCM)
  return *diag_tcm_;
}
inline void RmtDiagRsp::set_diag_tcm(const ::std::string& value) {
  set_has_diag_tcm();
  if (diag_tcm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_tcm_ = new ::std::string;
  }
  diag_tcm_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RmtDiagRsp.Diag_TCM)
}
inline void RmtDiagRsp::set_diag_tcm(const char* value) {
  set_has_diag_tcm();
  if (diag_tcm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_tcm_ = new ::std::string;
  }
  diag_tcm_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RmtDiagRsp.Diag_TCM)
}
inline void RmtDiagRsp::set_diag_tcm(const void* value, size_t size) {
  set_has_diag_tcm();
  if (diag_tcm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_tcm_ = new ::std::string;
  }
  diag_tcm_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RmtDiagRsp.Diag_TCM)
}
inline ::std::string* RmtDiagRsp::mutable_diag_tcm() {
  set_has_diag_tcm();
  if (diag_tcm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_tcm_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RmtDiagRsp.Diag_TCM)
  return diag_tcm_;
}
inline ::std::string* RmtDiagRsp::release_diag_tcm() {
  clear_has_diag_tcm();
  if (diag_tcm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diag_tcm_;
    diag_tcm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RmtDiagRsp::set_allocated_diag_tcm(::std::string* diag_tcm) {
  if (diag_tcm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_tcm_;
  }
  if (diag_tcm) {
    set_has_diag_tcm();
    diag_tcm_ = diag_tcm;
  } else {
    clear_has_diag_tcm();
    diag_tcm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RmtDiagRsp.Diag_TCM)
}

// optional bytes Diag_USM = 9;
inline bool RmtDiagRsp::has_diag_usm() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RmtDiagRsp::set_has_diag_usm() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RmtDiagRsp::clear_has_diag_usm() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RmtDiagRsp::clear_diag_usm() {
  if (diag_usm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_usm_->clear();
  }
  clear_has_diag_usm();
}
inline const ::std::string& RmtDiagRsp::diag_usm() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RmtDiagRsp.Diag_USM)
  return *diag_usm_;
}
inline void RmtDiagRsp::set_diag_usm(const ::std::string& value) {
  set_has_diag_usm();
  if (diag_usm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_usm_ = new ::std::string;
  }
  diag_usm_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RmtDiagRsp.Diag_USM)
}
inline void RmtDiagRsp::set_diag_usm(const char* value) {
  set_has_diag_usm();
  if (diag_usm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_usm_ = new ::std::string;
  }
  diag_usm_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RmtDiagRsp.Diag_USM)
}
inline void RmtDiagRsp::set_diag_usm(const void* value, size_t size) {
  set_has_diag_usm();
  if (diag_usm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_usm_ = new ::std::string;
  }
  diag_usm_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RmtDiagRsp.Diag_USM)
}
inline ::std::string* RmtDiagRsp::mutable_diag_usm() {
  set_has_diag_usm();
  if (diag_usm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_usm_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RmtDiagRsp.Diag_USM)
  return diag_usm_;
}
inline ::std::string* RmtDiagRsp::release_diag_usm() {
  clear_has_diag_usm();
  if (diag_usm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diag_usm_;
    diag_usm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RmtDiagRsp::set_allocated_diag_usm(::std::string* diag_usm) {
  if (diag_usm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_usm_;
  }
  if (diag_usm) {
    set_has_diag_usm();
    diag_usm_ = diag_usm;
  } else {
    clear_has_diag_usm();
    diag_usm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RmtDiagRsp.Diag_USM)
}

// optional bytes Diag_BCM = 10;
inline bool RmtDiagRsp::has_diag_bcm() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RmtDiagRsp::set_has_diag_bcm() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RmtDiagRsp::clear_has_diag_bcm() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RmtDiagRsp::clear_diag_bcm() {
  if (diag_bcm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_bcm_->clear();
  }
  clear_has_diag_bcm();
}
inline const ::std::string& RmtDiagRsp::diag_bcm() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RmtDiagRsp.Diag_BCM)
  return *diag_bcm_;
}
inline void RmtDiagRsp::set_diag_bcm(const ::std::string& value) {
  set_has_diag_bcm();
  if (diag_bcm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_bcm_ = new ::std::string;
  }
  diag_bcm_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RmtDiagRsp.Diag_BCM)
}
inline void RmtDiagRsp::set_diag_bcm(const char* value) {
  set_has_diag_bcm();
  if (diag_bcm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_bcm_ = new ::std::string;
  }
  diag_bcm_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RmtDiagRsp.Diag_BCM)
}
inline void RmtDiagRsp::set_diag_bcm(const void* value, size_t size) {
  set_has_diag_bcm();
  if (diag_bcm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_bcm_ = new ::std::string;
  }
  diag_bcm_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RmtDiagRsp.Diag_BCM)
}
inline ::std::string* RmtDiagRsp::mutable_diag_bcm() {
  set_has_diag_bcm();
  if (diag_bcm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_bcm_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RmtDiagRsp.Diag_BCM)
  return diag_bcm_;
}
inline ::std::string* RmtDiagRsp::release_diag_bcm() {
  clear_has_diag_bcm();
  if (diag_bcm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diag_bcm_;
    diag_bcm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RmtDiagRsp::set_allocated_diag_bcm(::std::string* diag_bcm) {
  if (diag_bcm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_bcm_;
  }
  if (diag_bcm) {
    set_has_diag_bcm();
    diag_bcm_ = diag_bcm;
  } else {
    clear_has_diag_bcm();
    diag_bcm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RmtDiagRsp.Diag_BCM)
}

// optional bytes Diag_FEB_CAMERA = 11;
inline bool RmtDiagRsp::has_diag_feb_camera() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RmtDiagRsp::set_has_diag_feb_camera() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RmtDiagRsp::clear_has_diag_feb_camera() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RmtDiagRsp::clear_diag_feb_camera() {
  if (diag_feb_camera_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_feb_camera_->clear();
  }
  clear_has_diag_feb_camera();
}
inline const ::std::string& RmtDiagRsp::diag_feb_camera() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RmtDiagRsp.Diag_FEB_CAMERA)
  return *diag_feb_camera_;
}
inline void RmtDiagRsp::set_diag_feb_camera(const ::std::string& value) {
  set_has_diag_feb_camera();
  if (diag_feb_camera_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_feb_camera_ = new ::std::string;
  }
  diag_feb_camera_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RmtDiagRsp.Diag_FEB_CAMERA)
}
inline void RmtDiagRsp::set_diag_feb_camera(const char* value) {
  set_has_diag_feb_camera();
  if (diag_feb_camera_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_feb_camera_ = new ::std::string;
  }
  diag_feb_camera_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RmtDiagRsp.Diag_FEB_CAMERA)
}
inline void RmtDiagRsp::set_diag_feb_camera(const void* value, size_t size) {
  set_has_diag_feb_camera();
  if (diag_feb_camera_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_feb_camera_ = new ::std::string;
  }
  diag_feb_camera_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RmtDiagRsp.Diag_FEB_CAMERA)
}
inline ::std::string* RmtDiagRsp::mutable_diag_feb_camera() {
  set_has_diag_feb_camera();
  if (diag_feb_camera_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_feb_camera_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RmtDiagRsp.Diag_FEB_CAMERA)
  return diag_feb_camera_;
}
inline ::std::string* RmtDiagRsp::release_diag_feb_camera() {
  clear_has_diag_feb_camera();
  if (diag_feb_camera_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diag_feb_camera_;
    diag_feb_camera_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RmtDiagRsp::set_allocated_diag_feb_camera(::std::string* diag_feb_camera) {
  if (diag_feb_camera_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_feb_camera_;
  }
  if (diag_feb_camera) {
    set_has_diag_feb_camera();
    diag_feb_camera_ = diag_feb_camera;
  } else {
    clear_has_diag_feb_camera();
    diag_feb_camera_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RmtDiagRsp.Diag_FEB_CAMERA)
}

// optional bytes Diag_FEB_RADAR = 12;
inline bool RmtDiagRsp::has_diag_feb_radar() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RmtDiagRsp::set_has_diag_feb_radar() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RmtDiagRsp::clear_has_diag_feb_radar() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RmtDiagRsp::clear_diag_feb_radar() {
  if (diag_feb_radar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_feb_radar_->clear();
  }
  clear_has_diag_feb_radar();
}
inline const ::std::string& RmtDiagRsp::diag_feb_radar() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RmtDiagRsp.Diag_FEB_RADAR)
  return *diag_feb_radar_;
}
inline void RmtDiagRsp::set_diag_feb_radar(const ::std::string& value) {
  set_has_diag_feb_radar();
  if (diag_feb_radar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_feb_radar_ = new ::std::string;
  }
  diag_feb_radar_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RmtDiagRsp.Diag_FEB_RADAR)
}
inline void RmtDiagRsp::set_diag_feb_radar(const char* value) {
  set_has_diag_feb_radar();
  if (diag_feb_radar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_feb_radar_ = new ::std::string;
  }
  diag_feb_radar_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RmtDiagRsp.Diag_FEB_RADAR)
}
inline void RmtDiagRsp::set_diag_feb_radar(const void* value, size_t size) {
  set_has_diag_feb_radar();
  if (diag_feb_radar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_feb_radar_ = new ::std::string;
  }
  diag_feb_radar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RmtDiagRsp.Diag_FEB_RADAR)
}
inline ::std::string* RmtDiagRsp::mutable_diag_feb_radar() {
  set_has_diag_feb_radar();
  if (diag_feb_radar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_feb_radar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RmtDiagRsp.Diag_FEB_RADAR)
  return diag_feb_radar_;
}
inline ::std::string* RmtDiagRsp::release_diag_feb_radar() {
  clear_has_diag_feb_radar();
  if (diag_feb_radar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diag_feb_radar_;
    diag_feb_radar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RmtDiagRsp::set_allocated_diag_feb_radar(::std::string* diag_feb_radar) {
  if (diag_feb_radar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_feb_radar_;
  }
  if (diag_feb_radar) {
    set_has_diag_feb_radar();
    diag_feb_radar_ = diag_feb_radar;
  } else {
    clear_has_diag_feb_radar();
    diag_feb_radar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RmtDiagRsp.Diag_FEB_RADAR)
}

// optional bytes Diag_DVR = 13;
inline bool RmtDiagRsp::has_diag_dvr() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RmtDiagRsp::set_has_diag_dvr() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RmtDiagRsp::clear_has_diag_dvr() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RmtDiagRsp::clear_diag_dvr() {
  if (diag_dvr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_dvr_->clear();
  }
  clear_has_diag_dvr();
}
inline const ::std::string& RmtDiagRsp::diag_dvr() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RmtDiagRsp.Diag_DVR)
  return *diag_dvr_;
}
inline void RmtDiagRsp::set_diag_dvr(const ::std::string& value) {
  set_has_diag_dvr();
  if (diag_dvr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_dvr_ = new ::std::string;
  }
  diag_dvr_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RmtDiagRsp.Diag_DVR)
}
inline void RmtDiagRsp::set_diag_dvr(const char* value) {
  set_has_diag_dvr();
  if (diag_dvr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_dvr_ = new ::std::string;
  }
  diag_dvr_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RmtDiagRsp.Diag_DVR)
}
inline void RmtDiagRsp::set_diag_dvr(const void* value, size_t size) {
  set_has_diag_dvr();
  if (diag_dvr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_dvr_ = new ::std::string;
  }
  diag_dvr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RmtDiagRsp.Diag_DVR)
}
inline ::std::string* RmtDiagRsp::mutable_diag_dvr() {
  set_has_diag_dvr();
  if (diag_dvr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_dvr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RmtDiagRsp.Diag_DVR)
  return diag_dvr_;
}
inline ::std::string* RmtDiagRsp::release_diag_dvr() {
  clear_has_diag_dvr();
  if (diag_dvr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diag_dvr_;
    diag_dvr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RmtDiagRsp::set_allocated_diag_dvr(::std::string* diag_dvr) {
  if (diag_dvr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_dvr_;
  }
  if (diag_dvr) {
    set_has_diag_dvr();
    diag_dvr_ = diag_dvr;
  } else {
    clear_has_diag_dvr();
    diag_dvr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RmtDiagRsp.Diag_DVR)
}

// optional bytes Diag_VDC = 14;
inline bool RmtDiagRsp::has_diag_vdc() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RmtDiagRsp::set_has_diag_vdc() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RmtDiagRsp::clear_has_diag_vdc() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RmtDiagRsp::clear_diag_vdc() {
  if (diag_vdc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_vdc_->clear();
  }
  clear_has_diag_vdc();
}
inline const ::std::string& RmtDiagRsp::diag_vdc() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RmtDiagRsp.Diag_VDC)
  return *diag_vdc_;
}
inline void RmtDiagRsp::set_diag_vdc(const ::std::string& value) {
  set_has_diag_vdc();
  if (diag_vdc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_vdc_ = new ::std::string;
  }
  diag_vdc_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RmtDiagRsp.Diag_VDC)
}
inline void RmtDiagRsp::set_diag_vdc(const char* value) {
  set_has_diag_vdc();
  if (diag_vdc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_vdc_ = new ::std::string;
  }
  diag_vdc_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RmtDiagRsp.Diag_VDC)
}
inline void RmtDiagRsp::set_diag_vdc(const void* value, size_t size) {
  set_has_diag_vdc();
  if (diag_vdc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_vdc_ = new ::std::string;
  }
  diag_vdc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RmtDiagRsp.Diag_VDC)
}
inline ::std::string* RmtDiagRsp::mutable_diag_vdc() {
  set_has_diag_vdc();
  if (diag_vdc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_vdc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RmtDiagRsp.Diag_VDC)
  return diag_vdc_;
}
inline ::std::string* RmtDiagRsp::release_diag_vdc() {
  clear_has_diag_vdc();
  if (diag_vdc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diag_vdc_;
    diag_vdc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RmtDiagRsp::set_allocated_diag_vdc(::std::string* diag_vdc) {
  if (diag_vdc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_vdc_;
  }
  if (diag_vdc) {
    set_has_diag_vdc();
    diag_vdc_ = diag_vdc;
  } else {
    clear_has_diag_vdc();
    diag_vdc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RmtDiagRsp.Diag_VDC)
}

// optional bytes Diag_EPS = 15;
inline bool RmtDiagRsp::has_diag_eps() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RmtDiagRsp::set_has_diag_eps() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RmtDiagRsp::clear_has_diag_eps() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RmtDiagRsp::clear_diag_eps() {
  if (diag_eps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_eps_->clear();
  }
  clear_has_diag_eps();
}
inline const ::std::string& RmtDiagRsp::diag_eps() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RmtDiagRsp.Diag_EPS)
  return *diag_eps_;
}
inline void RmtDiagRsp::set_diag_eps(const ::std::string& value) {
  set_has_diag_eps();
  if (diag_eps_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_eps_ = new ::std::string;
  }
  diag_eps_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RmtDiagRsp.Diag_EPS)
}
inline void RmtDiagRsp::set_diag_eps(const char* value) {
  set_has_diag_eps();
  if (diag_eps_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_eps_ = new ::std::string;
  }
  diag_eps_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RmtDiagRsp.Diag_EPS)
}
inline void RmtDiagRsp::set_diag_eps(const void* value, size_t size) {
  set_has_diag_eps();
  if (diag_eps_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_eps_ = new ::std::string;
  }
  diag_eps_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RmtDiagRsp.Diag_EPS)
}
inline ::std::string* RmtDiagRsp::mutable_diag_eps() {
  set_has_diag_eps();
  if (diag_eps_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_eps_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RmtDiagRsp.Diag_EPS)
  return diag_eps_;
}
inline ::std::string* RmtDiagRsp::release_diag_eps() {
  clear_has_diag_eps();
  if (diag_eps_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diag_eps_;
    diag_eps_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RmtDiagRsp::set_allocated_diag_eps(::std::string* diag_eps) {
  if (diag_eps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_eps_;
  }
  if (diag_eps) {
    set_has_diag_eps();
    diag_eps_ = diag_eps;
  } else {
    clear_has_diag_eps();
    diag_eps_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RmtDiagRsp.Diag_EPS)
}

// optional bytes Diag_GW = 16;
inline bool RmtDiagRsp::has_diag_gw() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RmtDiagRsp::set_has_diag_gw() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RmtDiagRsp::clear_has_diag_gw() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RmtDiagRsp::clear_diag_gw() {
  if (diag_gw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_gw_->clear();
  }
  clear_has_diag_gw();
}
inline const ::std::string& RmtDiagRsp::diag_gw() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RmtDiagRsp.Diag_GW)
  return *diag_gw_;
}
inline void RmtDiagRsp::set_diag_gw(const ::std::string& value) {
  set_has_diag_gw();
  if (diag_gw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_gw_ = new ::std::string;
  }
  diag_gw_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RmtDiagRsp.Diag_GW)
}
inline void RmtDiagRsp::set_diag_gw(const char* value) {
  set_has_diag_gw();
  if (diag_gw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_gw_ = new ::std::string;
  }
  diag_gw_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RmtDiagRsp.Diag_GW)
}
inline void RmtDiagRsp::set_diag_gw(const void* value, size_t size) {
  set_has_diag_gw();
  if (diag_gw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_gw_ = new ::std::string;
  }
  diag_gw_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RmtDiagRsp.Diag_GW)
}
inline ::std::string* RmtDiagRsp::mutable_diag_gw() {
  set_has_diag_gw();
  if (diag_gw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_gw_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RmtDiagRsp.Diag_GW)
  return diag_gw_;
}
inline ::std::string* RmtDiagRsp::release_diag_gw() {
  clear_has_diag_gw();
  if (diag_gw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diag_gw_;
    diag_gw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RmtDiagRsp::set_allocated_diag_gw(::std::string* diag_gw) {
  if (diag_gw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_gw_;
  }
  if (diag_gw) {
    set_has_diag_gw();
    diag_gw_ = diag_gw;
  } else {
    clear_has_diag_gw();
    diag_gw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RmtDiagRsp.Diag_GW)
}

// optional bytes Diag_TPMS = 17;
inline bool RmtDiagRsp::has_diag_tpms() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RmtDiagRsp::set_has_diag_tpms() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RmtDiagRsp::clear_has_diag_tpms() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RmtDiagRsp::clear_diag_tpms() {
  if (diag_tpms_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_tpms_->clear();
  }
  clear_has_diag_tpms();
}
inline const ::std::string& RmtDiagRsp::diag_tpms() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RmtDiagRsp.Diag_TPMS)
  return *diag_tpms_;
}
inline void RmtDiagRsp::set_diag_tpms(const ::std::string& value) {
  set_has_diag_tpms();
  if (diag_tpms_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_tpms_ = new ::std::string;
  }
  diag_tpms_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RmtDiagRsp.Diag_TPMS)
}
inline void RmtDiagRsp::set_diag_tpms(const char* value) {
  set_has_diag_tpms();
  if (diag_tpms_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_tpms_ = new ::std::string;
  }
  diag_tpms_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RmtDiagRsp.Diag_TPMS)
}
inline void RmtDiagRsp::set_diag_tpms(const void* value, size_t size) {
  set_has_diag_tpms();
  if (diag_tpms_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_tpms_ = new ::std::string;
  }
  diag_tpms_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RmtDiagRsp.Diag_TPMS)
}
inline ::std::string* RmtDiagRsp::mutable_diag_tpms() {
  set_has_diag_tpms();
  if (diag_tpms_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_tpms_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RmtDiagRsp.Diag_TPMS)
  return diag_tpms_;
}
inline ::std::string* RmtDiagRsp::release_diag_tpms() {
  clear_has_diag_tpms();
  if (diag_tpms_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diag_tpms_;
    diag_tpms_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RmtDiagRsp::set_allocated_diag_tpms(::std::string* diag_tpms) {
  if (diag_tpms_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_tpms_;
  }
  if (diag_tpms) {
    set_has_diag_tpms();
    diag_tpms_ = diag_tpms;
  } else {
    clear_has_diag_tpms();
    diag_tpms_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RmtDiagRsp.Diag_TPMS)
}

// optional bytes Diag_METER = 18;
inline bool RmtDiagRsp::has_diag_meter() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RmtDiagRsp::set_has_diag_meter() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RmtDiagRsp::clear_has_diag_meter() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RmtDiagRsp::clear_diag_meter() {
  if (diag_meter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_meter_->clear();
  }
  clear_has_diag_meter();
}
inline const ::std::string& RmtDiagRsp::diag_meter() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RmtDiagRsp.Diag_METER)
  return *diag_meter_;
}
inline void RmtDiagRsp::set_diag_meter(const ::std::string& value) {
  set_has_diag_meter();
  if (diag_meter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_meter_ = new ::std::string;
  }
  diag_meter_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RmtDiagRsp.Diag_METER)
}
inline void RmtDiagRsp::set_diag_meter(const char* value) {
  set_has_diag_meter();
  if (diag_meter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_meter_ = new ::std::string;
  }
  diag_meter_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RmtDiagRsp.Diag_METER)
}
inline void RmtDiagRsp::set_diag_meter(const void* value, size_t size) {
  set_has_diag_meter();
  if (diag_meter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_meter_ = new ::std::string;
  }
  diag_meter_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RmtDiagRsp.Diag_METER)
}
inline ::std::string* RmtDiagRsp::mutable_diag_meter() {
  set_has_diag_meter();
  if (diag_meter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_meter_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RmtDiagRsp.Diag_METER)
  return diag_meter_;
}
inline ::std::string* RmtDiagRsp::release_diag_meter() {
  clear_has_diag_meter();
  if (diag_meter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diag_meter_;
    diag_meter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RmtDiagRsp::set_allocated_diag_meter(::std::string* diag_meter) {
  if (diag_meter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_meter_;
  }
  if (diag_meter) {
    set_has_diag_meter();
    diag_meter_ = diag_meter;
  } else {
    clear_has_diag_meter();
    diag_meter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RmtDiagRsp.Diag_METER)
}

// optional bytes Diag_TCU = 19;
inline bool RmtDiagRsp::has_diag_tcu() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RmtDiagRsp::set_has_diag_tcu() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RmtDiagRsp::clear_has_diag_tcu() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RmtDiagRsp::clear_diag_tcu() {
  if (diag_tcu_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_tcu_->clear();
  }
  clear_has_diag_tcu();
}
inline const ::std::string& RmtDiagRsp::diag_tcu() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RmtDiagRsp.Diag_TCU)
  return *diag_tcu_;
}
inline void RmtDiagRsp::set_diag_tcu(const ::std::string& value) {
  set_has_diag_tcu();
  if (diag_tcu_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_tcu_ = new ::std::string;
  }
  diag_tcu_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RmtDiagRsp.Diag_TCU)
}
inline void RmtDiagRsp::set_diag_tcu(const char* value) {
  set_has_diag_tcu();
  if (diag_tcu_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_tcu_ = new ::std::string;
  }
  diag_tcu_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RmtDiagRsp.Diag_TCU)
}
inline void RmtDiagRsp::set_diag_tcu(const void* value, size_t size) {
  set_has_diag_tcu();
  if (diag_tcu_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_tcu_ = new ::std::string;
  }
  diag_tcu_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RmtDiagRsp.Diag_TCU)
}
inline ::std::string* RmtDiagRsp::mutable_diag_tcu() {
  set_has_diag_tcu();
  if (diag_tcu_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_tcu_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RmtDiagRsp.Diag_TCU)
  return diag_tcu_;
}
inline ::std::string* RmtDiagRsp::release_diag_tcu() {
  clear_has_diag_tcu();
  if (diag_tcu_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diag_tcu_;
    diag_tcu_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RmtDiagRsp::set_allocated_diag_tcu(::std::string* diag_tcu) {
  if (diag_tcu_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_tcu_;
  }
  if (diag_tcu) {
    set_has_diag_tcu();
    diag_tcu_ = diag_tcu;
  } else {
    clear_has_diag_tcu();
    diag_tcu_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RmtDiagRsp.Diag_TCU)
}

// optional bytes Diag_ACU = 20;
inline bool RmtDiagRsp::has_diag_acu() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RmtDiagRsp::set_has_diag_acu() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RmtDiagRsp::clear_has_diag_acu() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RmtDiagRsp::clear_diag_acu() {
  if (diag_acu_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_acu_->clear();
  }
  clear_has_diag_acu();
}
inline const ::std::string& RmtDiagRsp::diag_acu() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RmtDiagRsp.Diag_ACU)
  return *diag_acu_;
}
inline void RmtDiagRsp::set_diag_acu(const ::std::string& value) {
  set_has_diag_acu();
  if (diag_acu_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_acu_ = new ::std::string;
  }
  diag_acu_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RmtDiagRsp.Diag_ACU)
}
inline void RmtDiagRsp::set_diag_acu(const char* value) {
  set_has_diag_acu();
  if (diag_acu_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_acu_ = new ::std::string;
  }
  diag_acu_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RmtDiagRsp.Diag_ACU)
}
inline void RmtDiagRsp::set_diag_acu(const void* value, size_t size) {
  set_has_diag_acu();
  if (diag_acu_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_acu_ = new ::std::string;
  }
  diag_acu_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RmtDiagRsp.Diag_ACU)
}
inline ::std::string* RmtDiagRsp::mutable_diag_acu() {
  set_has_diag_acu();
  if (diag_acu_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_acu_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RmtDiagRsp.Diag_ACU)
  return diag_acu_;
}
inline ::std::string* RmtDiagRsp::release_diag_acu() {
  clear_has_diag_acu();
  if (diag_acu_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diag_acu_;
    diag_acu_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RmtDiagRsp::set_allocated_diag_acu(::std::string* diag_acu) {
  if (diag_acu_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_acu_;
  }
  if (diag_acu) {
    set_has_diag_acu();
    diag_acu_ = diag_acu;
  } else {
    clear_has_diag_acu();
    diag_acu_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RmtDiagRsp.Diag_ACU)
}

// optional bytes Diag_DA = 21;
inline bool RmtDiagRsp::has_diag_da() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RmtDiagRsp::set_has_diag_da() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RmtDiagRsp::clear_has_diag_da() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RmtDiagRsp::clear_diag_da() {
  if (diag_da_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_da_->clear();
  }
  clear_has_diag_da();
}
inline const ::std::string& RmtDiagRsp::diag_da() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RmtDiagRsp.Diag_DA)
  return *diag_da_;
}
inline void RmtDiagRsp::set_diag_da(const ::std::string& value) {
  set_has_diag_da();
  if (diag_da_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_da_ = new ::std::string;
  }
  diag_da_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.RmtDiagRsp.Diag_DA)
}
inline void RmtDiagRsp::set_diag_da(const char* value) {
  set_has_diag_da();
  if (diag_da_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_da_ = new ::std::string;
  }
  diag_da_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.RmtDiagRsp.Diag_DA)
}
inline void RmtDiagRsp::set_diag_da(const void* value, size_t size) {
  set_has_diag_da();
  if (diag_da_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_da_ = new ::std::string;
  }
  diag_da_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.RmtDiagRsp.Diag_DA)
}
inline ::std::string* RmtDiagRsp::mutable_diag_da() {
  set_has_diag_da();
  if (diag_da_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    diag_da_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.RmtDiagRsp.Diag_DA)
  return diag_da_;
}
inline ::std::string* RmtDiagRsp::release_diag_da() {
  clear_has_diag_da();
  if (diag_da_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = diag_da_;
    diag_da_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RmtDiagRsp::set_allocated_diag_da(::std::string* diag_da) {
  if (diag_da_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete diag_da_;
  }
  if (diag_da) {
    set_has_diag_da();
    diag_da_ = diag_da;
  } else {
    clear_has_diag_da();
    diag_da_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.RmtDiagRsp.Diag_DA)
}

// -------------------------------------------------------------------

// RmtDiagReq

// required uint32 serial_number = 1;
inline bool RmtDiagReq::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RmtDiagReq::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RmtDiagReq::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RmtDiagReq::clear_serial_number() {
  serial_number_ = 0u;
  clear_has_serial_number();
}
inline ::google::protobuf::uint32 RmtDiagReq::serial_number() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RmtDiagReq.serial_number)
  return serial_number_;
}
inline void RmtDiagReq::set_serial_number(::google::protobuf::uint32 value) {
  set_has_serial_number();
  serial_number_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.RmtDiagReq.serial_number)
}

// required uint32 time_stamp = 2;
inline bool RmtDiagReq::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RmtDiagReq::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RmtDiagReq::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RmtDiagReq::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 RmtDiagReq::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.RmtDiagReq.time_stamp)
  return time_stamp_;
}
inline void RmtDiagReq::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.RmtDiagReq.time_stamp)
}

// -------------------------------------------------------------------

// Fault_List_info

// optional uint32 Fault_List_one = 1;
inline bool Fault_List_info::has_fault_list_one() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fault_List_info::set_has_fault_list_one() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fault_List_info::clear_has_fault_list_one() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fault_List_info::clear_fault_list_one() {
  fault_list_one_ = 0u;
  clear_has_fault_list_one();
}
inline ::google::protobuf::uint32 Fault_List_info::fault_list_one() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Fault_List_info.Fault_List_one)
  return fault_list_one_;
}
inline void Fault_List_info::set_fault_list_one(::google::protobuf::uint32 value) {
  set_has_fault_list_one();
  fault_list_one_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.Fault_List_info.Fault_List_one)
}

// -------------------------------------------------------------------

// FourGExtendCmdRsp

// required uint32 serial_number = 1;
inline bool FourGExtendCmdRsp::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FourGExtendCmdRsp::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FourGExtendCmdRsp::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FourGExtendCmdRsp::clear_serial_number() {
  serial_number_ = 0u;
  clear_has_serial_number();
}
inline ::google::protobuf::uint32 FourGExtendCmdRsp::serial_number() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.FourGExtendCmdRsp.serial_number)
  return serial_number_;
}
inline void FourGExtendCmdRsp::set_serial_number(::google::protobuf::uint32 value) {
  set_has_serial_number();
  serial_number_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.FourGExtendCmdRsp.serial_number)
}

// required uint32 time_stamp = 2;
inline bool FourGExtendCmdRsp::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FourGExtendCmdRsp::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FourGExtendCmdRsp::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FourGExtendCmdRsp::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 FourGExtendCmdRsp::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.FourGExtendCmdRsp.time_stamp)
  return time_stamp_;
}
inline void FourGExtendCmdRsp::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.FourGExtendCmdRsp.time_stamp)
}

// required uint32 commander_id = 3;
inline bool FourGExtendCmdRsp::has_commander_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FourGExtendCmdRsp::set_has_commander_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FourGExtendCmdRsp::clear_has_commander_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FourGExtendCmdRsp::clear_commander_id() {
  commander_id_ = 0u;
  clear_has_commander_id();
}
inline ::google::protobuf::uint32 FourGExtendCmdRsp::commander_id() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.FourGExtendCmdRsp.commander_id)
  return commander_id_;
}
inline void FourGExtendCmdRsp::set_commander_id(::google::protobuf::uint32 value) {
  set_has_commander_id();
  commander_id_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.FourGExtendCmdRsp.commander_id)
}

// required bytes result_info = 4;
inline bool FourGExtendCmdRsp::has_result_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FourGExtendCmdRsp::set_has_result_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FourGExtendCmdRsp::clear_has_result_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FourGExtendCmdRsp::clear_result_info() {
  if (result_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_info_->clear();
  }
  clear_has_result_info();
}
inline const ::std::string& FourGExtendCmdRsp::result_info() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.FourGExtendCmdRsp.result_info)
  return *result_info_;
}
inline void FourGExtendCmdRsp::set_result_info(const ::std::string& value) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.FourGExtendCmdRsp.result_info)
}
inline void FourGExtendCmdRsp::set_result_info(const char* value) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.FourGExtendCmdRsp.result_info)
}
inline void FourGExtendCmdRsp::set_result_info(const void* value, size_t size) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.FourGExtendCmdRsp.result_info)
}
inline ::std::string* FourGExtendCmdRsp::mutable_result_info() {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.FourGExtendCmdRsp.result_info)
  return result_info_;
}
inline ::std::string* FourGExtendCmdRsp::release_result_info() {
  clear_has_result_info();
  if (result_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_info_;
    result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FourGExtendCmdRsp::set_allocated_result_info(::std::string* result_info) {
  if (result_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_info_;
  }
  if (result_info) {
    set_has_result_info();
    result_info_ = result_info;
  } else {
    clear_has_result_info();
    result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.FourGExtendCmdRsp.result_info)
}

// -------------------------------------------------------------------

// FourGExtendCmdReq

// required uint32 serial_number = 1;
inline bool FourGExtendCmdReq::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FourGExtendCmdReq::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FourGExtendCmdReq::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FourGExtendCmdReq::clear_serial_number() {
  serial_number_ = 0u;
  clear_has_serial_number();
}
inline ::google::protobuf::uint32 FourGExtendCmdReq::serial_number() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.FourGExtendCmdReq.serial_number)
  return serial_number_;
}
inline void FourGExtendCmdReq::set_serial_number(::google::protobuf::uint32 value) {
  set_has_serial_number();
  serial_number_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.FourGExtendCmdReq.serial_number)
}

// required uint32 time_stamp = 2;
inline bool FourGExtendCmdReq::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FourGExtendCmdReq::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FourGExtendCmdReq::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FourGExtendCmdReq::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 FourGExtendCmdReq::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.FourGExtendCmdReq.time_stamp)
  return time_stamp_;
}
inline void FourGExtendCmdReq::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.FourGExtendCmdReq.time_stamp)
}

// required uint32 commander_id = 3;
inline bool FourGExtendCmdReq::has_commander_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FourGExtendCmdReq::set_has_commander_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FourGExtendCmdReq::clear_has_commander_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FourGExtendCmdReq::clear_commander_id() {
  commander_id_ = 0u;
  clear_has_commander_id();
}
inline ::google::protobuf::uint32 FourGExtendCmdReq::commander_id() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.FourGExtendCmdReq.commander_id)
  return commander_id_;
}
inline void FourGExtendCmdReq::set_commander_id(::google::protobuf::uint32 value) {
  set_has_commander_id();
  commander_id_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.FourGExtendCmdReq.commander_id)
}

// required bytes result_info = 4;
inline bool FourGExtendCmdReq::has_result_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FourGExtendCmdReq::set_has_result_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FourGExtendCmdReq::clear_has_result_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FourGExtendCmdReq::clear_result_info() {
  if (result_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_info_->clear();
  }
  clear_has_result_info();
}
inline const ::std::string& FourGExtendCmdReq::result_info() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.FourGExtendCmdReq.result_info)
  return *result_info_;
}
inline void FourGExtendCmdReq::set_result_info(const ::std::string& value) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.FourGExtendCmdReq.result_info)
}
inline void FourGExtendCmdReq::set_result_info(const char* value) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.FourGExtendCmdReq.result_info)
}
inline void FourGExtendCmdReq::set_result_info(const void* value, size_t size) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.FourGExtendCmdReq.result_info)
}
inline ::std::string* FourGExtendCmdReq::mutable_result_info() {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.FourGExtendCmdReq.result_info)
  return result_info_;
}
inline ::std::string* FourGExtendCmdReq::release_result_info() {
  clear_has_result_info();
  if (result_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_info_;
    result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FourGExtendCmdReq::set_allocated_result_info(::std::string* result_info) {
  if (result_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_info_;
  }
  if (result_info) {
    set_has_result_info();
    result_info_ = result_info;
  } else {
    clear_has_result_info();
    result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.FourGExtendCmdReq.result_info)
}

// optional string jaegercontext = 5;
inline bool FourGExtendCmdReq::has_jaegercontext() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FourGExtendCmdReq::set_has_jaegercontext() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FourGExtendCmdReq::clear_has_jaegercontext() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FourGExtendCmdReq::clear_jaegercontext() {
  if (jaegercontext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jaegercontext_->clear();
  }
  clear_has_jaegercontext();
}
inline const ::std::string& FourGExtendCmdReq::jaegercontext() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.FourGExtendCmdReq.jaegercontext)
  return *jaegercontext_;
}
inline void FourGExtendCmdReq::set_jaegercontext(const ::std::string& value) {
  set_has_jaegercontext();
  if (jaegercontext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jaegercontext_ = new ::std::string;
  }
  jaegercontext_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.FourGExtendCmdReq.jaegercontext)
}
inline void FourGExtendCmdReq::set_jaegercontext(const char* value) {
  set_has_jaegercontext();
  if (jaegercontext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jaegercontext_ = new ::std::string;
  }
  jaegercontext_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.FourGExtendCmdReq.jaegercontext)
}
inline void FourGExtendCmdReq::set_jaegercontext(const char* value, size_t size) {
  set_has_jaegercontext();
  if (jaegercontext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jaegercontext_ = new ::std::string;
  }
  jaegercontext_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.FourGExtendCmdReq.jaegercontext)
}
inline ::std::string* FourGExtendCmdReq::mutable_jaegercontext() {
  set_has_jaegercontext();
  if (jaegercontext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jaegercontext_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.FourGExtendCmdReq.jaegercontext)
  return jaegercontext_;
}
inline ::std::string* FourGExtendCmdReq::release_jaegercontext() {
  clear_has_jaegercontext();
  if (jaegercontext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = jaegercontext_;
    jaegercontext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FourGExtendCmdReq::set_allocated_jaegercontext(::std::string* jaegercontext) {
  if (jaegercontext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jaegercontext_;
  }
  if (jaegercontext) {
    set_has_jaegercontext();
    jaegercontext_ = jaegercontext;
  } else {
    clear_has_jaegercontext();
    jaegercontext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.FourGExtendCmdReq.jaegercontext)
}

// -------------------------------------------------------------------

// TCUExtendCmdReq

// required uint32 serial_number = 1;
inline bool TCUExtendCmdReq::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCUExtendCmdReq::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCUExtendCmdReq::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCUExtendCmdReq::clear_serial_number() {
  serial_number_ = 0u;
  clear_has_serial_number();
}
inline ::google::protobuf::uint32 TCUExtendCmdReq::serial_number() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TCUExtendCmdReq.serial_number)
  return serial_number_;
}
inline void TCUExtendCmdReq::set_serial_number(::google::protobuf::uint32 value) {
  set_has_serial_number();
  serial_number_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TCUExtendCmdReq.serial_number)
}

// required uint32 time_stamp = 2;
inline bool TCUExtendCmdReq::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCUExtendCmdReq::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCUExtendCmdReq::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCUExtendCmdReq::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 TCUExtendCmdReq::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TCUExtendCmdReq.time_stamp)
  return time_stamp_;
}
inline void TCUExtendCmdReq::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TCUExtendCmdReq.time_stamp)
}

// required uint32 commander_id = 3;
inline bool TCUExtendCmdReq::has_commander_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCUExtendCmdReq::set_has_commander_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCUExtendCmdReq::clear_has_commander_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCUExtendCmdReq::clear_commander_id() {
  commander_id_ = 0u;
  clear_has_commander_id();
}
inline ::google::protobuf::uint32 TCUExtendCmdReq::commander_id() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TCUExtendCmdReq.commander_id)
  return commander_id_;
}
inline void TCUExtendCmdReq::set_commander_id(::google::protobuf::uint32 value) {
  set_has_commander_id();
  commander_id_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TCUExtendCmdReq.commander_id)
}

// required bytes result_info = 4;
inline bool TCUExtendCmdReq::has_result_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCUExtendCmdReq::set_has_result_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCUExtendCmdReq::clear_has_result_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCUExtendCmdReq::clear_result_info() {
  if (result_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_info_->clear();
  }
  clear_has_result_info();
}
inline const ::std::string& TCUExtendCmdReq::result_info() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TCUExtendCmdReq.result_info)
  return *result_info_;
}
inline void TCUExtendCmdReq::set_result_info(const ::std::string& value) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.TCUExtendCmdReq.result_info)
}
inline void TCUExtendCmdReq::set_result_info(const char* value) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.TCUExtendCmdReq.result_info)
}
inline void TCUExtendCmdReq::set_result_info(const void* value, size_t size) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.TCUExtendCmdReq.result_info)
}
inline ::std::string* TCUExtendCmdReq::mutable_result_info() {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.TCUExtendCmdReq.result_info)
  return result_info_;
}
inline ::std::string* TCUExtendCmdReq::release_result_info() {
  clear_has_result_info();
  if (result_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_info_;
    result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCUExtendCmdReq::set_allocated_result_info(::std::string* result_info) {
  if (result_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_info_;
  }
  if (result_info) {
    set_has_result_info();
    result_info_ = result_info;
  } else {
    clear_has_result_info();
    result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.TCUExtendCmdReq.result_info)
}

// -------------------------------------------------------------------

// TCUExtendCmdRsp

// required uint32 serial_number = 1;
inline bool TCUExtendCmdRsp::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCUExtendCmdRsp::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCUExtendCmdRsp::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCUExtendCmdRsp::clear_serial_number() {
  serial_number_ = 0u;
  clear_has_serial_number();
}
inline ::google::protobuf::uint32 TCUExtendCmdRsp::serial_number() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TCUExtendCmdRsp.serial_number)
  return serial_number_;
}
inline void TCUExtendCmdRsp::set_serial_number(::google::protobuf::uint32 value) {
  set_has_serial_number();
  serial_number_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TCUExtendCmdRsp.serial_number)
}

// required uint32 time_stamp = 2;
inline bool TCUExtendCmdRsp::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCUExtendCmdRsp::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCUExtendCmdRsp::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCUExtendCmdRsp::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 TCUExtendCmdRsp::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TCUExtendCmdRsp.time_stamp)
  return time_stamp_;
}
inline void TCUExtendCmdRsp::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TCUExtendCmdRsp.time_stamp)
}

// required uint32 commander_id = 3;
inline bool TCUExtendCmdRsp::has_commander_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCUExtendCmdRsp::set_has_commander_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCUExtendCmdRsp::clear_has_commander_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCUExtendCmdRsp::clear_commander_id() {
  commander_id_ = 0u;
  clear_has_commander_id();
}
inline ::google::protobuf::uint32 TCUExtendCmdRsp::commander_id() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TCUExtendCmdRsp.commander_id)
  return commander_id_;
}
inline void TCUExtendCmdRsp::set_commander_id(::google::protobuf::uint32 value) {
  set_has_commander_id();
  commander_id_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.TCUExtendCmdRsp.commander_id)
}

// required bytes result_info = 4;
inline bool TCUExtendCmdRsp::has_result_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCUExtendCmdRsp::set_has_result_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCUExtendCmdRsp::clear_has_result_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCUExtendCmdRsp::clear_result_info() {
  if (result_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_info_->clear();
  }
  clear_has_result_info();
}
inline const ::std::string& TCUExtendCmdRsp::result_info() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.TCUExtendCmdRsp.result_info)
  return *result_info_;
}
inline void TCUExtendCmdRsp::set_result_info(const ::std::string& value) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.TCUExtendCmdRsp.result_info)
}
inline void TCUExtendCmdRsp::set_result_info(const char* value) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.TCUExtendCmdRsp.result_info)
}
inline void TCUExtendCmdRsp::set_result_info(const void* value, size_t size) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.TCUExtendCmdRsp.result_info)
}
inline ::std::string* TCUExtendCmdRsp::mutable_result_info() {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.TCUExtendCmdRsp.result_info)
  return result_info_;
}
inline ::std::string* TCUExtendCmdRsp::release_result_info() {
  clear_has_result_info();
  if (result_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_info_;
    result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCUExtendCmdRsp::set_allocated_result_info(::std::string* result_info) {
  if (result_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_info_;
  }
  if (result_info) {
    set_has_result_info();
    result_info_ = result_info;
  } else {
    clear_has_result_info();
    result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.TCUExtendCmdRsp.result_info)
}

// -------------------------------------------------------------------

// Net4GSwitchStatusReq

// optional uint32 net_4g_status = 1;
inline bool Net4GSwitchStatusReq::has_net_4g_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Net4GSwitchStatusReq::set_has_net_4g_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Net4GSwitchStatusReq::clear_has_net_4g_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Net4GSwitchStatusReq::clear_net_4g_status() {
  net_4g_status_ = 0u;
  clear_has_net_4g_status();
}
inline ::google::protobuf::uint32 Net4GSwitchStatusReq::net_4g_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Net4GSwitchStatusReq.net_4g_status)
  return net_4g_status_;
}
inline void Net4GSwitchStatusReq::set_net_4g_status(::google::protobuf::uint32 value) {
  set_has_net_4g_status();
  net_4g_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.Net4GSwitchStatusReq.net_4g_status)
}

// optional string tcu_device_sn = 2;
inline bool Net4GSwitchStatusReq::has_tcu_device_sn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Net4GSwitchStatusReq::set_has_tcu_device_sn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Net4GSwitchStatusReq::clear_has_tcu_device_sn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Net4GSwitchStatusReq::clear_tcu_device_sn() {
  if (tcu_device_sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tcu_device_sn_->clear();
  }
  clear_has_tcu_device_sn();
}
inline const ::std::string& Net4GSwitchStatusReq::tcu_device_sn() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Net4GSwitchStatusReq.tcu_device_sn)
  return *tcu_device_sn_;
}
inline void Net4GSwitchStatusReq::set_tcu_device_sn(const ::std::string& value) {
  set_has_tcu_device_sn();
  if (tcu_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tcu_device_sn_ = new ::std::string;
  }
  tcu_device_sn_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.Net4GSwitchStatusReq.tcu_device_sn)
}
inline void Net4GSwitchStatusReq::set_tcu_device_sn(const char* value) {
  set_has_tcu_device_sn();
  if (tcu_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tcu_device_sn_ = new ::std::string;
  }
  tcu_device_sn_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.Net4GSwitchStatusReq.tcu_device_sn)
}
inline void Net4GSwitchStatusReq::set_tcu_device_sn(const char* value, size_t size) {
  set_has_tcu_device_sn();
  if (tcu_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tcu_device_sn_ = new ::std::string;
  }
  tcu_device_sn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.Net4GSwitchStatusReq.tcu_device_sn)
}
inline ::std::string* Net4GSwitchStatusReq::mutable_tcu_device_sn() {
  set_has_tcu_device_sn();
  if (tcu_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tcu_device_sn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.Net4GSwitchStatusReq.tcu_device_sn)
  return tcu_device_sn_;
}
inline ::std::string* Net4GSwitchStatusReq::release_tcu_device_sn() {
  clear_has_tcu_device_sn();
  if (tcu_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tcu_device_sn_;
    tcu_device_sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Net4GSwitchStatusReq::set_allocated_tcu_device_sn(::std::string* tcu_device_sn) {
  if (tcu_device_sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tcu_device_sn_;
  }
  if (tcu_device_sn) {
    set_has_tcu_device_sn();
    tcu_device_sn_ = tcu_device_sn;
  } else {
    clear_has_tcu_device_sn();
    tcu_device_sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.Net4GSwitchStatusReq.tcu_device_sn)
}

// optional uint32 time_stamp = 3;
inline bool Net4GSwitchStatusReq::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Net4GSwitchStatusReq::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Net4GSwitchStatusReq::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Net4GSwitchStatusReq::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 Net4GSwitchStatusReq::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Net4GSwitchStatusReq.time_stamp)
  return time_stamp_;
}
inline void Net4GSwitchStatusReq::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.Net4GSwitchStatusReq.time_stamp)
}

// -------------------------------------------------------------------

// Net4GSwitchStatusRsp

// optional uint32 net_4g_status = 1;
inline bool Net4GSwitchStatusRsp::has_net_4g_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Net4GSwitchStatusRsp::set_has_net_4g_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Net4GSwitchStatusRsp::clear_has_net_4g_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Net4GSwitchStatusRsp::clear_net_4g_status() {
  net_4g_status_ = 0u;
  clear_has_net_4g_status();
}
inline ::google::protobuf::uint32 Net4GSwitchStatusRsp::net_4g_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.Net4GSwitchStatusRsp.net_4g_status)
  return net_4g_status_;
}
inline void Net4GSwitchStatusRsp::set_net_4g_status(::google::protobuf::uint32 value) {
  set_has_net_4g_status();
  net_4g_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.Net4GSwitchStatusRsp.net_4g_status)
}

// -------------------------------------------------------------------

// netGpsSwitchStatusReq

// optional uint32 gps_status = 1;
inline bool netGpsSwitchStatusReq::has_gps_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void netGpsSwitchStatusReq::set_has_gps_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void netGpsSwitchStatusReq::clear_has_gps_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void netGpsSwitchStatusReq::clear_gps_status() {
  gps_status_ = 0u;
  clear_has_gps_status();
}
inline ::google::protobuf::uint32 netGpsSwitchStatusReq::gps_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.netGpsSwitchStatusReq.gps_status)
  return gps_status_;
}
inline void netGpsSwitchStatusReq::set_gps_status(::google::protobuf::uint32 value) {
  set_has_gps_status();
  gps_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.netGpsSwitchStatusReq.gps_status)
}

// optional string tcu_device_sn = 2;
inline bool netGpsSwitchStatusReq::has_tcu_device_sn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void netGpsSwitchStatusReq::set_has_tcu_device_sn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void netGpsSwitchStatusReq::clear_has_tcu_device_sn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void netGpsSwitchStatusReq::clear_tcu_device_sn() {
  if (tcu_device_sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tcu_device_sn_->clear();
  }
  clear_has_tcu_device_sn();
}
inline const ::std::string& netGpsSwitchStatusReq::tcu_device_sn() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.netGpsSwitchStatusReq.tcu_device_sn)
  return *tcu_device_sn_;
}
inline void netGpsSwitchStatusReq::set_tcu_device_sn(const ::std::string& value) {
  set_has_tcu_device_sn();
  if (tcu_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tcu_device_sn_ = new ::std::string;
  }
  tcu_device_sn_->assign(value);
  // @@protoc_insertion_point(field_set:tbox.protocol.netGpsSwitchStatusReq.tcu_device_sn)
}
inline void netGpsSwitchStatusReq::set_tcu_device_sn(const char* value) {
  set_has_tcu_device_sn();
  if (tcu_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tcu_device_sn_ = new ::std::string;
  }
  tcu_device_sn_->assign(value);
  // @@protoc_insertion_point(field_set_char:tbox.protocol.netGpsSwitchStatusReq.tcu_device_sn)
}
inline void netGpsSwitchStatusReq::set_tcu_device_sn(const char* value, size_t size) {
  set_has_tcu_device_sn();
  if (tcu_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tcu_device_sn_ = new ::std::string;
  }
  tcu_device_sn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tbox.protocol.netGpsSwitchStatusReq.tcu_device_sn)
}
inline ::std::string* netGpsSwitchStatusReq::mutable_tcu_device_sn() {
  set_has_tcu_device_sn();
  if (tcu_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tcu_device_sn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tbox.protocol.netGpsSwitchStatusReq.tcu_device_sn)
  return tcu_device_sn_;
}
inline ::std::string* netGpsSwitchStatusReq::release_tcu_device_sn() {
  clear_has_tcu_device_sn();
  if (tcu_device_sn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tcu_device_sn_;
    tcu_device_sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void netGpsSwitchStatusReq::set_allocated_tcu_device_sn(::std::string* tcu_device_sn) {
  if (tcu_device_sn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tcu_device_sn_;
  }
  if (tcu_device_sn) {
    set_has_tcu_device_sn();
    tcu_device_sn_ = tcu_device_sn;
  } else {
    clear_has_tcu_device_sn();
    tcu_device_sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tbox.protocol.netGpsSwitchStatusReq.tcu_device_sn)
}

// optional uint32 time_stamp = 3;
inline bool netGpsSwitchStatusReq::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void netGpsSwitchStatusReq::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void netGpsSwitchStatusReq::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void netGpsSwitchStatusReq::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 netGpsSwitchStatusReq::time_stamp() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.netGpsSwitchStatusReq.time_stamp)
  return time_stamp_;
}
inline void netGpsSwitchStatusReq::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.netGpsSwitchStatusReq.time_stamp)
}

// -------------------------------------------------------------------

// netGpsSwitchStatusRsp

// optional uint32 gps_status = 1;
inline bool netGpsSwitchStatusRsp::has_gps_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void netGpsSwitchStatusRsp::set_has_gps_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void netGpsSwitchStatusRsp::clear_has_gps_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void netGpsSwitchStatusRsp::clear_gps_status() {
  gps_status_ = 0u;
  clear_has_gps_status();
}
inline ::google::protobuf::uint32 netGpsSwitchStatusRsp::gps_status() const {
  // @@protoc_insertion_point(field_get:tbox.protocol.netGpsSwitchStatusRsp.gps_status)
  return gps_status_;
}
inline void netGpsSwitchStatusRsp::set_gps_status(::google::protobuf::uint32 value) {
  set_has_gps_status();
  gps_status_ = value;
  // @@protoc_insertion_point(field_set:tbox.protocol.netGpsSwitchStatusRsp.gps_status)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace tbox

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tbox::protocol::RspCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tbox::protocol::RspCode>() {
  return ::tbox::protocol::RspCode_descriptor();
}
template <> struct is_proto_enum< ::tbox::protocol::UpgradeProgressCodeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tbox::protocol::UpgradeProgressCodeType>() {
  return ::tbox::protocol::UpgradeProgressCodeType_descriptor();
}
template <> struct is_proto_enum< ::tbox::protocol::RmtDiagRspCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tbox::protocol::RmtDiagRspCode>() {
  return ::tbox::protocol::RmtDiagRspCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tbox_5fprotocol_5fmessage_2eproto__INCLUDED
